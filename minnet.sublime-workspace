{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Event",
				"EventTarget"
			],
			[
				"http_",
				"http_response"
			],
			[
				"STREAM",
				"STREAM_TEXT"
			],
			[
				"moun",
				"mountpoint_len"
			],
			[
				"ori",
				"origin_protocol"
			],
			[
				"mount",
				"mountpoint_len"
			],
			[
				"LWS",
				"LWSMPRO_CALLBACK"
			],
			[
				"JS_Free",
				"JS_FreeValue"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_Throw",
				"JS_ThrowReferenceError"
			],
			[
				"minnet",
				"minnet_response_class_id"
			],
			[
				"Minn",
				"MinnetWebsocket"
			],
			[
				"BUILD_",
				"BUILD_LIBWEBSOCKETS"
			],
			[
				"minnet_request",
				"minnet_request_class_id"
			],
			[
				"getOwn",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"break",
				"stringBreakNewline"
			],
			[
				"define",
				"defineProperty"
			],
			[
				"sy",
				"syntaxerror_ctor"
			],
			[
				"child_pr",
				"child_process_proto"
			],
			[
				"JS_GetP",
				"JS_GetPropertyUint32"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"targtet_",
				"target_compile_definitions"
			],
			[
				"jsm_module",
				"jsm_module_loader_so"
			],
			[
				"base",
				"base_name"
			],
			[
				"ATOM",
				"ATOM_TO_VALUE"
			],
			[
				"prop",
				"propenum_tab"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"js_loca",
				"js_location_data"
			],
			[
				"loca",
				"location_proto"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"HAVE_QUI",
				"HAVE_QUICKJS_LIBRARY"
			],
			[
				"jsm_load",
				"jsm_load_packages_json"
			],
			[
				"js_sy",
				"js_syntaxerror_class_id"
			],
			[
				"synta",
				"syntaxerror_proto"
			],
			[
				"property_",
				"property_enumeration_key"
			],
			[
				"jsm_mo",
				"jsm_module_loader_path"
			],
			[
				"inspe",
				"inspect_custom_node"
			],
			[
				"inspect",
				"inspect_custom_node"
			],
			[
				"property",
				"property_enumeration_circular"
			],
			[
				"Reg",
				"RegExpCompare"
			],
			[
				"property_enum",
				"property_enumeration_length"
			],
			[
				"Opera",
				"OperatorsObjects"
			],
			[
				"else",
				"elseif"
			],
			[
				"ABC",
				"ABCDEF"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					736,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/net/rpc.js",
						"symkeys":
						[
							[
								426,
								458
							],
							[
								515,
								533
							],
							[
								585,
								603
							],
							[
								638,
								658
							],
							[
								707,
								726
							],
							[
								732,
								741
							],
							[
								752,
								766
							],
							[
								795,
								816
							],
							[
								882,
								913
							],
							[
								971,
								986
							],
							[
								1058,
								1087
							],
							[
								1504,
								1508
							],
							[
								1537,
								1548
							],
							[
								1635,
								1674
							],
							[
								1887,
								1910
							],
							[
								1921,
								1924
							],
							[
								1941,
								1968
							],
							[
								2111,
								2117
							],
							[
								2132,
								2138
							],
							[
								2167,
								2173
							],
							[
								2213,
								2268
							],
							[
								2278,
								2288
							],
							[
								2305,
								2329
							],
							[
								2605,
								2623
							],
							[
								2638,
								2656
							],
							[
								2685,
								2703
							],
							[
								2755,
								2888
							],
							[
								2891,
								2926
							],
							[
								2939,
								2951
							],
							[
								3039,
								3053
							],
							[
								3236,
								3251
							],
							[
								3379,
								3393
							],
							[
								3517,
								3535
							],
							[
								3650,
								3663
							],
							[
								3841,
								3871
							],
							[
								3893,
								3911
							],
							[
								3925,
								3940
							],
							[
								3954,
								3972
							],
							[
								4053,
								4071
							],
							[
								4120,
								4127
							],
							[
								4188,
								4194
							],
							[
								4236,
								4248
							],
							[
								4258,
								4270
							],
							[
								4287,
								4308
							],
							[
								4350,
								4362
							],
							[
								4419,
								4431
							],
							[
								4494,
								4528
							],
							[
								4568,
								4580
							],
							[
								4649,
								4661
							],
							[
								4723,
								4748
							],
							[
								4791,
								4803
							],
							[
								4826,
								4838
							],
							[
								4874,
								4893
							],
							[
								5126,
								5132
							],
							[
								5174,
								5179
							],
							[
								5202,
								5223
							],
							[
								5341,
								5376
							],
							[
								5492,
								5496
							],
							[
								5523,
								5532
							],
							[
								5585,
								5610
							],
							[
								5615,
								5643
							],
							[
								5873,
								5882
							],
							[
								5983,
								5993
							],
							[
								6023,
								6033
							],
							[
								6127,
								6137
							],
							[
								6223,
								6241
							],
							[
								6366,
								6383
							],
							[
								6420,
								6429
							],
							[
								6466,
								6516
							],
							[
								6633,
								6645
							],
							[
								7119,
								7133
							],
							[
								7359,
								7373
							],
							[
								7545,
								7559
							],
							[
								8173,
								8177
							],
							[
								8271,
								8291
							],
							[
								8397,
								8412
							],
							[
								8590,
								8602
							],
							[
								8657,
								8671
							],
							[
								8796,
								8814
							],
							[
								8941,
								8950
							],
							[
								9040,
								9056
							],
							[
								9426,
								9459
							],
							[
								9975,
								10019
							],
							[
								10141,
								10154
							],
							[
								10224,
								10230
							],
							[
								10315,
								10349
							],
							[
								10605,
								10616
							],
							[
								10674,
								10690
							],
							[
								10771,
								10786
							],
							[
								11137,
								11149
							],
							[
								11367,
								11387
							],
							[
								11482,
								11502
							],
							[
								11666,
								11690
							],
							[
								11816,
								11834
							],
							[
								11939,
								11949
							],
							[
								12013,
								12023
							],
							[
								12084,
								12124
							],
							[
								12142,
								12173
							],
							[
								12503,
								12509
							],
							[
								12674,
								12694
							],
							[
								12790,
								12830
							],
							[
								13000,
								13009
							],
							[
								13039,
								13047
							],
							[
								13225,
								13265
							],
							[
								13364,
								13371
							],
							[
								13390,
								13397
							],
							[
								13482,
								13522
							],
							[
								13587,
								13594
							],
							[
								13672,
								13712
							],
							[
								13777,
								13784
							],
							[
								13824,
								13830
							],
							[
								13897,
								13901
							],
							[
								13956,
								13960
							],
							[
								14032,
								14063
							],
							[
								14326,
								14364
							],
							[
								14448,
								14457
							],
							[
								14933,
								14941
							],
							[
								14977,
								14997
							],
							[
								15578,
								15587
							],
							[
								15897,
								15906
							],
							[
								16306,
								16311
							],
							[
								16367,
								16372
							],
							[
								16471,
								16476
							],
							[
								16508,
								16532
							],
							[
								16785,
								16806
							],
							[
								16832,
								16851
							],
							[
								16881,
								16893
							],
							[
								16937,
								16942
							],
							[
								17016,
								17025
							],
							[
								17333,
								17393
							],
							[
								18000,
								18013
							],
							[
								18185,
								18193
							],
							[
								18311,
								18323
							],
							[
								18377,
								18393
							],
							[
								18724,
								18738
							],
							[
								18958,
								18992
							],
							[
								19291,
								19296
							],
							[
								19391,
								19432
							],
							[
								19726,
								19741
							],
							[
								20202,
								20212
							],
							[
								20249,
								20259
							],
							[
								20328,
								20337
							],
							[
								20395,
								20433
							],
							[
								20566,
								20584
							],
							[
								20614,
								20629
							],
							[
								20656,
								20675
							],
							[
								20710,
								20729
							],
							[
								20764,
								20781
							],
							[
								20814,
								20834
							],
							[
								20926,
								20953
							],
							[
								21052,
								21088
							],
							[
								21246,
								21292
							],
							[
								21391,
								21422
							],
							[
								21991,
								22001
							],
							[
								22135,
								22192
							],
							[
								22211,
								22269
							],
							[
								22588,
								22659
							],
							[
								22721,
								22728
							],
							[
								22819,
								22826
							],
							[
								22913,
								22995
							],
							[
								23542,
								23572
							],
							[
								23940,
								23975
							],
							[
								23988,
								24028
							],
							[
								24207,
								24263
							],
							[
								24492,
								24519
							],
							[
								24530,
								24545
							],
							[
								24558,
								24588
							],
							[
								24845,
								24947
							],
							[
								24973,
								24991
							],
							[
								25287,
								25310
							],
							[
								25418,
								25431
							],
							[
								26040,
								26073
							],
							[
								26142,
								26172
							],
							[
								26211,
								26215
							],
							[
								26302,
								26329
							],
							[
								26368,
								26376
							],
							[
								26456,
								26482
							],
							[
								26528,
								26557
							],
							[
								26614,
								26659
							],
							[
								26759,
								26764
							],
							[
								26864,
								26898
							],
							[
								27015,
								27075
							],
							[
								27294,
								27316
							],
							[
								27488,
								27510
							],
							[
								27608,
								27628
							],
							[
								27660,
								27665
							],
							[
								27794,
								27821
							],
							[
								28053,
								28100
							],
							[
								28918,
								28953
							],
							[
								28975,
								28979
							],
							[
								29011,
								29015
							],
							[
								29037,
								29069
							],
							[
								29203,
								29245
							],
							[
								29298,
								29339
							]
						],
						"symlist":
						[
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"VfnAdapter = vfn =>",
							"get: k =>",
							"set: (k, v) =>",
							"VfnDecorator = vfn =>",
							".memoize = function memoize(fn)",
							"(key, value) =>",
							"self = function(key, ...args)",
							"n =>",
							"(acc, n) =>",
							".GetClasses = function* GetClasses(obj)",
							" function Mapper(map = ",
							"())",
							"self = function(key, value)",
							"Mapper",
							"Mapper",
							"Mapper",
							" function DefaultConstructor(mapper, fn = (...args) => ",
							"(...args))",
							"self = function(...args)",
							"DefaultConstructor",
							"DefaultConstructor",
							"DefaultConstructor",
							" function EventLogger( instance = {}, callback = (name, event, thisObj) => console.log('EventLogger', { name, event, thisObj }) )",
							" function WrapEvent(handler, name)",
							" function(e)",
							"get(obj, prop)",
							"MessageReceiver",
							"onmessage(msg)",
							"MessageTransmitter",
							"sendMessage()",
							" function MessageTransceiver()",
							"MessageTransceiver",
							"MessageReceiver",
							"MessageTransmitter",
							"value: instance =>",
							"ctor =>",
							"none()",
							"encode: v =>",
							"decode: v =>",
							"json(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".js = function js(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".bjson = function bjson()",
							"encode: v =>",
							"decode: v =>",
							" function RPCApi(c)",
							"RPCApi",
							" o =>",
							" function RPCProxy(c)",
							" function RPCObject(id, connection)",
							"r =>",
							"RPCObject",
							" function RPCFactory(api)",
							"async function Factory(opts)",
							"RPCObject",
							"RPCFactory",
							"RPCFactory",
							"Connection",
							"static equal(a, b)",
							"static get last()",
							"makeSeq()",
							"constructor(socket, instance, log, codec = 'none')",
							"log(...args)",
							"error(message)",
							"close(...args)",
							"onmessage(msg)",
							"r =>",
							"processMessage(data)",
							"onconnect(sock)",
							"onpong(data)",
							"onerror(error)",
							"onclose(code, why)",
							"cleanup()",
							"sendMessage(obj)",
							"sendCommand(command, params = {})",
							"static getCallbacks(instance, verbosity = 0)",
							" (...args) =>",
							" () =>",
							"handle = (sock, event, ...args) =>",
							"then: fn =>",
							"remove = sock =>",
							"onConnect(sock)",
							"onOpen(sock)",
							"onMessage(sock, msg)",
							"onError(sock, error)",
							"onClose(sock, code, why)",
							"onPong(sock, data)",
							"Connection",
							"Connection",
							"function RPCServerEndpoint(classes = {})",
							"new({ class: name, args = [] })",
							"list()",
							"({ id }, respond) =>",
							"({ obj, method, args = [] }, respond) =>",
							"result =>",
							"error =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"sym =>",
							"v =>",
							"v =>",
							"({ obj, property }, respond) =>",
							"({ obj, property, value }, respond) =>",
							"RPCServer",
							"makeId()",
							"processMessage(data)",
							"RPCServer",
							"RPCClient",
							" e =>",
							" r =>",
							"() =>",
							"processMessage(response)",
							"command(name, params)",
							"(accept, reject) =>",
							" response =>",
							" e =>",
							"RPCClient",
							" function RPCSocket(url, service = RPCServer, verbosity = 1)",
							" (...args) =>",
							"get fd()",
							"get socket()",
							"get connection()",
							"register(ctor)",
							"listen(new_ws, os = globalThis.os)",
							"() =>",
							"async connect(new_ws, os = globalThis.os)",
							"get connected()",
							"get list()",
							"get last()",
							"RPCSocket",
							"function MakeWebSocket(url, callbacks)",
							".onconnect = () =>",
							".onopen = () =>",
							".onerror = error =>",
							".onmessage = msg =>",
							".onpong = pong =>",
							".onclose = reason =>",
							" function isThenable(value)",
							" function hasHandler(obj, eventName)",
							" function callHandler(obj, eventName, ...args)",
							" function parseURL(url_or_port)",
							"toString()",
							" function GetProperties( obj, method = obj => Object.",
							"(obj), pred = (obj, depth) => obj !== Object.prototype )",
							" function GetKeys(obj, pred = (obj, depth) => obj !== Object.prototype)",
							" obj =>",
							" obj =>",
							" function getPropertyDescriptors(obj, merge = true, pred = (proto, depth) => true)",
							" function define(obj, ...args)",
							" function setHandlers(os, handlers)",
							".onFd = function(fd, readable, writable)",
							" function statusResponse(success, result_or_error, data)",
							" function objectCommand(fn)",
							" function(data)",
							"respond = (success, result) =>",
							" function MakeListCommand( pred = v => typeof v != 'function', defaults = { maxDepth: Infinity } )",
							"(data, respond) =>",
							" (proto, depth) =>",
							"(acc, key) =>",
							" function getPrototypeName(proto)",
							"function DeserializeEntries(e)",
							"a =>",
							"function DeserializeKeys(e)",
							"([k]) =>",
							"function DeserializeMap(e)",
							"function DeserializeObject(e)",
							"function ForwardMethods(e, ret = {}, thisObj)",
							" o =>",
							"function ForwardObject(e, thisObj)",
							"function MakeCommandFunction(cmd, getConnection, thisObj, t)",
							"getConnection = obj =>",
							" function(params = {})",
							"(resolve, reject) =>",
							" r =>",
							"async function(params = {})",
							" function SerializeValue(value, source = false)",
							" function DeserializeSymbols(names)",
							"n =>",
							"n =>",
							" function DeserializeValue(desc)",
							"RPCConnect = (url, service = RPCClient) =>",
							"RPCListen = (url, service = RPCServer) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADGCAAAICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQogIC5tZW1vaXplID0gbWVtb2l6ZShmbikKICBzZWxmID0gKGtleSwgLi4uYXJncykKICAuR2V0Q2xhc3NlcyA9ICpHZXRDbGFzc2VzKG9iaikKTWFwcGVyKG1hcCA9IAogIHNlbGYgPSAoa2V5LCB2YWx1ZSkKTWFwcGVyCk1hcHBlcgpNYXBwZXIKICBzZWxmID0gKC4uLmFyZ3MpCkRlZmF1bHRDb25zdHJ1Y3RvcgpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCldyYXBFdmVudChoYW5kbGVyLCBuYW1lKQoJKGUpCiAgZ2V0KG9iaiwgcHJvcCkKTWVzc2FnZVJlY2VpdmVyCiAgb25tZXNzYWdlKG1zZykKTWVzc2FnZVRyYW5zbWl0dGVyCiAgc2VuZE1lc3NhZ2UoKQpNZXNzYWdlVHJhbnNjZWl2ZXIoKQpNZXNzYWdlVHJhbnNjZWl2ZXIKTWVzc2FnZVJlY2VpdmVyCk1lc3NhZ2VUcmFuc21pdHRlcgogIG5vbmUoKQogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIC5qcyA9IGpzKHZlcmJvc2UgPSBmYWxzZSkKICAuYmpzb24gPSBianNvbigpClJQQ0FwaShjKQpSUENBcGkKUlBDUHJveHkoYykKUlBDT2JqZWN0KGlkLCBjb25uZWN0aW9uKQpSUENPYmplY3QKUlBDRmFjdG9yeShhcGkpCkZhY3Rvcnkob3B0cykKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkKUlBDRmFjdG9yeQpDb25uZWN0aW9uCiAgc3RhdGljIGVxdWFsKGEsIGIpCiAgc3RhdGljIGdldCBsYXN0KCkKICBtYWtlU2VxKCkKICBjb25zdHJ1Y3Rvcihzb2NrZXQsIGluc3RhbmNlLCBsb2csIGNvZGVjID0gJ25vbmUnKQogIGxvZyguLi5hcmdzKQogIGVycm9yKG1lc3NhZ2UpCiAgY2xvc2UoLi4uYXJncykKICBvbm1lc3NhZ2UobXNnKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICBvbkNvbm5lY3Qoc29jaykKICBvbk9wZW4oc29jaykKICBvbk1lc3NhZ2Uoc29jaywgbXNnKQogIG9uRXJyb3Ioc29jaywgZXJyb3IpCiAgb25DbG9zZShzb2NrLCBjb2RlLCB3aHkpCiAgb25Qb25nKHNvY2ssIGRhdGEpCkNvbm5lY3Rpb24KQ29ubmVjdGlvbgpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQpSUENTZXJ2ZXIKICBtYWtlSWQoKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpClJQQ1NlcnZlcgpSUENDbGllbnQKICBwcm9jZXNzTWVzc2FnZShyZXNwb25zZSkKICBjb21tYW5kKG5hbWUsIHBhcmFtcykKUlBDQ2xpZW50ClJQQ1NvY2tldCh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIsIHZlcmJvc2l0eSA9IDEpCiAgZ2V0IGZkKCkKICBnZXQgc29ja2V0KCkKICByZWdpc3RlcihjdG9yKQogIGxpc3RlbihuZXdfd3MsIG9zID0gZ2xvYmFsVGhpcy5vcykKICBjb25uZWN0KG5ld193cywgb3MgPSBnbG9iYWxUaGlzLm9zKQogIGdldCBjb25uZWN0ZWQoKQogIGdldCBsaXN0KCkKICBnZXQgbGFzdCgpClJQQ1NvY2tldApNYWtlV2ViU29ja2V0KHVybCwgY2FsbGJhY2tzKQoJaXNUaGVuYWJsZSh2YWx1ZSkKCWhhc0hhbmRsZXIob2JqLCBldmVudE5hbWUpCgljYWxsSGFuZGxlcihvYmosIGV2ZW50TmFtZSwgLi4uYXJncykKCXBhcnNlVVJMKHVybF9vcl9wb3J0KQogIHRvU3RyaW5nKCkKCWRlZmluZShvYmosIC4uLmFyZ3MpCglzZXRIYW5kbGVycyhvcywgaGFuZGxlcnMpCiAgLm9uRmQgPSAoZmQsIHJlYWRhYmxlLCB3cml0YWJsZSkKCXN0YXR1c1Jlc3BvbnNlKHN1Y2Nlc3MsIHJlc3VsdF9vcl9lcnJvciwgZGF0YSkKCW9iamVjdENvbW1hbmQoZm4pCgkoZGF0YSkKCWdldFByb3RvdHlwZU5hbWUocHJvdG8pCkRlc2VyaWFsaXplRW50cmllcyhlKQpEZXNlcmlhbGl6ZUtleXMoZSkKRGVzZXJpYWxpemVNYXAoZSkKRGVzZXJpYWxpemVPYmplY3QoZSkKRm9yd2FyZE1ldGhvZHMoZSwgcmV0ID0ge30sIHRoaXNPYmopCkZvcndhcmRPYmplY3QoZSwgdGhpc09iaikKTWFrZUNvbW1hbmRGdW5jdGlvbihjbWQsIGdldENvbm5lY3Rpb24sIHRoaXNPYmosIHQpCgkocGFyYW1zID0ge30pCihwYXJhbXMgPSB7fSkKU2VyaWFsaXplVmFsdWUodmFsdWUsIHNvdXJjZSA9IGZhbHNlKQpEZXNlcmlhbGl6ZVN5bWJvbHMobmFtZXMpCkRlc2VyaWFsaXplVmFsdWUoZGVzYykAAAAAAAAAANkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADZCAAAICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQogIC5tZW1vaXplID0gbWVtb2l6ZShmbikKICBzZWxmID0gKGtleSwgLi4uYXJncykKICAuR2V0Q2xhc3NlcyA9ICpHZXRDbGFzc2VzKG9iaikKTWFwcGVyKG1hcCA9IAogIHNlbGYgPSAoa2V5LCB2YWx1ZSkKTWFwcGVyCk1hcHBlcgpNYXBwZXIKICBzZWxmID0gKC4uLmFyZ3MpCkRlZmF1bHRDb25zdHJ1Y3RvcgpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCldyYXBFdmVudChoYW5kbGVyLCBuYW1lKQoJKGUpCiAgZ2V0KG9iaiwgcHJvcCkKTWVzc2FnZVJlY2VpdmVyCiAgb25tZXNzYWdlKG1zZykKTWVzc2FnZVRyYW5zbWl0dGVyCiAgc2VuZE1lc3NhZ2UoKQpNZXNzYWdlVHJhbnNjZWl2ZXIoKQpNZXNzYWdlVHJhbnNjZWl2ZXIKTWVzc2FnZVJlY2VpdmVyCk1lc3NhZ2VUcmFuc21pdHRlcgogIG5vbmUoKQogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIC5qcyA9IGpzKHZlcmJvc2UgPSBmYWxzZSkKICAuYmpzb24gPSBianNvbigpClJQQ0FwaShjKQpSUENBcGkKUlBDUHJveHkoYykKUlBDT2JqZWN0KGlkLCBjb25uZWN0aW9uKQpSUENPYmplY3QKUlBDRmFjdG9yeShhcGkpCkZhY3Rvcnkob3B0cykKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkKUlBDRmFjdG9yeQpDb25uZWN0aW9uCiAgc3RhdGljIGVxdWFsKGEsIGIpCiAgc3RhdGljIGdldCBsYXN0KCkKICBtYWtlU2VxKCkKICBjb25zdHJ1Y3Rvcihzb2NrZXQsIGluc3RhbmNlLCBsb2csIGNvZGVjID0gJ25vbmUnKQogIGxvZyguLi5hcmdzKQogIGVycm9yKG1lc3NhZ2UpCiAgY2xvc2UoLi4uYXJncykKICBvbm1lc3NhZ2UobXNnKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICBvbkNvbm5lY3Qoc29jaykKICBvbk9wZW4oc29jaykKICBvbk1lc3NhZ2Uoc29jaywgbXNnKQogIG9uRXJyb3Ioc29jaywgZXJyb3IpCiAgb25DbG9zZShzb2NrLCBjb2RlLCB3aHkpCiAgb25Qb25nKHNvY2ssIGRhdGEpCkNvbm5lY3Rpb24KQ29ubmVjdGlvbgpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQpSUENTZXJ2ZXIKICBtYWtlSWQoKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpClJQQ1NlcnZlcgpSUENDbGllbnQKICBwcm9jZXNzTWVzc2FnZShyZXNwb25zZSkKICBjb21tYW5kKG5hbWUsIHBhcmFtcykKUlBDQ2xpZW50ClJQQ1NvY2tldCh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIsIHZlcmJvc2l0eSA9IDEpCiAgZ2V0IGZkKCkKICBnZXQgc29ja2V0KCkKICBnZXQgY29ubmVjdGlvbigpCiAgcmVnaXN0ZXIoY3RvcikKICBsaXN0ZW4obmV3X3dzLCBvcyA9IGdsb2JhbFRoaXMub3MpCiAgY29ubmVjdChuZXdfd3MsIG9zID0gZ2xvYmFsVGhpcy5vcykKICBnZXQgY29ubmVjdGVkKCkKICBnZXQgbGlzdCgpCiAgZ2V0IGxhc3QoKQpSUENTb2NrZXQKTWFrZVdlYlNvY2tldCh1cmwsIGNhbGxiYWNrcykKCWlzVGhlbmFibGUodmFsdWUpCgloYXNIYW5kbGVyKG9iaiwgZXZlbnROYW1lKQoJY2FsbEhhbmRsZXIob2JqLCBldmVudE5hbWUsIC4uLmFyZ3MpCglwYXJzZVVSTCh1cmxfb3JfcG9ydCkKICB0b1N0cmluZygpCglkZWZpbmUob2JqLCAuLi5hcmdzKQoJc2V0SGFuZGxlcnMob3MsIGhhbmRsZXJzKQogIC5vbkZkID0gKGZkLCByZWFkYWJsZSwgd3JpdGFibGUpCglzdGF0dXNSZXNwb25zZShzdWNjZXNzLCByZXN1bHRfb3JfZXJyb3IsIGRhdGEpCglvYmplY3RDb21tYW5kKGZuKQoJKGRhdGEpCglnZXRQcm90b3R5cGVOYW1lKHByb3RvKQpEZXNlcmlhbGl6ZUVudHJpZXMoZSkKRGVzZXJpYWxpemVLZXlzKGUpCkRlc2VyaWFsaXplTWFwKGUpCkRlc2VyaWFsaXplT2JqZWN0KGUpCkZvcndhcmRNZXRob2RzKGUsIHJldCA9IHt9LCB0aGlzT2JqKQpGb3J3YXJkT2JqZWN0KGUsIHRoaXNPYmopCk1ha2VDb21tYW5kRnVuY3Rpb24oY21kLCBnZXRDb25uZWN0aW9uLCB0aGlzT2JqLCB0KQoJKHBhcmFtcyA9IHt9KQoocGFyYW1zID0ge30pClNlcmlhbGl6ZVZhbHVlKHZhbHVlLCBzb3VyY2UgPSBmYWxzZSkKRGVzZXJpYWxpemVTeW1ib2xzKG5hbWVzKQpEZXNlcmlhbGl6ZVZhbHVlKGRlc2MpAAAAAAAAAADZCAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					737,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/net/rpc.js",
						"symkeys":
						[
							[
								426,
								458
							],
							[
								515,
								533
							],
							[
								585,
								603
							],
							[
								638,
								658
							],
							[
								707,
								726
							],
							[
								732,
								741
							],
							[
								752,
								766
							],
							[
								795,
								816
							],
							[
								882,
								913
							],
							[
								971,
								986
							],
							[
								1058,
								1087
							],
							[
								1504,
								1508
							],
							[
								1537,
								1548
							],
							[
								1635,
								1674
							],
							[
								1887,
								1910
							],
							[
								1921,
								1924
							],
							[
								1941,
								1968
							],
							[
								2111,
								2117
							],
							[
								2132,
								2138
							],
							[
								2167,
								2173
							],
							[
								2213,
								2268
							],
							[
								2278,
								2288
							],
							[
								2305,
								2329
							],
							[
								2605,
								2623
							],
							[
								2638,
								2656
							],
							[
								2685,
								2703
							],
							[
								2755,
								2888
							],
							[
								2891,
								2926
							],
							[
								2939,
								2951
							],
							[
								3039,
								3053
							],
							[
								3236,
								3251
							],
							[
								3379,
								3393
							],
							[
								3517,
								3535
							],
							[
								3650,
								3663
							],
							[
								3841,
								3871
							],
							[
								3893,
								3911
							],
							[
								3925,
								3940
							],
							[
								3954,
								3972
							],
							[
								4053,
								4071
							],
							[
								4120,
								4127
							],
							[
								4188,
								4194
							],
							[
								4236,
								4248
							],
							[
								4258,
								4270
							],
							[
								4287,
								4308
							],
							[
								4350,
								4362
							],
							[
								4419,
								4431
							],
							[
								4494,
								4528
							],
							[
								4568,
								4580
							],
							[
								4649,
								4661
							],
							[
								4723,
								4748
							],
							[
								4791,
								4803
							],
							[
								4826,
								4838
							],
							[
								4874,
								4893
							],
							[
								5126,
								5132
							],
							[
								5174,
								5179
							],
							[
								5202,
								5223
							],
							[
								5341,
								5376
							],
							[
								5492,
								5496
							],
							[
								5523,
								5532
							],
							[
								5585,
								5610
							],
							[
								5615,
								5643
							],
							[
								5873,
								5882
							],
							[
								5983,
								5993
							],
							[
								6023,
								6033
							],
							[
								6127,
								6137
							],
							[
								6223,
								6241
							],
							[
								6366,
								6383
							],
							[
								6420,
								6429
							],
							[
								6466,
								6516
							],
							[
								6633,
								6645
							],
							[
								7119,
								7133
							],
							[
								7359,
								7373
							],
							[
								7545,
								7559
							],
							[
								8173,
								8177
							],
							[
								8271,
								8291
							],
							[
								8397,
								8412
							],
							[
								8590,
								8602
							],
							[
								8657,
								8671
							],
							[
								8796,
								8814
							],
							[
								8941,
								8950
							],
							[
								9040,
								9056
							],
							[
								9426,
								9459
							],
							[
								9975,
								10019
							],
							[
								10141,
								10154
							],
							[
								10224,
								10230
							],
							[
								10315,
								10349
							],
							[
								10605,
								10616
							],
							[
								10674,
								10690
							],
							[
								10771,
								10786
							],
							[
								11137,
								11149
							],
							[
								11367,
								11387
							],
							[
								11482,
								11502
							],
							[
								11666,
								11690
							],
							[
								11816,
								11834
							],
							[
								11939,
								11949
							],
							[
								12013,
								12023
							],
							[
								12084,
								12124
							],
							[
								12142,
								12173
							],
							[
								12503,
								12509
							],
							[
								12674,
								12694
							],
							[
								12790,
								12830
							],
							[
								13000,
								13009
							],
							[
								13039,
								13047
							],
							[
								13225,
								13265
							],
							[
								13364,
								13371
							],
							[
								13390,
								13397
							],
							[
								13482,
								13522
							],
							[
								13587,
								13594
							],
							[
								13672,
								13712
							],
							[
								13777,
								13784
							],
							[
								13824,
								13830
							],
							[
								13897,
								13901
							],
							[
								13956,
								13960
							],
							[
								14032,
								14063
							],
							[
								14326,
								14364
							],
							[
								14448,
								14457
							],
							[
								14933,
								14941
							],
							[
								14977,
								14997
							],
							[
								15578,
								15587
							],
							[
								15897,
								15906
							],
							[
								16306,
								16311
							],
							[
								16367,
								16372
							],
							[
								16471,
								16476
							],
							[
								16508,
								16532
							],
							[
								16785,
								16806
							],
							[
								16832,
								16851
							],
							[
								16881,
								16893
							],
							[
								16937,
								16942
							],
							[
								17016,
								17025
							],
							[
								17333,
								17393
							],
							[
								18000,
								18013
							],
							[
								18185,
								18193
							],
							[
								18311,
								18323
							],
							[
								18377,
								18393
							],
							[
								18716,
								18730
							],
							[
								18950,
								18984
							],
							[
								19283,
								19288
							],
							[
								19383,
								19424
							],
							[
								19718,
								19733
							],
							[
								20194,
								20204
							],
							[
								20241,
								20251
							],
							[
								20320,
								20329
							],
							[
								20387,
								20425
							],
							[
								20558,
								20576
							],
							[
								20606,
								20621
							],
							[
								20648,
								20667
							],
							[
								20702,
								20721
							],
							[
								20756,
								20773
							],
							[
								20806,
								20826
							],
							[
								20918,
								20945
							],
							[
								21044,
								21080
							],
							[
								21238,
								21284
							],
							[
								21383,
								21414
							],
							[
								21983,
								21993
							],
							[
								22127,
								22184
							],
							[
								22203,
								22261
							],
							[
								22580,
								22651
							],
							[
								22713,
								22720
							],
							[
								22811,
								22818
							],
							[
								22905,
								22987
							],
							[
								23534,
								23564
							],
							[
								23932,
								23967
							],
							[
								23980,
								24020
							],
							[
								24199,
								24255
							],
							[
								24484,
								24511
							],
							[
								24522,
								24537
							],
							[
								24550,
								24580
							],
							[
								24837,
								24939
							],
							[
								24965,
								24983
							],
							[
								25279,
								25302
							],
							[
								25410,
								25423
							],
							[
								26032,
								26065
							],
							[
								26134,
								26164
							],
							[
								26203,
								26207
							],
							[
								26294,
								26321
							],
							[
								26360,
								26368
							],
							[
								26448,
								26474
							],
							[
								26520,
								26549
							],
							[
								26606,
								26651
							],
							[
								26751,
								26756
							],
							[
								26856,
								26890
							],
							[
								27007,
								27067
							],
							[
								27286,
								27308
							],
							[
								27480,
								27502
							],
							[
								27600,
								27620
							],
							[
								27652,
								27657
							],
							[
								27786,
								27813
							],
							[
								28045,
								28092
							],
							[
								28910,
								28945
							],
							[
								28967,
								28971
							],
							[
								29003,
								29007
							],
							[
								29029,
								29061
							],
							[
								29195,
								29237
							],
							[
								29290,
								29331
							]
						],
						"symlist":
						[
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"VfnAdapter = vfn =>",
							"get: k =>",
							"set: (k, v) =>",
							"VfnDecorator = vfn =>",
							".memoize = function memoize(fn)",
							"(key, value) =>",
							"self = function(key, ...args)",
							"n =>",
							"(acc, n) =>",
							".GetClasses = function* GetClasses(obj)",
							" function Mapper(map = ",
							"())",
							"self = function(key, value)",
							"Mapper",
							"Mapper",
							"Mapper",
							" function DefaultConstructor(mapper, fn = (...args) => ",
							"(...args))",
							"self = function(...args)",
							"DefaultConstructor",
							"DefaultConstructor",
							"DefaultConstructor",
							" function EventLogger( instance = {}, callback = (name, event, thisObj) => console.log('EventLogger', { name, event, thisObj }) )",
							" function WrapEvent(handler, name)",
							" function(e)",
							"get(obj, prop)",
							"MessageReceiver",
							"onmessage(msg)",
							"MessageTransmitter",
							"sendMessage()",
							" function MessageTransceiver()",
							"MessageTransceiver",
							"MessageReceiver",
							"MessageTransmitter",
							"value: instance =>",
							"ctor =>",
							"none()",
							"encode: v =>",
							"decode: v =>",
							"json(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".js = function js(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".bjson = function bjson()",
							"encode: v =>",
							"decode: v =>",
							" function RPCApi(c)",
							"RPCApi",
							" o =>",
							" function RPCProxy(c)",
							" function RPCObject(id, connection)",
							"r =>",
							"RPCObject",
							" function RPCFactory(api)",
							"async function Factory(opts)",
							"RPCObject",
							"RPCFactory",
							"RPCFactory",
							"Connection",
							"static equal(a, b)",
							"static get last()",
							"makeSeq()",
							"constructor(socket, instance, log, codec = 'none')",
							"log(...args)",
							"error(message)",
							"close(...args)",
							"onmessage(msg)",
							"r =>",
							"processMessage(data)",
							"onconnect(sock)",
							"onpong(data)",
							"onerror(error)",
							"onclose(code, why)",
							"cleanup()",
							"sendMessage(obj)",
							"sendCommand(command, params = {})",
							"static getCallbacks(instance, verbosity = 0)",
							" (...args) =>",
							" () =>",
							"handle = (sock, event, ...args) =>",
							"then: fn =>",
							"remove = sock =>",
							"onConnect(sock)",
							"onOpen(sock)",
							"onMessage(sock, msg)",
							"onError(sock, error)",
							"onClose(sock, code, why)",
							"onPong(sock, data)",
							"Connection",
							"Connection",
							"function RPCServerEndpoint(classes = {})",
							"new({ class: name, args = [] })",
							"list()",
							"({ id }, respond) =>",
							"({ obj, method, args = [] }, respond) =>",
							"result =>",
							"error =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"sym =>",
							"v =>",
							"v =>",
							"({ obj, property }, respond) =>",
							"({ obj, property, value }, respond) =>",
							"RPCServer",
							"makeId()",
							"processMessage(data)",
							"RPCServer",
							"RPCClient",
							" e =>",
							" r =>",
							"() =>",
							"processMessage(response)",
							"command(name, params)",
							"(accept, reject) =>",
							" response =>",
							" e =>",
							"RPCClient",
							" function RPCSocket(url, service = RPCServer, verbosity = 1)",
							" (...args) =>",
							"get fd()",
							"get socket()",
							"get connection()",
							"register(ctor)",
							"listen(new_ws, os = globalThis.os)",
							"() =>",
							"async connect(new_ws, os = globalThis.os)",
							"get connected()",
							"get list()",
							"get last()",
							"RPCSocket",
							"function MakeWebSocket(url, callbacks)",
							".onconnect = () =>",
							".onopen = () =>",
							".onerror = error =>",
							".onmessage = msg =>",
							".onpong = pong =>",
							".onclose = reason =>",
							" function isThenable(value)",
							" function hasHandler(obj, eventName)",
							" function callHandler(obj, eventName, ...args)",
							" function parseURL(url_or_port)",
							"toString()",
							" function GetProperties( obj, method = obj => Object.",
							"(obj), pred = (obj, depth) => obj !== Object.prototype )",
							" function GetKeys(obj, pred = (obj, depth) => obj !== Object.prototype)",
							" obj =>",
							" obj =>",
							" function getPropertyDescriptors(obj, merge = true, pred = (proto, depth) => true)",
							" function define(obj, ...args)",
							" function setHandlers(os, handlers)",
							".onFd = function(fd, readable, writable)",
							" function statusResponse(success, result_or_error, data)",
							" function objectCommand(fn)",
							" function(data)",
							"respond = (success, result) =>",
							" function MakeListCommand( pred = v => typeof v != 'function', defaults = { maxDepth: Infinity } )",
							"(data, respond) =>",
							" (proto, depth) =>",
							"(acc, key) =>",
							" function getPrototypeName(proto)",
							"function DeserializeEntries(e)",
							"a =>",
							"function DeserializeKeys(e)",
							"([k]) =>",
							"function DeserializeMap(e)",
							"function DeserializeObject(e)",
							"function ForwardMethods(e, ret = {}, thisObj)",
							" o =>",
							"function ForwardObject(e, thisObj)",
							"function MakeCommandFunction(cmd, getConnection, thisObj, t)",
							"getConnection = obj =>",
							" function(params = {})",
							"(resolve, reject) =>",
							" r =>",
							"async function(params = {})",
							" function SerializeValue(value, source = false)",
							" function DeserializeSymbols(names)",
							"n =>",
							"n =>",
							" function DeserializeValue(desc)",
							"RPCConnect = (url, service = RPCClient) =>",
							"RPCListen = (url, service = RPCServer) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADZCAAAICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQogIC5tZW1vaXplID0gbWVtb2l6ZShmbikKICBzZWxmID0gKGtleSwgLi4uYXJncykKICAuR2V0Q2xhc3NlcyA9ICpHZXRDbGFzc2VzKG9iaikKTWFwcGVyKG1hcCA9IAogIHNlbGYgPSAoa2V5LCB2YWx1ZSkKTWFwcGVyCk1hcHBlcgpNYXBwZXIKICBzZWxmID0gKC4uLmFyZ3MpCkRlZmF1bHRDb25zdHJ1Y3RvcgpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCldyYXBFdmVudChoYW5kbGVyLCBuYW1lKQoJKGUpCiAgZ2V0KG9iaiwgcHJvcCkKTWVzc2FnZVJlY2VpdmVyCiAgb25tZXNzYWdlKG1zZykKTWVzc2FnZVRyYW5zbWl0dGVyCiAgc2VuZE1lc3NhZ2UoKQpNZXNzYWdlVHJhbnNjZWl2ZXIoKQpNZXNzYWdlVHJhbnNjZWl2ZXIKTWVzc2FnZVJlY2VpdmVyCk1lc3NhZ2VUcmFuc21pdHRlcgogIG5vbmUoKQogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIC5qcyA9IGpzKHZlcmJvc2UgPSBmYWxzZSkKICAuYmpzb24gPSBianNvbigpClJQQ0FwaShjKQpSUENBcGkKUlBDUHJveHkoYykKUlBDT2JqZWN0KGlkLCBjb25uZWN0aW9uKQpSUENPYmplY3QKUlBDRmFjdG9yeShhcGkpCkZhY3Rvcnkob3B0cykKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkKUlBDRmFjdG9yeQpDb25uZWN0aW9uCiAgc3RhdGljIGVxdWFsKGEsIGIpCiAgc3RhdGljIGdldCBsYXN0KCkKICBtYWtlU2VxKCkKICBjb25zdHJ1Y3Rvcihzb2NrZXQsIGluc3RhbmNlLCBsb2csIGNvZGVjID0gJ25vbmUnKQogIGxvZyguLi5hcmdzKQogIGVycm9yKG1lc3NhZ2UpCiAgY2xvc2UoLi4uYXJncykKICBvbm1lc3NhZ2UobXNnKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICBvbkNvbm5lY3Qoc29jaykKICBvbk9wZW4oc29jaykKICBvbk1lc3NhZ2Uoc29jaywgbXNnKQogIG9uRXJyb3Ioc29jaywgZXJyb3IpCiAgb25DbG9zZShzb2NrLCBjb2RlLCB3aHkpCiAgb25Qb25nKHNvY2ssIGRhdGEpCkNvbm5lY3Rpb24KQ29ubmVjdGlvbgpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQpSUENTZXJ2ZXIKICBtYWtlSWQoKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpClJQQ1NlcnZlcgpSUENDbGllbnQKICBwcm9jZXNzTWVzc2FnZShyZXNwb25zZSkKICBjb21tYW5kKG5hbWUsIHBhcmFtcykKUlBDQ2xpZW50ClJQQ1NvY2tldCh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIsIHZlcmJvc2l0eSA9IDEpCiAgZ2V0IGZkKCkKICBnZXQgc29ja2V0KCkKICBnZXQgY29ubmVjdGlvbigpCiAgcmVnaXN0ZXIoY3RvcikKICBsaXN0ZW4obmV3X3dzLCBvcyA9IGdsb2JhbFRoaXMub3MpCiAgY29ubmVjdChuZXdfd3MsIG9zID0gZ2xvYmFsVGhpcy5vcykKICBnZXQgY29ubmVjdGVkKCkKICBnZXQgbGlzdCgpCiAgZ2V0IGxhc3QoKQpSUENTb2NrZXQKTWFrZVdlYlNvY2tldCh1cmwsIGNhbGxiYWNrcykKCWlzVGhlbmFibGUodmFsdWUpCgloYXNIYW5kbGVyKG9iaiwgZXZlbnROYW1lKQoJY2FsbEhhbmRsZXIob2JqLCBldmVudE5hbWUsIC4uLmFyZ3MpCglwYXJzZVVSTCh1cmxfb3JfcG9ydCkKICB0b1N0cmluZygpCglkZWZpbmUob2JqLCAuLi5hcmdzKQoJc2V0SGFuZGxlcnMob3MsIGhhbmRsZXJzKQogIC5vbkZkID0gKGZkLCByZWFkYWJsZSwgd3JpdGFibGUpCglzdGF0dXNSZXNwb25zZShzdWNjZXNzLCByZXN1bHRfb3JfZXJyb3IsIGRhdGEpCglvYmplY3RDb21tYW5kKGZuKQoJKGRhdGEpCglnZXRQcm90b3R5cGVOYW1lKHByb3RvKQpEZXNlcmlhbGl6ZUVudHJpZXMoZSkKRGVzZXJpYWxpemVLZXlzKGUpCkRlc2VyaWFsaXplTWFwKGUpCkRlc2VyaWFsaXplT2JqZWN0KGUpCkZvcndhcmRNZXRob2RzKGUsIHJldCA9IHt9LCB0aGlzT2JqKQpGb3J3YXJkT2JqZWN0KGUsIHRoaXNPYmopCk1ha2VDb21tYW5kRnVuY3Rpb24oY21kLCBnZXRDb25uZWN0aW9uLCB0aGlzT2JqLCB0KQoJKHBhcmFtcyA9IHt9KQoocGFyYW1zID0ge30pClNlcmlhbGl6ZVZhbHVlKHZhbHVlLCBzb3VyY2UgPSBmYWxzZSkKRGVzZXJpYWxpemVTeW1ib2xzKG5hbWVzKQpEZXNlcmlhbGl6ZVZhbHVlKGRlc2MpAAAAAAAAAADZCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2QgAACAgLkxvZ1dyYXAgPSBMb2dXcmFwKGxvZykKICAubWVtb2l6ZSA9IG1lbW9pemUoZm4pCiAgc2VsZiA9IChrZXksIC4uLmFyZ3MpCiAgLkdldENsYXNzZXMgPSAqR2V0Q2xhc3NlcyhvYmopCk1hcHBlcihtYXAgPSAKICBzZWxmID0gKGtleSwgdmFsdWUpCk1hcHBlcgpNYXBwZXIKTWFwcGVyCiAgc2VsZiA9ICguLi5hcmdzKQpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCkRlZmF1bHRDb25zdHJ1Y3RvcgpXcmFwRXZlbnQoaGFuZGxlciwgbmFtZSkKCShlKQogIGdldChvYmosIHByb3ApCk1lc3NhZ2VSZWNlaXZlcgogIG9ubWVzc2FnZShtc2cpCk1lc3NhZ2VUcmFuc21pdHRlcgogIHNlbmRNZXNzYWdlKCkKTWVzc2FnZVRyYW5zY2VpdmVyKCkKTWVzc2FnZVRyYW5zY2VpdmVyCk1lc3NhZ2VSZWNlaXZlcgpNZXNzYWdlVHJhbnNtaXR0ZXIKICBub25lKCkKICBqc29uKHZlcmJvc2UgPSBmYWxzZSkKICAuanMgPSBqcyh2ZXJib3NlID0gZmFsc2UpCiAgLmJqc29uID0gYmpzb24oKQpSUENBcGkoYykKUlBDQXBpClJQQ1Byb3h5KGMpClJQQ09iamVjdChpZCwgY29ubmVjdGlvbikKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkoYXBpKQpGYWN0b3J5KG9wdHMpClJQQ09iamVjdApSUENGYWN0b3J5ClJQQ0ZhY3RvcnkKQ29ubmVjdGlvbgogIHN0YXRpYyBlcXVhbChhLCBiKQogIHN0YXRpYyBnZXQgbGFzdCgpCiAgbWFrZVNlcSgpCiAgY29uc3RydWN0b3Ioc29ja2V0LCBpbnN0YW5jZSwgbG9nLCBjb2RlYyA9ICdub25lJykKICBsb2coLi4uYXJncykKICBlcnJvcihtZXNzYWdlKQogIGNsb3NlKC4uLmFyZ3MpCiAgb25tZXNzYWdlKG1zZykKICBwcm9jZXNzTWVzc2FnZShkYXRhKQogIG9uY29ubmVjdChzb2NrKQogIG9ucG9uZyhkYXRhKQogIG9uZXJyb3IoZXJyb3IpCiAgb25jbG9zZShjb2RlLCB3aHkpCiAgY2xlYW51cCgpCiAgc2VuZE1lc3NhZ2Uob2JqKQogIHNlbmRDb21tYW5kKGNvbW1hbmQsIHBhcmFtcyA9IHt9KQogIHN0YXRpYyBnZXRDYWxsYmFja3MoaW5zdGFuY2UsIHZlcmJvc2l0eSA9IDApCiAgb25Db25uZWN0KHNvY2spCiAgb25PcGVuKHNvY2spCiAgb25NZXNzYWdlKHNvY2ssIG1zZykKICBvbkVycm9yKHNvY2ssIGVycm9yKQogIG9uQ2xvc2Uoc29jaywgY29kZSwgd2h5KQogIG9uUG9uZyhzb2NrLCBkYXRhKQpDb25uZWN0aW9uCkNvbm5lY3Rpb24KUlBDU2VydmVyRW5kcG9pbnQoY2xhc3NlcyA9IHt9KQogIG5ldyh7IGNsYXNzOiBuYW1lLCBhcmdzID0gW10gfSkKICBsaXN0KCkKUlBDU2VydmVyCiAgbWFrZUlkKCkKICBwcm9jZXNzTWVzc2FnZShkYXRhKQpSUENTZXJ2ZXIKUlBDQ2xpZW50CiAgcHJvY2Vzc01lc3NhZ2UocmVzcG9uc2UpCiAgY29tbWFuZChuYW1lLCBwYXJhbXMpClJQQ0NsaWVudApSUENTb2NrZXQodXJsLCBzZXJ2aWNlID0gUlBDU2VydmVyLCB2ZXJib3NpdHkgPSAxKQogIGdldCBmZCgpCiAgZ2V0IHNvY2tldCgpCiAgZ2V0IGNvbm5lY3Rpb24oKQogIHJlZ2lzdGVyKGN0b3IpCiAgbGlzdGVuKG5ld193cywgb3MgPSBnbG9iYWxUaGlzLm9zKQogIGNvbm5lY3QobmV3X3dzLCBvcyA9IGdsb2JhbFRoaXMub3MpCiAgZ2V0IGNvbm5lY3RlZCgpCiAgZ2V0IGxpc3QoKQogIGdldCBsYXN0KCkKUlBDU29ja2V0Ck1ha2VXZWJTb2NrZXQodXJsLCBjYWxsYmFja3MpCglpc1RoZW5hYmxlKHZhbHVlKQoJaGFzSGFuZGxlcihvYmosIGV2ZW50TmFtZSkKCWNhbGxIYW5kbGVyKG9iaiwgZXZlbnROYW1lLCAuLi5hcmdzKQoJcGFyc2VVUkwodXJsX29yX3BvcnQpCiAgdG9TdHJpbmcoKQoJZGVmaW5lKG9iaiwgLi4uYXJncykKCXNldEhhbmRsZXJzKG9zLCBoYW5kbGVycykKICAub25GZCA9IChmZCwgcmVhZGFibGUsIHdyaXRhYmxlKQoJc3RhdHVzUmVzcG9uc2Uoc3VjY2VzcywgcmVzdWx0X29yX2Vycm9yLCBkYXRhKQoJb2JqZWN0Q29tbWFuZChmbikKCShkYXRhKQoJZ2V0UHJvdG90eXBlTmFtZShwcm90bykKRGVzZXJpYWxpemVFbnRyaWVzKGUpCkRlc2VyaWFsaXplS2V5cyhlKQpEZXNlcmlhbGl6ZU1hcChlKQpEZXNlcmlhbGl6ZU9iamVjdChlKQpGb3J3YXJkTWV0aG9kcyhlLCByZXQgPSB7fSwgdGhpc09iaikKRm9yd2FyZE9iamVjdChlLCB0aGlzT2JqKQpNYWtlQ29tbWFuZEZ1bmN0aW9uKGNtZCwgZ2V0Q29ubmVjdGlvbiwgdGhpc09iaiwgdCkKCShwYXJhbXMgPSB7fSkKKHBhcmFtcyA9IHt9KQpTZXJpYWxpemVWYWx1ZSh2YWx1ZSwgc291cmNlID0gZmFsc2UpCkRlc2VyaWFsaXplU3ltYm9scyhuYW1lcykKRGVzZXJpYWxpemVWYWx1ZShkZXNjKQAAAAAAAAAA2QgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					744,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADZCAAAICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQogIC5tZW1vaXplID0gbWVtb2l6ZShmbikKICBzZWxmID0gKGtleSwgLi4uYXJncykKICAuR2V0Q2xhc3NlcyA9ICpHZXRDbGFzc2VzKG9iaikKTWFwcGVyKG1hcCA9IAogIHNlbGYgPSAoa2V5LCB2YWx1ZSkKTWFwcGVyCk1hcHBlcgpNYXBwZXIKICBzZWxmID0gKC4uLmFyZ3MpCkRlZmF1bHRDb25zdHJ1Y3RvcgpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCldyYXBFdmVudChoYW5kbGVyLCBuYW1lKQoJKGUpCiAgZ2V0KG9iaiwgcHJvcCkKTWVzc2FnZVJlY2VpdmVyCiAgb25tZXNzYWdlKG1zZykKTWVzc2FnZVRyYW5zbWl0dGVyCiAgc2VuZE1lc3NhZ2UoKQpNZXNzYWdlVHJhbnNjZWl2ZXIoKQpNZXNzYWdlVHJhbnNjZWl2ZXIKTWVzc2FnZVJlY2VpdmVyCk1lc3NhZ2VUcmFuc21pdHRlcgogIG5vbmUoKQogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIC5qcyA9IGpzKHZlcmJvc2UgPSBmYWxzZSkKICAuYmpzb24gPSBianNvbigpClJQQ0FwaShjKQpSUENBcGkKUlBDUHJveHkoYykKUlBDT2JqZWN0KGlkLCBjb25uZWN0aW9uKQpSUENPYmplY3QKUlBDRmFjdG9yeShhcGkpCkZhY3Rvcnkob3B0cykKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkKUlBDRmFjdG9yeQpDb25uZWN0aW9uCiAgc3RhdGljIGVxdWFsKGEsIGIpCiAgc3RhdGljIGdldCBsYXN0KCkKICBtYWtlU2VxKCkKICBjb25zdHJ1Y3Rvcihzb2NrZXQsIGluc3RhbmNlLCBsb2csIGNvZGVjID0gJ25vbmUnKQogIGxvZyguLi5hcmdzKQogIGVycm9yKG1lc3NhZ2UpCiAgY2xvc2UoLi4uYXJncykKICBvbm1lc3NhZ2UobXNnKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICBvbkNvbm5lY3Qoc29jaykKICBvbk9wZW4oc29jaykKICBvbk1lc3NhZ2Uoc29jaywgbXNnKQogIG9uRXJyb3Ioc29jaywgZXJyb3IpCiAgb25DbG9zZShzb2NrLCBjb2RlLCB3aHkpCiAgb25Qb25nKHNvY2ssIGRhdGEpCkNvbm5lY3Rpb24KQ29ubmVjdGlvbgpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQpSUENTZXJ2ZXIKICBtYWtlSWQoKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpClJQQ1NlcnZlcgpSUENDbGllbnQKICBwcm9jZXNzTWVzc2FnZShyZXNwb25zZSkKICBjb21tYW5kKG5hbWUsIHBhcmFtcykKUlBDQ2xpZW50ClJQQ1NvY2tldCh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIsIHZlcmJvc2l0eSA9IDEpCiAgZ2V0IGZkKCkKICBnZXQgc29ja2V0KCkKICBnZXQgY29ubmVjdGlvbigpCiAgcmVnaXN0ZXIoY3RvcikKICBsaXN0ZW4obmV3X3dzLCBvcyA9IGdsb2JhbFRoaXMub3MpCiAgY29ubmVjdChuZXdfd3MsIG9zID0gZ2xvYmFsVGhpcy5vcykKICBnZXQgY29ubmVjdGVkKCkKICBnZXQgbGlzdCgpCiAgZ2V0IGxhc3QoKQpSUENTb2NrZXQKTWFrZVdlYlNvY2tldCh1cmwsIGNhbGxiYWNrcykKCWlzVGhlbmFibGUodmFsdWUpCgloYXNIYW5kbGVyKG9iaiwgZXZlbnROYW1lKQoJY2FsbEhhbmRsZXIob2JqLCBldmVudE5hbWUsIC4uLmFyZ3MpCglwYXJzZVVSTCh1cmxfb3JfcG9ydCkKICB0b1N0cmluZygpCglkZWZpbmUob2JqLCAuLi5hcmdzKQoJc2V0SGFuZGxlcnMob3MsIGhhbmRsZXJzKQogIC5vbkZkID0gKGZkLCByZWFkYWJsZSwgd3JpdGFibGUpCglzdGF0dXNSZXNwb25zZShzdWNjZXNzLCByZXN1bHRfb3JfZXJyb3IsIGRhdGEpCglvYmplY3RDb21tYW5kKGZuKQoJKGRhdGEpCglnZXRQcm90b3R5cGVOYW1lKHByb3RvKQpEZXNlcmlhbGl6ZUVudHJpZXMoZSkKRGVzZXJpYWxpemVLZXlzKGUpCkRlc2VyaWFsaXplTWFwKGUpCkRlc2VyaWFsaXplT2JqZWN0KGUpCkZvcndhcmRNZXRob2RzKGUsIHJldCA9IHt9LCB0aGlzT2JqKQpGb3J3YXJkT2JqZWN0KGUsIHRoaXNPYmopCk1ha2VDb21tYW5kRnVuY3Rpb24oY21kLCBnZXRDb25uZWN0aW9uLCB0aGlzT2JqLCB0KQoJKHBhcmFtcyA9IHt9KQoocGFyYW1zID0ge30pClNlcmlhbGl6ZVZhbHVlKHZhbHVlLCBzb3VyY2UgPSBmYWxzZSkKRGVzZXJpYWxpemVTeW1ib2xzKG5hbWVzKQpEZXNlcmlhbGl6ZVZhbHVlKGRlc2MpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKMHAAAAAAAAtQcAAAAAAAAAAAAAAADwvw"
				],
				[
					745,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/events.js",
						"symkeys":
						[
							[
								62,
								93
							],
							[
								143,
								176
							],
							[
								336,
								368
							],
							[
								425,
								443
							],
							[
								495,
								513
							],
							[
								548,
								568
							],
							[
								617,
								629
							],
							[
								650,
								663
							],
							[
								744,
								763
							],
							[
								951,
								982
							],
							[
								1328,
								1352
							],
							[
								1495,
								1507
							],
							[
								1611,
								1631
							],
							[
								2034,
								2055
							],
							[
								2080,
								2095
							],
							[
								2216,
								2230
							],
							[
								2257,
								2278
							],
							[
								2459,
								2471
							],
							[
								2517,
								2536
							],
							[
								2582,
								2597
							],
							[
								2690,
								2703
							],
							[
								2716,
								2732
							],
							[
								2748,
								2753
							],
							[
								2805,
								2818
							],
							[
								2844,
								2864
							],
							[
								3090,
								3099
							],
							[
								3226,
								3237
							],
							[
								3399,
								3419
							],
							[
								3522,
								3554
							],
							[
								3785,
								3820
							],
							[
								4175,
								4201
							],
							[
								4868,
								4877
							],
							[
								4957,
								4976
							],
							[
								5023,
								5027
							],
							[
								5060,
								5071
							],
							[
								5118,
								5136
							]
						],
						"symlist":
						[
							"indexOf = (haystack, needle) =>",
							"function define(obj, prop, value)",
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"EventEmitter",
							"constructor()",
							"on(event, listener)",
							"removeListener(event, listener)",
							"removeAllListeners(type)",
							"off(...args)",
							"emit(event, ...args)",
							"once(event, listener)",
							"callback = e =>",
							"iterator(type)",
							"async (push, stop) =>",
							"eventNames()",
							"listenerCount(type)",
							"listeners(type)",
							"next: type =>",
							"async resolve =>",
							" e =>",
							"waitFor(type)",
							"(resolve, reject) =>",
							"method =>",
							"EventTarget",
							"typedListeners(type)",
							"addEventListener(type, listener)",
							"removeEventListener(type, listener)",
							"dispatchEvent(type, event)",
							"method =>",
							"getMethods = obj =>",
							"n =>",
							"(acc, n) =>",
							"eventify = self =>"
						]
					},
					"AQAAAAAAAAAAAAAAwwEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					746,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/net/rpc.js",
						"symkeys":
						[
							[
								426,
								458
							],
							[
								515,
								533
							],
							[
								585,
								603
							],
							[
								638,
								658
							],
							[
								707,
								726
							],
							[
								732,
								741
							],
							[
								752,
								766
							],
							[
								795,
								816
							],
							[
								882,
								913
							],
							[
								971,
								986
							],
							[
								1058,
								1087
							],
							[
								1504,
								1508
							],
							[
								1537,
								1548
							],
							[
								1635,
								1674
							],
							[
								1887,
								1910
							],
							[
								1921,
								1924
							],
							[
								1941,
								1968
							],
							[
								2111,
								2117
							],
							[
								2132,
								2138
							],
							[
								2167,
								2173
							],
							[
								2213,
								2268
							],
							[
								2278,
								2288
							],
							[
								2305,
								2329
							],
							[
								2605,
								2623
							],
							[
								2638,
								2656
							],
							[
								2685,
								2703
							],
							[
								2755,
								2888
							],
							[
								2891,
								2926
							],
							[
								2939,
								2951
							],
							[
								3039,
								3053
							],
							[
								3236,
								3251
							],
							[
								3379,
								3393
							],
							[
								3517,
								3535
							],
							[
								3650,
								3663
							],
							[
								3841,
								3871
							],
							[
								3893,
								3911
							],
							[
								3925,
								3940
							],
							[
								3954,
								3972
							],
							[
								4053,
								4071
							],
							[
								4120,
								4127
							],
							[
								4188,
								4194
							],
							[
								4236,
								4248
							],
							[
								4258,
								4270
							],
							[
								4287,
								4308
							],
							[
								4350,
								4362
							],
							[
								4419,
								4431
							],
							[
								4494,
								4528
							],
							[
								4568,
								4580
							],
							[
								4649,
								4661
							],
							[
								4723,
								4748
							],
							[
								4791,
								4803
							],
							[
								4826,
								4838
							],
							[
								4874,
								4893
							],
							[
								5126,
								5132
							],
							[
								5174,
								5179
							],
							[
								5202,
								5223
							],
							[
								5341,
								5376
							],
							[
								5492,
								5496
							],
							[
								5523,
								5532
							],
							[
								5585,
								5610
							],
							[
								5615,
								5643
							],
							[
								5873,
								5882
							],
							[
								5983,
								5993
							],
							[
								6023,
								6033
							],
							[
								6127,
								6137
							],
							[
								6223,
								6241
							],
							[
								6366,
								6383
							],
							[
								6420,
								6429
							],
							[
								6466,
								6516
							],
							[
								6633,
								6645
							],
							[
								7119,
								7133
							],
							[
								7359,
								7373
							],
							[
								7545,
								7559
							],
							[
								8173,
								8177
							],
							[
								8271,
								8291
							],
							[
								8397,
								8412
							],
							[
								8590,
								8602
							],
							[
								8657,
								8671
							],
							[
								8796,
								8814
							],
							[
								8941,
								8950
							],
							[
								9040,
								9056
							],
							[
								9426,
								9459
							],
							[
								9975,
								10019
							],
							[
								10141,
								10154
							],
							[
								10224,
								10230
							],
							[
								10315,
								10349
							],
							[
								10605,
								10616
							],
							[
								10674,
								10690
							],
							[
								10771,
								10786
							],
							[
								11137,
								11149
							],
							[
								11367,
								11387
							],
							[
								11482,
								11502
							],
							[
								11666,
								11690
							],
							[
								11816,
								11834
							],
							[
								11939,
								11949
							],
							[
								12013,
								12023
							],
							[
								12084,
								12124
							],
							[
								12142,
								12173
							],
							[
								12503,
								12509
							],
							[
								12674,
								12694
							],
							[
								12790,
								12830
							],
							[
								13000,
								13009
							],
							[
								13039,
								13047
							],
							[
								13225,
								13265
							],
							[
								13364,
								13371
							],
							[
								13390,
								13397
							],
							[
								13482,
								13522
							],
							[
								13587,
								13594
							],
							[
								13672,
								13712
							],
							[
								13777,
								13784
							],
							[
								13824,
								13830
							],
							[
								13897,
								13901
							],
							[
								13956,
								13960
							],
							[
								14032,
								14063
							],
							[
								14326,
								14364
							],
							[
								14448,
								14457
							],
							[
								14933,
								14941
							],
							[
								14977,
								14997
							],
							[
								15578,
								15587
							],
							[
								15897,
								15906
							],
							[
								16306,
								16311
							],
							[
								16367,
								16372
							],
							[
								16471,
								16476
							],
							[
								16508,
								16532
							],
							[
								16785,
								16806
							],
							[
								16832,
								16851
							],
							[
								16881,
								16893
							],
							[
								16937,
								16942
							],
							[
								17016,
								17025
							],
							[
								17333,
								17393
							],
							[
								18000,
								18013
							],
							[
								18185,
								18193
							],
							[
								18311,
								18323
							],
							[
								18377,
								18393
							],
							[
								18716,
								18730
							],
							[
								18950,
								18984
							],
							[
								19283,
								19288
							],
							[
								19383,
								19424
							],
							[
								19718,
								19733
							],
							[
								20194,
								20204
							],
							[
								20241,
								20251
							],
							[
								20320,
								20329
							],
							[
								20387,
								20425
							],
							[
								20558,
								20576
							],
							[
								20606,
								20621
							],
							[
								20648,
								20667
							],
							[
								20702,
								20721
							],
							[
								20756,
								20773
							],
							[
								20806,
								20826
							],
							[
								20918,
								20945
							],
							[
								21044,
								21080
							],
							[
								21238,
								21284
							],
							[
								21383,
								21414
							],
							[
								21983,
								21993
							],
							[
								22127,
								22184
							],
							[
								22203,
								22261
							],
							[
								22580,
								22651
							],
							[
								22713,
								22720
							],
							[
								22811,
								22818
							],
							[
								22905,
								22987
							],
							[
								23534,
								23564
							],
							[
								23932,
								23967
							],
							[
								23980,
								24020
							],
							[
								24199,
								24255
							],
							[
								24484,
								24511
							],
							[
								24522,
								24537
							],
							[
								24550,
								24580
							],
							[
								24837,
								24939
							],
							[
								24965,
								24983
							],
							[
								25279,
								25302
							],
							[
								25410,
								25423
							],
							[
								26032,
								26065
							],
							[
								26134,
								26164
							],
							[
								26203,
								26207
							],
							[
								26294,
								26321
							],
							[
								26360,
								26368
							],
							[
								26448,
								26474
							],
							[
								26520,
								26549
							],
							[
								26606,
								26651
							],
							[
								26751,
								26756
							],
							[
								26856,
								26890
							],
							[
								27007,
								27067
							],
							[
								27286,
								27308
							],
							[
								27480,
								27502
							],
							[
								27600,
								27620
							],
							[
								27652,
								27657
							],
							[
								27786,
								27813
							],
							[
								28045,
								28092
							],
							[
								28910,
								28945
							],
							[
								28967,
								28971
							],
							[
								29003,
								29007
							],
							[
								29029,
								29061
							],
							[
								29195,
								29237
							],
							[
								29290,
								29331
							]
						],
						"symlist":
						[
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"VfnAdapter = vfn =>",
							"get: k =>",
							"set: (k, v) =>",
							"VfnDecorator = vfn =>",
							".memoize = function memoize(fn)",
							"(key, value) =>",
							"self = function(key, ...args)",
							"n =>",
							"(acc, n) =>",
							".GetClasses = function* GetClasses(obj)",
							" function Mapper(map = ",
							"())",
							"self = function(key, value)",
							"Mapper",
							"Mapper",
							"Mapper",
							" function DefaultConstructor(mapper, fn = (...args) => ",
							"(...args))",
							"self = function(...args)",
							"DefaultConstructor",
							"DefaultConstructor",
							"DefaultConstructor",
							" function EventLogger( instance = {}, callback = (name, event, thisObj) => console.log('EventLogger', { name, event, thisObj }) )",
							" function WrapEvent(handler, name)",
							" function(e)",
							"get(obj, prop)",
							"MessageReceiver",
							"onmessage(msg)",
							"MessageTransmitter",
							"sendMessage()",
							" function MessageTransceiver()",
							"MessageTransceiver",
							"MessageReceiver",
							"MessageTransmitter",
							"value: instance =>",
							"ctor =>",
							"none()",
							"encode: v =>",
							"decode: v =>",
							"json(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".js = function js(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".bjson = function bjson()",
							"encode: v =>",
							"decode: v =>",
							" function RPCApi(c)",
							"RPCApi",
							" o =>",
							" function RPCProxy(c)",
							" function RPCObject(id, connection)",
							"r =>",
							"RPCObject",
							" function RPCFactory(api)",
							"async function Factory(opts)",
							"RPCObject",
							"RPCFactory",
							"RPCFactory",
							"Connection",
							"static equal(a, b)",
							"static get last()",
							"makeSeq()",
							"constructor(socket, instance, log, codec = 'none')",
							"log(...args)",
							"error(message)",
							"close(...args)",
							"onmessage(msg)",
							"r =>",
							"processMessage(data)",
							"onconnect(sock)",
							"onpong(data)",
							"onerror(error)",
							"onclose(code, why)",
							"cleanup()",
							"sendMessage(obj)",
							"sendCommand(command, params = {})",
							"static getCallbacks(instance, verbosity = 0)",
							" (...args) =>",
							" () =>",
							"handle = (sock, event, ...args) =>",
							"then: fn =>",
							"remove = sock =>",
							"onConnect(sock)",
							"onOpen(sock)",
							"onMessage(sock, msg)",
							"onError(sock, error)",
							"onClose(sock, code, why)",
							"onPong(sock, data)",
							"Connection",
							"Connection",
							"function RPCServerEndpoint(classes = {})",
							"new({ class: name, args = [] })",
							"list()",
							"({ id }, respond) =>",
							"({ obj, method, args = [] }, respond) =>",
							"result =>",
							"error =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"sym =>",
							"v =>",
							"v =>",
							"({ obj, property }, respond) =>",
							"({ obj, property, value }, respond) =>",
							"RPCServer",
							"makeId()",
							"processMessage(data)",
							"RPCServer",
							"RPCClient",
							" e =>",
							" r =>",
							"() =>",
							"processMessage(response)",
							"command(name, params)",
							"(accept, reject) =>",
							" response =>",
							" e =>",
							"RPCClient",
							" function RPCSocket(url, service = RPCServer, verbosity = 1)",
							" (...args) =>",
							"get fd()",
							"get socket()",
							"get connection()",
							"register(ctor)",
							"listen(new_ws, os = globalThis.os)",
							"() =>",
							"async connect(new_ws, os = globalThis.os)",
							"get connected()",
							"get list()",
							"get last()",
							"RPCSocket",
							"function MakeWebSocket(url, callbacks)",
							".onconnect = () =>",
							".onopen = () =>",
							".onerror = error =>",
							".onmessage = msg =>",
							".onpong = pong =>",
							".onclose = reason =>",
							" function isThenable(value)",
							" function hasHandler(obj, eventName)",
							" function callHandler(obj, eventName, ...args)",
							" function parseURL(url_or_port)",
							"toString()",
							" function GetProperties( obj, method = obj => Object.",
							"(obj), pred = (obj, depth) => obj !== Object.prototype )",
							" function GetKeys(obj, pred = (obj, depth) => obj !== Object.prototype)",
							" obj =>",
							" obj =>",
							" function getPropertyDescriptors(obj, merge = true, pred = (proto, depth) => true)",
							" function define(obj, ...args)",
							" function setHandlers(os, handlers)",
							".onFd = function(fd, readable, writable)",
							" function statusResponse(success, result_or_error, data)",
							" function objectCommand(fn)",
							" function(data)",
							"respond = (success, result) =>",
							" function MakeListCommand( pred = v => typeof v != 'function', defaults = { maxDepth: Infinity } )",
							"(data, respond) =>",
							" (proto, depth) =>",
							"(acc, key) =>",
							" function getPrototypeName(proto)",
							"function DeserializeEntries(e)",
							"a =>",
							"function DeserializeKeys(e)",
							"([k]) =>",
							"function DeserializeMap(e)",
							"function DeserializeObject(e)",
							"function ForwardMethods(e, ret = {}, thisObj)",
							" o =>",
							"function ForwardObject(e, thisObj)",
							"function MakeCommandFunction(cmd, getConnection, thisObj, t)",
							"getConnection = obj =>",
							" function(params = {})",
							"(resolve, reject) =>",
							" r =>",
							"async function(params = {})",
							" function SerializeValue(value, source = false)",
							" function DeserializeSymbols(names)",
							"n =>",
							"n =>",
							" function DeserializeValue(desc)",
							"RPCConnect = (url, service = RPCClient) =>",
							"RPCListen = (url, service = RPCServer) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADDAQAAICBkZWZpbmUob2JqLCBwcm9wLCB2YWx1ZSkKICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQpFdmVudEVtaXR0ZXIKICBjb25zdHJ1Y3RvcigpCiAgb24oZXZlbnQsIGxpc3RlbmVyKQogIHJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcikKICByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkKICBvZmYoLi4uYXJncykKICBlbWl0KGV2ZW50LCAuLi5hcmdzKQogIG9uY2UoZXZlbnQsIGxpc3RlbmVyKQogIGl0ZXJhdG9yKHR5cGUpCiAgZXZlbnROYW1lcygpCiAgbGlzdGVuZXJDb3VudCh0eXBlKQogIGxpc3RlbmVycyh0eXBlKQogIHdhaXRGb3IodHlwZSkKRXZlbnRUYXJnZXQKICB0eXBlZExpc3RlbmVycyh0eXBlKQogIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpCiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikKICBkaXNwYXRjaEV2ZW50KHR5cGUsIGV2ZW50KQAAAAAAAAAA2QgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					747,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/events.js",
						"symkeys":
						[
							[
								62,
								93
							],
							[
								143,
								176
							],
							[
								336,
								368
							],
							[
								425,
								443
							],
							[
								495,
								513
							],
							[
								548,
								568
							],
							[
								617,
								629
							],
							[
								650,
								663
							],
							[
								744,
								763
							],
							[
								951,
								982
							],
							[
								1328,
								1352
							],
							[
								1495,
								1507
							],
							[
								1611,
								1631
							],
							[
								2034,
								2055
							],
							[
								2080,
								2095
							],
							[
								2216,
								2230
							],
							[
								2257,
								2278
							],
							[
								2459,
								2471
							],
							[
								2517,
								2536
							],
							[
								2582,
								2597
							],
							[
								2690,
								2703
							],
							[
								2716,
								2732
							],
							[
								2748,
								2753
							],
							[
								2805,
								2818
							],
							[
								2844,
								2864
							],
							[
								3090,
								3099
							],
							[
								3226,
								3237
							],
							[
								3399,
								3419
							],
							[
								3522,
								3554
							],
							[
								3785,
								3820
							],
							[
								4175,
								4201
							],
							[
								4868,
								4877
							],
							[
								4957,
								4976
							],
							[
								5023,
								5027
							],
							[
								5060,
								5071
							],
							[
								5118,
								5136
							]
						],
						"symlist":
						[
							"indexOf = (haystack, needle) =>",
							"function define(obj, prop, value)",
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"EventEmitter",
							"constructor()",
							"on(event, listener)",
							"removeListener(event, listener)",
							"removeAllListeners(type)",
							"off(...args)",
							"emit(event, ...args)",
							"once(event, listener)",
							"callback = e =>",
							"iterator(type)",
							"async (push, stop) =>",
							"eventNames()",
							"listenerCount(type)",
							"listeners(type)",
							"next: type =>",
							"async resolve =>",
							" e =>",
							"waitFor(type)",
							"(resolve, reject) =>",
							"method =>",
							"EventTarget",
							"typedListeners(type)",
							"addEventListener(type, listener)",
							"removeEventListener(type, listener)",
							"dispatchEvent(type, event)",
							"method =>",
							"getMethods = obj =>",
							"n =>",
							"(acc, n) =>",
							"eventify = self =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADZCAAAICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQogIC5tZW1vaXplID0gbWVtb2l6ZShmbikKICBzZWxmID0gKGtleSwgLi4uYXJncykKICAuR2V0Q2xhc3NlcyA9ICpHZXRDbGFzc2VzKG9iaikKTWFwcGVyKG1hcCA9IAogIHNlbGYgPSAoa2V5LCB2YWx1ZSkKTWFwcGVyCk1hcHBlcgpNYXBwZXIKICBzZWxmID0gKC4uLmFyZ3MpCkRlZmF1bHRDb25zdHJ1Y3RvcgpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCldyYXBFdmVudChoYW5kbGVyLCBuYW1lKQoJKGUpCiAgZ2V0KG9iaiwgcHJvcCkKTWVzc2FnZVJlY2VpdmVyCiAgb25tZXNzYWdlKG1zZykKTWVzc2FnZVRyYW5zbWl0dGVyCiAgc2VuZE1lc3NhZ2UoKQpNZXNzYWdlVHJhbnNjZWl2ZXIoKQpNZXNzYWdlVHJhbnNjZWl2ZXIKTWVzc2FnZVJlY2VpdmVyCk1lc3NhZ2VUcmFuc21pdHRlcgogIG5vbmUoKQogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIC5qcyA9IGpzKHZlcmJvc2UgPSBmYWxzZSkKICAuYmpzb24gPSBianNvbigpClJQQ0FwaShjKQpSUENBcGkKUlBDUHJveHkoYykKUlBDT2JqZWN0KGlkLCBjb25uZWN0aW9uKQpSUENPYmplY3QKUlBDRmFjdG9yeShhcGkpCkZhY3Rvcnkob3B0cykKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkKUlBDRmFjdG9yeQpDb25uZWN0aW9uCiAgc3RhdGljIGVxdWFsKGEsIGIpCiAgc3RhdGljIGdldCBsYXN0KCkKICBtYWtlU2VxKCkKICBjb25zdHJ1Y3Rvcihzb2NrZXQsIGluc3RhbmNlLCBsb2csIGNvZGVjID0gJ25vbmUnKQogIGxvZyguLi5hcmdzKQogIGVycm9yKG1lc3NhZ2UpCiAgY2xvc2UoLi4uYXJncykKICBvbm1lc3NhZ2UobXNnKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICBvbkNvbm5lY3Qoc29jaykKICBvbk9wZW4oc29jaykKICBvbk1lc3NhZ2Uoc29jaywgbXNnKQogIG9uRXJyb3Ioc29jaywgZXJyb3IpCiAgb25DbG9zZShzb2NrLCBjb2RlLCB3aHkpCiAgb25Qb25nKHNvY2ssIGRhdGEpCkNvbm5lY3Rpb24KQ29ubmVjdGlvbgpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQpSUENTZXJ2ZXIKICBtYWtlSWQoKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpClJQQ1NlcnZlcgpSUENDbGllbnQKICBwcm9jZXNzTWVzc2FnZShyZXNwb25zZSkKICBjb21tYW5kKG5hbWUsIHBhcmFtcykKUlBDQ2xpZW50ClJQQ1NvY2tldCh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIsIHZlcmJvc2l0eSA9IDEpCiAgZ2V0IGZkKCkKICBnZXQgc29ja2V0KCkKICBnZXQgY29ubmVjdGlvbigpCiAgcmVnaXN0ZXIoY3RvcikKICBsaXN0ZW4obmV3X3dzLCBvcyA9IGdsb2JhbFRoaXMub3MpCiAgY29ubmVjdChuZXdfd3MsIG9zID0gZ2xvYmFsVGhpcy5vcykKICBnZXQgY29ubmVjdGVkKCkKICBnZXQgbGlzdCgpCiAgZ2V0IGxhc3QoKQpSUENTb2NrZXQKTWFrZVdlYlNvY2tldCh1cmwsIGNhbGxiYWNrcykKCWlzVGhlbmFibGUodmFsdWUpCgloYXNIYW5kbGVyKG9iaiwgZXZlbnROYW1lKQoJY2FsbEhhbmRsZXIob2JqLCBldmVudE5hbWUsIC4uLmFyZ3MpCglwYXJzZVVSTCh1cmxfb3JfcG9ydCkKICB0b1N0cmluZygpCglkZWZpbmUob2JqLCAuLi5hcmdzKQoJc2V0SGFuZGxlcnMob3MsIGhhbmRsZXJzKQogIC5vbkZkID0gKGZkLCByZWFkYWJsZSwgd3JpdGFibGUpCglzdGF0dXNSZXNwb25zZShzdWNjZXNzLCByZXN1bHRfb3JfZXJyb3IsIGRhdGEpCglvYmplY3RDb21tYW5kKGZuKQoJKGRhdGEpCglnZXRQcm90b3R5cGVOYW1lKHByb3RvKQpEZXNlcmlhbGl6ZUVudHJpZXMoZSkKRGVzZXJpYWxpemVLZXlzKGUpCkRlc2VyaWFsaXplTWFwKGUpCkRlc2VyaWFsaXplT2JqZWN0KGUpCkZvcndhcmRNZXRob2RzKGUsIHJldCA9IHt9LCB0aGlzT2JqKQpGb3J3YXJkT2JqZWN0KGUsIHRoaXNPYmopCk1ha2VDb21tYW5kRnVuY3Rpb24oY21kLCBnZXRDb25uZWN0aW9uLCB0aGlzT2JqLCB0KQoJKHBhcmFtcyA9IHt9KQoocGFyYW1zID0ge30pClNlcmlhbGl6ZVZhbHVlKHZhbHVlLCBzb3VyY2UgPSBmYWxzZSkKRGVzZXJpYWxpemVTeW1ib2xzKG5hbWVzKQpEZXNlcmlhbGl6ZVZhbHVlKGRlc2MpAAAAAAAAAADDAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					748,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/net/rpc.js",
						"symkeys":
						[
							[
								426,
								458
							],
							[
								515,
								533
							],
							[
								585,
								603
							],
							[
								638,
								658
							],
							[
								707,
								726
							],
							[
								732,
								741
							],
							[
								752,
								766
							],
							[
								795,
								816
							],
							[
								882,
								913
							],
							[
								971,
								986
							],
							[
								1058,
								1087
							],
							[
								1504,
								1508
							],
							[
								1537,
								1548
							],
							[
								1635,
								1674
							],
							[
								1887,
								1910
							],
							[
								1921,
								1924
							],
							[
								1941,
								1968
							],
							[
								2111,
								2117
							],
							[
								2132,
								2138
							],
							[
								2167,
								2173
							],
							[
								2213,
								2268
							],
							[
								2278,
								2288
							],
							[
								2305,
								2329
							],
							[
								2605,
								2623
							],
							[
								2638,
								2656
							],
							[
								2685,
								2703
							],
							[
								2755,
								2888
							],
							[
								2891,
								2926
							],
							[
								2939,
								2951
							],
							[
								3039,
								3053
							],
							[
								3236,
								3251
							],
							[
								3379,
								3393
							],
							[
								3517,
								3535
							],
							[
								3650,
								3663
							],
							[
								3841,
								3871
							],
							[
								3893,
								3911
							],
							[
								3925,
								3940
							],
							[
								3954,
								3972
							],
							[
								4053,
								4071
							],
							[
								4120,
								4127
							],
							[
								4188,
								4194
							],
							[
								4236,
								4248
							],
							[
								4258,
								4270
							],
							[
								4287,
								4308
							],
							[
								4350,
								4362
							],
							[
								4419,
								4431
							],
							[
								4494,
								4528
							],
							[
								4568,
								4580
							],
							[
								4649,
								4661
							],
							[
								4723,
								4748
							],
							[
								4791,
								4803
							],
							[
								4826,
								4838
							],
							[
								4874,
								4893
							],
							[
								5126,
								5132
							],
							[
								5174,
								5179
							],
							[
								5202,
								5223
							],
							[
								5341,
								5376
							],
							[
								5492,
								5496
							],
							[
								5523,
								5532
							],
							[
								5585,
								5610
							],
							[
								5615,
								5643
							],
							[
								5873,
								5882
							],
							[
								5983,
								5993
							],
							[
								6023,
								6033
							],
							[
								6127,
								6137
							],
							[
								6223,
								6241
							],
							[
								6366,
								6383
							],
							[
								6420,
								6429
							],
							[
								6466,
								6516
							],
							[
								6633,
								6645
							],
							[
								7119,
								7133
							],
							[
								7359,
								7373
							],
							[
								7545,
								7559
							],
							[
								8173,
								8177
							],
							[
								8271,
								8291
							],
							[
								8397,
								8412
							],
							[
								8590,
								8602
							],
							[
								8657,
								8671
							],
							[
								8796,
								8814
							],
							[
								8941,
								8950
							],
							[
								9040,
								9056
							],
							[
								9426,
								9459
							],
							[
								9975,
								10019
							],
							[
								10141,
								10154
							],
							[
								10224,
								10230
							],
							[
								10315,
								10349
							],
							[
								10605,
								10616
							],
							[
								10674,
								10690
							],
							[
								10771,
								10786
							],
							[
								11137,
								11149
							],
							[
								11367,
								11387
							],
							[
								11482,
								11502
							],
							[
								11666,
								11690
							],
							[
								11816,
								11834
							],
							[
								11939,
								11949
							],
							[
								12013,
								12023
							],
							[
								12084,
								12124
							],
							[
								12142,
								12173
							],
							[
								12503,
								12509
							],
							[
								12674,
								12694
							],
							[
								12790,
								12830
							],
							[
								13000,
								13009
							],
							[
								13039,
								13047
							],
							[
								13225,
								13265
							],
							[
								13364,
								13371
							],
							[
								13390,
								13397
							],
							[
								13482,
								13522
							],
							[
								13587,
								13594
							],
							[
								13672,
								13712
							],
							[
								13777,
								13784
							],
							[
								13824,
								13830
							],
							[
								13897,
								13901
							],
							[
								13956,
								13960
							],
							[
								14032,
								14063
							],
							[
								14326,
								14364
							],
							[
								14448,
								14457
							],
							[
								14933,
								14941
							],
							[
								14977,
								14997
							],
							[
								15578,
								15587
							],
							[
								15897,
								15906
							],
							[
								16306,
								16311
							],
							[
								16367,
								16372
							],
							[
								16471,
								16476
							],
							[
								16508,
								16532
							],
							[
								16785,
								16806
							],
							[
								16832,
								16851
							],
							[
								16881,
								16893
							],
							[
								16937,
								16942
							],
							[
								17016,
								17025
							],
							[
								17333,
								17393
							],
							[
								18000,
								18013
							],
							[
								18185,
								18193
							],
							[
								18311,
								18323
							],
							[
								18377,
								18393
							],
							[
								18716,
								18730
							],
							[
								18950,
								18984
							],
							[
								19283,
								19288
							],
							[
								19383,
								19424
							],
							[
								19718,
								19733
							],
							[
								20194,
								20204
							],
							[
								20241,
								20251
							],
							[
								20320,
								20329
							],
							[
								20387,
								20425
							],
							[
								20558,
								20576
							],
							[
								20606,
								20621
							],
							[
								20648,
								20667
							],
							[
								20702,
								20721
							],
							[
								20756,
								20773
							],
							[
								20806,
								20826
							],
							[
								20918,
								20945
							],
							[
								21044,
								21080
							],
							[
								21238,
								21284
							],
							[
								21383,
								21414
							],
							[
								21983,
								21993
							],
							[
								22127,
								22184
							],
							[
								22203,
								22261
							],
							[
								22580,
								22651
							],
							[
								22713,
								22720
							],
							[
								22811,
								22818
							],
							[
								22905,
								22987
							],
							[
								23534,
								23564
							],
							[
								23932,
								23967
							],
							[
								23980,
								24020
							],
							[
								24199,
								24255
							],
							[
								24484,
								24511
							],
							[
								24522,
								24537
							],
							[
								24550,
								24580
							],
							[
								24837,
								24939
							],
							[
								24965,
								24983
							],
							[
								25279,
								25302
							],
							[
								25410,
								25423
							],
							[
								26032,
								26065
							],
							[
								26134,
								26164
							],
							[
								26203,
								26207
							],
							[
								26294,
								26321
							],
							[
								26360,
								26368
							],
							[
								26448,
								26474
							],
							[
								26520,
								26549
							],
							[
								26606,
								26651
							],
							[
								26751,
								26756
							],
							[
								26856,
								26890
							],
							[
								27007,
								27067
							],
							[
								27286,
								27308
							],
							[
								27480,
								27502
							],
							[
								27600,
								27620
							],
							[
								27652,
								27657
							],
							[
								27786,
								27813
							],
							[
								28045,
								28092
							],
							[
								28910,
								28945
							],
							[
								28967,
								28971
							],
							[
								29003,
								29007
							],
							[
								29029,
								29061
							],
							[
								29195,
								29237
							],
							[
								29290,
								29331
							]
						],
						"symlist":
						[
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"VfnAdapter = vfn =>",
							"get: k =>",
							"set: (k, v) =>",
							"VfnDecorator = vfn =>",
							".memoize = function memoize(fn)",
							"(key, value) =>",
							"self = function(key, ...args)",
							"n =>",
							"(acc, n) =>",
							".GetClasses = function* GetClasses(obj)",
							" function Mapper(map = ",
							"())",
							"self = function(key, value)",
							"Mapper",
							"Mapper",
							"Mapper",
							" function DefaultConstructor(mapper, fn = (...args) => ",
							"(...args))",
							"self = function(...args)",
							"DefaultConstructor",
							"DefaultConstructor",
							"DefaultConstructor",
							" function EventLogger( instance = {}, callback = (name, event, thisObj) => console.log('EventLogger', { name, event, thisObj }) )",
							" function WrapEvent(handler, name)",
							" function(e)",
							"get(obj, prop)",
							"MessageReceiver",
							"onmessage(msg)",
							"MessageTransmitter",
							"sendMessage()",
							" function MessageTransceiver()",
							"MessageTransceiver",
							"MessageReceiver",
							"MessageTransmitter",
							"value: instance =>",
							"ctor =>",
							"none()",
							"encode: v =>",
							"decode: v =>",
							"json(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".js = function js(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".bjson = function bjson()",
							"encode: v =>",
							"decode: v =>",
							" function RPCApi(c)",
							"RPCApi",
							" o =>",
							" function RPCProxy(c)",
							" function RPCObject(id, connection)",
							"r =>",
							"RPCObject",
							" function RPCFactory(api)",
							"async function Factory(opts)",
							"RPCObject",
							"RPCFactory",
							"RPCFactory",
							"Connection",
							"static equal(a, b)",
							"static get last()",
							"makeSeq()",
							"constructor(socket, instance, log, codec = 'none')",
							"log(...args)",
							"error(message)",
							"close(...args)",
							"onmessage(msg)",
							"r =>",
							"processMessage(data)",
							"onconnect(sock)",
							"onpong(data)",
							"onerror(error)",
							"onclose(code, why)",
							"cleanup()",
							"sendMessage(obj)",
							"sendCommand(command, params = {})",
							"static getCallbacks(instance, verbosity = 0)",
							" (...args) =>",
							" () =>",
							"handle = (sock, event, ...args) =>",
							"then: fn =>",
							"remove = sock =>",
							"onConnect(sock)",
							"onOpen(sock)",
							"onMessage(sock, msg)",
							"onError(sock, error)",
							"onClose(sock, code, why)",
							"onPong(sock, data)",
							"Connection",
							"Connection",
							"function RPCServerEndpoint(classes = {})",
							"new({ class: name, args = [] })",
							"list()",
							"({ id }, respond) =>",
							"({ obj, method, args = [] }, respond) =>",
							"result =>",
							"error =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"sym =>",
							"v =>",
							"v =>",
							"({ obj, property }, respond) =>",
							"({ obj, property, value }, respond) =>",
							"RPCServer",
							"makeId()",
							"processMessage(data)",
							"RPCServer",
							"RPCClient",
							" e =>",
							" r =>",
							"() =>",
							"processMessage(response)",
							"command(name, params)",
							"(accept, reject) =>",
							" response =>",
							" e =>",
							"RPCClient",
							" function RPCSocket(url, service = RPCServer, verbosity = 1)",
							" (...args) =>",
							"get fd()",
							"get socket()",
							"get connection()",
							"register(ctor)",
							"listen(new_ws, os = globalThis.os)",
							"() =>",
							"async connect(new_ws, os = globalThis.os)",
							"get connected()",
							"get list()",
							"get last()",
							"RPCSocket",
							"function MakeWebSocket(url, callbacks)",
							".onconnect = () =>",
							".onopen = () =>",
							".onerror = error =>",
							".onmessage = msg =>",
							".onpong = pong =>",
							".onclose = reason =>",
							" function isThenable(value)",
							" function hasHandler(obj, eventName)",
							" function callHandler(obj, eventName, ...args)",
							" function parseURL(url_or_port)",
							"toString()",
							" function GetProperties( obj, method = obj => Object.",
							"(obj), pred = (obj, depth) => obj !== Object.prototype )",
							" function GetKeys(obj, pred = (obj, depth) => obj !== Object.prototype)",
							" obj =>",
							" obj =>",
							" function getPropertyDescriptors(obj, merge = true, pred = (proto, depth) => true)",
							" function define(obj, ...args)",
							" function setHandlers(os, handlers)",
							".onFd = function(fd, readable, writable)",
							" function statusResponse(success, result_or_error, data)",
							" function objectCommand(fn)",
							" function(data)",
							"respond = (success, result) =>",
							" function MakeListCommand( pred = v => typeof v != 'function', defaults = { maxDepth: Infinity } )",
							"(data, respond) =>",
							" (proto, depth) =>",
							"(acc, key) =>",
							" function getPrototypeName(proto)",
							"function DeserializeEntries(e)",
							"a =>",
							"function DeserializeKeys(e)",
							"([k]) =>",
							"function DeserializeMap(e)",
							"function DeserializeObject(e)",
							"function ForwardMethods(e, ret = {}, thisObj)",
							" o =>",
							"function ForwardObject(e, thisObj)",
							"function MakeCommandFunction(cmd, getConnection, thisObj, t)",
							"getConnection = obj =>",
							" function(params = {})",
							"(resolve, reject) =>",
							" r =>",
							"async function(params = {})",
							" function SerializeValue(value, source = false)",
							" function DeserializeSymbols(names)",
							"n =>",
							"n =>",
							" function DeserializeValue(desc)",
							"RPCConnect = (url, service = RPCClient) =>",
							"RPCListen = (url, service = RPCServer) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADDAQAAICBkZWZpbmUob2JqLCBwcm9wLCB2YWx1ZSkKICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQpFdmVudEVtaXR0ZXIKICBjb25zdHJ1Y3RvcigpCiAgb24oZXZlbnQsIGxpc3RlbmVyKQogIHJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcikKICByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkKICBvZmYoLi4uYXJncykKICBlbWl0KGV2ZW50LCAuLi5hcmdzKQogIG9uY2UoZXZlbnQsIGxpc3RlbmVyKQogIGl0ZXJhdG9yKHR5cGUpCiAgZXZlbnROYW1lcygpCiAgbGlzdGVuZXJDb3VudCh0eXBlKQogIGxpc3RlbmVycyh0eXBlKQogIHdhaXRGb3IodHlwZSkKRXZlbnRUYXJnZXQKICB0eXBlZExpc3RlbmVycyh0eXBlKQogIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpCiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikKICBkaXNwYXRjaEV2ZW50KHR5cGUsIGV2ZW50KQAAAAAAAAAA2QgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					753,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/net/rpc.js",
						"symkeys":
						[
							[
								426,
								458
							],
							[
								515,
								533
							],
							[
								585,
								603
							],
							[
								638,
								658
							],
							[
								707,
								726
							],
							[
								732,
								741
							],
							[
								752,
								766
							],
							[
								795,
								816
							],
							[
								882,
								913
							],
							[
								971,
								986
							],
							[
								1058,
								1087
							],
							[
								1504,
								1508
							],
							[
								1537,
								1548
							],
							[
								1635,
								1674
							],
							[
								1887,
								1910
							],
							[
								1921,
								1924
							],
							[
								1941,
								1968
							],
							[
								2111,
								2117
							],
							[
								2132,
								2138
							],
							[
								2167,
								2173
							],
							[
								2213,
								2268
							],
							[
								2278,
								2288
							],
							[
								2305,
								2329
							],
							[
								2605,
								2623
							],
							[
								2638,
								2656
							],
							[
								2685,
								2703
							],
							[
								2755,
								2888
							],
							[
								2891,
								2926
							],
							[
								2939,
								2951
							],
							[
								3039,
								3053
							],
							[
								3236,
								3251
							],
							[
								3379,
								3393
							],
							[
								3517,
								3535
							],
							[
								3650,
								3663
							],
							[
								3841,
								3871
							],
							[
								3893,
								3911
							],
							[
								3925,
								3940
							],
							[
								3954,
								3972
							],
							[
								4053,
								4071
							],
							[
								4120,
								4127
							],
							[
								4188,
								4194
							],
							[
								4236,
								4248
							],
							[
								4258,
								4270
							],
							[
								4287,
								4308
							],
							[
								4350,
								4362
							],
							[
								4419,
								4431
							],
							[
								4494,
								4528
							],
							[
								4568,
								4580
							],
							[
								4649,
								4661
							],
							[
								4723,
								4748
							],
							[
								4791,
								4803
							],
							[
								4826,
								4838
							],
							[
								4874,
								4893
							],
							[
								5126,
								5132
							],
							[
								5174,
								5179
							],
							[
								5202,
								5223
							],
							[
								5341,
								5376
							],
							[
								5492,
								5496
							],
							[
								5523,
								5532
							],
							[
								5585,
								5610
							],
							[
								5615,
								5643
							],
							[
								5873,
								5882
							],
							[
								5983,
								5993
							],
							[
								6023,
								6033
							],
							[
								6127,
								6137
							],
							[
								6223,
								6241
							],
							[
								6366,
								6383
							],
							[
								6420,
								6429
							],
							[
								6466,
								6516
							],
							[
								6633,
								6645
							],
							[
								7119,
								7133
							],
							[
								7359,
								7373
							],
							[
								7545,
								7559
							],
							[
								8173,
								8177
							],
							[
								8271,
								8291
							],
							[
								8397,
								8412
							],
							[
								8590,
								8602
							],
							[
								8657,
								8671
							],
							[
								8796,
								8814
							],
							[
								8941,
								8950
							],
							[
								9040,
								9056
							],
							[
								9426,
								9459
							],
							[
								9975,
								10019
							],
							[
								10141,
								10154
							],
							[
								10224,
								10230
							],
							[
								10315,
								10349
							],
							[
								10605,
								10616
							],
							[
								10674,
								10690
							],
							[
								10771,
								10786
							],
							[
								11137,
								11149
							],
							[
								11367,
								11387
							],
							[
								11482,
								11502
							],
							[
								11666,
								11690
							],
							[
								11816,
								11834
							],
							[
								11939,
								11949
							],
							[
								12013,
								12023
							],
							[
								12084,
								12124
							],
							[
								12142,
								12173
							],
							[
								12503,
								12509
							],
							[
								12674,
								12694
							],
							[
								12790,
								12830
							],
							[
								13000,
								13009
							],
							[
								13039,
								13047
							],
							[
								13225,
								13265
							],
							[
								13364,
								13371
							],
							[
								13390,
								13397
							],
							[
								13482,
								13522
							],
							[
								13587,
								13594
							],
							[
								13672,
								13712
							],
							[
								13777,
								13784
							],
							[
								13824,
								13830
							],
							[
								13897,
								13901
							],
							[
								13956,
								13960
							],
							[
								14032,
								14063
							],
							[
								14326,
								14364
							],
							[
								14448,
								14457
							],
							[
								14933,
								14941
							],
							[
								14977,
								14997
							],
							[
								15578,
								15587
							],
							[
								15897,
								15906
							],
							[
								16306,
								16311
							],
							[
								16473,
								16478
							],
							[
								16510,
								16534
							],
							[
								16787,
								16808
							],
							[
								16834,
								16853
							],
							[
								16883,
								16895
							],
							[
								16939,
								16944
							],
							[
								17018,
								17027
							],
							[
								17335,
								17395
							],
							[
								18002,
								18015
							],
							[
								18187,
								18195
							],
							[
								18313,
								18325
							],
							[
								18379,
								18395
							],
							[
								18718,
								18732
							],
							[
								18952,
								18986
							],
							[
								19285,
								19290
							],
							[
								19385,
								19426
							],
							[
								19720,
								19735
							],
							[
								20196,
								20206
							],
							[
								20243,
								20253
							],
							[
								20322,
								20331
							],
							[
								20389,
								20427
							],
							[
								20560,
								20578
							],
							[
								20608,
								20623
							],
							[
								20650,
								20669
							],
							[
								20704,
								20723
							],
							[
								20758,
								20775
							],
							[
								20808,
								20828
							],
							[
								20920,
								20947
							],
							[
								21046,
								21082
							],
							[
								21240,
								21286
							],
							[
								21385,
								21416
							],
							[
								21985,
								21995
							],
							[
								22129,
								22186
							],
							[
								22205,
								22263
							],
							[
								22582,
								22653
							],
							[
								22715,
								22722
							],
							[
								22813,
								22820
							],
							[
								22907,
								22989
							],
							[
								23536,
								23566
							],
							[
								23934,
								23969
							],
							[
								23982,
								24022
							],
							[
								24201,
								24257
							],
							[
								24486,
								24513
							],
							[
								24524,
								24539
							],
							[
								24552,
								24582
							],
							[
								24839,
								24941
							],
							[
								24967,
								24985
							],
							[
								25281,
								25304
							],
							[
								25412,
								25425
							],
							[
								26034,
								26067
							],
							[
								26136,
								26166
							],
							[
								26205,
								26209
							],
							[
								26296,
								26323
							],
							[
								26362,
								26370
							],
							[
								26450,
								26476
							],
							[
								26522,
								26551
							],
							[
								26608,
								26653
							],
							[
								26753,
								26758
							],
							[
								26858,
								26892
							],
							[
								27009,
								27069
							],
							[
								27288,
								27310
							],
							[
								27482,
								27504
							],
							[
								27602,
								27622
							],
							[
								27654,
								27659
							],
							[
								27788,
								27815
							],
							[
								28047,
								28094
							],
							[
								28912,
								28947
							],
							[
								28969,
								28973
							],
							[
								29005,
								29009
							],
							[
								29031,
								29063
							],
							[
								29197,
								29239
							],
							[
								29292,
								29333
							]
						],
						"symlist":
						[
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"VfnAdapter = vfn =>",
							"get: k =>",
							"set: (k, v) =>",
							"VfnDecorator = vfn =>",
							".memoize = function memoize(fn)",
							"(key, value) =>",
							"self = function(key, ...args)",
							"n =>",
							"(acc, n) =>",
							".GetClasses = function* GetClasses(obj)",
							" function Mapper(map = ",
							"())",
							"self = function(key, value)",
							"Mapper",
							"Mapper",
							"Mapper",
							" function DefaultConstructor(mapper, fn = (...args) => ",
							"(...args))",
							"self = function(...args)",
							"DefaultConstructor",
							"DefaultConstructor",
							"DefaultConstructor",
							" function EventLogger( instance = {}, callback = (name, event, thisObj) => console.log('EventLogger', { name, event, thisObj }) )",
							" function WrapEvent(handler, name)",
							" function(e)",
							"get(obj, prop)",
							"MessageReceiver",
							"onmessage(msg)",
							"MessageTransmitter",
							"sendMessage()",
							" function MessageTransceiver()",
							"MessageTransceiver",
							"MessageReceiver",
							"MessageTransmitter",
							"value: instance =>",
							"ctor =>",
							"none()",
							"encode: v =>",
							"decode: v =>",
							"json(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".js = function js(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".bjson = function bjson()",
							"encode: v =>",
							"decode: v =>",
							" function RPCApi(c)",
							"RPCApi",
							" o =>",
							" function RPCProxy(c)",
							" function RPCObject(id, connection)",
							"r =>",
							"RPCObject",
							" function RPCFactory(api)",
							"async function Factory(opts)",
							"RPCObject",
							"RPCFactory",
							"RPCFactory",
							"Connection",
							"static equal(a, b)",
							"static get last()",
							"makeSeq()",
							"constructor(socket, instance, log, codec = 'none')",
							"log(...args)",
							"error(message)",
							"close(...args)",
							"onmessage(msg)",
							"r =>",
							"processMessage(data)",
							"onconnect(sock)",
							"onpong(data)",
							"onerror(error)",
							"onclose(code, why)",
							"cleanup()",
							"sendMessage(obj)",
							"sendCommand(command, params = {})",
							"static getCallbacks(instance, verbosity = 0)",
							" (...args) =>",
							" () =>",
							"handle = (sock, event, ...args) =>",
							"then: fn =>",
							"remove = sock =>",
							"onConnect(sock)",
							"onOpen(sock)",
							"onMessage(sock, msg)",
							"onError(sock, error)",
							"onClose(sock, code, why)",
							"onPong(sock, data)",
							"Connection",
							"Connection",
							"function RPCServerEndpoint(classes = {})",
							"new({ class: name, args = [] })",
							"list()",
							"({ id }, respond) =>",
							"({ obj, method, args = [] }, respond) =>",
							"result =>",
							"error =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"sym =>",
							"v =>",
							"v =>",
							"({ obj, property }, respond) =>",
							"({ obj, property, value }, respond) =>",
							"RPCServer",
							"makeId()",
							"processMessage(data)",
							"RPCServer",
							"RPCClient",
							" e =>",
							"() =>",
							"processMessage(response)",
							"command(name, params)",
							"(accept, reject) =>",
							" response =>",
							" e =>",
							"RPCClient",
							" function RPCSocket(url, service = RPCServer, verbosity = 1)",
							" (...args) =>",
							"get fd()",
							"get socket()",
							"get connection()",
							"register(ctor)",
							"listen(new_ws, os = globalThis.os)",
							"() =>",
							"async connect(new_ws, os = globalThis.os)",
							"get connected()",
							"get list()",
							"get last()",
							"RPCSocket",
							"function MakeWebSocket(url, callbacks)",
							".onconnect = () =>",
							".onopen = () =>",
							".onerror = error =>",
							".onmessage = msg =>",
							".onpong = pong =>",
							".onclose = reason =>",
							" function isThenable(value)",
							" function hasHandler(obj, eventName)",
							" function callHandler(obj, eventName, ...args)",
							" function parseURL(url_or_port)",
							"toString()",
							" function GetProperties( obj, method = obj => Object.",
							"(obj), pred = (obj, depth) => obj !== Object.prototype )",
							" function GetKeys(obj, pred = (obj, depth) => obj !== Object.prototype)",
							" obj =>",
							" obj =>",
							" function getPropertyDescriptors(obj, merge = true, pred = (proto, depth) => true)",
							" function define(obj, ...args)",
							" function setHandlers(os, handlers)",
							".onFd = function(fd, readable, writable)",
							" function statusResponse(success, result_or_error, data)",
							" function objectCommand(fn)",
							" function(data)",
							"respond = (success, result) =>",
							" function MakeListCommand( pred = v => typeof v != 'function', defaults = { maxDepth: Infinity } )",
							"(data, respond) =>",
							" (proto, depth) =>",
							"(acc, key) =>",
							" function getPrototypeName(proto)",
							"function DeserializeEntries(e)",
							"a =>",
							"function DeserializeKeys(e)",
							"([k]) =>",
							"function DeserializeMap(e)",
							"function DeserializeObject(e)",
							"function ForwardMethods(e, ret = {}, thisObj)",
							" o =>",
							"function ForwardObject(e, thisObj)",
							"function MakeCommandFunction(cmd, getConnection, thisObj, t)",
							"getConnection = obj =>",
							" function(params = {})",
							"(resolve, reject) =>",
							" r =>",
							"async function(params = {})",
							" function SerializeValue(value, source = false)",
							" function DeserializeSymbols(names)",
							"n =>",
							"n =>",
							" function DeserializeValue(desc)",
							"RPCConnect = (url, service = RPCClient) =>",
							"RPCListen = (url, service = RPCServer) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADZCAAAICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQogIC5tZW1vaXplID0gbWVtb2l6ZShmbikKICBzZWxmID0gKGtleSwgLi4uYXJncykKICAuR2V0Q2xhc3NlcyA9ICpHZXRDbGFzc2VzKG9iaikKTWFwcGVyKG1hcCA9IAogIHNlbGYgPSAoa2V5LCB2YWx1ZSkKTWFwcGVyCk1hcHBlcgpNYXBwZXIKICBzZWxmID0gKC4uLmFyZ3MpCkRlZmF1bHRDb25zdHJ1Y3RvcgpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCldyYXBFdmVudChoYW5kbGVyLCBuYW1lKQoJKGUpCiAgZ2V0KG9iaiwgcHJvcCkKTWVzc2FnZVJlY2VpdmVyCiAgb25tZXNzYWdlKG1zZykKTWVzc2FnZVRyYW5zbWl0dGVyCiAgc2VuZE1lc3NhZ2UoKQpNZXNzYWdlVHJhbnNjZWl2ZXIoKQpNZXNzYWdlVHJhbnNjZWl2ZXIKTWVzc2FnZVJlY2VpdmVyCk1lc3NhZ2VUcmFuc21pdHRlcgogIG5vbmUoKQogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIC5qcyA9IGpzKHZlcmJvc2UgPSBmYWxzZSkKICAuYmpzb24gPSBianNvbigpClJQQ0FwaShjKQpSUENBcGkKUlBDUHJveHkoYykKUlBDT2JqZWN0KGlkLCBjb25uZWN0aW9uKQpSUENPYmplY3QKUlBDRmFjdG9yeShhcGkpCkZhY3Rvcnkob3B0cykKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkKUlBDRmFjdG9yeQpDb25uZWN0aW9uCiAgc3RhdGljIGVxdWFsKGEsIGIpCiAgc3RhdGljIGdldCBsYXN0KCkKICBtYWtlU2VxKCkKICBjb25zdHJ1Y3Rvcihzb2NrZXQsIGluc3RhbmNlLCBsb2csIGNvZGVjID0gJ25vbmUnKQogIGxvZyguLi5hcmdzKQogIGVycm9yKG1lc3NhZ2UpCiAgY2xvc2UoLi4uYXJncykKICBvbm1lc3NhZ2UobXNnKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICBvbkNvbm5lY3Qoc29jaykKICBvbk9wZW4oc29jaykKICBvbk1lc3NhZ2Uoc29jaywgbXNnKQogIG9uRXJyb3Ioc29jaywgZXJyb3IpCiAgb25DbG9zZShzb2NrLCBjb2RlLCB3aHkpCiAgb25Qb25nKHNvY2ssIGRhdGEpCkNvbm5lY3Rpb24KQ29ubmVjdGlvbgpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQpSUENTZXJ2ZXIKICBtYWtlSWQoKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpClJQQ1NlcnZlcgpSUENDbGllbnQKICBwcm9jZXNzTWVzc2FnZShyZXNwb25zZSkKICBjb21tYW5kKG5hbWUsIHBhcmFtcykKUlBDQ2xpZW50ClJQQ1NvY2tldCh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIsIHZlcmJvc2l0eSA9IDEpCiAgZ2V0IGZkKCkKICBnZXQgc29ja2V0KCkKICBnZXQgY29ubmVjdGlvbigpCiAgcmVnaXN0ZXIoY3RvcikKICBsaXN0ZW4obmV3X3dzLCBvcyA9IGdsb2JhbFRoaXMub3MpCiAgY29ubmVjdChuZXdfd3MsIG9zID0gZ2xvYmFsVGhpcy5vcykKICBnZXQgY29ubmVjdGVkKCkKICBnZXQgbGlzdCgpCiAgZ2V0IGxhc3QoKQpSUENTb2NrZXQKTWFrZVdlYlNvY2tldCh1cmwsIGNhbGxiYWNrcykKCWlzVGhlbmFibGUodmFsdWUpCgloYXNIYW5kbGVyKG9iaiwgZXZlbnROYW1lKQoJY2FsbEhhbmRsZXIob2JqLCBldmVudE5hbWUsIC4uLmFyZ3MpCglwYXJzZVVSTCh1cmxfb3JfcG9ydCkKICB0b1N0cmluZygpCglkZWZpbmUob2JqLCAuLi5hcmdzKQoJc2V0SGFuZGxlcnMob3MsIGhhbmRsZXJzKQogIC5vbkZkID0gKGZkLCByZWFkYWJsZSwgd3JpdGFibGUpCglzdGF0dXNSZXNwb25zZShzdWNjZXNzLCByZXN1bHRfb3JfZXJyb3IsIGRhdGEpCglvYmplY3RDb21tYW5kKGZuKQoJKGRhdGEpCglnZXRQcm90b3R5cGVOYW1lKHByb3RvKQpEZXNlcmlhbGl6ZUVudHJpZXMoZSkKRGVzZXJpYWxpemVLZXlzKGUpCkRlc2VyaWFsaXplTWFwKGUpCkRlc2VyaWFsaXplT2JqZWN0KGUpCkZvcndhcmRNZXRob2RzKGUsIHJldCA9IHt9LCB0aGlzT2JqKQpGb3J3YXJkT2JqZWN0KGUsIHRoaXNPYmopCk1ha2VDb21tYW5kRnVuY3Rpb24oY21kLCBnZXRDb25uZWN0aW9uLCB0aGlzT2JqLCB0KQoJKHBhcmFtcyA9IHt9KQoocGFyYW1zID0ge30pClNlcmlhbGl6ZVZhbHVlKHZhbHVlLCBzb3VyY2UgPSBmYWxzZSkKRGVzZXJpYWxpemVTeW1ib2xzKG5hbWVzKQpEZXNlcmlhbGl6ZVZhbHVlKGRlc2MpAAAAAAAAAADZCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2QgAACAgLkxvZ1dyYXAgPSBMb2dXcmFwKGxvZykKICAubWVtb2l6ZSA9IG1lbW9pemUoZm4pCiAgc2VsZiA9IChrZXksIC4uLmFyZ3MpCiAgLkdldENsYXNzZXMgPSAqR2V0Q2xhc3NlcyhvYmopCk1hcHBlcihtYXAgPSAKICBzZWxmID0gKGtleSwgdmFsdWUpCk1hcHBlcgpNYXBwZXIKTWFwcGVyCiAgc2VsZiA9ICguLi5hcmdzKQpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCkRlZmF1bHRDb25zdHJ1Y3RvcgpXcmFwRXZlbnQoaGFuZGxlciwgbmFtZSkKCShlKQogIGdldChvYmosIHByb3ApCk1lc3NhZ2VSZWNlaXZlcgogIG9ubWVzc2FnZShtc2cpCk1lc3NhZ2VUcmFuc21pdHRlcgogIHNlbmRNZXNzYWdlKCkKTWVzc2FnZVRyYW5zY2VpdmVyKCkKTWVzc2FnZVRyYW5zY2VpdmVyCk1lc3NhZ2VSZWNlaXZlcgpNZXNzYWdlVHJhbnNtaXR0ZXIKICBub25lKCkKICBqc29uKHZlcmJvc2UgPSBmYWxzZSkKICAuanMgPSBqcyh2ZXJib3NlID0gZmFsc2UpCiAgLmJqc29uID0gYmpzb24oKQpSUENBcGkoYykKUlBDQXBpClJQQ1Byb3h5KGMpClJQQ09iamVjdChpZCwgY29ubmVjdGlvbikKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkoYXBpKQpGYWN0b3J5KG9wdHMpClJQQ09iamVjdApSUENGYWN0b3J5ClJQQ0ZhY3RvcnkKQ29ubmVjdGlvbgogIHN0YXRpYyBlcXVhbChhLCBiKQogIHN0YXRpYyBnZXQgbGFzdCgpCiAgbWFrZVNlcSgpCiAgY29uc3RydWN0b3Ioc29ja2V0LCBpbnN0YW5jZSwgbG9nLCBjb2RlYyA9ICdub25lJykKICBsb2coLi4uYXJncykKICBlcnJvcihtZXNzYWdlKQogIGNsb3NlKC4uLmFyZ3MpCiAgb25tZXNzYWdlKG1zZykKICBwcm9jZXNzTWVzc2FnZShkYXRhKQogIG9uY29ubmVjdChzb2NrKQogIG9ucG9uZyhkYXRhKQogIG9uZXJyb3IoZXJyb3IpCiAgb25jbG9zZShjb2RlLCB3aHkpCiAgY2xlYW51cCgpCiAgc2VuZE1lc3NhZ2Uob2JqKQogIHNlbmRDb21tYW5kKGNvbW1hbmQsIHBhcmFtcyA9IHt9KQogIHN0YXRpYyBnZXRDYWxsYmFja3MoaW5zdGFuY2UsIHZlcmJvc2l0eSA9IDApCiAgb25Db25uZWN0KHNvY2spCiAgb25PcGVuKHNvY2spCiAgb25NZXNzYWdlKHNvY2ssIG1zZykKICBvbkVycm9yKHNvY2ssIGVycm9yKQogIG9uQ2xvc2Uoc29jaywgY29kZSwgd2h5KQogIG9uUG9uZyhzb2NrLCBkYXRhKQpDb25uZWN0aW9uCkNvbm5lY3Rpb24KUlBDU2VydmVyRW5kcG9pbnQoY2xhc3NlcyA9IHt9KQogIG5ldyh7IGNsYXNzOiBuYW1lLCBhcmdzID0gW10gfSkKICBsaXN0KCkKUlBDU2VydmVyCiAgbWFrZUlkKCkKICBwcm9jZXNzTWVzc2FnZShkYXRhKQpSUENTZXJ2ZXIKUlBDQ2xpZW50CiAgcHJvY2Vzc01lc3NhZ2UocmVzcG9uc2UpCiAgY29tbWFuZChuYW1lLCBwYXJhbXMpClJQQ0NsaWVudApSUENTb2NrZXQodXJsLCBzZXJ2aWNlID0gUlBDU2VydmVyLCB2ZXJib3NpdHkgPSAxKQogIGdldCBmZCgpCiAgZ2V0IHNvY2tldCgpCiAgZ2V0IGNvbm5lY3Rpb24oKQogIHJlZ2lzdGVyKGN0b3IpCiAgbGlzdGVuKG5ld193cywgb3MgPSBnbG9iYWxUaGlzLm9zKQogIGNvbm5lY3QobmV3X3dzLCBvcyA9IGdsb2JhbFRoaXMub3MpCiAgZ2V0IGNvbm5lY3RlZCgpCiAgZ2V0IGxpc3QoKQogIGdldCBsYXN0KCkKUlBDU29ja2V0Ck1ha2VXZWJTb2NrZXQodXJsLCBjYWxsYmFja3MpCglpc1RoZW5hYmxlKHZhbHVlKQoJaGFzSGFuZGxlcihvYmosIGV2ZW50TmFtZSkKCWNhbGxIYW5kbGVyKG9iaiwgZXZlbnROYW1lLCAuLi5hcmdzKQoJcGFyc2VVUkwodXJsX29yX3BvcnQpCiAgdG9TdHJpbmcoKQoJZGVmaW5lKG9iaiwgLi4uYXJncykKCXNldEhhbmRsZXJzKG9zLCBoYW5kbGVycykKICAub25GZCA9IChmZCwgcmVhZGFibGUsIHdyaXRhYmxlKQoJc3RhdHVzUmVzcG9uc2Uoc3VjY2VzcywgcmVzdWx0X29yX2Vycm9yLCBkYXRhKQoJb2JqZWN0Q29tbWFuZChmbikKCShkYXRhKQoJZ2V0UHJvdG90eXBlTmFtZShwcm90bykKRGVzZXJpYWxpemVFbnRyaWVzKGUpCkRlc2VyaWFsaXplS2V5cyhlKQpEZXNlcmlhbGl6ZU1hcChlKQpEZXNlcmlhbGl6ZU9iamVjdChlKQpGb3J3YXJkTWV0aG9kcyhlLCByZXQgPSB7fSwgdGhpc09iaikKRm9yd2FyZE9iamVjdChlLCB0aGlzT2JqKQpNYWtlQ29tbWFuZEZ1bmN0aW9uKGNtZCwgZ2V0Q29ubmVjdGlvbiwgdGhpc09iaiwgdCkKCShwYXJhbXMgPSB7fSkKKHBhcmFtcyA9IHt9KQpTZXJpYWxpemVWYWx1ZSh2YWx1ZSwgc291cmNlID0gZmFsc2UpCkRlc2VyaWFsaXplU3ltYm9scyhuYW1lcykKRGVzZXJpYWxpemVWYWx1ZShkZXNjKQAAAAAAAAAA2QgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEoFAAAAAAAASgUAAAAAAAAAAAAAAADwvw"
				],
				[
					754,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/events.js",
						"symkeys":
						[
							[
								62,
								93
							],
							[
								143,
								176
							],
							[
								336,
								368
							],
							[
								425,
								443
							],
							[
								495,
								513
							],
							[
								548,
								568
							],
							[
								617,
								629
							],
							[
								650,
								663
							],
							[
								744,
								763
							],
							[
								951,
								982
							],
							[
								1328,
								1352
							],
							[
								1495,
								1507
							],
							[
								1611,
								1631
							],
							[
								2034,
								2055
							],
							[
								2080,
								2095
							],
							[
								2216,
								2230
							],
							[
								2257,
								2278
							],
							[
								2459,
								2471
							],
							[
								2517,
								2536
							],
							[
								2582,
								2597
							],
							[
								2690,
								2703
							],
							[
								2716,
								2732
							],
							[
								2748,
								2753
							],
							[
								2805,
								2818
							],
							[
								2844,
								2864
							],
							[
								3090,
								3099
							],
							[
								3226,
								3237
							],
							[
								3399,
								3419
							],
							[
								3522,
								3554
							],
							[
								3785,
								3820
							],
							[
								4175,
								4201
							],
							[
								4868,
								4877
							],
							[
								4957,
								4976
							],
							[
								5023,
								5027
							],
							[
								5060,
								5071
							],
							[
								5118,
								5136
							]
						],
						"symlist":
						[
							"indexOf = (haystack, needle) =>",
							"function define(obj, prop, value)",
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"EventEmitter",
							"constructor()",
							"on(event, listener)",
							"removeListener(event, listener)",
							"removeAllListeners(type)",
							"off(...args)",
							"emit(event, ...args)",
							"once(event, listener)",
							"callback = e =>",
							"iterator(type)",
							"async (push, stop) =>",
							"eventNames()",
							"listenerCount(type)",
							"listeners(type)",
							"next: type =>",
							"async resolve =>",
							" e =>",
							"waitFor(type)",
							"(resolve, reject) =>",
							"method =>",
							"EventTarget",
							"typedListeners(type)",
							"addEventListener(type, listener)",
							"removeEventListener(type, listener)",
							"dispatchEvent(type, event)",
							"method =>",
							"getMethods = obj =>",
							"n =>",
							"(acc, n) =>",
							"eventify = self =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADZCAAAICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQogIC5tZW1vaXplID0gbWVtb2l6ZShmbikKICBzZWxmID0gKGtleSwgLi4uYXJncykKICAuR2V0Q2xhc3NlcyA9ICpHZXRDbGFzc2VzKG9iaikKTWFwcGVyKG1hcCA9IAogIHNlbGYgPSAoa2V5LCB2YWx1ZSkKTWFwcGVyCk1hcHBlcgpNYXBwZXIKICBzZWxmID0gKC4uLmFyZ3MpCkRlZmF1bHRDb25zdHJ1Y3RvcgpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCldyYXBFdmVudChoYW5kbGVyLCBuYW1lKQoJKGUpCiAgZ2V0KG9iaiwgcHJvcCkKTWVzc2FnZVJlY2VpdmVyCiAgb25tZXNzYWdlKG1zZykKTWVzc2FnZVRyYW5zbWl0dGVyCiAgc2VuZE1lc3NhZ2UoKQpNZXNzYWdlVHJhbnNjZWl2ZXIoKQpNZXNzYWdlVHJhbnNjZWl2ZXIKTWVzc2FnZVJlY2VpdmVyCk1lc3NhZ2VUcmFuc21pdHRlcgogIG5vbmUoKQogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIC5qcyA9IGpzKHZlcmJvc2UgPSBmYWxzZSkKICAuYmpzb24gPSBianNvbigpClJQQ0FwaShjKQpSUENBcGkKUlBDUHJveHkoYykKUlBDT2JqZWN0KGlkLCBjb25uZWN0aW9uKQpSUENPYmplY3QKUlBDRmFjdG9yeShhcGkpCkZhY3Rvcnkob3B0cykKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkKUlBDRmFjdG9yeQpDb25uZWN0aW9uCiAgc3RhdGljIGVxdWFsKGEsIGIpCiAgc3RhdGljIGdldCBsYXN0KCkKICBtYWtlU2VxKCkKICBjb25zdHJ1Y3Rvcihzb2NrZXQsIGluc3RhbmNlLCBsb2csIGNvZGVjID0gJ25vbmUnKQogIGxvZyguLi5hcmdzKQogIGVycm9yKG1lc3NhZ2UpCiAgY2xvc2UoLi4uYXJncykKICBvbm1lc3NhZ2UobXNnKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICBvbkNvbm5lY3Qoc29jaykKICBvbk9wZW4oc29jaykKICBvbk1lc3NhZ2Uoc29jaywgbXNnKQogIG9uRXJyb3Ioc29jaywgZXJyb3IpCiAgb25DbG9zZShzb2NrLCBjb2RlLCB3aHkpCiAgb25Qb25nKHNvY2ssIGRhdGEpCkNvbm5lY3Rpb24KQ29ubmVjdGlvbgpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQpSUENTZXJ2ZXIKICBtYWtlSWQoKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpClJQQ1NlcnZlcgpSUENDbGllbnQKICBwcm9jZXNzTWVzc2FnZShyZXNwb25zZSkKICBjb21tYW5kKG5hbWUsIHBhcmFtcykKUlBDQ2xpZW50ClJQQ1NvY2tldCh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIsIHZlcmJvc2l0eSA9IDEpCiAgZ2V0IGZkKCkKICBnZXQgc29ja2V0KCkKICBnZXQgY29ubmVjdGlvbigpCiAgcmVnaXN0ZXIoY3RvcikKICBsaXN0ZW4obmV3X3dzLCBvcyA9IGdsb2JhbFRoaXMub3MpCiAgY29ubmVjdChuZXdfd3MsIG9zID0gZ2xvYmFsVGhpcy5vcykKICBnZXQgY29ubmVjdGVkKCkKICBnZXQgbGlzdCgpCiAgZ2V0IGxhc3QoKQpSUENTb2NrZXQKTWFrZVdlYlNvY2tldCh1cmwsIGNhbGxiYWNrcykKCWlzVGhlbmFibGUodmFsdWUpCgloYXNIYW5kbGVyKG9iaiwgZXZlbnROYW1lKQoJY2FsbEhhbmRsZXIob2JqLCBldmVudE5hbWUsIC4uLmFyZ3MpCglwYXJzZVVSTCh1cmxfb3JfcG9ydCkKICB0b1N0cmluZygpCglkZWZpbmUob2JqLCAuLi5hcmdzKQoJc2V0SGFuZGxlcnMob3MsIGhhbmRsZXJzKQogIC5vbkZkID0gKGZkLCByZWFkYWJsZSwgd3JpdGFibGUpCglzdGF0dXNSZXNwb25zZShzdWNjZXNzLCByZXN1bHRfb3JfZXJyb3IsIGRhdGEpCglvYmplY3RDb21tYW5kKGZuKQoJKGRhdGEpCglnZXRQcm90b3R5cGVOYW1lKHByb3RvKQpEZXNlcmlhbGl6ZUVudHJpZXMoZSkKRGVzZXJpYWxpemVLZXlzKGUpCkRlc2VyaWFsaXplTWFwKGUpCkRlc2VyaWFsaXplT2JqZWN0KGUpCkZvcndhcmRNZXRob2RzKGUsIHJldCA9IHt9LCB0aGlzT2JqKQpGb3J3YXJkT2JqZWN0KGUsIHRoaXNPYmopCk1ha2VDb21tYW5kRnVuY3Rpb24oY21kLCBnZXRDb25uZWN0aW9uLCB0aGlzT2JqLCB0KQoJKHBhcmFtcyA9IHt9KQoocGFyYW1zID0ge30pClNlcmlhbGl6ZVZhbHVlKHZhbHVlLCBzb3VyY2UgPSBmYWxzZSkKRGVzZXJpYWxpemVTeW1ib2xzKG5hbWVzKQpEZXNlcmlhbGl6ZVZhbHVlKGRlc2MpAAAAAAAAAADDAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					755,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debugger.html",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADDAQAAICBkZWZpbmUob2JqLCBwcm9wLCB2YWx1ZSkKICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQpFdmVudEVtaXR0ZXIKICBjb25zdHJ1Y3RvcigpCiAgb24oZXZlbnQsIGxpc3RlbmVyKQogIHJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcikKICByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkKICBvZmYoLi4uYXJncykKICBlbWl0KGV2ZW50LCAuLi5hcmdzKQogIG9uY2UoZXZlbnQsIGxpc3RlbmVyKQogIGl0ZXJhdG9yKHR5cGUpCiAgZXZlbnROYW1lcygpCiAgbGlzdGVuZXJDb3VudCh0eXBlKQogIGxpc3RlbmVycyh0eXBlKQogIHdhaXRGb3IodHlwZSkKRXZlbnRUYXJnZXQKICB0eXBlZExpc3RlbmVycyh0eXBlKQogIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpCiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikKICBkaXNwYXRjaEV2ZW50KHR5cGUsIGV2ZW50KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					756,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/minnet-quickjs/libwebsockets/include/libwebsockets/lws-callbacks.h",
						"symkeys":
						[
							[
								1642,
								1654
							],
							[
								1688,
								1709
							],
							[
								2342,
								2366
							],
							[
								2586,
								2614
							],
							[
								2934,
								2954
							]
						],
						"symlist":
						[
							"lws_ssl_info",
							"lws_cert_update_state",
							"lws_acme_cert_aging_args",
							"lws_filter_network_conn_args",
							"lws_callback_reasons"
						]
					},
					"AQAAAAAAAAAAAAAAdwAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/include/libwebsockets/lws-callbacks.h",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB3AAAAICBsd3Nfc3NsX2luZm8KICBsd3NfY2VydF91cGRhdGVfc3RhdGUKICBsd3NfYWNtZV9jZXJ0X2FnaW5nX2FyZ3MKICBsd3NfZmlsdGVyX25ldHdvcmtfY29ubl9hcmdzCiAgbHdzX2NhbGxiYWNrX3JlYXNvbnMAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-rpc.js",
						"symkeys":
						[
							[
								952,
								979
							],
							[
								1150,
								1196
							],
							[
								1763,
								1793
							],
							[
								1849,
								1871
							],
							[
								2283,
								2293
							],
							[
								3366,
								3379
							],
							[
								3415,
								3429
							],
							[
								3524,
								3540
							],
							[
								4088,
								4127
							],
							[
								4225,
								4245
							],
							[
								4825,
								4859
							],
							[
								4942,
								4976
							],
							[
								5251,
								5258
							],
							[
								5327,
								5335
							],
							[
								5391,
								5398
							],
							[
								5502,
								5517
							],
							[
								5551,
								5560
							],
							[
								5608,
								5628
							],
							[
								6173,
								6189
							],
							[
								6560,
								6577
							],
							[
								7113,
								7133
							]
						],
						"symlist":
						[
							"function ReadJSON(filename)",
							"function WriteFile(name, data, verbose = true)",
							"function WriteJSON(name, data)",
							"function main(...args)",
							" (a, v) =>",
							".help = () =>",
							".show = arg =>",
							".cleanup = () =>",
							".createWS = (url, callbacks, listen) =>",
							" (level, ...args) =>",
							" function* config(req, res)",
							" function* files(req, resp)",
							"name =>",
							"entry =>",
							"file =>",
							"([file, st]) =>",
							"(a, b) =>",
							"(acc, [file, st]) =>",
							"onHttp(req, rsp)",
							"get connections()",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAAywAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/events.js",
						"symkeys":
						[
							[
								62,
								93
							],
							[
								143,
								176
							],
							[
								336,
								368
							],
							[
								425,
								443
							],
							[
								495,
								513
							],
							[
								548,
								568
							],
							[
								617,
								629
							],
							[
								650,
								663
							],
							[
								744,
								763
							],
							[
								951,
								982
							],
							[
								1328,
								1352
							],
							[
								1495,
								1507
							],
							[
								1611,
								1631
							],
							[
								2034,
								2055
							],
							[
								2080,
								2095
							],
							[
								2216,
								2230
							],
							[
								2257,
								2278
							],
							[
								2459,
								2471
							],
							[
								2517,
								2536
							],
							[
								2582,
								2597
							],
							[
								2690,
								2703
							],
							[
								2716,
								2732
							],
							[
								2748,
								2753
							],
							[
								2805,
								2818
							],
							[
								2844,
								2864
							],
							[
								3090,
								3099
							],
							[
								3226,
								3237
							],
							[
								3399,
								3419
							],
							[
								3522,
								3554
							],
							[
								3785,
								3820
							],
							[
								4175,
								4201
							],
							[
								4868,
								4877
							],
							[
								4957,
								4976
							],
							[
								5023,
								5027
							],
							[
								5060,
								5071
							],
							[
								5118,
								5136
							]
						],
						"symlist":
						[
							"indexOf = (haystack, needle) =>",
							"function define(obj, prop, value)",
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"EventEmitter",
							"constructor()",
							"on(event, listener)",
							"removeListener(event, listener)",
							"removeAllListeners(type)",
							"off(...args)",
							"emit(event, ...args)",
							"once(event, listener)",
							"callback = e =>",
							"iterator(type)",
							"async (push, stop) =>",
							"eventNames()",
							"listenerCount(type)",
							"listeners(type)",
							"next: type =>",
							"async resolve =>",
							" e =>",
							"waitFor(type)",
							"(resolve, reject) =>",
							"method =>",
							"EventTarget",
							"typedListeners(type)",
							"addEventListener(type, listener)",
							"removeEventListener(type, listener)",
							"dispatchEvent(type, event)",
							"method =>",
							"getMethods = obj =>",
							"n =>",
							"(acc, n) =>",
							"eventify = self =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLAAAAUmVhZEpTT04oZmlsZW5hbWUpCldyaXRlRmlsZShuYW1lLCBkYXRhLCB2ZXJib3NlID0gdHJ1ZSkKV3JpdGVKU09OKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQogICBmdW5jdGlvbipjb25maWcocmVxLCByZXMpCiAgIGZ1bmN0aW9uKmZpbGVzKHJlcSwgcmVzcCkKICBvbkh0dHAocmVxLCByc3ApCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBxdWl0KHdoeSkAAAAAAAAAAMwBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debugger-client.js",
						"symkeys":
						[
							[
								700,
								710
							],
							[
								969,
								1004
							],
							[
								1434,
								1466
							],
							[
								1588,
								1615
							],
							[
								2016,
								2044
							]
						],
						"symlist":
						[
							"async e =>",
							"async function LoadSource(filename)",
							"async function CreateSocket(url)",
							"async function ReadSocket()",
							".sendMessage = function(msg)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADMAQAAICBkZWZpbmUob2JqLCBwcm9wLCB2YWx1ZSkKICAuTG9nV3JhcCA9IGZ1bmN0aW9uIExvZ1dyYXAobG9nKQpFdmVudEVtaXR0ZXIKICBjb25zdHJ1Y3RvcigpCiAgb24oZXZlbnQsIGxpc3RlbmVyKQogIHJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcikKICByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkKICBvZmYoLi4uYXJncykKICBlbWl0KGV2ZW50LCAuLi5hcmdzKQogIG9uY2UoZXZlbnQsIGxpc3RlbmVyKQogIGl0ZXJhdG9yKHR5cGUpCiAgZXZlbnROYW1lcygpCiAgbGlzdGVuZXJDb3VudCh0eXBlKQogIGxpc3RlbmVycyh0eXBlKQogIHdhaXRGb3IodHlwZSkKRXZlbnRUYXJnZXQKICB0eXBlZExpc3RlbmVycyh0eXBlKQogIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpCiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikKICBkaXNwYXRjaEV2ZW50KHR5cGUsIGV2ZW50KQAAAAAAAAAAUgAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debugger.js",
						"symkeys":
						[
							[
								722,
								768
							],
							[
								1076,
								1086
							],
							[
								1168,
								1174
							],
							[
								1526,
								1547
							],
							[
								1880,
								1905
							],
							[
								2368,
								2374
							],
							[
								2530,
								2550
							],
							[
								2755,
								2765
							],
							[
								2959,
								2965
							],
							[
								4186,
								4209
							]
						],
						"symlist":
						[
							"function StartDebugger(args, connect, address)",
							"(fd, i) =>",
							" () =>",
							"function TestWorker()",
							"function WorkerMessage(e)",
							" () =>",
							".onmessage = body =>",
							" (n, k) =>",
							" () =>",
							"function send(id, body)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABSAAAATG9hZFNvdXJjZShmaWxlbmFtZSkKQ3JlYXRlU29ja2V0KHVybCkKUmVhZFNvY2tldCgpCiAgLnNlbmRNZXNzYWdlID0gZnVuY3Rpb24obXNnKQAAAAAAAAAAVAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debugger.html",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABUAAAAU3RhcnREZWJ1Z2dlcihhcmdzLCBjb25uZWN0LCBhZGRyZXNzKQpUZXN0V29ya2VyKCkKV29ya2VyTWVzc2FnZShlKQogIHNlbmQoaWQsIGJvZHkpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/include/libwebsockets/lws-callbacks.h",
						"symkeys":
						[
							[
								1642,
								1654
							],
							[
								1688,
								1709
							],
							[
								2342,
								2366
							],
							[
								2586,
								2614
							],
							[
								2934,
								2954
							]
						],
						"symlist":
						[
							"lws_ssl_info",
							"lws_cert_update_state",
							"lws_acme_cert_aging_args",
							"lws_filter_network_conn_args",
							"lws_callback_reasons"
						]
					},
					"AQAAAAAAAAAAAAAAdwAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					8,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-server/minimal-http-server-form-post/minimal-http-server-form-post.c",
						"symkeys":
						[
							[
								703,
								706
							],
							[
								840,
								856
							],
							[
								897,
								910
							],
							[
								4143,
								4157
							],
							[
								4194,
								4198
							]
						],
						"symlist":
						[
							"‚Äî‚í∏‚Äì‚ÄÉpss‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉenum_param_names‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚íª‚Äì‚ÄÉcallback_http‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉsigint_handler‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉmain‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB3AAAAICBsd3Nfc3NsX2luZm8KICBsd3NfY2VydF91cGRhdGVfc3RhdGUKICBsd3NfYWNtZV9jZXJ0X2FnaW5nX2FyZ3MKICBsd3NfZmlsdGVyX25ldHdvcmtfY29ubl9hcmdzCiAgbHdzX2NhbGxiYWNrX3JlYXNvbnMAAAAAAAAAAKcAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					9,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-rpc.js",
						"symkeys":
						[
							[
								952,
								979
							],
							[
								1150,
								1196
							],
							[
								1763,
								1793
							],
							[
								1849,
								1871
							],
							[
								2283,
								2293
							],
							[
								3366,
								3379
							],
							[
								3415,
								3429
							],
							[
								3524,
								3540
							],
							[
								4088,
								4127
							],
							[
								4225,
								4245
							],
							[
								4825,
								4859
							],
							[
								4942,
								4976
							],
							[
								5251,
								5258
							],
							[
								5327,
								5335
							],
							[
								5391,
								5398
							],
							[
								5502,
								5517
							],
							[
								5551,
								5560
							],
							[
								5608,
								5628
							],
							[
								6173,
								6189
							],
							[
								6560,
								6577
							],
							[
								7113,
								7133
							]
						],
						"symlist":
						[
							"function ReadJSON(filename)",
							"function WriteFile(name, data, verbose = true)",
							"function WriteJSON(name, data)",
							"function main(...args)",
							" (a, v) =>",
							".help = () =>",
							".show = arg =>",
							".cleanup = () =>",
							".createWS = (url, callbacks, listen) =>",
							" (level, ...args) =>",
							" function* config(req, res)",
							" function* files(req, resp)",
							"name =>",
							"entry =>",
							"file =>",
							"([file, st]) =>",
							"(a, b) =>",
							"(acc, [file, st]) =>",
							"onHttp(req, rsp)",
							"get connections()",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADZAAAA4oCU4pK44oCTIHBzcyB7IOKApiB9IDsg4oCUIHR5cGUK4oCU4pK44oCTIGVudW1fcGFyYW1fbmFtZXMgeyDigKYgfSA7IOKAlCB0eXBlCuKAlOKSu+KAkyBjYWxsYmFja19odHRwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgc2lnaW50X2hhbmRsZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBtYWluICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgAAAAAAAAAAywAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					10,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/CMakeLists.txt",
						"symkeys":
						[
							[
								57,
								71
							],
							[
								302,
								317
							],
							[
								330,
								345
							],
							[
								392,
								407
							],
							[
								421,
								436
							],
							[
								482,
								496
							],
							[
								506,
								520
							],
							[
								531,
								553
							],
							[
								562,
								582
							],
							[
								591,
								610
							],
							[
								619,
								651
							],
							[
								660,
								676
							],
							[
								685,
								705
							],
							[
								714,
								738
							],
							[
								747,
								762
							],
							[
								771,
								784
							],
							[
								793,
								810
							],
							[
								819,
								834
							],
							[
								864,
								874
							],
							[
								902,
								912
							],
							[
								941,
								958
							],
							[
								962,
								986
							],
							[
								1049,
								1068
							],
							[
								1072,
								1092
							],
							[
								1190,
								1200
							],
							[
								1493,
								1513
							],
							[
								1661,
								1671
							],
							[
								2026,
								2050
							],
							[
								2082,
								2091
							],
							[
								2142,
								2151
							],
							[
								2245,
								2269
							],
							[
								2301,
								2310
							],
							[
								2956,
								2968
							],
							[
								2972,
								2986
							],
							[
								3045,
								3057
							],
							[
								3080,
								3096
							],
							[
								3100,
								3124
							],
							[
								3143,
								3159
							],
							[
								3163,
								3187
							],
							[
								3225,
								3249
							],
							[
								3322,
								3336
							],
							[
								3779,
								3798
							],
							[
								3802,
								3821
							],
							[
								3861,
								3880
							],
							[
								3884,
								3904
							],
							[
								3991,
								4010
							],
							[
								4028,
								4047
							],
							[
								4051,
								4070
							],
							[
								4098,
								4117
							],
							[
								4380,
								4399
							],
							[
								4425,
								4444
							],
							[
								4448,
								4467
							],
							[
								4538,
								4557
							],
							[
								4668,
								4687
							],
							[
								4715,
								4734
							],
							[
								4738,
								4757
							],
							[
								4830,
								4849
							],
							[
								5053,
								5072
							],
							[
								5117,
								5136
							],
							[
								5156,
								5175
							],
							[
								5295,
								5314
							],
							[
								5386,
								5412
							],
							[
								5416,
								5432
							],
							[
								5445,
								5463
							],
							[
								5510,
								5515
							],
							[
								5539,
								5544
							],
							[
								5576,
								5580
							],
							[
								5590,
								5601
							],
							[
								5612,
								5616
							],
							[
								5636,
								5647
							],
							[
								5658,
								5663
							],
							[
								5700,
								5711
							],
							[
								5715,
								5738
							],
							[
								5742,
								5754
							],
							[
								5762,
								5781
							],
							[
								5785,
								5807
							],
							[
								5852,
								5863
							],
							[
								5917,
								5941
							],
							[
								5967,
								5987
							],
							[
								6015,
								6019
							],
							[
								6087,
								6103
							],
							[
								6107,
								6131
							],
							[
								6135,
								6151
							],
							[
								6163,
								6187
							],
							[
								6233,
								6244
							],
							[
								6261,
								6266
							],
							[
								6298,
								6309
							],
							[
								6396,
								6407
							],
							[
								6450,
								6476
							],
							[
								6507,
								6518
							],
							[
								6522,
								6545
							],
							[
								6575,
								6587
							],
							[
								6591,
								6613
							],
							[
								7034,
								7053
							],
							[
								7220,
								7240
							],
							[
								7253,
								7276
							],
							[
								7289,
								7310
							],
							[
								7323,
								7346
							],
							[
								7359,
								7384
							],
							[
								7438,
								7453
							],
							[
								7518,
								7533
							],
							[
								7634,
								7660
							],
							[
								7669,
								7693
							],
							[
								7725,
								7749
							],
							[
								7773,
								7797
							],
							[
								7828,
								7847
							],
							[
								7897,
								7920
							],
							[
								8025,
								8049
							],
							[
								8140,
								8164
							],
							[
								8219,
								8243
							],
							[
								8354,
								8378
							],
							[
								8423,
								8449
							],
							[
								8453,
								8479
							],
							[
								8546,
								8572
							],
							[
								8575,
								8599
							],
							[
								8840,
								8864
							],
							[
								8897,
								8921
							],
							[
								9033,
								9058
							],
							[
								9105,
								9130
							],
							[
								9177,
								9202
							],
							[
								9248,
								9272
							],
							[
								9312,
								9330
							],
							[
								9370,
								9388
							],
							[
								9428,
								9446
							],
							[
								9485,
								9502
							],
							[
								9541,
								9558
							],
							[
								9597,
								9614
							],
							[
								9659,
								9680
							],
							[
								9720,
								9736
							],
							[
								9812,
								9834
							],
							[
								9907,
								9923
							],
							[
								11100,
								11124
							],
							[
								11388,
								11414
							],
							[
								11490,
								11509
							],
							[
								11513,
								11537
							],
							[
								11627,
								11646
							],
							[
								11699,
								11725
							],
							[
								11729,
								11745
							],
							[
								11758,
								11776
							],
							[
								11823,
								11828
							],
							[
								11852,
								11857
							],
							[
								11889,
								11893
							],
							[
								11903,
								11914
							],
							[
								11925,
								11929
							],
							[
								11949,
								11960
							],
							[
								11971,
								11976
							],
							[
								12013,
								12024
							],
							[
								12028,
								12051
							],
							[
								12055,
								12067
							],
							[
								12075,
								12094
							],
							[
								12098,
								12120
							],
							[
								12157,
								12168
							],
							[
								12222,
								12246
							],
							[
								12272,
								12292
							],
							[
								12320,
								12324
							],
							[
								12392,
								12408
							],
							[
								12412,
								12436
							],
							[
								12440,
								12456
							],
							[
								12468,
								12492
							],
							[
								12538,
								12549
							],
							[
								12566,
								12571
							],
							[
								12603,
								12614
							],
							[
								12701,
								12712
							],
							[
								12755,
								12781
							],
							[
								12812,
								12823
							],
							[
								12827,
								12850
							],
							[
								12940,
								12966
							],
							[
								13481,
								13512
							],
							[
								13561,
								13580
							],
							[
								13736,
								13762
							],
							[
								13816,
								13832
							],
							[
								14202,
								14225
							],
							[
								14229,
								14241
							],
							[
								14267,
								14286
							],
							[
								14290,
								14312
							]
						],
						"symlist":
						[
							"DISABLE_WERROR",
							"LWS_WITH_SHARED",
							"LWS_WITH_STATIC",
							"LWS_WITH_SHARED",
							"LWS_WITH_STATIC",
							"LWS_WITH_LIBUV",
							"LWS_STATIC_PIC",
							"LWS_WITH_EXTERNAL_POLL",
							"LWS_WITH_HTTP_BROTLI",
							"LWS_WITH_HTTP_PROXY",
							"LWS_WITH_HTTP_STREAM_COMPRESSION",
							"LWS_WITH_PLUGINS",
							"LWS_WITH_PLUGINS_API",
							"LWS_WITH_PLUGINS_BUILTIN",
							"LWS_WITH_SOCKS5",
							"LWS_WITH_ZLIB",
							"LWS_WITH_ZIP_FOPS",
							"LWS_HAVE_LIBCAP",
							"LOCAL_CURL",
							"LOCAL_CURL",
							"CMAKE_BUILD_RPATH",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_INSTALL_RPATH",
							"CMAKE_INSTALL_PREFIX",
							"LOCAL_CURL",
							"CMAKE_INSTALL_PREFIX",
							"BUILD_CURL",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CURL_REPO",
							"CURL_REPO",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CURL_REPO",
							"CURL_LIBRARY",
							"CURL_LIBRARIES",
							"CURL_LIBRARY",
							"CURL_LIBRARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CURL_INCLUDE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"DISABLE_WERROR",
							"QUICKJS_INCLUDE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"CMAKE_INSTALL_PREFIX",
							"QUICKJS_INCLUDE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"QUICKJS_INCLUDE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"CURL_INCLUDE_DIR",
							"make_shared_module",
							"FNAME",
							"FNAME",
							"NAME",
							"TARGET_NAME",
							"NAME",
							"TARGET_NAME",
							"FNAME",
							"TARGET_NAME",
							"LIBWEBSOCKETS_LIBRARIES",
							"CURL_LIBRARY",
							"OPENSSL_SSL_LIBRARY",
							"OPENSSL_CRYPTO_LIBRARY",
							"TARGET_NAME",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_INSTALL_PREFIX",
							"NAME",
							"CMAKE_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"TARGET_NAME",
							"UNAME",
							"TARGET_NAME",
							"TARGET_NAME",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"TARGET_NAME",
							"LIBWEBSOCKETS_LIBRARIES",
							"CURL_LIBRARY",
							"OPENSSL_CRYPTO_LIBRARY",
							"BUILD_LIBWEBSOCKETS",
							"LWS_WITHOUT_TESTAPPS",
							"LWS_WITHOUT_TEST_SERVER",
							"LWS_WITHOUT_TEST_PING",
							"LWS_WITHOUT_TEST_CLIENT",
							"LWS_LINK_TESTAPPS_DYNAMIC",
							"LWS_WITH_STATIC",
							"LWS_HAVE_LIBCAP",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"LIBWEBSOCKETS_FOUND",
							"LIBWEBSOCKETS_LIBRARIES",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"LIBWEBSOCKETS_LIBRARY_DIRS",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_SYSTEM_INCLUDE_PATH",
							"CMAKE_SYSTEM_LIBRARY_PATH",
							"CMAKE_SYSTEM_PROGRAM_PATH",
							"CMAKE_SYSTEM_IGNORE_PATH",
							"CMAKE_INCLUDE_PATH",
							"CMAKE_LIBRARY_PATH",
							"CMAKE_PROGRAM_PATH",
							"CMAKE_IGNORE_PATH",
							"CMAKE_PREFIX_PATH",
							"CMAKE_MODULE_PATH",
							"PKG_CONFIG_EXECUTABLE",
							"CMAKE_C_COMPILER",
							"CMAKE_VERBOSE_MAKEFILE",
							"CMAKE_BUILD_TYPE",
							"CMAKE_CURRENT_BINARY_DIR",
							"LIBWEBSOCKETS_LIBRARY_DIRS",
							"QUICKJS_INCLUDE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"CURL_INCLUDE_DIR",
							"make_shared_module",
							"FNAME",
							"FNAME",
							"NAME",
							"TARGET_NAME",
							"NAME",
							"TARGET_NAME",
							"FNAME",
							"TARGET_NAME",
							"LIBWEBSOCKETS_LIBRARIES",
							"CURL_LIBRARY",
							"OPENSSL_SSL_LIBRARY",
							"OPENSSL_CRYPTO_LIBRARY",
							"TARGET_NAME",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_INSTALL_PREFIX",
							"NAME",
							"CMAKE_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"TARGET_NAME",
							"UNAME",
							"TARGET_NAME",
							"TARGET_NAME",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"TARGET_NAME",
							"LIBWEBSOCKETS_LIBRARIES",
							"LIBWEBSOCKETS_LIBRARY_DIRS",
							"CMAKE_POSITION_INDEPENDENT_CODE",
							"JS_BINDINGS_SOURCES",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"CURL_INCLUDE_DIR",
							"LIBWEBSOCKETS_LIBRARIES",
							"CURL_LIBRARY",
							"OPENSSL_SSL_LIBRARY",
							"OPENSSL_CRYPTO_LIBRARY"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLAAAAUmVhZEpTT04oZmlsZW5hbWUpCldyaXRlRmlsZShuYW1lLCBkYXRhLCB2ZXJib3NlID0gdHJ1ZSkKV3JpdGVKU09OKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQogICBmdW5jdGlvbipjb25maWcocmVxLCByZXMpCiAgIGZ1bmN0aW9uKmZpbGVzKHJlcSwgcmVzcCkKICBvbkh0dHAocmVxLCByc3ApCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBxdWl0KHdoeSkAAAAAAAAAAMUMAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					11,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADFDAAARElTQUJMRV9XRVJST1IKTFdTX1dJVEhfU0hBUkVECkxXU19XSVRIX1NUQVRJQwpMV1NfV0lUSF9TSEFSRUQKTFdTX1dJVEhfU1RBVElDCkxXU19XSVRIX0xJQlVWCkxXU19TVEFUSUNfUElDCkxXU19XSVRIX0VYVEVSTkFMX1BPTEwKTFdTX1dJVEhfSFRUUF9CUk9UTEkKTFdTX1dJVEhfSFRUUF9QUk9YWQpMV1NfV0lUSF9IVFRQX1NUUkVBTV9DT01QUkVTU0lPTgpMV1NfV0lUSF9QTFVHSU5TCkxXU19XSVRIX1BMVUdJTlNfQVBJCkxXU19XSVRIX1BMVUdJTlNfQlVJTFRJTgpMV1NfV0lUSF9TT0NLUzUKTFdTX1dJVEhfWkxJQgpMV1NfV0lUSF9aSVBfRk9QUwpMV1NfSEFWRV9MSUJDQVAKTE9DQUxfQ1VSTApMT0NBTF9DVVJMCkNNQUtFX0JVSUxEX1JQQVRICkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpDTUFLRV9JTlNUQUxMX1JQQVRICkNNQUtFX0lOU1RBTExfUFJFRklYCkxPQ0FMX0NVUkwKQ01BS0VfSU5TVEFMTF9QUkVGSVgKQlVJTERfQ1VSTApDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKQ1VSTF9SRVBPCkNVUkxfUkVQTwpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKQ1VSTF9SRVBPCkNVUkxfTElCUkFSWQpDVVJMX0xJQlJBUklFUwpDVVJMX0xJQlJBUlkKQ1VSTF9MSUJSQVJZX0RJUgpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKQ1VSTF9JTkNMVURFX0RJUgpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSCkRJU0FCTEVfV0VSUk9SClFVSUNLSlNfSU5DTFVERV9ESVIKUVVJQ0tKU19JTkNMVURFX0RJUgpRVUlDS0pTX0lOQ0xVREVfRElSCkNNQUtFX0lOU1RBTExfUFJFRklYClFVSUNLSlNfSU5DTFVERV9ESVIKUVVJQ0tKU19JTkNMVURFX0RJUgpRVUlDS0pTX0lOQ0xVREVfRElSClFVSUNLSlNfSU5DTFVERV9ESVIKQ01BS0VfQ19GTEFHU19ERUJVRwpDTUFLRV9DX0ZMQUdTX0RFQlVHCkNNQUtFX0NfRkxBR1NfREVCVUcKQ01BS0VfQ19GTEFHU19ERUJVRwpDTUFLRV9DX0ZMQUdTX0RFQlVHCkNNQUtFX0NfRkxBR1NfREVCVUcKQ01BS0VfQ19GTEFHU19ERUJVRwpDTUFLRV9DX0ZMQUdTX0RFQlVHClFVSUNLSlNfSU5DTFVERV9ESVIKUVVJQ0tKU19JTkNMVURFX0RJUgpRVUlDS0pTX0lOQ0xVREVfRElSClFVSUNLSlNfSU5DTFVERV9ESVIKTElCV0VCU09DS0VUU19JTkNMVURFX0RJUlMKQ1VSTF9JTkNMVURFX0RJUgogIG1ha2Vfc2hhcmVkX21vZHVsZQpGTkFNRQpGTkFNRQpOQU1FClRBUkdFVF9OQU1FCk5BTUUKVEFSR0VUX05BTUUKRk5BTUUKVEFSR0VUX05BTUUKTElCV0VCU09DS0VUU19MSUJSQVJJRVMKQ1VSTF9MSUJSQVJZCk9QRU5TU0xfU1NMX0xJQlJBUlkKT1BFTlNTTF9DUllQVE9fTElCUkFSWQpUQVJHRVRfTkFNRQpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKQ01BS0VfSU5TVEFMTF9QUkVGSVgKTkFNRQpDTUFLRV9CSU5BUllfRElSCkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpDTUFLRV9CSU5BUllfRElSCkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpUQVJHRVRfTkFNRQpVTkFNRQpUQVJHRVRfTkFNRQpUQVJHRVRfTkFNRQpMSUJXRUJTT0NLRVRTX0lOQ0xVREVfRElSUwpUQVJHRVRfTkFNRQpMSUJXRUJTT0NLRVRTX0xJQlJBUklFUwpDVVJMX0xJQlJBUlkKT1BFTlNTTF9DUllQVE9fTElCUkFSWQpCVUlMRF9MSUJXRUJTT0NLRVRTCkxXU19XSVRIT1VUX1RFU1RBUFBTCkxXU19XSVRIT1VUX1RFU1RfU0VSVkVSCkxXU19XSVRIT1VUX1RFU1RfUElORwpMV1NfV0lUSE9VVF9URVNUX0NMSUVOVApMV1NfTElOS19URVNUQVBQU19EWU5BTUlDCkxXU19XSVRIX1NUQVRJQwpMV1NfSEFWRV9MSUJDQVAKTElCV0VCU09DS0VUU19JTkNMVURFX0RJUlMKQ01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSCkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKTElCV0VCU09DS0VUU19GT1VORApMSUJXRUJTT0NLRVRTX0xJQlJBUklFUwpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSCkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKTElCV0VCU09DS0VUU19JTkNMVURFX0RJUlMKTElCV0VCU09DS0VUU19JTkNMVURFX0RJUlMKTElCV0VCU09DS0VUU19MSUJSQVJZX0RJUlMKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSCkNNQUtFX0NVUlJFTlRfU09VUkNFX0RJUgpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKQ01BS0VfU1lTVEVNX0lOQ0xVREVfUEFUSApDTUFLRV9TWVNURU1fTElCUkFSWV9QQVRICkNNQUtFX1NZU1RFTV9QUk9HUkFNX1BBVEgKQ01BS0VfU1lTVEVNX0lHTk9SRV9QQVRICkNNQUtFX0lOQ0xVREVfUEFUSApDTUFLRV9MSUJSQVJZX1BBVEgKQ01BS0VfUFJPR1JBTV9QQVRICkNNQUtFX0lHTk9SRV9QQVRICkNNQUtFX1BSRUZJWF9QQVRICkNNQUtFX01PRFVMRV9QQVRIClBLR19DT05GSUdfRVhFQ1VUQUJMRQpDTUFLRV9DX0NPTVBJTEVSCkNNQUtFX1ZFUkJPU0VfTUFLRUZJTEUKQ01BS0VfQlVJTERfVFlQRQpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKTElCV0VCU09DS0VUU19MSUJSQVJZX0RJUlMKUVVJQ0tKU19JTkNMVURFX0RJUgpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKUVVJQ0tKU19JTkNMVURFX0RJUgpMSUJXRUJTT0NLRVRTX0lOQ0xVREVfRElSUwpDVVJMX0lOQ0xVREVfRElSCiAgbWFrZV9zaGFyZWRfbW9kdWxlCkZOQU1FCkZOQU1FCk5BTUUKVEFSR0VUX05BTUUKTkFNRQpUQVJHRVRfTkFNRQpGTkFNRQpUQVJHRVRfTkFNRQpMSUJXRUJTT0NLRVRTX0xJQlJBUklFUwpDVVJMX0xJQlJBUlkKT1BFTlNTTF9TU0xfTElCUkFSWQpPUEVOU1NMX0NSWVBUT19MSUJSQVJZClRBUkdFVF9OQU1FCkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpDTUFLRV9JTlNUQUxMX1BSRUZJWApOQU1FCkNNQUtFX0JJTkFSWV9ESVIKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSCkNNQUtFX0JJTkFSWV9ESVIKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSClRBUkdFVF9OQU1FClVOQU1FClRBUkdFVF9OQU1FClRBUkdFVF9OQU1FCkxJQldFQlNPQ0tFVFNfSU5DTFVERV9ESVJTClRBUkdFVF9OQU1FCkxJQldFQlNPQ0tFVFNfTElCUkFSSUVTCkxJQldFQlNPQ0tFVFNfTElCUkFSWV9ESVJTCkNNQUtFX1BPU0lUSU9OX0lOREVQRU5ERU5UX0NPREUKSlNfQklORElOR1NfU09VUkNFUwpMSUJXRUJTT0NLRVRTX0lOQ0xVREVfRElSUwpDVVJMX0lOQ0xVREVfRElSCkxJQldFQlNPQ0tFVFNfTElCUkFSSUVTCkNVUkxfTElCUkFSWQpPUEVOU1NMX1NTTF9MSUJSQVJZCk9QRU5TU0xfQ1JZUFRPX0xJQlJBUlkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					12,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/CMakeLists.txt",
						"symkeys":
						[
							[
								57,
								71
							],
							[
								302,
								317
							],
							[
								330,
								345
							],
							[
								392,
								407
							],
							[
								421,
								436
							],
							[
								482,
								496
							],
							[
								506,
								520
							],
							[
								531,
								553
							],
							[
								562,
								582
							],
							[
								591,
								610
							],
							[
								619,
								651
							],
							[
								660,
								676
							],
							[
								685,
								705
							],
							[
								714,
								738
							],
							[
								747,
								762
							],
							[
								771,
								784
							],
							[
								793,
								810
							],
							[
								819,
								834
							],
							[
								864,
								874
							],
							[
								902,
								912
							],
							[
								941,
								958
							],
							[
								962,
								986
							],
							[
								1049,
								1068
							],
							[
								1072,
								1092
							],
							[
								1190,
								1200
							],
							[
								1493,
								1513
							],
							[
								1661,
								1671
							],
							[
								2026,
								2050
							],
							[
								2082,
								2091
							],
							[
								2142,
								2151
							],
							[
								2245,
								2269
							],
							[
								2301,
								2310
							],
							[
								2956,
								2968
							],
							[
								2972,
								2986
							],
							[
								3045,
								3057
							],
							[
								3080,
								3096
							],
							[
								3100,
								3124
							],
							[
								3143,
								3159
							],
							[
								3163,
								3187
							],
							[
								3225,
								3249
							],
							[
								3322,
								3336
							],
							[
								3779,
								3798
							],
							[
								3802,
								3821
							],
							[
								3861,
								3880
							],
							[
								3884,
								3904
							],
							[
								3991,
								4010
							],
							[
								4028,
								4047
							],
							[
								4051,
								4070
							],
							[
								4098,
								4117
							],
							[
								4380,
								4399
							],
							[
								4425,
								4444
							],
							[
								4448,
								4467
							],
							[
								4538,
								4557
							],
							[
								4668,
								4687
							],
							[
								4715,
								4734
							],
							[
								4738,
								4757
							],
							[
								4830,
								4849
							],
							[
								5053,
								5072
							],
							[
								5117,
								5136
							],
							[
								5156,
								5175
							],
							[
								5295,
								5314
							],
							[
								5386,
								5412
							],
							[
								5416,
								5432
							],
							[
								5445,
								5463
							],
							[
								5510,
								5515
							],
							[
								5539,
								5544
							],
							[
								5576,
								5580
							],
							[
								5590,
								5601
							],
							[
								5612,
								5616
							],
							[
								5636,
								5647
							],
							[
								5658,
								5663
							],
							[
								5700,
								5711
							],
							[
								5715,
								5738
							],
							[
								5742,
								5754
							],
							[
								5762,
								5781
							],
							[
								5785,
								5807
							],
							[
								5852,
								5863
							],
							[
								5917,
								5941
							],
							[
								5967,
								5987
							],
							[
								6015,
								6019
							],
							[
								6087,
								6103
							],
							[
								6107,
								6131
							],
							[
								6135,
								6151
							],
							[
								6163,
								6187
							],
							[
								6233,
								6244
							],
							[
								6261,
								6266
							],
							[
								6298,
								6309
							],
							[
								6396,
								6407
							],
							[
								6450,
								6476
							],
							[
								6507,
								6518
							],
							[
								6522,
								6545
							],
							[
								6575,
								6587
							],
							[
								6591,
								6613
							],
							[
								7034,
								7053
							],
							[
								7220,
								7240
							],
							[
								7253,
								7276
							],
							[
								7289,
								7310
							],
							[
								7323,
								7346
							],
							[
								7359,
								7384
							],
							[
								7438,
								7453
							],
							[
								7518,
								7533
							],
							[
								7634,
								7660
							],
							[
								7669,
								7693
							],
							[
								7725,
								7749
							],
							[
								7773,
								7797
							],
							[
								7828,
								7847
							],
							[
								7897,
								7920
							],
							[
								8025,
								8049
							],
							[
								8140,
								8164
							],
							[
								8219,
								8243
							],
							[
								8354,
								8378
							],
							[
								8423,
								8449
							],
							[
								8453,
								8479
							],
							[
								8546,
								8572
							],
							[
								8575,
								8599
							],
							[
								8840,
								8864
							],
							[
								8897,
								8921
							],
							[
								9033,
								9058
							],
							[
								9105,
								9130
							],
							[
								9177,
								9202
							],
							[
								9248,
								9272
							],
							[
								9312,
								9330
							],
							[
								9370,
								9388
							],
							[
								9428,
								9446
							],
							[
								9485,
								9502
							],
							[
								9541,
								9558
							],
							[
								9597,
								9614
							],
							[
								9659,
								9680
							],
							[
								9720,
								9736
							],
							[
								9812,
								9834
							],
							[
								9907,
								9923
							],
							[
								11100,
								11124
							],
							[
								11388,
								11414
							],
							[
								11490,
								11509
							],
							[
								11513,
								11537
							],
							[
								11627,
								11646
							],
							[
								11699,
								11725
							],
							[
								11729,
								11745
							],
							[
								11758,
								11776
							],
							[
								11823,
								11828
							],
							[
								11852,
								11857
							],
							[
								11889,
								11893
							],
							[
								11903,
								11914
							],
							[
								11925,
								11929
							],
							[
								11949,
								11960
							],
							[
								11971,
								11976
							],
							[
								12013,
								12024
							],
							[
								12028,
								12051
							],
							[
								12055,
								12067
							],
							[
								12075,
								12094
							],
							[
								12098,
								12120
							],
							[
								12157,
								12168
							],
							[
								12222,
								12246
							],
							[
								12272,
								12292
							],
							[
								12320,
								12324
							],
							[
								12392,
								12408
							],
							[
								12412,
								12436
							],
							[
								12440,
								12456
							],
							[
								12468,
								12492
							],
							[
								12538,
								12549
							],
							[
								12566,
								12571
							],
							[
								12603,
								12614
							],
							[
								12701,
								12712
							],
							[
								12755,
								12781
							],
							[
								12812,
								12823
							],
							[
								12827,
								12850
							],
							[
								12940,
								12966
							],
							[
								13481,
								13512
							],
							[
								13561,
								13580
							],
							[
								13736,
								13762
							],
							[
								13816,
								13832
							],
							[
								14202,
								14225
							],
							[
								14229,
								14241
							],
							[
								14267,
								14286
							],
							[
								14290,
								14312
							]
						],
						"symlist":
						[
							"DISABLE_WERROR",
							"LWS_WITH_SHARED",
							"LWS_WITH_STATIC",
							"LWS_WITH_SHARED",
							"LWS_WITH_STATIC",
							"LWS_WITH_LIBUV",
							"LWS_STATIC_PIC",
							"LWS_WITH_EXTERNAL_POLL",
							"LWS_WITH_HTTP_BROTLI",
							"LWS_WITH_HTTP_PROXY",
							"LWS_WITH_HTTP_STREAM_COMPRESSION",
							"LWS_WITH_PLUGINS",
							"LWS_WITH_PLUGINS_API",
							"LWS_WITH_PLUGINS_BUILTIN",
							"LWS_WITH_SOCKS5",
							"LWS_WITH_ZLIB",
							"LWS_WITH_ZIP_FOPS",
							"LWS_HAVE_LIBCAP",
							"LOCAL_CURL",
							"LOCAL_CURL",
							"CMAKE_BUILD_RPATH",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_INSTALL_RPATH",
							"CMAKE_INSTALL_PREFIX",
							"LOCAL_CURL",
							"CMAKE_INSTALL_PREFIX",
							"BUILD_CURL",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CURL_REPO",
							"CURL_REPO",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CURL_REPO",
							"CURL_LIBRARY",
							"CURL_LIBRARIES",
							"CURL_LIBRARY",
							"CURL_LIBRARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CURL_INCLUDE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"DISABLE_WERROR",
							"QUICKJS_INCLUDE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"CMAKE_INSTALL_PREFIX",
							"QUICKJS_INCLUDE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"QUICKJS_INCLUDE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"CURL_INCLUDE_DIR",
							"make_shared_module",
							"FNAME",
							"FNAME",
							"NAME",
							"TARGET_NAME",
							"NAME",
							"TARGET_NAME",
							"FNAME",
							"TARGET_NAME",
							"LIBWEBSOCKETS_LIBRARIES",
							"CURL_LIBRARY",
							"OPENSSL_SSL_LIBRARY",
							"OPENSSL_CRYPTO_LIBRARY",
							"TARGET_NAME",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_INSTALL_PREFIX",
							"NAME",
							"CMAKE_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"TARGET_NAME",
							"UNAME",
							"TARGET_NAME",
							"TARGET_NAME",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"TARGET_NAME",
							"LIBWEBSOCKETS_LIBRARIES",
							"CURL_LIBRARY",
							"OPENSSL_CRYPTO_LIBRARY",
							"BUILD_LIBWEBSOCKETS",
							"LWS_WITHOUT_TESTAPPS",
							"LWS_WITHOUT_TEST_SERVER",
							"LWS_WITHOUT_TEST_PING",
							"LWS_WITHOUT_TEST_CLIENT",
							"LWS_LINK_TESTAPPS_DYNAMIC",
							"LWS_WITH_STATIC",
							"LWS_HAVE_LIBCAP",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"LIBWEBSOCKETS_FOUND",
							"LIBWEBSOCKETS_LIBRARIES",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"LIBWEBSOCKETS_LIBRARY_DIRS",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_SYSTEM_INCLUDE_PATH",
							"CMAKE_SYSTEM_LIBRARY_PATH",
							"CMAKE_SYSTEM_PROGRAM_PATH",
							"CMAKE_SYSTEM_IGNORE_PATH",
							"CMAKE_INCLUDE_PATH",
							"CMAKE_LIBRARY_PATH",
							"CMAKE_PROGRAM_PATH",
							"CMAKE_IGNORE_PATH",
							"CMAKE_PREFIX_PATH",
							"CMAKE_MODULE_PATH",
							"PKG_CONFIG_EXECUTABLE",
							"CMAKE_C_COMPILER",
							"CMAKE_VERBOSE_MAKEFILE",
							"CMAKE_BUILD_TYPE",
							"CMAKE_CURRENT_BINARY_DIR",
							"LIBWEBSOCKETS_LIBRARY_DIRS",
							"QUICKJS_INCLUDE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"CURL_INCLUDE_DIR",
							"make_shared_module",
							"FNAME",
							"FNAME",
							"NAME",
							"TARGET_NAME",
							"NAME",
							"TARGET_NAME",
							"FNAME",
							"TARGET_NAME",
							"LIBWEBSOCKETS_LIBRARIES",
							"CURL_LIBRARY",
							"OPENSSL_SSL_LIBRARY",
							"OPENSSL_CRYPTO_LIBRARY",
							"TARGET_NAME",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_INSTALL_PREFIX",
							"NAME",
							"CMAKE_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"TARGET_NAME",
							"UNAME",
							"TARGET_NAME",
							"TARGET_NAME",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"TARGET_NAME",
							"LIBWEBSOCKETS_LIBRARIES",
							"LIBWEBSOCKETS_LIBRARY_DIRS",
							"CMAKE_POSITION_INDEPENDENT_CODE",
							"JS_BINDINGS_SOURCES",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"CURL_INCLUDE_DIR",
							"LIBWEBSOCKETS_LIBRARIES",
							"CURL_LIBRARY",
							"OPENSSL_SSL_LIBRARY",
							"OPENSSL_CRYPTO_LIBRARY"
						]
					},
					"AQAAAAAAAAAAAAAAxQwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/rpc.js",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADFDAAARElTQUJMRV9XRVJST1IKTFdTX1dJVEhfU0hBUkVECkxXU19XSVRIX1NUQVRJQwpMV1NfV0lUSF9TSEFSRUQKTFdTX1dJVEhfU1RBVElDCkxXU19XSVRIX0xJQlVWCkxXU19TVEFUSUNfUElDCkxXU19XSVRIX0VYVEVSTkFMX1BPTEwKTFdTX1dJVEhfSFRUUF9CUk9UTEkKTFdTX1dJVEhfSFRUUF9QUk9YWQpMV1NfV0lUSF9IVFRQX1NUUkVBTV9DT01QUkVTU0lPTgpMV1NfV0lUSF9QTFVHSU5TCkxXU19XSVRIX1BMVUdJTlNfQVBJCkxXU19XSVRIX1BMVUdJTlNfQlVJTFRJTgpMV1NfV0lUSF9TT0NLUzUKTFdTX1dJVEhfWkxJQgpMV1NfV0lUSF9aSVBfRk9QUwpMV1NfSEFWRV9MSUJDQVAKTE9DQUxfQ1VSTApMT0NBTF9DVVJMCkNNQUtFX0JVSUxEX1JQQVRICkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpDTUFLRV9JTlNUQUxMX1JQQVRICkNNQUtFX0lOU1RBTExfUFJFRklYCkxPQ0FMX0NVUkwKQ01BS0VfSU5TVEFMTF9QUkVGSVgKQlVJTERfQ1VSTApDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKQ1VSTF9SRVBPCkNVUkxfUkVQTwpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKQ1VSTF9SRVBPCkNVUkxfTElCUkFSWQpDVVJMX0xJQlJBUklFUwpDVVJMX0xJQlJBUlkKQ1VSTF9MSUJSQVJZX0RJUgpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKQ1VSTF9JTkNMVURFX0RJUgpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSCkRJU0FCTEVfV0VSUk9SClFVSUNLSlNfSU5DTFVERV9ESVIKUVVJQ0tKU19JTkNMVURFX0RJUgpRVUlDS0pTX0lOQ0xVREVfRElSCkNNQUtFX0lOU1RBTExfUFJFRklYClFVSUNLSlNfSU5DTFVERV9ESVIKUVVJQ0tKU19JTkNMVURFX0RJUgpRVUlDS0pTX0lOQ0xVREVfRElSClFVSUNLSlNfSU5DTFVERV9ESVIKQ01BS0VfQ19GTEFHU19ERUJVRwpDTUFLRV9DX0ZMQUdTX0RFQlVHCkNNQUtFX0NfRkxBR1NfREVCVUcKQ01BS0VfQ19GTEFHU19ERUJVRwpDTUFLRV9DX0ZMQUdTX0RFQlVHCkNNQUtFX0NfRkxBR1NfREVCVUcKQ01BS0VfQ19GTEFHU19ERUJVRwpDTUFLRV9DX0ZMQUdTX0RFQlVHClFVSUNLSlNfSU5DTFVERV9ESVIKUVVJQ0tKU19JTkNMVURFX0RJUgpRVUlDS0pTX0lOQ0xVREVfRElSClFVSUNLSlNfSU5DTFVERV9ESVIKTElCV0VCU09DS0VUU19JTkNMVURFX0RJUlMKQ1VSTF9JTkNMVURFX0RJUgogIG1ha2Vfc2hhcmVkX21vZHVsZQpGTkFNRQpGTkFNRQpOQU1FClRBUkdFVF9OQU1FCk5BTUUKVEFSR0VUX05BTUUKRk5BTUUKVEFSR0VUX05BTUUKTElCV0VCU09DS0VUU19MSUJSQVJJRVMKQ1VSTF9MSUJSQVJZCk9QRU5TU0xfU1NMX0xJQlJBUlkKT1BFTlNTTF9DUllQVE9fTElCUkFSWQpUQVJHRVRfTkFNRQpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKQ01BS0VfSU5TVEFMTF9QUkVGSVgKTkFNRQpDTUFLRV9CSU5BUllfRElSCkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpDTUFLRV9CSU5BUllfRElSCkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpUQVJHRVRfTkFNRQpVTkFNRQpUQVJHRVRfTkFNRQpUQVJHRVRfTkFNRQpMSUJXRUJTT0NLRVRTX0lOQ0xVREVfRElSUwpUQVJHRVRfTkFNRQpMSUJXRUJTT0NLRVRTX0xJQlJBUklFUwpDVVJMX0xJQlJBUlkKT1BFTlNTTF9DUllQVE9fTElCUkFSWQpCVUlMRF9MSUJXRUJTT0NLRVRTCkxXU19XSVRIT1VUX1RFU1RBUFBTCkxXU19XSVRIT1VUX1RFU1RfU0VSVkVSCkxXU19XSVRIT1VUX1RFU1RfUElORwpMV1NfV0lUSE9VVF9URVNUX0NMSUVOVApMV1NfTElOS19URVNUQVBQU19EWU5BTUlDCkxXU19XSVRIX1NUQVRJQwpMV1NfSEFWRV9MSUJDQVAKTElCV0VCU09DS0VUU19JTkNMVURFX0RJUlMKQ01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSCkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKTElCV0VCU09DS0VUU19GT1VORApMSUJXRUJTT0NLRVRTX0xJQlJBUklFUwpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSCkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKTElCV0VCU09DS0VUU19JTkNMVURFX0RJUlMKTElCV0VCU09DS0VUU19JTkNMVURFX0RJUlMKTElCV0VCU09DS0VUU19MSUJSQVJZX0RJUlMKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSCkNNQUtFX0NVUlJFTlRfU09VUkNFX0RJUgpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKQ01BS0VfU1lTVEVNX0lOQ0xVREVfUEFUSApDTUFLRV9TWVNURU1fTElCUkFSWV9QQVRICkNNQUtFX1NZU1RFTV9QUk9HUkFNX1BBVEgKQ01BS0VfU1lTVEVNX0lHTk9SRV9QQVRICkNNQUtFX0lOQ0xVREVfUEFUSApDTUFLRV9MSUJSQVJZX1BBVEgKQ01BS0VfUFJPR1JBTV9QQVRICkNNQUtFX0lHTk9SRV9QQVRICkNNQUtFX1BSRUZJWF9QQVRICkNNQUtFX01PRFVMRV9QQVRIClBLR19DT05GSUdfRVhFQ1VUQUJMRQpDTUFLRV9DX0NPTVBJTEVSCkNNQUtFX1ZFUkJPU0VfTUFLRUZJTEUKQ01BS0VfQlVJTERfVFlQRQpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKTElCV0VCU09DS0VUU19MSUJSQVJZX0RJUlMKUVVJQ0tKU19JTkNMVURFX0RJUgpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKUVVJQ0tKU19JTkNMVURFX0RJUgpMSUJXRUJTT0NLRVRTX0lOQ0xVREVfRElSUwpDVVJMX0lOQ0xVREVfRElSCiAgbWFrZV9zaGFyZWRfbW9kdWxlCkZOQU1FCkZOQU1FCk5BTUUKVEFSR0VUX05BTUUKTkFNRQpUQVJHRVRfTkFNRQpGTkFNRQpUQVJHRVRfTkFNRQpMSUJXRUJTT0NLRVRTX0xJQlJBUklFUwpDVVJMX0xJQlJBUlkKT1BFTlNTTF9TU0xfTElCUkFSWQpPUEVOU1NMX0NSWVBUT19MSUJSQVJZClRBUkdFVF9OQU1FCkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpDTUFLRV9JTlNUQUxMX1BSRUZJWApOQU1FCkNNQUtFX0JJTkFSWV9ESVIKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSCkNNQUtFX0JJTkFSWV9ESVIKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSClRBUkdFVF9OQU1FClVOQU1FClRBUkdFVF9OQU1FClRBUkdFVF9OQU1FCkxJQldFQlNPQ0tFVFNfSU5DTFVERV9ESVJTClRBUkdFVF9OQU1FCkxJQldFQlNPQ0tFVFNfTElCUkFSSUVTCkxJQldFQlNPQ0tFVFNfTElCUkFSWV9ESVJTCkNNQUtFX1BPU0lUSU9OX0lOREVQRU5ERU5UX0NPREUKSlNfQklORElOR1NfU09VUkNFUwpMSUJXRUJTT0NLRVRTX0lOQ0xVREVfRElSUwpDVVJMX0lOQ0xVREVfRElSCkxJQldFQlNPQ0tFVFNfTElCUkFSSUVTCkNVUkxfTElCUkFSWQpPUEVOU1NMX1NTTF9MSUJSQVJZCk9QRU5TU0xfQ1JZUFRPX0xJQlJBUlkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/rpc.js",
						"symkeys":
						[
							[
								430,
								462
							],
							[
								519,
								537
							],
							[
								589,
								607
							],
							[
								642,
								662
							],
							[
								711,
								730
							],
							[
								736,
								745
							],
							[
								756,
								770
							],
							[
								799,
								820
							],
							[
								886,
								917
							],
							[
								975,
								990
							],
							[
								1057,
								1086
							],
							[
								1496,
								1500
							],
							[
								1527,
								1538
							],
							[
								1614,
								1653
							],
							[
								1866,
								1889
							],
							[
								1900,
								1903
							],
							[
								1920,
								1947
							],
							[
								2090,
								2096
							],
							[
								2111,
								2117
							],
							[
								2146,
								2152
							],
							[
								2192,
								2247
							],
							[
								2257,
								2267
							],
							[
								2284,
								2308
							],
							[
								2584,
								2602
							],
							[
								2617,
								2635
							],
							[
								2664,
								2682
							],
							[
								2734,
								2861
							],
							[
								2864,
								2899
							],
							[
								2912,
								2924
							],
							[
								3012,
								3026
							],
							[
								3209,
								3224
							],
							[
								3352,
								3366
							],
							[
								3490,
								3508
							],
							[
								3623,
								3636
							],
							[
								3814,
								3844
							],
							[
								3863,
								3881
							],
							[
								3893,
								3908
							],
							[
								3920,
								3938
							],
							[
								4018,
								4036
							],
							[
								4081,
								4088
							],
							[
								4149,
								4155
							],
							[
								4197,
								4209
							],
							[
								4219,
								4231
							],
							[
								4248,
								4269
							],
							[
								4311,
								4323
							],
							[
								4380,
								4392
							],
							[
								4455,
								4489
							],
							[
								4529,
								4541
							],
							[
								4610,
								4622
							],
							[
								4684,
								4709
							],
							[
								4752,
								4764
							],
							[
								4787,
								4799
							],
							[
								4835,
								4854
							],
							[
								5063,
								5069
							],
							[
								5111,
								5116
							],
							[
								5139,
								5160
							],
							[
								5278,
								5313
							],
							[
								5429,
								5433
							],
							[
								5460,
								5469
							],
							[
								5522,
								5547
							],
							[
								5552,
								5580
							],
							[
								5810,
								5819
							],
							[
								5920,
								5930
							],
							[
								5960,
								5970
							],
							[
								6064,
								6074
							],
							[
								6160,
								6178
							],
							[
								6289,
								6306
							],
							[
								6343,
								6352
							],
							[
								6389,
								6439
							],
							[
								6556,
								6568
							],
							[
								7024,
								7038
							],
							[
								7264,
								7278
							],
							[
								7450,
								7464
							],
							[
								8052,
								8056
							],
							[
								8150,
								8170
							],
							[
								8276,
								8291
							],
							[
								8469,
								8481
							],
							[
								8536,
								8550
							],
							[
								8675,
								8693
							],
							[
								8820,
								8829
							],
							[
								8919,
								8935
							],
							[
								9305,
								9338
							],
							[
								9843,
								9887
							],
							[
								9995,
								10008
							],
							[
								10070,
								10076
							],
							[
								10161,
								10195
							],
							[
								10451,
								10462
							],
							[
								10520,
								10536
							],
							[
								10617,
								10632
							],
							[
								10983,
								10995
							],
							[
								11213,
								11233
							],
							[
								11328,
								11348
							],
							[
								11512,
								11536
							],
							[
								11662,
								11680
							],
							[
								11785,
								11795
							],
							[
								11859,
								11869
							],
							[
								11930,
								11970
							],
							[
								11988,
								12019
							],
							[
								12349,
								12355
							],
							[
								12520,
								12540
							],
							[
								12636,
								12676
							],
							[
								12836,
								12845
							],
							[
								12875,
								12883
							],
							[
								13061,
								13101
							],
							[
								13162,
								13169
							],
							[
								13188,
								13195
							],
							[
								13264,
								13304
							],
							[
								13369,
								13376
							],
							[
								13454,
								13494
							],
							[
								13559,
								13566
							],
							[
								13606,
								13612
							],
							[
								13679,
								13683
							],
							[
								13738,
								13742
							],
							[
								13814,
								13845
							],
							[
								14108,
								14146
							],
							[
								14230,
								14239
							],
							[
								14715,
								14723
							],
							[
								14759,
								14779
							],
							[
								15360,
								15369
							],
							[
								15679,
								15688
							],
							[
								16088,
								16093
							],
							[
								16255,
								16260
							],
							[
								16292,
								16316
							],
							[
								16569,
								16590
							],
							[
								16616,
								16635
							],
							[
								16665,
								16677
							],
							[
								16721,
								16726
							],
							[
								16800,
								16809
							],
							[
								17117,
								17177
							],
							[
								17784,
								17797
							],
							[
								17969,
								17977
							],
							[
								18095,
								18107
							],
							[
								18164,
								18180
							],
							[
								18503,
								18517
							],
							[
								18737,
								18771
							],
							[
								19070,
								19075
							],
							[
								19170,
								19211
							],
							[
								19505,
								19520
							],
							[
								19981,
								19991
							],
							[
								20028,
								20038
							],
							[
								20107,
								20116
							],
							[
								20174,
								20212
							],
							[
								20345,
								20363
							],
							[
								20393,
								20408
							],
							[
								20435,
								20454
							],
							[
								20489,
								20508
							],
							[
								20543,
								20560
							],
							[
								20593,
								20613
							],
							[
								20705,
								20732
							],
							[
								20831,
								20867
							],
							[
								21025,
								21071
							],
							[
								21170,
								21201
							],
							[
								21758,
								21768
							],
							[
								21902,
								21954
							],
							[
								21973,
								22028
							],
							[
								22347,
								22418
							],
							[
								22480,
								22487
							],
							[
								22578,
								22585
							],
							[
								22672,
								22754
							],
							[
								23296,
								23326
							],
							[
								23694,
								23729
							],
							[
								23742,
								23782
							],
							[
								23961,
								24017
							],
							[
								24246,
								24273
							],
							[
								24284,
								24299
							],
							[
								24312,
								24342
							],
							[
								24599,
								24695
							],
							[
								24721,
								24739
							],
							[
								24987,
								25005
							],
							[
								25108,
								25121
							],
							[
								25705,
								25738
							],
							[
								25807,
								25837
							],
							[
								25876,
								25880
							],
							[
								25967,
								25994
							],
							[
								26033,
								26041
							],
							[
								26121,
								26147
							],
							[
								26193,
								26222
							],
							[
								26279,
								26324
							],
							[
								26424,
								26429
							],
							[
								26529,
								26563
							],
							[
								26680,
								26740
							],
							[
								26955,
								26977
							],
							[
								27143,
								27165
							],
							[
								27263,
								27283
							],
							[
								27315,
								27320
							],
							[
								27449,
								27476
							],
							[
								27708,
								27755
							],
							[
								28573,
								28608
							],
							[
								28630,
								28634
							],
							[
								28666,
								28670
							],
							[
								28692,
								28724
							],
							[
								28858,
								28900
							],
							[
								28953,
								28994
							]
						],
						"symlist":
						[
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"VfnAdapter = vfn =>",
							"get: k =>",
							"set: (k, v) =>",
							"VfnDecorator = vfn =>",
							".memoize = function memoize(fn)",
							"(key, value) =>",
							"self = function(key, ...args)",
							"n =>",
							"(acc, n) =>",
							".GetClasses = function* GetClasses(obj)",
							" function Mapper(map = ",
							"())",
							"self = function(key, value)",
							"Mapper",
							"Mapper",
							"Mapper",
							" function DefaultConstructor(mapper, fn = (...args) => ",
							"(...args))",
							"self = function(...args)",
							"DefaultConstructor",
							"DefaultConstructor",
							"DefaultConstructor",
							" function EventLogger(instance = {}, callback = (name, event, thisObj) => console.log('EventLogger', { name, event, thisObj }))",
							" function WrapEvent(handler, name)",
							" function(e)",
							"get(obj, prop)",
							"MessageReceiver",
							"onmessage(msg)",
							"MessageTransmitter",
							"sendMessage()",
							" function MessageTransceiver()",
							"MessageTransceiver",
							"MessageReceiver",
							"MessageTransmitter",
							"value: instance =>",
							"ctor =>",
							"none()",
							"encode: v =>",
							"decode: v =>",
							"json(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".js = function js(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".bjson = function bjson()",
							"encode: v =>",
							"decode: v =>",
							" function RPCApi(c)",
							"RPCApi",
							" o =>",
							" function RPCProxy(c)",
							" function RPCObject(id, connection)",
							"r =>",
							"RPCObject",
							" function RPCFactory(api)",
							"async function Factory(opts)",
							"RPCObject",
							"RPCFactory",
							"RPCFactory",
							"Connection",
							"static equal(a, b)",
							"static get last()",
							"makeSeq()",
							"constructor(socket, instance, log, codec = 'none')",
							"log(...args)",
							"error(message)",
							"close(...args)",
							"onmessage(msg)",
							"r =>",
							"processMessage(data)",
							"onconnect(sock)",
							"onpong(data)",
							"onerror(error)",
							"onclose(code, why)",
							"cleanup()",
							"sendMessage(obj)",
							"sendCommand(command, params = {})",
							"static getCallbacks(instance, verbosity = 0)",
							" (...args) =>",
							" () =>",
							"handle = (sock, event, ...args) =>",
							"then: fn =>",
							"remove = sock =>",
							"onConnect(sock)",
							"onOpen(sock)",
							"onMessage(sock, msg)",
							"onError(sock, error)",
							"onClose(sock, code, why)",
							"onPong(sock, data)",
							"Connection",
							"Connection",
							"function RPCServerEndpoint(classes = {})",
							"new({ class: name, args = [] })",
							"list()",
							"({ id }, respond) =>",
							"({ obj, method, args = [] }, respond) =>",
							"result =>",
							"error =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"sym =>",
							"v =>",
							"v =>",
							"({ obj, property }, respond) =>",
							"({ obj, property, value }, respond) =>",
							"RPCServer",
							"makeId()",
							"processMessage(data)",
							"RPCServer",
							"RPCClient",
							" e =>",
							"() =>",
							"processMessage(response)",
							"command(name, params)",
							"(accept, reject) =>",
							" response =>",
							" e =>",
							"RPCClient",
							" function RPCSocket(url, service = RPCServer, verbosity = 1)",
							" (...args) =>",
							"get fd()",
							"get socket()",
							"get connection()",
							"register(ctor)",
							"listen(new_ws, os = globalThis.os)",
							"() =>",
							"async connect(new_ws, os = globalThis.os)",
							"get connected()",
							"get list()",
							"get last()",
							"RPCSocket",
							"function MakeWebSocket(url, callbacks)",
							".onconnect = () =>",
							".onopen = () =>",
							".onerror = error =>",
							".onmessage = msg =>",
							".onpong = pong =>",
							".onclose = reason =>",
							" function isThenable(value)",
							" function hasHandler(obj, eventName)",
							" function callHandler(obj, eventName, ...args)",
							" function parseURL(url_or_port)",
							"toString()",
							" function GetProperties(obj, method = obj => Object.",
							"(obj), pred = (obj, depth) => obj !== Object.prototype)",
							" function GetKeys(obj, pred = (obj, depth) => obj !== Object.prototype)",
							" obj =>",
							" obj =>",
							" function getPropertyDescriptors(obj, merge = true, pred = (proto, depth) => true)",
							" function define(obj, ...args)",
							" function setHandlers(os, handlers)",
							".onFd = function(fd, readable, writable)",
							" function statusResponse(success, result_or_error, data)",
							" function objectCommand(fn)",
							" function(data)",
							"respond = (success, result) =>",
							" function MakeListCommand(pred = v => typeof v != 'function', defaults = { maxDepth: Infinity })",
							"(data, respond) =>",
							" (proto, depth) =>",
							"(acc, key) =>",
							" function getPrototypeName(proto)",
							"function DeserializeEntries(e)",
							"a =>",
							"function DeserializeKeys(e)",
							"([k]) =>",
							"function DeserializeMap(e)",
							"function DeserializeObject(e)",
							"function ForwardMethods(e, ret = {}, thisObj)",
							" o =>",
							"function ForwardObject(e, thisObj)",
							"function MakeCommandFunction(cmd, getConnection, thisObj, t)",
							"getConnection = obj =>",
							" function(params = {})",
							"(resolve, reject) =>",
							" r =>",
							"async function(params = {})",
							" function SerializeValue(value, source = false)",
							" function DeserializeSymbols(names)",
							"n =>",
							"n =>",
							" function DeserializeValue(desc)",
							"RPCConnect = (url, service = RPCClient) =>",
							"RPCListen = (url, service = RPCServer) =>"
						]
					},
					"AQAAAAAAAAAAAAAAUwkAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/CMakeLists.txt",
						"symkeys":
						[
							[
								57,
								71
							],
							[
								302,
								317
							],
							[
								330,
								345
							],
							[
								392,
								407
							],
							[
								421,
								436
							],
							[
								482,
								496
							],
							[
								506,
								520
							],
							[
								531,
								553
							],
							[
								562,
								582
							],
							[
								591,
								610
							],
							[
								619,
								651
							],
							[
								660,
								676
							],
							[
								685,
								705
							],
							[
								714,
								738
							],
							[
								747,
								762
							],
							[
								771,
								784
							],
							[
								793,
								810
							],
							[
								819,
								834
							],
							[
								864,
								874
							],
							[
								902,
								912
							],
							[
								941,
								958
							],
							[
								962,
								986
							],
							[
								1049,
								1068
							],
							[
								1072,
								1092
							],
							[
								1190,
								1200
							],
							[
								1493,
								1513
							],
							[
								1661,
								1671
							],
							[
								2026,
								2050
							],
							[
								2082,
								2091
							],
							[
								2142,
								2151
							],
							[
								2245,
								2269
							],
							[
								2301,
								2310
							],
							[
								2956,
								2968
							],
							[
								2972,
								2986
							],
							[
								3045,
								3057
							],
							[
								3080,
								3096
							],
							[
								3100,
								3124
							],
							[
								3143,
								3159
							],
							[
								3163,
								3187
							],
							[
								3225,
								3249
							],
							[
								3322,
								3336
							],
							[
								3779,
								3798
							],
							[
								3802,
								3821
							],
							[
								3861,
								3880
							],
							[
								3884,
								3904
							],
							[
								3991,
								4010
							],
							[
								4028,
								4047
							],
							[
								4051,
								4070
							],
							[
								4098,
								4117
							],
							[
								4380,
								4399
							],
							[
								4425,
								4444
							],
							[
								4448,
								4467
							],
							[
								4538,
								4557
							],
							[
								4668,
								4687
							],
							[
								4715,
								4734
							],
							[
								4738,
								4757
							],
							[
								4830,
								4849
							],
							[
								5053,
								5072
							],
							[
								5117,
								5136
							],
							[
								5156,
								5175
							],
							[
								5295,
								5314
							],
							[
								5386,
								5412
							],
							[
								5416,
								5432
							],
							[
								5445,
								5463
							],
							[
								5510,
								5515
							],
							[
								5539,
								5544
							],
							[
								5576,
								5580
							],
							[
								5590,
								5601
							],
							[
								5612,
								5616
							],
							[
								5636,
								5647
							],
							[
								5658,
								5663
							],
							[
								5700,
								5711
							],
							[
								5715,
								5738
							],
							[
								5742,
								5754
							],
							[
								5762,
								5781
							],
							[
								5785,
								5807
							],
							[
								5852,
								5863
							],
							[
								5917,
								5941
							],
							[
								5967,
								5987
							],
							[
								6015,
								6019
							],
							[
								6087,
								6103
							],
							[
								6107,
								6131
							],
							[
								6135,
								6151
							],
							[
								6163,
								6187
							],
							[
								6233,
								6244
							],
							[
								6261,
								6266
							],
							[
								6298,
								6309
							],
							[
								6396,
								6407
							],
							[
								6450,
								6476
							],
							[
								6507,
								6518
							],
							[
								6522,
								6545
							],
							[
								6575,
								6587
							],
							[
								6591,
								6613
							],
							[
								7034,
								7053
							],
							[
								7220,
								7240
							],
							[
								7253,
								7276
							],
							[
								7289,
								7310
							],
							[
								7323,
								7346
							],
							[
								7359,
								7384
							],
							[
								7438,
								7453
							],
							[
								7518,
								7533
							],
							[
								7634,
								7660
							],
							[
								7669,
								7693
							],
							[
								7725,
								7749
							],
							[
								7773,
								7797
							],
							[
								7828,
								7847
							],
							[
								7897,
								7920
							],
							[
								8022,
								8046
							],
							[
								8137,
								8161
							],
							[
								8216,
								8240
							],
							[
								8351,
								8375
							],
							[
								8420,
								8446
							],
							[
								8450,
								8476
							],
							[
								8543,
								8569
							],
							[
								8572,
								8596
							],
							[
								8837,
								8861
							],
							[
								8894,
								8918
							],
							[
								9030,
								9055
							],
							[
								9102,
								9127
							],
							[
								9174,
								9199
							],
							[
								9245,
								9269
							],
							[
								9309,
								9327
							],
							[
								9367,
								9385
							],
							[
								9425,
								9443
							],
							[
								9482,
								9499
							],
							[
								9538,
								9555
							],
							[
								9594,
								9611
							],
							[
								9656,
								9677
							],
							[
								9717,
								9733
							],
							[
								9809,
								9831
							],
							[
								9904,
								9920
							],
							[
								11097,
								11121
							],
							[
								11385,
								11411
							],
							[
								11487,
								11506
							],
							[
								11510,
								11534
							],
							[
								11624,
								11643
							],
							[
								11696,
								11722
							],
							[
								11726,
								11742
							],
							[
								11755,
								11773
							],
							[
								11820,
								11825
							],
							[
								11849,
								11854
							],
							[
								11886,
								11890
							],
							[
								11900,
								11911
							],
							[
								11922,
								11926
							],
							[
								11946,
								11957
							],
							[
								11968,
								11973
							],
							[
								12010,
								12021
							],
							[
								12025,
								12048
							],
							[
								12052,
								12064
							],
							[
								12072,
								12091
							],
							[
								12095,
								12117
							],
							[
								12154,
								12165
							],
							[
								12219,
								12243
							],
							[
								12269,
								12289
							],
							[
								12317,
								12321
							],
							[
								12389,
								12405
							],
							[
								12409,
								12433
							],
							[
								12437,
								12453
							],
							[
								12465,
								12489
							],
							[
								12535,
								12546
							],
							[
								12563,
								12568
							],
							[
								12600,
								12611
							],
							[
								12698,
								12709
							],
							[
								12752,
								12778
							],
							[
								12809,
								12820
							],
							[
								12824,
								12847
							],
							[
								12937,
								12963
							],
							[
								13478,
								13509
							],
							[
								13558,
								13577
							],
							[
								13733,
								13759
							],
							[
								13813,
								13829
							],
							[
								14199,
								14222
							],
							[
								14226,
								14238
							],
							[
								14264,
								14283
							],
							[
								14287,
								14309
							]
						],
						"symlist":
						[
							"DISABLE_WERROR",
							"LWS_WITH_SHARED",
							"LWS_WITH_STATIC",
							"LWS_WITH_SHARED",
							"LWS_WITH_STATIC",
							"LWS_WITH_LIBUV",
							"LWS_STATIC_PIC",
							"LWS_WITH_EXTERNAL_POLL",
							"LWS_WITH_HTTP_BROTLI",
							"LWS_WITH_HTTP_PROXY",
							"LWS_WITH_HTTP_STREAM_COMPRESSION",
							"LWS_WITH_PLUGINS",
							"LWS_WITH_PLUGINS_API",
							"LWS_WITH_PLUGINS_BUILTIN",
							"LWS_WITH_SOCKS5",
							"LWS_WITH_ZLIB",
							"LWS_WITH_ZIP_FOPS",
							"LWS_HAVE_LIBCAP",
							"LOCAL_CURL",
							"LOCAL_CURL",
							"CMAKE_BUILD_RPATH",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_INSTALL_RPATH",
							"CMAKE_INSTALL_PREFIX",
							"LOCAL_CURL",
							"CMAKE_INSTALL_PREFIX",
							"BUILD_CURL",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CURL_REPO",
							"CURL_REPO",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CURL_REPO",
							"CURL_LIBRARY",
							"CURL_LIBRARIES",
							"CURL_LIBRARY",
							"CURL_LIBRARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CURL_INCLUDE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"DISABLE_WERROR",
							"QUICKJS_INCLUDE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"CMAKE_INSTALL_PREFIX",
							"QUICKJS_INCLUDE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"QUICKJS_INCLUDE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"CURL_INCLUDE_DIR",
							"make_shared_module",
							"FNAME",
							"FNAME",
							"NAME",
							"TARGET_NAME",
							"NAME",
							"TARGET_NAME",
							"FNAME",
							"TARGET_NAME",
							"LIBWEBSOCKETS_LIBRARIES",
							"CURL_LIBRARY",
							"OPENSSL_SSL_LIBRARY",
							"OPENSSL_CRYPTO_LIBRARY",
							"TARGET_NAME",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_INSTALL_PREFIX",
							"NAME",
							"CMAKE_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"TARGET_NAME",
							"UNAME",
							"TARGET_NAME",
							"TARGET_NAME",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"TARGET_NAME",
							"LIBWEBSOCKETS_LIBRARIES",
							"CURL_LIBRARY",
							"OPENSSL_CRYPTO_LIBRARY",
							"BUILD_LIBWEBSOCKETS",
							"LWS_WITHOUT_TESTAPPS",
							"LWS_WITHOUT_TEST_SERVER",
							"LWS_WITHOUT_TEST_PING",
							"LWS_WITHOUT_TEST_CLIENT",
							"LWS_LINK_TESTAPPS_DYNAMIC",
							"LWS_WITH_STATIC",
							"LWS_HAVE_LIBCAP",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"LIBWEBSOCKETS_FOUND",
							"LIBWEBSOCKETS_LIBRARIES",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"LIBWEBSOCKETS_LIBRARY_DIRS",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_SYSTEM_INCLUDE_PATH",
							"CMAKE_SYSTEM_LIBRARY_PATH",
							"CMAKE_SYSTEM_PROGRAM_PATH",
							"CMAKE_SYSTEM_IGNORE_PATH",
							"CMAKE_INCLUDE_PATH",
							"CMAKE_LIBRARY_PATH",
							"CMAKE_PROGRAM_PATH",
							"CMAKE_IGNORE_PATH",
							"CMAKE_PREFIX_PATH",
							"CMAKE_MODULE_PATH",
							"PKG_CONFIG_EXECUTABLE",
							"CMAKE_C_COMPILER",
							"CMAKE_VERBOSE_MAKEFILE",
							"CMAKE_BUILD_TYPE",
							"CMAKE_CURRENT_BINARY_DIR",
							"LIBWEBSOCKETS_LIBRARY_DIRS",
							"QUICKJS_INCLUDE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"QUICKJS_INCLUDE_DIR",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"CURL_INCLUDE_DIR",
							"make_shared_module",
							"FNAME",
							"FNAME",
							"NAME",
							"TARGET_NAME",
							"NAME",
							"TARGET_NAME",
							"FNAME",
							"TARGET_NAME",
							"LIBWEBSOCKETS_LIBRARIES",
							"CURL_LIBRARY",
							"OPENSSL_SSL_LIBRARY",
							"OPENSSL_CRYPTO_LIBRARY",
							"TARGET_NAME",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_INSTALL_PREFIX",
							"NAME",
							"CMAKE_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"TARGET_NAME",
							"UNAME",
							"TARGET_NAME",
							"TARGET_NAME",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"TARGET_NAME",
							"LIBWEBSOCKETS_LIBRARIES",
							"LIBWEBSOCKETS_LIBRARY_DIRS",
							"CMAKE_POSITION_INDEPENDENT_CODE",
							"JS_BINDINGS_SOURCES",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"CURL_INCLUDE_DIR",
							"LIBWEBSOCKETS_LIBRARIES",
							"CURL_LIBRARY",
							"OPENSSL_SSL_LIBRARY",
							"OPENSSL_CRYPTO_LIBRARY"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABTCQAAICAuTG9nV3JhcCA9IGZ1bmN0aW9uIExvZ1dyYXAobG9nKQogIC5tZW1vaXplID0gZnVuY3Rpb24gbWVtb2l6ZShmbikKICBzZWxmID0gZnVuY3Rpb24oa2V5LCAuLi5hcmdzKQogIC5HZXRDbGFzc2VzID0gZnVuY3Rpb24qR2V0Q2xhc3NlcyhvYmopCk1hcHBlcihtYXAgPSAKICBzZWxmID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSkKTWFwcGVyCk1hcHBlcgpNYXBwZXIKICBzZWxmID0gZnVuY3Rpb24oLi4uYXJncykKRGVmYXVsdENvbnN0cnVjdG9yCkRlZmF1bHRDb25zdHJ1Y3RvcgpEZWZhdWx0Q29uc3RydWN0b3IKV3JhcEV2ZW50KGhhbmRsZXIsIG5hbWUpCiAgZnVuY3Rpb24oZSkKICBnZXQob2JqLCBwcm9wKQpNZXNzYWdlUmVjZWl2ZXIKICBvbm1lc3NhZ2UobXNnKQpNZXNzYWdlVHJhbnNtaXR0ZXIKICBzZW5kTWVzc2FnZSgpCk1lc3NhZ2VUcmFuc2NlaXZlcigpCk1lc3NhZ2VUcmFuc2NlaXZlcgpNZXNzYWdlUmVjZWl2ZXIKTWVzc2FnZVRyYW5zbWl0dGVyCiAgbm9uZSgpCiAganNvbih2ZXJib3NlID0gZmFsc2UpCiAgLmpzID0gZnVuY3Rpb24ganModmVyYm9zZSA9IGZhbHNlKQogIC5ianNvbiA9IGZ1bmN0aW9uIGJqc29uKCkKUlBDQXBpKGMpClJQQ0FwaQpSUENQcm94eShjKQpSUENPYmplY3QoaWQsIGNvbm5lY3Rpb24pClJQQ09iamVjdApSUENGYWN0b3J5KGFwaSkKRmFjdG9yeShvcHRzKQpSUENPYmplY3QKUlBDRmFjdG9yeQpSUENGYWN0b3J5CkNvbm5lY3Rpb24KICBzdGF0aWMgZXF1YWwoYSwgYikKICBzdGF0aWMgZ2V0IGxhc3QoKQogIG1ha2VTZXEoKQogIGNvbnN0cnVjdG9yKHNvY2tldCwgaW5zdGFuY2UsIGxvZywgY29kZWMgPSAnbm9uZScpCiAgbG9nKC4uLmFyZ3MpCiAgZXJyb3IobWVzc2FnZSkKICBjbG9zZSguLi5hcmdzKQogIG9ubWVzc2FnZShtc2cpCiAgcHJvY2Vzc01lc3NhZ2UoZGF0YSkKICBvbmNvbm5lY3Qoc29jaykKICBvbnBvbmcoZGF0YSkKICBvbmVycm9yKGVycm9yKQogIG9uY2xvc2UoY29kZSwgd2h5KQogIGNsZWFudXAoKQogIHNlbmRNZXNzYWdlKG9iaikKICBzZW5kQ29tbWFuZChjb21tYW5kLCBwYXJhbXMgPSB7fSkKICBzdGF0aWMgZ2V0Q2FsbGJhY2tzKGluc3RhbmNlLCB2ZXJib3NpdHkgPSAwKQogIG9uQ29ubmVjdChzb2NrKQogIG9uT3Blbihzb2NrKQogIG9uTWVzc2FnZShzb2NrLCBtc2cpCiAgb25FcnJvcihzb2NrLCBlcnJvcikKICBvbkNsb3NlKHNvY2ssIGNvZGUsIHdoeSkKICBvblBvbmcoc29jaywgZGF0YSkKQ29ubmVjdGlvbgpDb25uZWN0aW9uClJQQ1NlcnZlckVuZHBvaW50KGNsYXNzZXMgPSB7fSkKICBuZXcoeyBjbGFzczogbmFtZSwgYXJncyA9IFtdIH0pCiAgbGlzdCgpClJQQ1NlcnZlcgogIG1ha2VJZCgpCiAgcHJvY2Vzc01lc3NhZ2UoZGF0YSkKUlBDU2VydmVyClJQQ0NsaWVudAogIHByb2Nlc3NNZXNzYWdlKHJlc3BvbnNlKQogIGNvbW1hbmQobmFtZSwgcGFyYW1zKQpSUENDbGllbnQKUlBDU29ja2V0KHVybCwgc2VydmljZSA9IFJQQ1NlcnZlciwgdmVyYm9zaXR5ID0gMSkKICBnZXQgZmQoKQogIGdldCBzb2NrZXQoKQogIGdldCBjb25uZWN0aW9uKCkKICByZWdpc3RlcihjdG9yKQogIGxpc3RlbihuZXdfd3MsIG9zID0gZ2xvYmFsVGhpcy5vcykKICBjb25uZWN0KG5ld193cywgb3MgPSBnbG9iYWxUaGlzLm9zKQogIGdldCBjb25uZWN0ZWQoKQogIGdldCBsaXN0KCkKICBnZXQgbGFzdCgpClJQQ1NvY2tldApNYWtlV2ViU29ja2V0KHVybCwgY2FsbGJhY2tzKQogIGlzVGhlbmFibGUodmFsdWUpCiAgaGFzSGFuZGxlcihvYmosIGV2ZW50TmFtZSkKICBjYWxsSGFuZGxlcihvYmosIGV2ZW50TmFtZSwgLi4uYXJncykKICBwYXJzZVVSTCh1cmxfb3JfcG9ydCkKICB0b1N0cmluZygpCiAgZGVmaW5lKG9iaiwgLi4uYXJncykKICBzZXRIYW5kbGVycyhvcywgaGFuZGxlcnMpCiAgLm9uRmQgPSBmdW5jdGlvbihmZCwgcmVhZGFibGUsIHdyaXRhYmxlKQogIHN0YXR1c1Jlc3BvbnNlKHN1Y2Nlc3MsIHJlc3VsdF9vcl9lcnJvciwgZGF0YSkKICBvYmplY3RDb21tYW5kKGZuKQogIGZ1bmN0aW9uKGRhdGEpCiAgZ2V0UHJvdG90eXBlTmFtZShwcm90bykKRGVzZXJpYWxpemVFbnRyaWVzKGUpCkRlc2VyaWFsaXplS2V5cyhlKQpEZXNlcmlhbGl6ZU1hcChlKQpEZXNlcmlhbGl6ZU9iamVjdChlKQpGb3J3YXJkTWV0aG9kcyhlLCByZXQgPSB7fSwgdGhpc09iaikKRm9yd2FyZE9iamVjdChlLCB0aGlzT2JqKQpNYWtlQ29tbWFuZEZ1bmN0aW9uKGNtZCwgZ2V0Q29ubmVjdGlvbiwgdGhpc09iaiwgdCkKICBmdW5jdGlvbihwYXJhbXMgPSB7fSkKICBmdW5jdGlvbihwYXJhbXMgPSB7fSkKU2VyaWFsaXplVmFsdWUodmFsdWUsIHNvdXJjZSA9IGZhbHNlKQpEZXNlcmlhbGl6ZVN5bWJvbHMobmFtZXMpCkRlc2VyaWFsaXplVmFsdWUoZGVzYykAAAAAAAAAAMUMAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADFDAAARElTQUJMRV9XRVJST1IKTFdTX1dJVEhfU0hBUkVECkxXU19XSVRIX1NUQVRJQwpMV1NfV0lUSF9TSEFSRUQKTFdTX1dJVEhfU1RBVElDCkxXU19XSVRIX0xJQlVWCkxXU19TVEFUSUNfUElDCkxXU19XSVRIX0VYVEVSTkFMX1BPTEwKTFdTX1dJVEhfSFRUUF9CUk9UTEkKTFdTX1dJVEhfSFRUUF9QUk9YWQpMV1NfV0lUSF9IVFRQX1NUUkVBTV9DT01QUkVTU0lPTgpMV1NfV0lUSF9QTFVHSU5TCkxXU19XSVRIX1BMVUdJTlNfQVBJCkxXU19XSVRIX1BMVUdJTlNfQlVJTFRJTgpMV1NfV0lUSF9TT0NLUzUKTFdTX1dJVEhfWkxJQgpMV1NfV0lUSF9aSVBfRk9QUwpMV1NfSEFWRV9MSUJDQVAKTE9DQUxfQ1VSTApMT0NBTF9DVVJMCkNNQUtFX0JVSUxEX1JQQVRICkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpDTUFLRV9JTlNUQUxMX1JQQVRICkNNQUtFX0lOU1RBTExfUFJFRklYCkxPQ0FMX0NVUkwKQ01BS0VfSU5TVEFMTF9QUkVGSVgKQlVJTERfQ1VSTApDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKQ1VSTF9SRVBPCkNVUkxfUkVQTwpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKQ1VSTF9SRVBPCkNVUkxfTElCUkFSWQpDVVJMX0xJQlJBUklFUwpDVVJMX0xJQlJBUlkKQ1VSTF9MSUJSQVJZX0RJUgpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKQ1VSTF9JTkNMVURFX0RJUgpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSCkRJU0FCTEVfV0VSUk9SClFVSUNLSlNfSU5DTFVERV9ESVIKUVVJQ0tKU19JTkNMVURFX0RJUgpRVUlDS0pTX0lOQ0xVREVfRElSCkNNQUtFX0lOU1RBTExfUFJFRklYClFVSUNLSlNfSU5DTFVERV9ESVIKUVVJQ0tKU19JTkNMVURFX0RJUgpRVUlDS0pTX0lOQ0xVREVfRElSClFVSUNLSlNfSU5DTFVERV9ESVIKQ01BS0VfQ19GTEFHU19ERUJVRwpDTUFLRV9DX0ZMQUdTX0RFQlVHCkNNQUtFX0NfRkxBR1NfREVCVUcKQ01BS0VfQ19GTEFHU19ERUJVRwpDTUFLRV9DX0ZMQUdTX0RFQlVHCkNNQUtFX0NfRkxBR1NfREVCVUcKQ01BS0VfQ19GTEFHU19ERUJVRwpDTUFLRV9DX0ZMQUdTX0RFQlVHClFVSUNLSlNfSU5DTFVERV9ESVIKUVVJQ0tKU19JTkNMVURFX0RJUgpRVUlDS0pTX0lOQ0xVREVfRElSClFVSUNLSlNfSU5DTFVERV9ESVIKTElCV0VCU09DS0VUU19JTkNMVURFX0RJUlMKQ1VSTF9JTkNMVURFX0RJUgogIG1ha2Vfc2hhcmVkX21vZHVsZQpGTkFNRQpGTkFNRQpOQU1FClRBUkdFVF9OQU1FCk5BTUUKVEFSR0VUX05BTUUKRk5BTUUKVEFSR0VUX05BTUUKTElCV0VCU09DS0VUU19MSUJSQVJJRVMKQ1VSTF9MSUJSQVJZCk9QRU5TU0xfU1NMX0xJQlJBUlkKT1BFTlNTTF9DUllQVE9fTElCUkFSWQpUQVJHRVRfTkFNRQpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKQ01BS0VfSU5TVEFMTF9QUkVGSVgKTkFNRQpDTUFLRV9CSU5BUllfRElSCkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpDTUFLRV9CSU5BUllfRElSCkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpUQVJHRVRfTkFNRQpVTkFNRQpUQVJHRVRfTkFNRQpUQVJHRVRfTkFNRQpMSUJXRUJTT0NLRVRTX0lOQ0xVREVfRElSUwpUQVJHRVRfTkFNRQpMSUJXRUJTT0NLRVRTX0xJQlJBUklFUwpDVVJMX0xJQlJBUlkKT1BFTlNTTF9DUllQVE9fTElCUkFSWQpCVUlMRF9MSUJXRUJTT0NLRVRTCkxXU19XSVRIT1VUX1RFU1RBUFBTCkxXU19XSVRIT1VUX1RFU1RfU0VSVkVSCkxXU19XSVRIT1VUX1RFU1RfUElORwpMV1NfV0lUSE9VVF9URVNUX0NMSUVOVApMV1NfTElOS19URVNUQVBQU19EWU5BTUlDCkxXU19XSVRIX1NUQVRJQwpMV1NfSEFWRV9MSUJDQVAKTElCV0VCU09DS0VUU19JTkNMVURFX0RJUlMKQ01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSCkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKTElCV0VCU09DS0VUU19GT1VORApMSUJXRUJTT0NLRVRTX0xJQlJBUklFUwpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSCkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKTElCV0VCU09DS0VUU19JTkNMVURFX0RJUlMKTElCV0VCU09DS0VUU19JTkNMVURFX0RJUlMKTElCV0VCU09DS0VUU19MSUJSQVJZX0RJUlMKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSCkNNQUtFX0NVUlJFTlRfU09VUkNFX0RJUgpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKQ01BS0VfU1lTVEVNX0lOQ0xVREVfUEFUSApDTUFLRV9TWVNURU1fTElCUkFSWV9QQVRICkNNQUtFX1NZU1RFTV9QUk9HUkFNX1BBVEgKQ01BS0VfU1lTVEVNX0lHTk9SRV9QQVRICkNNQUtFX0lOQ0xVREVfUEFUSApDTUFLRV9MSUJSQVJZX1BBVEgKQ01BS0VfUFJPR1JBTV9QQVRICkNNQUtFX0lHTk9SRV9QQVRICkNNQUtFX1BSRUZJWF9QQVRICkNNQUtFX01PRFVMRV9QQVRIClBLR19DT05GSUdfRVhFQ1VUQUJMRQpDTUFLRV9DX0NPTVBJTEVSCkNNQUtFX1ZFUkJPU0VfTUFLRUZJTEUKQ01BS0VfQlVJTERfVFlQRQpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKTElCV0VCU09DS0VUU19MSUJSQVJZX0RJUlMKUVVJQ0tKU19JTkNMVURFX0RJUgpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKUVVJQ0tKU19JTkNMVURFX0RJUgpMSUJXRUJTT0NLRVRTX0lOQ0xVREVfRElSUwpDVVJMX0lOQ0xVREVfRElSCiAgbWFrZV9zaGFyZWRfbW9kdWxlCkZOQU1FCkZOQU1FCk5BTUUKVEFSR0VUX05BTUUKTkFNRQpUQVJHRVRfTkFNRQpGTkFNRQpUQVJHRVRfTkFNRQpMSUJXRUJTT0NLRVRTX0xJQlJBUklFUwpDVVJMX0xJQlJBUlkKT1BFTlNTTF9TU0xfTElCUkFSWQpPUEVOU1NMX0NSWVBUT19MSUJSQVJZClRBUkdFVF9OQU1FCkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpDTUFLRV9JTlNUQUxMX1BSRUZJWApOQU1FCkNNQUtFX0JJTkFSWV9ESVIKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSCkNNQUtFX0JJTkFSWV9ESVIKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSClRBUkdFVF9OQU1FClVOQU1FClRBUkdFVF9OQU1FClRBUkdFVF9OQU1FCkxJQldFQlNPQ0tFVFNfSU5DTFVERV9ESVJTClRBUkdFVF9OQU1FCkxJQldFQlNPQ0tFVFNfTElCUkFSSUVTCkxJQldFQlNPQ0tFVFNfTElCUkFSWV9ESVJTCkNNQUtFX1BPU0lUSU9OX0lOREVQRU5ERU5UX0NPREUKSlNfQklORElOR1NfU09VUkNFUwpMSUJXRUJTT0NLRVRTX0lOQ0xVREVfRElSUwpDVVJMX0lOQ0xVREVfRElSCkxJQldFQlNPQ0tFVFNfTElCUkFSSUVTCkNVUkxfTElCUkFSWQpPUEVOU1NMX1NTTF9MSUJSQVJZCk9QRU5TU0xfQ1JZUFRPX0xJQlJBUlkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "/home/roman/Projects/plot-cv/test-rpc.js",
			"settings":
			{
				"buffer_size": 7385,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					45,
					1,
					"insert",
					{
						"characters": "\nss"
					},
					"BAAAAOYJAAAAAAAA5wkAAAAAAAAAAAAA5wkAAAAAAADtCQAAAAAAAAAAAADtCQAAAAAAAO4JAAAAAAAAAAAAAO4JAAAAAAAA7wkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOYJAAAAAAAA5gkAAAAAAAAAAAAAAADwvw"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "lC"
					},
					"AgAAAO8JAAAAAAAA8AkAAAAAAAAAAAAA8AkAAAAAAADxCQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO8JAAAAAAAA7wkAAAAAAAAAAAAAAADwvw"
				],
				[
					49,
					1,
					"left_delete",
					null,
					"AQAAAJYKAAAAAAAAlgoAAAAAAAABAAAAdQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcKAAAAAAAAlwoAAAAAAAAAAAAAAADwvw"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAAJYKAAAAAAAAlwoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJYKAAAAAAAAlgoAAAAAAAAAAAAAAADwvw"
				],
				[
					54,
					1,
					"insert_snippet",
					{
						"contents": "'${0:$SELECTION}'"
					},
					"AgAAAO0JAAAAAAAA7QkAAAAAAAAEAAAAc3NsQ+0JAAAAAAAA8wkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO0JAAAAAAAA8QkAAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "ssl-cert"
					},
					"CQAAAO4JAAAAAAAA7wkAAAAAAAAAAAAA7wkAAAAAAADvCQAAAAAAAAQAAABzc2xD7wkAAAAAAADwCQAAAAAAAAAAAADwCQAAAAAAAPEJAAAAAAAAAAAAAPEJAAAAAAAA8gkAAAAAAAAAAAAA8gkAAAAAAADzCQAAAAAAAAAAAADzCQAAAAAAAPQJAAAAAAAAAAAAAPQJAAAAAAAA9QkAAAAAAAAAAAAA9QkAAAAAAAD2CQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO4JAAAAAAAA8gkAAAAAAAAAAAAAAADwvw"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAPcJAAAAAAAA+AkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPcJAAAAAAAA9wkAAAAAAAAAAAAAAADwvw"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPgJAAAAAAAA+QkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPgJAAAAAAAA+AkAAAAAAAAAAAAAAADwvw"
				],
				[
					59,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAPkJAAAAAAAA+wkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPkJAAAAAAAA+QkAAAAAAAAAAAAAAADwvw"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": " true,"
					},
					"BgAAAPoJAAAAAAAA+wkAAAAAAAAAAAAA+wkAAAAAAAD8CQAAAAAAAAAAAAD8CQAAAAAAAP0JAAAAAAAAAAAAAP0JAAAAAAAA/gkAAAAAAAAAAAAA/gkAAAAAAAD/CQAAAAAAAAAAAAD/CQAAAAAAAAAKAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoJAAAAAAAA+gkAAAAAAAAAAAAAAADwvw"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": " null"
					},
					"BQAAAAAKAAAAAAAAAQoAAAAAAAAAAAAAAQoAAAAAAAACCgAAAAAAAAAAAAACCgAAAAAAAAMKAAAAAAAAAAAAAAMKAAAAAAAABAoAAAAAAAAAAAAABAoAAAAAAAAFCgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAKAAAAAAAAAAoAAAAAAAAAAAAAAADwvw"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAYKAAAAAAAABwoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYKAAAAAAAABgoAAAAAAAAAAAAAAADwvw"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAcKAAAAAAAACAoAAAAAAAAAAAAACAoAAAAAAAAOCgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAcKAAAAAAAABwoAAAAAAAAAAAAAAADwvw"
				],
				[
					65,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAA4KAAAAAAAAEAoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA4KAAAAAAAADgoAAAAAAAAAAAAAAADwvw"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "ssl-key"
					},
					"BwAAAA8KAAAAAAAAEAoAAAAAAAAAAAAAEAoAAAAAAAARCgAAAAAAAAAAAAARCgAAAAAAABIKAAAAAAAAAAAAABIKAAAAAAAAEwoAAAAAAAAAAAAAEwoAAAAAAAAUCgAAAAAAAAAAAAAUCgAAAAAAABUKAAAAAAAAAAAAABUKAAAAAAAAFgoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA8KAAAAAAAADwoAAAAAAAAAAAAAAADwvw"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAABcKAAAAAAAAGAoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABcKAAAAAAAAFwoAAAAAAAAAAAAAAADwvw"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABgKAAAAAAAAGQoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABgKAAAAAAAAGAoAAAAAAAAAAAAAAADwvw"
				],
				[
					70,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAABkKAAAAAAAAGwoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkKAAAAAAAAGQoAAAAAAAAAAAAAAADwvw"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "true,"
					},
					"BQAAABoKAAAAAAAAGwoAAAAAAAAAAAAAGwoAAAAAAAAcCgAAAAAAAAAAAAAcCgAAAAAAAB0KAAAAAAAAAAAAAB0KAAAAAAAAHgoAAAAAAAAAAAAAHgoAAAAAAAAfCgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoKAAAAAAAAGgoAAAAAAAAAAAAAAADwvw"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": " nuil"
					},
					"BQAAAB8KAAAAAAAAIAoAAAAAAAAAAAAAIAoAAAAAAAAhCgAAAAAAAAAAAAAhCgAAAAAAACIKAAAAAAAAAAAAACIKAAAAAAAAIwoAAAAAAAAAAAAAIwoAAAAAAAAkCgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB8KAAAAAAAAHwoAAAAAAAAAAAAAAADwvw"
				],
				[
					73,
					2,
					"left_delete",
					null,
					"AgAAACMKAAAAAAAAIwoAAAAAAAABAAAAbCIKAAAAAAAAIgoAAAAAAAABAAAAaQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACQKAAAAAAAAJAoAAAAAAAAAAAAAAADwvw"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "ll"
					},
					"AgAAACIKAAAAAAAAIwoAAAAAAAAAAAAAIwoAAAAAAAAkCgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACIKAAAAAAAAIgoAAAAAAAAAAAAAAADwvw"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACUKAAAAAAAAJgoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUKAAAAAAAAJQoAAAAAAAAAAAAAAADwvw"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIAKAAAAAAAAgQoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIAKAAAAAAAAgAoAAAAAAAAAAAAAAADwvw"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": " ssl"
					},
					"BAAAAIEKAAAAAAAAggoAAAAAAAAAAAAAggoAAAAAAACDCgAAAAAAAAAAAACDCgAAAAAAAIQKAAAAAAAAAAAAAIQKAAAAAAAAhQoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIEKAAAAAAAAgQoAAAAAAAAAAAAAAADwvw"
				],
				[
					83,
					3,
					"left_delete",
					null,
					"AwAAAIQKAAAAAAAAhAoAAAAAAAABAAAAbIMKAAAAAAAAgwoAAAAAAAABAAAAc4IKAAAAAAAAggoAAAAAAAABAAAAcw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIUKAAAAAAAAhQoAAAAAAAAAAAAAAADwvw"
				],
				[
					84,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAIIKAAAAAAAAhAoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIKAAAAAAAAggoAAAAAAAAAAAAAAADwvw"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "ssl-cert"
					},
					"CAAAAIMKAAAAAAAAhAoAAAAAAAAAAAAAhAoAAAAAAACFCgAAAAAAAAAAAACFCgAAAAAAAIYKAAAAAAAAAAAAAIYKAAAAAAAAhwoAAAAAAAAAAAAAhwoAAAAAAACICgAAAAAAAAAAAACICgAAAAAAAIkKAAAAAAAAAAAAAIkKAAAAAAAAigoAAAAAAAAAAAAAigoAAAAAAACLCgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIMKAAAAAAAAgwoAAAAAAAAAAAAAAADwvw"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAIwKAAAAAAAAjQoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIwKAAAAAAAAjAoAAAAAAAAAAAAAAADwvw"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": " sslCert"
					},
					"CAAAAI0KAAAAAAAAjgoAAAAAAAAAAAAAjgoAAAAAAACPCgAAAAAAAAAAAACPCgAAAAAAAJAKAAAAAAAAAAAAAJAKAAAAAAAAkQoAAAAAAAAAAAAAkQoAAAAAAACSCgAAAAAAAAAAAACSCgAAAAAAAJMKAAAAAAAAAAAAAJMKAAAAAAAAlAoAAAAAAAAAAAAAlAoAAAAAAACVCgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI0KAAAAAAAAjQoAAAAAAAAAAAAAAADwvw"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAJUKAAAAAAAAlgoAAAAAAAAAAAAAlgoAAAAAAACXCgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJUKAAAAAAAAlQoAAAAAAAAAAAAAAADwvw"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJcKAAAAAAAAmAoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcKAAAAAAAAlwoAAAAAAAAAAAAAAADwvw"
				],
				[
					91,
					3,
					"left_delete",
					null,
					"AwAAAJcKAAAAAAAAlwoAAAAAAAABAAAAIJYKAAAAAAAAlgoAAAAAAAABAAAAPZUKAAAAAAAAlQoAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJgKAAAAAAAAmAoAAAAAAAAAAAAAAADwvw"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJUKAAAAAAAAlgoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJUKAAAAAAAAlQoAAAAAAAAAAAAAAADwvw"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJYKAAAAAAAAlwoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJYKAAAAAAAAlgoAAAAAAAAAAAAAAADwvw"
				],
				[
					94,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAJcKAAAAAAAAmQoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcKAAAAAAAAlwoAAAAAAAAAAAAAAADwvw"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": "ssl-key"
					},
					"BwAAAJgKAAAAAAAAmQoAAAAAAAAAAAAAmQoAAAAAAACaCgAAAAAAAAAAAACaCgAAAAAAAJsKAAAAAAAAAAAAAJsKAAAAAAAAnAoAAAAAAAAAAAAAnAoAAAAAAACdCgAAAAAAAAAAAACdCgAAAAAAAJ4KAAAAAAAAAAAAAJ4KAAAAAAAAnwoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJgKAAAAAAAAmAoAAAAAAAAAAAAAAADwvw"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAKAKAAAAAAAAoQoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKAKAAAAAAAAoAoAAAAAAAAAAAAAAADwvw"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": " sslKey"
					},
					"BwAAAKEKAAAAAAAAogoAAAAAAAAAAAAAogoAAAAAAACjCgAAAAAAAAAAAACjCgAAAAAAAKQKAAAAAAAAAAAAAKQKAAAAAAAApQoAAAAAAAAAAAAApQoAAAAAAACmCgAAAAAAAAAAAACmCgAAAAAAAKcKAAAAAAAAAAAAAKcKAAAAAAAAqAoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKEKAAAAAAAAoQoAAAAAAAAAAAAAAADwvw"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "'√º"
					},
					"AgAAABMKAAAAAAAAFAoAAAAAAAAAAAAAFAoAAAAAAAAVCgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABMKAAAAAAAAEwoAAAAAAAAAAAAAAADwvw"
				],
				[
					104,
					1,
					"left_delete",
					null,
					"AQAAABQKAAAAAAAAFAoAAAAAAAACAAAAw7w",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUKAAAAAAAAFQoAAAAAAAAAAAAAAADwvw"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAABQKAAAAAAAAFQoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABQKAAAAAAAAFAoAAAAAAAAAAAAAAADwvw"
				],
				[
					106,
					2,
					"left_delete",
					null,
					"AgAAABQKAAAAAAAAFAoAAAAAAAABAAAAcBMKAAAAAAAAEwoAAAAAAAABAAAAJw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUKAAAAAAAAFQoAAAAAAAAAAAAAAADwvw"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": "private-"
					},
					"CAAAABMKAAAAAAAAFAoAAAAAAAAAAAAAFAoAAAAAAAAVCgAAAAAAAAAAAAAVCgAAAAAAABYKAAAAAAAAAAAAABYKAAAAAAAAFwoAAAAAAAAAAAAAFwoAAAAAAAAYCgAAAAAAAAAAAAAYCgAAAAAAABkKAAAAAAAAAAAAABkKAAAAAAAAGgoAAAAAAAAAAAAAGgoAAAAAAAAbCgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABMKAAAAAAAAEwoAAAAAAAAAAAAAAADwvw"
				],
				[
					113,
					1,
					"paste",
					null,
					"AQAAAKQKAAAAAAAArAoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQKAAAAAAAApAoAAAAAAAAAAAAAAADwvw"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": "P√®r"
					},
					"AwAAALUKAAAAAAAAtgoAAAAAAAAAAAAAtgoAAAAAAAC3CgAAAAAAAAAAAAC3CgAAAAAAALgKAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALUKAAAAAAAAtQoAAAAAAAAAAAAAAADwvw"
				],
				[
					127,
					2,
					"left_delete",
					null,
					"AgAAALcKAAAAAAAAtwoAAAAAAAABAAAAcrYKAAAAAAAAtgoAAAAAAAACAAAAw6g",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALgKAAAAAAAAuAoAAAAAAAAAAAAAAADwvw"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": "rivate"
					},
					"BgAAALYKAAAAAAAAtwoAAAAAAAAAAAAAtwoAAAAAAAC4CgAAAAAAAAAAAAC4CgAAAAAAALkKAAAAAAAAAAAAALkKAAAAAAAAugoAAAAAAAAAAAAAugoAAAAAAAC7CgAAAAAAAAAAAAC7CgAAAAAAALwKAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALYKAAAAAAAAtgoAAAAAAAAAAAAAAADwvw"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": "\nsslCert"
					},
					"CgAAABIRAAAAAAAAExEAAAAAAAAAAAAAExEAAAAAAAAXEQAAAAAAAAAAAAAXEQAAAAAAABkRAAAAAAAAAAAAABkRAAAAAAAAGhEAAAAAAAAAAAAAGhEAAAAAAAAbEQAAAAAAAAAAAAAbEQAAAAAAABwRAAAAAAAAAAAAABwRAAAAAAAAHREAAAAAAAAAAAAAHREAAAAAAAAeEQAAAAAAAAAAAAAeEQAAAAAAAB8RAAAAAAAAAAAAAB8RAAAAAAAAIBEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABIRAAAAAAAAEhEAAAAAAAAAAAAAAADwvw"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACARAAAAAAAAIREAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACARAAAAAAAAIBEAAAAAAAAAAAAAAADwvw"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": "\nsslP"
					},
					"BgAAACERAAAAAAAAIhEAAAAAAAAAAAAAIhEAAAAAAAAoEQAAAAAAAAAAAAAoEQAAAAAAACkRAAAAAAAAAAAAACkRAAAAAAAAKhEAAAAAAAAAAAAAKhEAAAAAAAArEQAAAAAAAAAAAAArEQAAAAAAACwRAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACERAAAAAAAAIREAAAAAAAAAAAAAAADwvw"
				],
				[
					134,
					1,
					"insert_completion",
					{
						"completion": "sslPrivateKey",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "sslPrivateKey"
					},
					"AgAAACgRAAAAAAAAKBEAAAAAAAAEAAAAc3NsUCgRAAAAAAAANREAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACwRAAAAAAAALBEAAAAAAAAAAAAAAADwvw"
				],
				[
					135,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADURAAAAAAAANhEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADURAAAAAAAANREAAAAAAAAAAAAAAADwvw"
				],
				[
					144,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFISAAAAAAAAUhIAAAAAAAAAAAAAAADwvw"
				],
				[
					205,
					1,
					"cut",
					null,
					"AQAAABkEAAAAAAAAGQQAAAAAAAANAAAAJyR7ZmlsZW5hbWV9Jw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkEAAAAAAAAJgQAAAAAAAAAAAAAAADwvw"
				],
				[
					208,
					1,
					"insert",
					{
						"characters": " from"
					},
					"BQAAADQEAAAAAAAANQQAAAAAAAAAAAAANQQAAAAAAAA2BAAAAAAAAAAAAAA2BAAAAAAAADcEAAAAAAAAAAAAADcEAAAAAAAAOAQAAAAAAAAAAAAAOAQAAAAAAAA5BAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADQEAAAAAAAANAQAAAAAAAAAAAAAAADwvw"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADkEAAAAAAAAOgQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADkEAAAAAAAAOQQAAAAAAAAAAAAAAADwvw"
				],
				[
					210,
					1,
					"paste",
					null,
					"AQAAADoEAAAAAAAARwQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADoEAAAAAAAAOgQAAAAAAAAAAAAAAADwvw"
				],
				[
					213,
					1,
					"left_delete",
					null,
					"AQAAABAEAAAAAAAAEAQAAAAAAAALAAAAUmVhZEpTT04oKSA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABAEAAAAAAAAGwQAAAAAAAAAAAAAAADwvw"
				],
				[
					216,
					3,
					"left_delete",
					null,
					"AwAAAA0EAAAAAAAADQQAAAAAAAABAAAAZwwEAAAAAAAADAQAAAAAAAABAAAAbwsEAAAAAAAACwQAAAAAAAABAAAAbA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA4EAAAAAAAADgQAAAAAAAAAAAAAAADwvw"
				],
				[
					217,
					1,
					"insert",
					{
						"characters": "debug"
					},
					"BQAAAAsEAAAAAAAADAQAAAAAAAAAAAAADAQAAAAAAAANBAAAAAAAAAAAAAANBAAAAAAAAA4EAAAAAAAAAAAAAA4EAAAAAAAADwQAAAAAAAAAAAAADwQAAAAAAAAQBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAsEAAAAAAAACwQAAAAAAAAAAAAAAADwvw"
				],
				[
					265,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAABIQAAAAAAAAExAAAAAAAAAAAAAAExAAAAAAAAATEAAAAAAAAAYAAAAgICAgLy8",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABgQAAAAAAAAEhAAAAAAAAAAAAAAAADwvw"
				],
				[
					268,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAOsXAAAAAAAA7BcAAAAAAAAAAAAA7BcAAAAAAADsFwAAAAAAAAYBAAAgICBvbkZkKC4uLmFyZ3MpIHsKICAgICAgICBjb25zb2xlLmxvZygnXHgxYlszODs1OzgybW9vbkZkXHgxYlswbSgnLCAuLi5hcmdzLCAnKScpOwogICAgICB9LAogICAgICBvbkNvbm5lY3QocykgewogICAgICAgIGNvbnNvbGUubG9nKCdceDFiWzM4OzU7ODJtb29uQ29ubmVjdFx4MWJbMG0nLCBzKTsKICAgICAgfSwKICAgICAgb25PcGVuKHMpIHsKICAgICAgICBjb25zb2xlLmxvZygnXHgxYlszODs1OzgybW9vbk9wZW5ceDFiWzBtJywgcyk7CiAgICAgIH0s",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOsXAAAAAAAA8RgAAAAAAAAAAAAAAADwvw"
				],
				[
					312,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAEoYAAAAAAAASxgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEoYAAAAAAAAShgAAAAAAAAAAAAAAADwvw"
				],
				[
					313,
					1,
					"left_delete",
					null,
					"AQAAAEoYAAAAAAAAShgAAAAAAAABAAAAbg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEsYAAAAAAAASxgAAAAAAAAAAAAAAADwvw"
				],
				[
					314,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAEoYAAAAAAAASxgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEoYAAAAAAAAShgAAAAAAAAAAAAAAADwvw"
				],
				[
					315,
					1,
					"left_delete",
					null,
					"AQAAAEoYAAAAAAAAShgAAAAAAAABAAAAbg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEsYAAAAAAAASxgAAAAAAAAAAAAAAADwvw"
				],
				[
					316,
					1,
					"insert",
					{
						"characters": "\\n\\t"
					},
					"BAAAAEoYAAAAAAAASxgAAAAAAAAAAAAASxgAAAAAAABMGAAAAAAAAAAAAABMGAAAAAAAAE0YAAAAAAAAAAAAAE0YAAAAAAAAThgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEoYAAAAAAAAShgAAAAAAAAAAAAAAADwvw"
				],
				[
					318,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAFYYAAAAAAAAVxgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFYYAAAAAAAAVhgAAAAAAAAAAAAAAADwvw"
				],
				[
					319,
					1,
					"left_delete",
					null,
					"AQAAAFYYAAAAAAAAVhgAAAAAAAABAAAAMA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFcYAAAAAAAAVxgAAAAAAAAAAAAAAADwvw"
				],
				[
					320,
					1,
					"insert",
					{
						"characters": "',\\nt"
					},
					"BQAAAFYYAAAAAAAAVxgAAAAAAAAAAAAAVxgAAAAAAABYGAAAAAAAAAAAAABYGAAAAAAAAFkYAAAAAAAAAAAAAFkYAAAAAAAAWhgAAAAAAAAAAAAAWhgAAAAAAABbGAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFYYAAAAAAAAVhgAAAAAAAAAAAAAAADwvw"
				],
				[
					321,
					1,
					"left_delete",
					null,
					"AQAAAFoYAAAAAAAAWhgAAAAAAAABAAAAdA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFsYAAAAAAAAWxgAAAAAAAAAAAAAAADwvw"
				],
				[
					322,
					1,
					"insert",
					{
						"characters": "\\t',"
					},
					"BAAAAFoYAAAAAAAAWxgAAAAAAAAAAAAAWxgAAAAAAABcGAAAAAAAAAAAAABcGAAAAAAAAF0YAAAAAAAAAAAAAF0YAAAAAAAAXhgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFoYAAAAAAAAWhgAAAAAAAAAAAAAAADwvw"
				],
				[
					323,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF4YAAAAAAAAXxgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF4YAAAAAAAAXhgAAAAAAAAAAAAAAADwvw"
				],
				[
					325,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAAGUYAAAAAAAAZhgAAAAAAAAAAAAAZhgAAAAAAABnGAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUYAAAAAAAAZRgAAAAAAAAAAAAAAADwvw"
				],
				[
					332,
					1,
					"cut",
					null,
					"AQAAAKsXAAAAAAAAqxcAAAAAAAAlAAAALAogICAgICAgIFsnLycsICcuJywgJ2RlYnVnZ2VyLmh0bWwnXQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKsXAAAAAAAA0BcAAAAAAAAAAAAAAADwvw"
				],
				[
					335,
					1,
					"paste",
					null,
					"AQAAAJwRAAAAAAAAwREAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJwRAAAAAAAAnBEAAAAAAAAAAAAAAADwvw"
				],
				[
					336,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAMERAAAAAAAAwhEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMERAAAAAAAAwREAAAAAAAAAAAAAAADwvw"
				],
				[
					338,
					1,
					"left_delete",
					null,
					"AQAAAJwRAAAAAAAAnBEAAAAAAAABAAAALA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ0RAAAAAAAAnREAAAAAAAAAAAAAAEB0QA"
				],
				[
					341,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAL4SAAAAAAAAwBIAAAAAAAAAAAAAxxEAAAAAAADJEQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMcRAAAAAAAAvhIAAAAAAAAAAAAAAADwvw"
				],
				[
					350,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAGUTAAAAAAAAZhMAAAAAAAAAAAAAZhMAAAAAAABmEwAAAAAAAAQAAAAgIC8v",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGkTAAAAAAAAZRMAAAAAAAAAAAAAAADwvw"
				],
				[
					351,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAGYTAAAAAAAAZxMAAAAAAAAAAAAAZxMAAAAAAABoEwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGYTAAAAAAAAZhMAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "CMakeLists.txt",
			"settings":
			{
				"buffer_size": 14479,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					27,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMCAAAAAAAAI0IAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "rpc.js",
			"settings":
			{
				"buffer_size": 29419,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"cmake",
				"CMake Format: Format Selection"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edi",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"prettier",
				"Build With: prettier"
			],
			[
				"edit current",
				"SchemeEditor: Edit Current Scheme"
			],
			[
				"edit curr",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 393.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-net"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/roles/http/server/server.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/include/libwebsockets/lws-http.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/libwebsockets.dox",
		"/home/roman/Projects/plot-cv/quickjs/cutils.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/jsutils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-request.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/roles/h2/private-lib-roles-h2.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/roles/h2/ops-h2.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/roles/h2/http2.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-websocket.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-websocket.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server.h",
		"/home/roman/Projects/plot-cv/ws-worker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-response.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-server/minimal-http-server-form-post/minimal-http-server-form-post.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/include/libwebsockets/lws-callbacks.h",
		"/home/roman/Projects/plot-cv/debugger.html",
		"/home/roman/Projects/plot-cv/debugger.js",
		"/home/roman/Projects/plot-cv/debugger-client.js",
		"/home/roman/Projects/plot-cv/lib/events.js",
		"/home/roman/Projects/plot-cv/quickjs/net/rpc.js",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/server/lws-spa.c",
		"/home/roman/Projects/minnet-quickjs/buffer.h",
		"/home/roman/Projects/minnet-quickjs/buffer.c",
		"/home/roman/Projects/minnet-quickjs/minnet-request.c",
		"/home/roman/Projects/minnet-quickjs/minnet-response.h",
		"/home/roman/Projects/minnet-quickjs/minnet.c",
		"/home/roman/Projects/minnet-quickjs/CMakeLists.txt.user",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/minimal-examples/http-server/minimal-http-server-h2-long-poll/minimal-http-server.c",
		"/home/roman/Projects/minnet-quickjs/minnet-client.h",
		"/home/roman/Projects/minnet-quickjs/minnet-websocket.h",
		"/home/roman/Projects/minnet-quickjs/minnet-response.c",
		"/home/roman/Projects/minnet-quickjs/minnet-server.c.orig",
		"/home/roman/Projects/minnet-quickjs/minnet-request.h",
		"/home/roman/Projects/minnet-quickjs/minnet-stream.h",
		"/home/roman/Projects/minnet-quickjs/minnet.h",
		"/home/roman/Projects/minnet-quickjs/minnet-stream.c",
		"/home/roman/Projects/minnet-quickjs/minnet-websocket.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/minimal-examples/http-server/minimal-http-server-sse-ring/README.md",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/minimal-examples/http-server/minimal-http-server-sse/README.md",
		"/home/roman/Projects/minnet-quickjs/minnet-client.c",
		"/home/roman/Projects/minnet-quickjs/minnet.sublime-project",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/include/libwebsockets/lws-adopt.h",
		"/home/roman/Projects/minnet-quickjs/minnet-server.h",
		"/home/roman/Projects/minnet-quickjs/jsutils.h",
		"/home/roman/Projects/minnet-quickjs/jsutils.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/minimal-examples/http-server/minimal-http-server/minimal-http-server.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/minimal-examples/http-server/minimal-http-server-dynamic/minimal-http-server-dynamic.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/server/server.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/h2/ops-h2.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/header.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/test-rpc.js",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/include/libwebsockets/lws-callbacks.h",
		"/home/roman/Projects/minnet-quickjs/example.mjs",
		"/home/roman/Projects/minnet-quickjs/minnet-server.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/core-net/wsi.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/core-net/vhost.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/core-net/output.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/core-net/private-lib-core-net.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/h2/hpack.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/h2/http2.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/server/ranges.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/private-lib-roles.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/h2/minihuf.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/h2/huftable.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/h2/private-lib-roles-h2.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/private-lib-roles-http.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/CMakeLists.txt",
		"/home/roman/Projects/minnet-quickjs/CMakeLists.txt",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/CMakeLists-implied-options.txt",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/cookie.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/date.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/lextable-strings.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/lextable.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/minilex.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/parsers.c",
		"/home/roman/Projects/minnet-quickjs/rpc.js",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/minimal-examples/http-server/minimal-http-server-sse/minimal-http-server-sse.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/include/libwebsockets/lws-http.h",
		"/home/roman/Projects/minnet-quickjs/minnet.c.orig",
		"/home/roman/.config/sublime-text/Packages/Outroot Color Schemes/Luscious.tmTheme",
		"/home/roman/.config/sublime-text/Packages/User/Themes/Next (New).tmTheme",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/.mailmap",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/include/libwebsockets/lws-writeable.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/core-net/dummy-callback.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/include/libwebsockets/lws-context-vhost.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/include/libwebsockets/lws-misc.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/include/libwebsockets/lws-lecp.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/include/libwebsockets/lws-client.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/include/libwebsockets/lws-service.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/server/lejp-conf.c",
		"/home/roman/Projects/plot-cv/quickjs/cutils.c",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.h",
		"/home/roman/Projects/plot-cv/cutils.h",
		"/home/roman/Projects/minnet-quickjs/minnet-jsutils.h",
		"/home/roman/Projects/minnet-quickjs/minnet-socket.h",
		"/home/roman/Projects/minnet-quickjs/minnet-socket.c",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/include/libwebsockets/lws-context-vhost.h",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/test-apps/test-server.c",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/core/libwebsockets.c",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet-server.c",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/lib/core-net/network.c",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/include/libwebsockets/lws-network-helper.h",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/include/libwebsockets/lws-http.h",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet-websocket.h",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet.h",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet-websocket.c",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet-request.h",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet-response.c",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet-server.h",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet-response.h",
		"/home/roman/Projects/plot-cv/quickjs/net/build/x86_64-linux-release/libwebsockets/include/libwebsockets/lws-network-helper.h",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet-jsutils.h",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet-client.c",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/include/libwebsockets.h",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/minimal-examples/http-server/minimal-http-server-dynamic/minimal-http-server-dynamic.c",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/minimal-examples/http-server/minimal-http-server-dynamic/minimal-http-server-dynamic",
		"/home/roman/Projects/plot-cv/quickjs/net/jsutils.h",
		"/home/roman/Projects/plot-cv/quickjs/net/websocket.c",
		"/home/roman/Projects/plot-cv/quickjs/net/client.c",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet-client.h"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 109.0,
		"where_history":
		[
			"*.c,*.h,*.txt,*.cmake,-*/build/*",
			"*.c,*.h,*.txt,*.cmakem,-*/build/*",
			"*.c,*.h,*.txt,-*/build/*",
			"*.c,*.h,-*/build/*",
			"*.c,*.h,-*/build/*,-*/libwebsockets/*",
			"*.c,*.h,-*/build/*",
			"*.c,*.h",
			"/home/roman/Projects/plot-cv/quickjs/net,-*/build/*,*.c,*.h",
			"/home/roman/Projects/plot-cv/quickjs/net,-*/build/*,-*/libwebsockets/*,*.c,*.h",
			"/home/roman/Projects/plot-cv/quickjs/net,-*/build/*,*.c,*.h",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"CURL",
			"onresponse",
			"\\.add",
			"\\.list",
			"Connection\\.list",
			"\\.list",
			"sendMessage",
			"MessageTransceiver",
			"EventEmitter",
			"DEBUG",
			"RPCClient",
			"No command",
			"sendMessage",
			"sock, ",
			"sock:",
			"onMessage",
			"processMessage",
			"statusResponse",
			"No such",
			"onconnect",
			"FILTER_HTTP",
			"minnet_ws_wrap",
			"HTTP_BODY",
			"lws_h2_bind_for_post_before_action",
			"LWS_CALLBACK_HTTP_BODY",
			"LWS_CALLBACK_HTTP_",
			"serv->mount",
			"\"LWS_CALLBACK_CLOSED_HTTP",
			"TESTAPPS",
			"WITH_FILE_OPS",
			"LWSMPRO_FILE",
			"LWS_CALLBACK_HTTP",
			"LWS_CALLBACK_HTTP_BODY",
			"serve_file",
			"respond",
			"read_only",
			"lws_write",
			"h2",
			"serve_file",
			"^lws_",
			"^lws",
			"sending",
			"lws_vfs",
			"fopen",
			"_open",
			"STREAM_",
			"STREAM_ARRAYBUFFER",
			"http_stream",
			"cb_body",
			"^\\s*include.Check",
			"^\\s*include",
			"include",
			"case\\(int\\)",
			"  ",
			"is_h2",
			"ssl",
			"sslCert",
			"ssl_cert_filepath",
			"onconn",
			"fdlist\\[",
			"fdlist",
			"Connected",
			"\\.close\\(",
			"onclose",
			"LWS_CALLBACK_RECEIVE",
			"CLOSE",
			"util",
			"'Handle",
			"'connect'",
			"onconnect",
			"onconn",
			"minnet_ws_wrap",
			"onConn",
			"cb_message",
			"set_opa",
			"->handlers",
			"server\\.",
			"server",
			"lws_adopt",
			"callHandler",
			"on[Cc]onnect",
			"onconnect",
			"cb_connect",
			"log.*Connection",
			"onconnect",
			"generator =",
			"js_iterator",
			"generator =",
			"generator",
			"argument is",
			"resp->generator",
			"->generator",
			"JS_FreeCString",
			"byte_",
			"byte_rchr",
			"js_buffer_free",
			"js_buffer_from",
			"404",
			"555",
			"is_h2",
			"lws.*h2",
			"lws.*is_",
			"wsi.*H2",
			"lws_wsi_is",
			"malloc_usable_size",
			"len",
			"lws_http_transaction_completed",
			"request\\(",
			"request",
			"read.only",
			"binary",
			"params",
			"`params",
			"'params",
			"repl.historyLoad",
			"repl.history",
			"createWS",
			"onFd",
			"LWS_WRITE_HTTP_FINAL",
			"->type",
			"REQUEST_METHOD",
			"->type",
			"%s",
			"\"%s",
			"\"lws_callback_on_writable",
			"in:",
			"js_dump_string",
			"'on"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"mount",
			"STREAM_BUFFER",
			"stream",
			"cb_http",
			"case ",
			"minnet_server.",
			"serv->generator",
			"REQUEST_TYPE",
			"ws_obj",
			"case (int)LWS_CALLBACK",
			"",
			">normal<",
			"server.cb",
			"&server.info",
			"src",
			"url",
			"",
			"rsp",
			"_ws_",
			"->rsp",
			"state_dump",
			"RESPONSE_OFFSET",
			"RESPONSE_LENGTH",
			"static JSValue",
			"0",
			"res->body",
			"REQUEST_BODY",
			"\\\\n\"\\n\"\\1",
			"<br />",
			"\\\\n\"",
			"\\n\"",
			"#include <quickjs-libc.h>",
			"#include <list.h>",
			"#include <cutils.h>",
			"#include <quickjs.h>",
			"MinnetCallback",
			"_socket_",
			"MINNET_SOCKET_H",
			"inline",
			"static inline ",
			"hdr->",
			"",
			"request",
			"h->",
			"ctx",
			"equest",
			"req",
			"request",
			"args",
			"MinnetPollFd",
			"request->body.",
			"request->",
			"request",
			"body",
			"http_callback",
			"ws_callback",
			"protocols",
			"MinnetHttpHeader",
			"MinnetHttpMount",
			"struct lws_http_mount",
			"org",
			"JSUTILS_H",
			"io_handler",
			"make_handler",
			", ",
			"MinnetWebsocketCallback",
			", ",
			"MinnetWebsocketCallback",
			"websocket_callback(",
			"websocket_callback",
			"MINNET_JSUTILS_H",
			"static struct minnet_ws_callback",
			"static JSValue\nminnet_ws",
			"static &",
			"JSValue",
			"",
			"header->",
			"struct",
			"extern struct",
			"struct",
			"extern struct",
			"get_websocket_obj",
			"respondtype",
			"typeName",
			"respond",
			"}, respond) =>",
			"statusResponse",
			"callbacks",
			"function",
			"log",
			"MessageTransmitter"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"current_file": null,
							"outline_rename_mode": false,
							"symkeys":
							[
							],
							"symlist":
							[
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1628496395.36,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "/home/roman/Projects/plot-cv/test-rpc.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7385,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1631423742.61,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2220.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "CMakeLists.txt",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14479,
						"regions":
						{
						},
						"selection":
						[
							[
								2188,
								2189
							]
						],
						"settings":
						{
							"syntax": "Packages/User/Themes/CMake.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1631932537.34,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 648.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "rpc.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29419,
						"regions":
						{
							"col_5FFF00FF":
							{
								"flags": 16,
								"regions":
								[
									[
										23804,
										23817
									]
								],
								"scope": "col_5FFF00FF"
							},
							"col_5FFF00FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_5FFF00FF_circle.png",
								"regions":
								[
									[
										23785,
										23785
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1631932294.93,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 38.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.exec":
	{
		"height": 304.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Build debug",
	"project": "minnet.sublime-project",
	"replace":
	{
		"height": 68.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"events.js",
				"~/Projects/plot-cv/lib/events.js"
			],
			[
				"debugger.js",
				"~/Projects/plot-cv/debugger.js"
			],
			[
				"",
				"minnet-request.c"
			],
			[
				"lws-call",
				"libwebsockets/include/libwebsockets/lws-callbacks.h"
			],
			[
				"test-rpc",
				"~/Projects/plot-cv/test-rpc.js"
			],
			[
				"lws-htt",
				"libwebsockets/include/libwebsockets/lws-http.h"
			],
			[
				"server.c",
				"libwebsockets/lib/roles/http/server/server.c"
			],
			[
				"minnet-server",
				"minnet-server.c"
			],
			[
				"lws-ado",
				"libwebsockets/include/libwebsockets/lws-adopt.h"
			],
			[
				"ops-h2",
				"libwebsockets/lib/roles/h2/ops-h2.c"
			],
			[
				"test-rp",
				"~/Projects/plot-cv/test-rpc.js"
			],
			[
				"minnet.c",
				"minnet.c"
			],
			[
				"cmakelists-im",
				"libwebsockets/CMakeLists-implied-options.txt"
			],
			[
				"cmake",
				"libwebsockets/CMakeLists.txt"
			],
			[
				"roles-htt",
				"libwebsockets/lib/roles/http/private-lib-roles-http.h"
			],
			[
				"-roles",
				"libwebsockets/lib/roles/h2/private-lib-roles-h2.h"
			],
			[
				"private-lib-rol",
				"libwebsockets/lib/roles/private-lib-roles.h"
			],
			[
				"server",
				"libwebsockets/lib/roles/http/server/server.c"
			],
			[
				"rpc.js",
				"rpc.js"
			],
			[
				"sse.c",
				"libwebsockets/minimal-examples/http-server/minimal-http-server-sse/minimal-http-server-sse.c"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"minnet-ser",
				"minnet-server.c"
			],
			[
				"quicjs",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"buffer.h",
				"buffer.h"
			],
			[
				"quickj",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"minnet.h",
				"minnet.h"
			],
			[
				"quickjs.",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"webso",
				"minnet-websocket.c"
			],
			[
				"jsutil",
				"minnet-jsutils.h"
			],
			[
				"minnet",
				"minnet.c"
			],
			[
				"websoc",
				"websocket.c"
			],
			[
				"jsut",
				"jsutils.h"
			],
			[
				"minnet-",
				"minnet-server.h"
			],
			[
				"client.c",
				"client.c"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"minn",
				"minnet.c"
			],
			[
				"terminal.",
				"lib/terminal.js"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"qjsm",
				"qjsm.c"
			],
			[
				"tty.js",
				"lib/tty.js"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"inspe",
				"quickjs-inspect.c"
			],
			[
				"utils.h",
				"utils.h"
			],
			[
				"intern",
				"quickjs-internal.h"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"test_chil",
				"tests/test_childprocess.js"
			],
			[
				"pointer.h",
				"pointer.h"
			],
			[
				"stack",
				"lib/stack.js"
			],
			[
				"test_misc",
				"tests/test_misc.js"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"vector.h",
				"vector.h"
			],
			[
				"test_lex",
				"tests/test_lexer.js"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"quickjs.c",
				"~/Projects/plot-cv/quickjs/quickjs.c"
			],
			[
				"pointer.c",
				"pointer.c"
			],
			[
				"-insp",
				"quickjs-inspect.c"
			],
			[
				"test_op",
				"tests/test_op_overloading.js"
			],
			[
				"lexer.c",
				"lexer.c"
			],
			[
				"quickjs-lexer",
				"quickjs-lexer.c"
			],
			[
				"test_qjs",
				"tests/test_qjsm.js"
			],
			[
				"utils.c",
				"utils.c"
			],
			[
				"qjsm.c",
				"qjsm.c"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"pred",
				"predicate.c"
			],
			[
				"dee",
				"quickjs-deep.c"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"qjsm.",
				"qjsm.c"
			],
			[
				"test_qj",
				"tests/test_qjsm.js"
			],
			[
				"quicksj-in",
				"quickjs-internal.h"
			],
			[
				"property",
				"property-enumeration.c"
			],
			[
				"pointer.",
				"pointer.c"
			],
			[
				"quickjs",
				"quickjs-inspect.c"
			],
			[
				"util.j",
				"lib/util.js"
			],
			[
				"jsm.c",
				"qjsm.c"
			],
			[
				"test_point",
				"tests/test_pointer.js"
			],
			[
				"bnflex",
				"lib/bnflexer.js"
			],
			[
				"bnf.y",
				"~/Projects/plot-cv/lib/grammars/bnf.y"
			],
			[
				"test_par",
				"tests/test_parser.js"
			],
			[
				"grammar.ki",
				"grammar.kison"
			],
			[
				"test_pat",
				"tests/test_path.js"
			],
			[
				"exten",
				"lib/extendArray.js"
			],
			[
				"test_parse",
				"tests/test_parser.js"
			],
			[
				"test_path",
				"tests/test_path.js"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"lexer.h",
				"lexer.h"
			],
			[
				"test_tree",
				"tests/test_treewalker.js"
			],
			[
				"tree.h",
				"src/tree.h"
			],
			[
				"scan_ulongn",
				"lib/scan/scan_ulongn.c"
			],
			[
				"term_rest",
				"src/term/term_restore.c"
			],
			[
				"parse.h",
				"src/parse.h"
			],
			[
				"byte.h",
				"lib/byte.h"
			],
			[
				"shell.h",
				"lib/shell.h"
			],
			[
				"mmap_file",
				"lib/stralloc/mmap_filename.c"
			],
			[
				"uffer.h",
				"lib/buffer.h"
			],
			[
				"scan.h",
				"lib/scan.h"
			],
			[
				"stralloc.h",
				"lib/stralloc.h"
			],
			[
				"path.h",
				"lib/path.h"
			],
			[
				"str.h",
				"lib/str.h"
			],
			[
				"scan.",
				"lib/scan.h"
			],
			[
				"debug_char",
				"src/debug/debug_char.c"
			],
			[
				"source_pop",
				"src/source/source_pop.c"
			],
			[
				"builtin.h",
				"src/builtin.h"
			],
			[
				"debug_node",
				"src/debug/debug_node.c"
			],
			[
				"sig_in",
				"lib/sig_internal.h"
			],
			[
				"term_",
				"src/term/term_attr.c"
			],
			[
				"glob.h",
				"lib/glob.h"
			],
			[
				"source.h",
				"src/source.h"
			],
			[
				"fdtable",
				"src/fdtable.h"
			],
			[
				"fd.h",
				"src/fd.h"
			],
			[
				"eval",
				"src/eval.h"
			],
			[
				"ieee",
				"doc/posix/ieee-p1003.2-d11.2-s3.txt"
			],
			[
				"expand.h",
				"src/expand.h"
			],
			[
				"builtin_dum",
				"src/builtin/builtin_dump.c"
			],
			[
				"h_main",
				"src/sh/sh_main.c"
			],
			[
				"parse_cha",
				"src/parse/parse_chartable.c"
			],
			[
				"debug.h",
				"src/debug.h"
			],
			[
				"exec_c",
				"src/exec/exec_command.c"
			],
			[
				"eval.h",
				"src/eval.h"
			],
			[
				"test-op",
				"test-operators.js"
			],
			[
				"filesys",
				"lib/filesystem.js"
			],
			[
				"repl.",
				"repl.js"
			],
			[
				"test-str",
				"plot-cv/quickjs/modules/test-str0.c"
			],
			[
				"property-en",
				"plot-cv/quickjs/modules/property-enumeration.h"
			],
			[
				"cutil",
				"plot-cv/quickjs/cutils.c"
			],
			[
				"test-libre",
				"plot-cv/quickjs/modules/test-libregexp.c"
			],
			[
				"clang-as",
				"plot-cv/clang-ast.js"
			],
			[
				"repl",
				"plot-cv/repl.js"
			],
			[
				"consoleS",
				"plot-cv/lib/consoleSetup.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 397.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
