{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Event",
				"EventTarget"
			],
			[
				"http_",
				"http_response"
			],
			[
				"STREAM",
				"STREAM_TEXT"
			],
			[
				"moun",
				"mountpoint_len"
			],
			[
				"ori",
				"origin_protocol"
			],
			[
				"mount",
				"mountpoint_len"
			],
			[
				"LWS",
				"LWSMPRO_CALLBACK"
			],
			[
				"JS_Free",
				"JS_FreeValue"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_Throw",
				"JS_ThrowReferenceError"
			],
			[
				"minnet",
				"minnet_response_class_id"
			],
			[
				"Minn",
				"MinnetWebsocket"
			],
			[
				"BUILD_",
				"BUILD_LIBWEBSOCKETS"
			],
			[
				"minnet_request",
				"minnet_request_class_id"
			],
			[
				"getOwn",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"break",
				"stringBreakNewline"
			],
			[
				"define",
				"defineProperty"
			],
			[
				"sy",
				"syntaxerror_ctor"
			],
			[
				"child_pr",
				"child_process_proto"
			],
			[
				"JS_GetP",
				"JS_GetPropertyUint32"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"targtet_",
				"target_compile_definitions"
			],
			[
				"jsm_module",
				"jsm_module_loader_so"
			],
			[
				"base",
				"base_name"
			],
			[
				"ATOM",
				"ATOM_TO_VALUE"
			],
			[
				"prop",
				"propenum_tab"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"js_loca",
				"js_location_data"
			],
			[
				"loca",
				"location_proto"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"HAVE_QUI",
				"HAVE_QUICKJS_LIBRARY"
			],
			[
				"jsm_load",
				"jsm_load_packages_json"
			],
			[
				"js_sy",
				"js_syntaxerror_class_id"
			],
			[
				"synta",
				"syntaxerror_proto"
			],
			[
				"property_",
				"property_enumeration_key"
			],
			[
				"jsm_mo",
				"jsm_module_loader_path"
			],
			[
				"inspe",
				"inspect_custom_node"
			],
			[
				"inspect",
				"inspect_custom_node"
			],
			[
				"property",
				"property_enumeration_circular"
			],
			[
				"Reg",
				"RegExpCompare"
			],
			[
				"property_enum",
				"property_enumeration_length"
			],
			[
				"Opera",
				"OperatorsObjects"
			],
			[
				"else",
				"elseif"
			],
			[
				"ABC",
				"ABCDEF"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  lws_ssl_info\n  lws_cert_update_state\n  lws_acme_cert_aging_args\n  lws_filter_network_conn_args\n  lws_callback_reasons",
			"settings":
			{
				"buffer_size": 119,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					732,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/net/rpc.js",
						"symkeys":
						[
							[
								426,
								458
							],
							[
								515,
								533
							],
							[
								585,
								603
							],
							[
								638,
								658
							],
							[
								707,
								726
							],
							[
								732,
								741
							],
							[
								752,
								766
							],
							[
								795,
								816
							],
							[
								882,
								913
							],
							[
								971,
								986
							],
							[
								1058,
								1087
							],
							[
								1504,
								1508
							],
							[
								1537,
								1548
							],
							[
								1635,
								1674
							],
							[
								1887,
								1910
							],
							[
								1921,
								1924
							],
							[
								1941,
								1968
							],
							[
								2111,
								2117
							],
							[
								2132,
								2138
							],
							[
								2167,
								2173
							],
							[
								2213,
								2268
							],
							[
								2278,
								2288
							],
							[
								2305,
								2329
							],
							[
								2605,
								2623
							],
							[
								2638,
								2656
							],
							[
								2685,
								2703
							],
							[
								2755,
								2888
							],
							[
								2891,
								2926
							],
							[
								2939,
								2951
							],
							[
								3039,
								3053
							],
							[
								3236,
								3251
							],
							[
								3379,
								3393
							],
							[
								3517,
								3535
							],
							[
								3650,
								3663
							],
							[
								3841,
								3871
							],
							[
								3893,
								3911
							],
							[
								3925,
								3940
							],
							[
								3954,
								3972
							],
							[
								4053,
								4071
							],
							[
								4120,
								4127
							],
							[
								4188,
								4194
							],
							[
								4236,
								4248
							],
							[
								4258,
								4270
							],
							[
								4287,
								4308
							],
							[
								4350,
								4362
							],
							[
								4419,
								4431
							],
							[
								4494,
								4528
							],
							[
								4568,
								4580
							],
							[
								4649,
								4661
							],
							[
								4723,
								4748
							],
							[
								4791,
								4803
							],
							[
								4826,
								4838
							],
							[
								4874,
								4893
							],
							[
								5126,
								5132
							],
							[
								5174,
								5179
							],
							[
								5202,
								5223
							],
							[
								5341,
								5376
							],
							[
								5492,
								5496
							],
							[
								5523,
								5532
							],
							[
								5585,
								5610
							],
							[
								5615,
								5643
							],
							[
								5873,
								5882
							],
							[
								5983,
								5993
							],
							[
								6023,
								6033
							],
							[
								6127,
								6137
							],
							[
								6223,
								6241
							],
							[
								6366,
								6383
							],
							[
								6420,
								6429
							],
							[
								6466,
								6516
							],
							[
								6633,
								6645
							],
							[
								7119,
								7133
							],
							[
								7359,
								7373
							],
							[
								7545,
								7559
							],
							[
								8173,
								8177
							],
							[
								8271,
								8291
							],
							[
								8397,
								8412
							],
							[
								8590,
								8602
							],
							[
								8657,
								8671
							],
							[
								8796,
								8814
							],
							[
								8941,
								8950
							],
							[
								9040,
								9056
							],
							[
								9426,
								9459
							],
							[
								9975,
								10019
							],
							[
								10141,
								10154
							],
							[
								10224,
								10230
							],
							[
								10315,
								10349
							],
							[
								10605,
								10616
							],
							[
								10674,
								10690
							],
							[
								10771,
								10786
							],
							[
								11137,
								11149
							],
							[
								11367,
								11387
							],
							[
								11482,
								11502
							],
							[
								11666,
								11690
							],
							[
								11816,
								11834
							],
							[
								11939,
								11949
							],
							[
								12013,
								12023
							],
							[
								12084,
								12124
							],
							[
								12142,
								12173
							],
							[
								12503,
								12509
							],
							[
								12674,
								12694
							],
							[
								12790,
								12830
							],
							[
								13000,
								13009
							],
							[
								13039,
								13047
							],
							[
								13225,
								13265
							],
							[
								13364,
								13371
							],
							[
								13390,
								13397
							],
							[
								13482,
								13522
							],
							[
								13587,
								13594
							],
							[
								13672,
								13712
							],
							[
								13777,
								13784
							],
							[
								13824,
								13830
							],
							[
								13897,
								13901
							],
							[
								13956,
								13960
							],
							[
								14032,
								14063
							],
							[
								14326,
								14364
							],
							[
								14448,
								14457
							],
							[
								14933,
								14941
							],
							[
								14977,
								14997
							],
							[
								15578,
								15587
							],
							[
								15897,
								15906
							],
							[
								16306,
								16311
							],
							[
								16367,
								16372
							],
							[
								16471,
								16476
							],
							[
								16508,
								16532
							],
							[
								16785,
								16806
							],
							[
								16832,
								16851
							],
							[
								16881,
								16893
							],
							[
								16937,
								16942
							],
							[
								17016,
								17025
							],
							[
								17333,
								17393
							],
							[
								18000,
								18013
							],
							[
								18185,
								18193
							],
							[
								18311,
								18323
							],
							[
								18654,
								18668
							],
							[
								18888,
								18922
							],
							[
								19221,
								19226
							],
							[
								19321,
								19362
							],
							[
								19692,
								19707
							],
							[
								20168,
								20178
							],
							[
								20215,
								20225
							],
							[
								20294,
								20303
							],
							[
								20361,
								20399
							],
							[
								20532,
								20550
							],
							[
								20580,
								20595
							],
							[
								20622,
								20641
							],
							[
								20676,
								20695
							],
							[
								20730,
								20747
							],
							[
								20780,
								20800
							],
							[
								20892,
								20919
							],
							[
								21018,
								21054
							],
							[
								21212,
								21258
							],
							[
								21357,
								21388
							],
							[
								21957,
								21967
							],
							[
								22101,
								22158
							],
							[
								22177,
								22235
							],
							[
								22554,
								22625
							],
							[
								22687,
								22694
							],
							[
								22785,
								22792
							],
							[
								22879,
								22961
							],
							[
								23508,
								23538
							],
							[
								23906,
								23941
							],
							[
								23954,
								23994
							],
							[
								24173,
								24229
							],
							[
								24458,
								24485
							],
							[
								24496,
								24511
							],
							[
								24524,
								24554
							],
							[
								24811,
								24913
							],
							[
								24939,
								24957
							],
							[
								25253,
								25276
							],
							[
								25384,
								25397
							],
							[
								26006,
								26039
							],
							[
								26108,
								26138
							],
							[
								26177,
								26181
							],
							[
								26268,
								26295
							],
							[
								26334,
								26342
							],
							[
								26422,
								26448
							],
							[
								26494,
								26523
							],
							[
								26580,
								26625
							],
							[
								26725,
								26730
							],
							[
								26830,
								26864
							],
							[
								26981,
								27041
							],
							[
								27260,
								27282
							],
							[
								27454,
								27476
							],
							[
								27574,
								27594
							],
							[
								27626,
								27631
							],
							[
								27760,
								27787
							],
							[
								28019,
								28066
							],
							[
								28884,
								28919
							],
							[
								28941,
								28945
							],
							[
								28977,
								28981
							],
							[
								29003,
								29035
							],
							[
								29169,
								29211
							],
							[
								29264,
								29305
							]
						],
						"symlist":
						[
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"VfnAdapter = vfn =>",
							"get: k =>",
							"set: (k, v) =>",
							"VfnDecorator = vfn =>",
							".memoize = function memoize(fn)",
							"(key, value) =>",
							"self = function(key, ...args)",
							"n =>",
							"(acc, n) =>",
							".GetClasses = function* GetClasses(obj)",
							" function Mapper(map = ",
							"())",
							"self = function(key, value)",
							"Mapper",
							"Mapper",
							"Mapper",
							" function DefaultConstructor(mapper, fn = (...args) => ",
							"(...args))",
							"self = function(...args)",
							"DefaultConstructor",
							"DefaultConstructor",
							"DefaultConstructor",
							" function EventLogger( instance = {}, callback = (name, event, thisObj) => console.log('EventLogger', { name, event, thisObj }) )",
							" function WrapEvent(handler, name)",
							" function(e)",
							"get(obj, prop)",
							"MessageReceiver",
							"onmessage(msg)",
							"MessageTransmitter",
							"sendMessage()",
							" function MessageTransceiver()",
							"MessageTransceiver",
							"MessageReceiver",
							"MessageTransmitter",
							"value: instance =>",
							"ctor =>",
							"none()",
							"encode: v =>",
							"decode: v =>",
							"json(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".js = function js(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".bjson = function bjson()",
							"encode: v =>",
							"decode: v =>",
							" function RPCApi(c)",
							"RPCApi",
							" o =>",
							" function RPCProxy(c)",
							" function RPCObject(id, connection)",
							"r =>",
							"RPCObject",
							" function RPCFactory(api)",
							"async function Factory(opts)",
							"RPCObject",
							"RPCFactory",
							"RPCFactory",
							"Connection",
							"static equal(a, b)",
							"static get last()",
							"makeSeq()",
							"constructor(socket, instance, log, codec = 'none')",
							"log(...args)",
							"error(message)",
							"close(...args)",
							"onmessage(msg)",
							"r =>",
							"processMessage(data)",
							"onconnect(sock)",
							"onpong(data)",
							"onerror(error)",
							"onclose(code, why)",
							"cleanup()",
							"sendMessage(obj)",
							"sendCommand(command, params = {})",
							"static getCallbacks(instance, verbosity = 0)",
							" (...args) =>",
							" () =>",
							"handle = (sock, event, ...args) =>",
							"then: fn =>",
							"remove = sock =>",
							"onConnect(sock)",
							"onOpen(sock)",
							"onMessage(sock, msg)",
							"onError(sock, error)",
							"onClose(sock, code, why)",
							"onPong(sock, data)",
							"Connection",
							"Connection",
							"function RPCServerEndpoint(classes = {})",
							"new({ class: name, args = [] })",
							"list()",
							"({ id }, respond) =>",
							"({ obj, method, args = [] }, respond) =>",
							"result =>",
							"error =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"sym =>",
							"v =>",
							"v =>",
							"({ obj, property }, respond) =>",
							"({ obj, property, value }, respond) =>",
							"RPCServer",
							"makeId()",
							"processMessage(data)",
							"RPCServer",
							"RPCClient",
							" e =>",
							" r =>",
							"() =>",
							"processMessage(response)",
							"command(name, params)",
							"(accept, reject) =>",
							" response =>",
							" e =>",
							"RPCClient",
							" function RPCSocket(url, service = RPCServer, verbosity = 1)",
							" (...args) =>",
							"get fd()",
							"get socket()",
							"register(ctor)",
							"listen(new_ws, os = globalThis.os)",
							"() =>",
							"async connect(new_ws, os = globalThis.os)",
							"get connected()",
							"get list()",
							"get last()",
							"RPCSocket",
							"function MakeWebSocket(url, callbacks)",
							".onconnect = () =>",
							".onopen = () =>",
							".onerror = error =>",
							".onmessage = msg =>",
							".onpong = pong =>",
							".onclose = reason =>",
							" function isThenable(value)",
							" function hasHandler(obj, eventName)",
							" function callHandler(obj, eventName, ...args)",
							" function parseURL(url_or_port)",
							"toString()",
							" function GetProperties( obj, method = obj => Object.",
							"(obj), pred = (obj, depth) => obj !== Object.prototype )",
							" function GetKeys(obj, pred = (obj, depth) => obj !== Object.prototype)",
							" obj =>",
							" obj =>",
							" function getPropertyDescriptors(obj, merge = true, pred = (proto, depth) => true)",
							" function define(obj, ...args)",
							" function setHandlers(os, handlers)",
							".onFd = function(fd, readable, writable)",
							" function statusResponse(success, result_or_error, data)",
							" function objectCommand(fn)",
							" function(data)",
							"respond = (success, result) =>",
							" function MakeListCommand( pred = v => typeof v != 'function', defaults = { maxDepth: Infinity } )",
							"(data, respond) =>",
							" (proto, depth) =>",
							"(acc, key) =>",
							" function getPrototypeName(proto)",
							"function DeserializeEntries(e)",
							"a =>",
							"function DeserializeKeys(e)",
							"([k]) =>",
							"function DeserializeMap(e)",
							"function DeserializeObject(e)",
							"function ForwardMethods(e, ret = {}, thisObj)",
							" o =>",
							"function ForwardObject(e, thisObj)",
							"function MakeCommandFunction(cmd, getConnection, thisObj, t)",
							"getConnection = obj =>",
							" function(params = {})",
							"(resolve, reject) =>",
							" r =>",
							"async function(params = {})",
							" function SerializeValue(value, source = false)",
							" function DeserializeSymbols(names)",
							"n =>",
							"n =>",
							" function DeserializeValue(desc)",
							"RPCConnect = (url, service = RPCClient) =>",
							"RPCListen = (url, service = RPCServer) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADGCAAAICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQogIC5tZW1vaXplID0gbWVtb2l6ZShmbikKICBzZWxmID0gKGtleSwgLi4uYXJncykKICAuR2V0Q2xhc3NlcyA9ICpHZXRDbGFzc2VzKG9iaikKTWFwcGVyKG1hcCA9IAogIHNlbGYgPSAoa2V5LCB2YWx1ZSkKTWFwcGVyCk1hcHBlcgpNYXBwZXIKICBzZWxmID0gKC4uLmFyZ3MpCkRlZmF1bHRDb25zdHJ1Y3RvcgpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCldyYXBFdmVudChoYW5kbGVyLCBuYW1lKQoJKGUpCiAgZ2V0KG9iaiwgcHJvcCkKTWVzc2FnZVJlY2VpdmVyCiAgb25tZXNzYWdlKG1zZykKTWVzc2FnZVRyYW5zbWl0dGVyCiAgc2VuZE1lc3NhZ2UoKQpNZXNzYWdlVHJhbnNjZWl2ZXIoKQpNZXNzYWdlVHJhbnNjZWl2ZXIKTWVzc2FnZVJlY2VpdmVyCk1lc3NhZ2VUcmFuc21pdHRlcgogIG5vbmUoKQogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIC5qcyA9IGpzKHZlcmJvc2UgPSBmYWxzZSkKICAuYmpzb24gPSBianNvbigpClJQQ0FwaShjKQpSUENBcGkKUlBDUHJveHkoYykKUlBDT2JqZWN0KGlkLCBjb25uZWN0aW9uKQpSUENPYmplY3QKUlBDRmFjdG9yeShhcGkpCkZhY3Rvcnkob3B0cykKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkKUlBDRmFjdG9yeQpDb25uZWN0aW9uCiAgc3RhdGljIGVxdWFsKGEsIGIpCiAgc3RhdGljIGdldCBsYXN0KCkKICBtYWtlU2VxKCkKICBjb25zdHJ1Y3Rvcihzb2NrZXQsIGluc3RhbmNlLCBsb2csIGNvZGVjID0gJ25vbmUnKQogIGxvZyguLi5hcmdzKQogIGVycm9yKG1lc3NhZ2UpCiAgY2xvc2UoLi4uYXJncykKICBvbm1lc3NhZ2UobXNnKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICBvbkNvbm5lY3Qoc29jaykKICBvbk9wZW4oc29jaykKICBvbk1lc3NhZ2Uoc29jaywgbXNnKQogIG9uRXJyb3Ioc29jaywgZXJyb3IpCiAgb25DbG9zZShzb2NrLCBjb2RlLCB3aHkpCiAgb25Qb25nKHNvY2ssIGRhdGEpCkNvbm5lY3Rpb24KQ29ubmVjdGlvbgpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQpSUENTZXJ2ZXIKICBtYWtlSWQoKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpClJQQ1NlcnZlcgpSUENDbGllbnQKICBwcm9jZXNzTWVzc2FnZShyZXNwb25zZSkKICBjb21tYW5kKG5hbWUsIHBhcmFtcykKUlBDQ2xpZW50ClJQQ1NvY2tldCh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIsIHZlcmJvc2l0eSA9IDEpCiAgZ2V0IGZkKCkKICBnZXQgc29ja2V0KCkKICByZWdpc3RlcihjdG9yKQogIGxpc3RlbihuZXdfd3MsIG9zID0gZ2xvYmFsVGhpcy5vcykKICBjb25uZWN0KG5ld193cywgb3MgPSBnbG9iYWxUaGlzLm9zKQogIGdldCBjb25uZWN0ZWQoKQogIGdldCBsaXN0KCkKICBnZXQgbGFzdCgpClJQQ1NvY2tldApNYWtlV2ViU29ja2V0KHVybCwgY2FsbGJhY2tzKQoJaXNUaGVuYWJsZSh2YWx1ZSkKCWhhc0hhbmRsZXIob2JqLCBldmVudE5hbWUpCgljYWxsSGFuZGxlcihvYmosIGV2ZW50TmFtZSwgLi4uYXJncykKCXBhcnNlVVJMKHVybF9vcl9wb3J0KQogIHRvU3RyaW5nKCkKCWRlZmluZShvYmosIC4uLmFyZ3MpCglzZXRIYW5kbGVycyhvcywgaGFuZGxlcnMpCiAgLm9uRmQgPSAoZmQsIHJlYWRhYmxlLCB3cml0YWJsZSkKCXN0YXR1c1Jlc3BvbnNlKHN1Y2Nlc3MsIHJlc3VsdF9vcl9lcnJvciwgZGF0YSkKCW9iamVjdENvbW1hbmQoZm4pCgkoZGF0YSkKCWdldFByb3RvdHlwZU5hbWUocHJvdG8pCkRlc2VyaWFsaXplRW50cmllcyhlKQpEZXNlcmlhbGl6ZUtleXMoZSkKRGVzZXJpYWxpemVNYXAoZSkKRGVzZXJpYWxpemVPYmplY3QoZSkKRm9yd2FyZE1ldGhvZHMoZSwgcmV0ID0ge30sIHRoaXNPYmopCkZvcndhcmRPYmplY3QoZSwgdGhpc09iaikKTWFrZUNvbW1hbmRGdW5jdGlvbihjbWQsIGdldENvbm5lY3Rpb24sIHRoaXNPYmosIHQpCgkocGFyYW1zID0ge30pCihwYXJhbXMgPSB7fSkKU2VyaWFsaXplVmFsdWUodmFsdWUsIHNvdXJjZSA9IGZhbHNlKQpEZXNlcmlhbGl6ZVN5bWJvbHMobmFtZXMpCkRlc2VyaWFsaXplVmFsdWUoZGVzYykAAAAAAAAAAMYIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADGCAAAICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQogIC5tZW1vaXplID0gbWVtb2l6ZShmbikKICBzZWxmID0gKGtleSwgLi4uYXJncykKICAuR2V0Q2xhc3NlcyA9ICpHZXRDbGFzc2VzKG9iaikKTWFwcGVyKG1hcCA9IAogIHNlbGYgPSAoa2V5LCB2YWx1ZSkKTWFwcGVyCk1hcHBlcgpNYXBwZXIKICBzZWxmID0gKC4uLmFyZ3MpCkRlZmF1bHRDb25zdHJ1Y3RvcgpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCldyYXBFdmVudChoYW5kbGVyLCBuYW1lKQoJKGUpCiAgZ2V0KG9iaiwgcHJvcCkKTWVzc2FnZVJlY2VpdmVyCiAgb25tZXNzYWdlKG1zZykKTWVzc2FnZVRyYW5zbWl0dGVyCiAgc2VuZE1lc3NhZ2UoKQpNZXNzYWdlVHJhbnNjZWl2ZXIoKQpNZXNzYWdlVHJhbnNjZWl2ZXIKTWVzc2FnZVJlY2VpdmVyCk1lc3NhZ2VUcmFuc21pdHRlcgogIG5vbmUoKQogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIC5qcyA9IGpzKHZlcmJvc2UgPSBmYWxzZSkKICAuYmpzb24gPSBianNvbigpClJQQ0FwaShjKQpSUENBcGkKUlBDUHJveHkoYykKUlBDT2JqZWN0KGlkLCBjb25uZWN0aW9uKQpSUENPYmplY3QKUlBDRmFjdG9yeShhcGkpCkZhY3Rvcnkob3B0cykKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkKUlBDRmFjdG9yeQpDb25uZWN0aW9uCiAgc3RhdGljIGVxdWFsKGEsIGIpCiAgc3RhdGljIGdldCBsYXN0KCkKICBtYWtlU2VxKCkKICBjb25zdHJ1Y3Rvcihzb2NrZXQsIGluc3RhbmNlLCBsb2csIGNvZGVjID0gJ25vbmUnKQogIGxvZyguLi5hcmdzKQogIGVycm9yKG1lc3NhZ2UpCiAgY2xvc2UoLi4uYXJncykKICBvbm1lc3NhZ2UobXNnKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICBvbkNvbm5lY3Qoc29jaykKICBvbk9wZW4oc29jaykKICBvbk1lc3NhZ2Uoc29jaywgbXNnKQogIG9uRXJyb3Ioc29jaywgZXJyb3IpCiAgb25DbG9zZShzb2NrLCBjb2RlLCB3aHkpCiAgb25Qb25nKHNvY2ssIGRhdGEpCkNvbm5lY3Rpb24KQ29ubmVjdGlvbgpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQpSUENTZXJ2ZXIKICBtYWtlSWQoKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpClJQQ1NlcnZlcgpSUENDbGllbnQKICBwcm9jZXNzTWVzc2FnZShyZXNwb25zZSkKICBjb21tYW5kKG5hbWUsIHBhcmFtcykKUlBDQ2xpZW50ClJQQ1NvY2tldCh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIsIHZlcmJvc2l0eSA9IDEpCiAgZ2V0IGZkKCkKICBnZXQgc29ja2V0KCkKICByZWdpc3RlcihjdG9yKQogIGxpc3RlbihuZXdfd3MsIG9zID0gZ2xvYmFsVGhpcy5vcykKICBjb25uZWN0KG5ld193cywgb3MgPSBnbG9iYWxUaGlzLm9zKQogIGdldCBjb25uZWN0ZWQoKQogIGdldCBsaXN0KCkKICBnZXQgbGFzdCgpClJQQ1NvY2tldApNYWtlV2ViU29ja2V0KHVybCwgY2FsbGJhY2tzKQoJaXNUaGVuYWJsZSh2YWx1ZSkKCWhhc0hhbmRsZXIob2JqLCBldmVudE5hbWUpCgljYWxsSGFuZGxlcihvYmosIGV2ZW50TmFtZSwgLi4uYXJncykKCXBhcnNlVVJMKHVybF9vcl9wb3J0KQogIHRvU3RyaW5nKCkKCWRlZmluZShvYmosIC4uLmFyZ3MpCglzZXRIYW5kbGVycyhvcywgaGFuZGxlcnMpCiAgLm9uRmQgPSAoZmQsIHJlYWRhYmxlLCB3cml0YWJsZSkKCXN0YXR1c1Jlc3BvbnNlKHN1Y2Nlc3MsIHJlc3VsdF9vcl9lcnJvciwgZGF0YSkKCW9iamVjdENvbW1hbmQoZm4pCgkoZGF0YSkKCWdldFByb3RvdHlwZU5hbWUocHJvdG8pCkRlc2VyaWFsaXplRW50cmllcyhlKQpEZXNlcmlhbGl6ZUtleXMoZSkKRGVzZXJpYWxpemVNYXAoZSkKRGVzZXJpYWxpemVPYmplY3QoZSkKRm9yd2FyZE1ldGhvZHMoZSwgcmV0ID0ge30sIHRoaXNPYmopCkZvcndhcmRPYmplY3QoZSwgdGhpc09iaikKTWFrZUNvbW1hbmRGdW5jdGlvbihjbWQsIGdldENvbm5lY3Rpb24sIHRoaXNPYmosIHQpCgkocGFyYW1zID0ge30pCihwYXJhbXMgPSB7fSkKU2VyaWFsaXplVmFsdWUodmFsdWUsIHNvdXJjZSA9IGZhbHNlKQpEZXNlcmlhbGl6ZVN5bWJvbHMobmFtZXMpCkRlc2VyaWFsaXplVmFsdWUoZGVzYykAAAAAAAAAAMYIAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					733,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/net/rpc.js",
						"symkeys":
						[
							[
								426,
								458
							],
							[
								515,
								533
							],
							[
								585,
								603
							],
							[
								638,
								658
							],
							[
								707,
								726
							],
							[
								732,
								741
							],
							[
								752,
								766
							],
							[
								795,
								816
							],
							[
								882,
								913
							],
							[
								971,
								986
							],
							[
								1058,
								1087
							],
							[
								1504,
								1508
							],
							[
								1537,
								1548
							],
							[
								1635,
								1674
							],
							[
								1887,
								1910
							],
							[
								1921,
								1924
							],
							[
								1941,
								1968
							],
							[
								2111,
								2117
							],
							[
								2132,
								2138
							],
							[
								2167,
								2173
							],
							[
								2213,
								2268
							],
							[
								2278,
								2288
							],
							[
								2305,
								2329
							],
							[
								2605,
								2623
							],
							[
								2638,
								2656
							],
							[
								2685,
								2703
							],
							[
								2755,
								2888
							],
							[
								2891,
								2926
							],
							[
								2939,
								2951
							],
							[
								3039,
								3053
							],
							[
								3236,
								3251
							],
							[
								3379,
								3393
							],
							[
								3517,
								3535
							],
							[
								3650,
								3663
							],
							[
								3841,
								3871
							],
							[
								3893,
								3911
							],
							[
								3925,
								3940
							],
							[
								3954,
								3972
							],
							[
								4053,
								4071
							],
							[
								4120,
								4127
							],
							[
								4188,
								4194
							],
							[
								4236,
								4248
							],
							[
								4258,
								4270
							],
							[
								4287,
								4308
							],
							[
								4350,
								4362
							],
							[
								4419,
								4431
							],
							[
								4494,
								4528
							],
							[
								4568,
								4580
							],
							[
								4649,
								4661
							],
							[
								4723,
								4748
							],
							[
								4791,
								4803
							],
							[
								4826,
								4838
							],
							[
								4874,
								4893
							],
							[
								5126,
								5132
							],
							[
								5174,
								5179
							],
							[
								5202,
								5223
							],
							[
								5341,
								5376
							],
							[
								5492,
								5496
							],
							[
								5523,
								5532
							],
							[
								5585,
								5610
							],
							[
								5615,
								5643
							],
							[
								5873,
								5882
							],
							[
								5983,
								5993
							],
							[
								6023,
								6033
							],
							[
								6127,
								6137
							],
							[
								6223,
								6241
							],
							[
								6366,
								6383
							],
							[
								6420,
								6429
							],
							[
								6466,
								6516
							],
							[
								6633,
								6645
							],
							[
								7119,
								7133
							],
							[
								7359,
								7373
							],
							[
								7545,
								7559
							],
							[
								8173,
								8177
							],
							[
								8271,
								8291
							],
							[
								8397,
								8412
							],
							[
								8590,
								8602
							],
							[
								8657,
								8671
							],
							[
								8796,
								8814
							],
							[
								8941,
								8950
							],
							[
								9040,
								9056
							],
							[
								9426,
								9459
							],
							[
								9975,
								10019
							],
							[
								10141,
								10154
							],
							[
								10224,
								10230
							],
							[
								10315,
								10349
							],
							[
								10605,
								10616
							],
							[
								10674,
								10690
							],
							[
								10771,
								10786
							],
							[
								11137,
								11149
							],
							[
								11367,
								11387
							],
							[
								11482,
								11502
							],
							[
								11666,
								11690
							],
							[
								11816,
								11834
							],
							[
								11939,
								11949
							],
							[
								12013,
								12023
							],
							[
								12084,
								12124
							],
							[
								12142,
								12173
							],
							[
								12503,
								12509
							],
							[
								12674,
								12694
							],
							[
								12790,
								12830
							],
							[
								13000,
								13009
							],
							[
								13039,
								13047
							],
							[
								13225,
								13265
							],
							[
								13364,
								13371
							],
							[
								13390,
								13397
							],
							[
								13482,
								13522
							],
							[
								13587,
								13594
							],
							[
								13672,
								13712
							],
							[
								13777,
								13784
							],
							[
								13824,
								13830
							],
							[
								13897,
								13901
							],
							[
								13956,
								13960
							],
							[
								14032,
								14063
							],
							[
								14326,
								14364
							],
							[
								14448,
								14457
							],
							[
								14933,
								14941
							],
							[
								14977,
								14997
							],
							[
								15578,
								15587
							],
							[
								15897,
								15906
							],
							[
								16306,
								16311
							],
							[
								16367,
								16372
							],
							[
								16471,
								16476
							],
							[
								16508,
								16532
							],
							[
								16785,
								16806
							],
							[
								16832,
								16851
							],
							[
								16881,
								16893
							],
							[
								16937,
								16942
							],
							[
								17016,
								17025
							],
							[
								17333,
								17393
							],
							[
								18000,
								18013
							],
							[
								18185,
								18193
							],
							[
								18311,
								18323
							],
							[
								18654,
								18668
							],
							[
								18888,
								18922
							],
							[
								19221,
								19226
							],
							[
								19321,
								19362
							],
							[
								19692,
								19707
							],
							[
								20168,
								20178
							],
							[
								20215,
								20225
							],
							[
								20294,
								20303
							],
							[
								20361,
								20399
							],
							[
								20532,
								20550
							],
							[
								20580,
								20595
							],
							[
								20622,
								20641
							],
							[
								20676,
								20695
							],
							[
								20730,
								20747
							],
							[
								20780,
								20800
							],
							[
								20892,
								20919
							],
							[
								21018,
								21054
							],
							[
								21212,
								21258
							],
							[
								21357,
								21388
							],
							[
								21957,
								21967
							],
							[
								22101,
								22158
							],
							[
								22177,
								22235
							],
							[
								22554,
								22625
							],
							[
								22687,
								22694
							],
							[
								22785,
								22792
							],
							[
								22879,
								22961
							],
							[
								23508,
								23538
							],
							[
								23906,
								23941
							],
							[
								23954,
								23994
							],
							[
								24173,
								24229
							],
							[
								24458,
								24485
							],
							[
								24496,
								24511
							],
							[
								24524,
								24554
							],
							[
								24811,
								24913
							],
							[
								24939,
								24957
							],
							[
								25253,
								25276
							],
							[
								25384,
								25397
							],
							[
								26006,
								26039
							],
							[
								26108,
								26138
							],
							[
								26177,
								26181
							],
							[
								26268,
								26295
							],
							[
								26334,
								26342
							],
							[
								26422,
								26448
							],
							[
								26494,
								26523
							],
							[
								26580,
								26625
							],
							[
								26725,
								26730
							],
							[
								26830,
								26864
							],
							[
								26981,
								27041
							],
							[
								27260,
								27282
							],
							[
								27454,
								27476
							],
							[
								27574,
								27594
							],
							[
								27626,
								27631
							],
							[
								27760,
								27787
							],
							[
								28019,
								28066
							],
							[
								28884,
								28919
							],
							[
								28941,
								28945
							],
							[
								28977,
								28981
							],
							[
								29003,
								29035
							],
							[
								29169,
								29211
							],
							[
								29264,
								29305
							]
						],
						"symlist":
						[
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"VfnAdapter = vfn =>",
							"get: k =>",
							"set: (k, v) =>",
							"VfnDecorator = vfn =>",
							".memoize = function memoize(fn)",
							"(key, value) =>",
							"self = function(key, ...args)",
							"n =>",
							"(acc, n) =>",
							".GetClasses = function* GetClasses(obj)",
							" function Mapper(map = ",
							"())",
							"self = function(key, value)",
							"Mapper",
							"Mapper",
							"Mapper",
							" function DefaultConstructor(mapper, fn = (...args) => ",
							"(...args))",
							"self = function(...args)",
							"DefaultConstructor",
							"DefaultConstructor",
							"DefaultConstructor",
							" function EventLogger( instance = {}, callback = (name, event, thisObj) => console.log('EventLogger', { name, event, thisObj }) )",
							" function WrapEvent(handler, name)",
							" function(e)",
							"get(obj, prop)",
							"MessageReceiver",
							"onmessage(msg)",
							"MessageTransmitter",
							"sendMessage()",
							" function MessageTransceiver()",
							"MessageTransceiver",
							"MessageReceiver",
							"MessageTransmitter",
							"value: instance =>",
							"ctor =>",
							"none()",
							"encode: v =>",
							"decode: v =>",
							"json(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".js = function js(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".bjson = function bjson()",
							"encode: v =>",
							"decode: v =>",
							" function RPCApi(c)",
							"RPCApi",
							" o =>",
							" function RPCProxy(c)",
							" function RPCObject(id, connection)",
							"r =>",
							"RPCObject",
							" function RPCFactory(api)",
							"async function Factory(opts)",
							"RPCObject",
							"RPCFactory",
							"RPCFactory",
							"Connection",
							"static equal(a, b)",
							"static get last()",
							"makeSeq()",
							"constructor(socket, instance, log, codec = 'none')",
							"log(...args)",
							"error(message)",
							"close(...args)",
							"onmessage(msg)",
							"r =>",
							"processMessage(data)",
							"onconnect(sock)",
							"onpong(data)",
							"onerror(error)",
							"onclose(code, why)",
							"cleanup()",
							"sendMessage(obj)",
							"sendCommand(command, params = {})",
							"static getCallbacks(instance, verbosity = 0)",
							" (...args) =>",
							" () =>",
							"handle = (sock, event, ...args) =>",
							"then: fn =>",
							"remove = sock =>",
							"onConnect(sock)",
							"onOpen(sock)",
							"onMessage(sock, msg)",
							"onError(sock, error)",
							"onClose(sock, code, why)",
							"onPong(sock, data)",
							"Connection",
							"Connection",
							"function RPCServerEndpoint(classes = {})",
							"new({ class: name, args = [] })",
							"list()",
							"({ id }, respond) =>",
							"({ obj, method, args = [] }, respond) =>",
							"result =>",
							"error =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"sym =>",
							"v =>",
							"v =>",
							"({ obj, property }, respond) =>",
							"({ obj, property, value }, respond) =>",
							"RPCServer",
							"makeId()",
							"processMessage(data)",
							"RPCServer",
							"RPCClient",
							" e =>",
							" r =>",
							"() =>",
							"processMessage(response)",
							"command(name, params)",
							"(accept, reject) =>",
							" response =>",
							" e =>",
							"RPCClient",
							" function RPCSocket(url, service = RPCServer, verbosity = 1)",
							" (...args) =>",
							"get fd()",
							"get socket()",
							"register(ctor)",
							"listen(new_ws, os = globalThis.os)",
							"() =>",
							"async connect(new_ws, os = globalThis.os)",
							"get connected()",
							"get list()",
							"get last()",
							"RPCSocket",
							"function MakeWebSocket(url, callbacks)",
							".onconnect = () =>",
							".onopen = () =>",
							".onerror = error =>",
							".onmessage = msg =>",
							".onpong = pong =>",
							".onclose = reason =>",
							" function isThenable(value)",
							" function hasHandler(obj, eventName)",
							" function callHandler(obj, eventName, ...args)",
							" function parseURL(url_or_port)",
							"toString()",
							" function GetProperties( obj, method = obj => Object.",
							"(obj), pred = (obj, depth) => obj !== Object.prototype )",
							" function GetKeys(obj, pred = (obj, depth) => obj !== Object.prototype)",
							" obj =>",
							" obj =>",
							" function getPropertyDescriptors(obj, merge = true, pred = (proto, depth) => true)",
							" function define(obj, ...args)",
							" function setHandlers(os, handlers)",
							".onFd = function(fd, readable, writable)",
							" function statusResponse(success, result_or_error, data)",
							" function objectCommand(fn)",
							" function(data)",
							"respond = (success, result) =>",
							" function MakeListCommand( pred = v => typeof v != 'function', defaults = { maxDepth: Infinity } )",
							"(data, respond) =>",
							" (proto, depth) =>",
							"(acc, key) =>",
							" function getPrototypeName(proto)",
							"function DeserializeEntries(e)",
							"a =>",
							"function DeserializeKeys(e)",
							"([k]) =>",
							"function DeserializeMap(e)",
							"function DeserializeObject(e)",
							"function ForwardMethods(e, ret = {}, thisObj)",
							" o =>",
							"function ForwardObject(e, thisObj)",
							"function MakeCommandFunction(cmd, getConnection, thisObj, t)",
							"getConnection = obj =>",
							" function(params = {})",
							"(resolve, reject) =>",
							" r =>",
							"async function(params = {})",
							" function SerializeValue(value, source = false)",
							" function DeserializeSymbols(names)",
							"n =>",
							"n =>",
							" function DeserializeValue(desc)",
							"RPCConnect = (url, service = RPCClient) =>",
							"RPCListen = (url, service = RPCServer) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADGCAAAICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQogIC5tZW1vaXplID0gbWVtb2l6ZShmbikKICBzZWxmID0gKGtleSwgLi4uYXJncykKICAuR2V0Q2xhc3NlcyA9ICpHZXRDbGFzc2VzKG9iaikKTWFwcGVyKG1hcCA9IAogIHNlbGYgPSAoa2V5LCB2YWx1ZSkKTWFwcGVyCk1hcHBlcgpNYXBwZXIKICBzZWxmID0gKC4uLmFyZ3MpCkRlZmF1bHRDb25zdHJ1Y3RvcgpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCldyYXBFdmVudChoYW5kbGVyLCBuYW1lKQoJKGUpCiAgZ2V0KG9iaiwgcHJvcCkKTWVzc2FnZVJlY2VpdmVyCiAgb25tZXNzYWdlKG1zZykKTWVzc2FnZVRyYW5zbWl0dGVyCiAgc2VuZE1lc3NhZ2UoKQpNZXNzYWdlVHJhbnNjZWl2ZXIoKQpNZXNzYWdlVHJhbnNjZWl2ZXIKTWVzc2FnZVJlY2VpdmVyCk1lc3NhZ2VUcmFuc21pdHRlcgogIG5vbmUoKQogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIC5qcyA9IGpzKHZlcmJvc2UgPSBmYWxzZSkKICAuYmpzb24gPSBianNvbigpClJQQ0FwaShjKQpSUENBcGkKUlBDUHJveHkoYykKUlBDT2JqZWN0KGlkLCBjb25uZWN0aW9uKQpSUENPYmplY3QKUlBDRmFjdG9yeShhcGkpCkZhY3Rvcnkob3B0cykKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkKUlBDRmFjdG9yeQpDb25uZWN0aW9uCiAgc3RhdGljIGVxdWFsKGEsIGIpCiAgc3RhdGljIGdldCBsYXN0KCkKICBtYWtlU2VxKCkKICBjb25zdHJ1Y3Rvcihzb2NrZXQsIGluc3RhbmNlLCBsb2csIGNvZGVjID0gJ25vbmUnKQogIGxvZyguLi5hcmdzKQogIGVycm9yKG1lc3NhZ2UpCiAgY2xvc2UoLi4uYXJncykKICBvbm1lc3NhZ2UobXNnKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICBvbkNvbm5lY3Qoc29jaykKICBvbk9wZW4oc29jaykKICBvbk1lc3NhZ2Uoc29jaywgbXNnKQogIG9uRXJyb3Ioc29jaywgZXJyb3IpCiAgb25DbG9zZShzb2NrLCBjb2RlLCB3aHkpCiAgb25Qb25nKHNvY2ssIGRhdGEpCkNvbm5lY3Rpb24KQ29ubmVjdGlvbgpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQpSUENTZXJ2ZXIKICBtYWtlSWQoKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpClJQQ1NlcnZlcgpSUENDbGllbnQKICBwcm9jZXNzTWVzc2FnZShyZXNwb25zZSkKICBjb21tYW5kKG5hbWUsIHBhcmFtcykKUlBDQ2xpZW50ClJQQ1NvY2tldCh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIsIHZlcmJvc2l0eSA9IDEpCiAgZ2V0IGZkKCkKICBnZXQgc29ja2V0KCkKICByZWdpc3RlcihjdG9yKQogIGxpc3RlbihuZXdfd3MsIG9zID0gZ2xvYmFsVGhpcy5vcykKICBjb25uZWN0KG5ld193cywgb3MgPSBnbG9iYWxUaGlzLm9zKQogIGdldCBjb25uZWN0ZWQoKQogIGdldCBsaXN0KCkKICBnZXQgbGFzdCgpClJQQ1NvY2tldApNYWtlV2ViU29ja2V0KHVybCwgY2FsbGJhY2tzKQoJaXNUaGVuYWJsZSh2YWx1ZSkKCWhhc0hhbmRsZXIob2JqLCBldmVudE5hbWUpCgljYWxsSGFuZGxlcihvYmosIGV2ZW50TmFtZSwgLi4uYXJncykKCXBhcnNlVVJMKHVybF9vcl9wb3J0KQogIHRvU3RyaW5nKCkKCWRlZmluZShvYmosIC4uLmFyZ3MpCglzZXRIYW5kbGVycyhvcywgaGFuZGxlcnMpCiAgLm9uRmQgPSAoZmQsIHJlYWRhYmxlLCB3cml0YWJsZSkKCXN0YXR1c1Jlc3BvbnNlKHN1Y2Nlc3MsIHJlc3VsdF9vcl9lcnJvciwgZGF0YSkKCW9iamVjdENvbW1hbmQoZm4pCgkoZGF0YSkKCWdldFByb3RvdHlwZU5hbWUocHJvdG8pCkRlc2VyaWFsaXplRW50cmllcyhlKQpEZXNlcmlhbGl6ZUtleXMoZSkKRGVzZXJpYWxpemVNYXAoZSkKRGVzZXJpYWxpemVPYmplY3QoZSkKRm9yd2FyZE1ldGhvZHMoZSwgcmV0ID0ge30sIHRoaXNPYmopCkZvcndhcmRPYmplY3QoZSwgdGhpc09iaikKTWFrZUNvbW1hbmRGdW5jdGlvbihjbWQsIGdldENvbm5lY3Rpb24sIHRoaXNPYmosIHQpCgkocGFyYW1zID0ge30pCihwYXJhbXMgPSB7fSkKU2VyaWFsaXplVmFsdWUodmFsdWUsIHNvdXJjZSA9IGZhbHNlKQpEZXNlcmlhbGl6ZVN5bWJvbHMobmFtZXMpCkRlc2VyaWFsaXplVmFsdWUoZGVzYykAAAAAAAAAAMYIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADGCAAAICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQogIC5tZW1vaXplID0gbWVtb2l6ZShmbikKICBzZWxmID0gKGtleSwgLi4uYXJncykKICAuR2V0Q2xhc3NlcyA9ICpHZXRDbGFzc2VzKG9iaikKTWFwcGVyKG1hcCA9IAogIHNlbGYgPSAoa2V5LCB2YWx1ZSkKTWFwcGVyCk1hcHBlcgpNYXBwZXIKICBzZWxmID0gKC4uLmFyZ3MpCkRlZmF1bHRDb25zdHJ1Y3RvcgpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCldyYXBFdmVudChoYW5kbGVyLCBuYW1lKQoJKGUpCiAgZ2V0KG9iaiwgcHJvcCkKTWVzc2FnZVJlY2VpdmVyCiAgb25tZXNzYWdlKG1zZykKTWVzc2FnZVRyYW5zbWl0dGVyCiAgc2VuZE1lc3NhZ2UoKQpNZXNzYWdlVHJhbnNjZWl2ZXIoKQpNZXNzYWdlVHJhbnNjZWl2ZXIKTWVzc2FnZVJlY2VpdmVyCk1lc3NhZ2VUcmFuc21pdHRlcgogIG5vbmUoKQogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIC5qcyA9IGpzKHZlcmJvc2UgPSBmYWxzZSkKICAuYmpzb24gPSBianNvbigpClJQQ0FwaShjKQpSUENBcGkKUlBDUHJveHkoYykKUlBDT2JqZWN0KGlkLCBjb25uZWN0aW9uKQpSUENPYmplY3QKUlBDRmFjdG9yeShhcGkpCkZhY3Rvcnkob3B0cykKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkKUlBDRmFjdG9yeQpDb25uZWN0aW9uCiAgc3RhdGljIGVxdWFsKGEsIGIpCiAgc3RhdGljIGdldCBsYXN0KCkKICBtYWtlU2VxKCkKICBjb25zdHJ1Y3Rvcihzb2NrZXQsIGluc3RhbmNlLCBsb2csIGNvZGVjID0gJ25vbmUnKQogIGxvZyguLi5hcmdzKQogIGVycm9yKG1lc3NhZ2UpCiAgY2xvc2UoLi4uYXJncykKICBvbm1lc3NhZ2UobXNnKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICBvbkNvbm5lY3Qoc29jaykKICBvbk9wZW4oc29jaykKICBvbk1lc3NhZ2Uoc29jaywgbXNnKQogIG9uRXJyb3Ioc29jaywgZXJyb3IpCiAgb25DbG9zZShzb2NrLCBjb2RlLCB3aHkpCiAgb25Qb25nKHNvY2ssIGRhdGEpCkNvbm5lY3Rpb24KQ29ubmVjdGlvbgpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQpSUENTZXJ2ZXIKICBtYWtlSWQoKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpClJQQ1NlcnZlcgpSUENDbGllbnQKICBwcm9jZXNzTWVzc2FnZShyZXNwb25zZSkKICBjb21tYW5kKG5hbWUsIHBhcmFtcykKUlBDQ2xpZW50ClJQQ1NvY2tldCh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIsIHZlcmJvc2l0eSA9IDEpCiAgZ2V0IGZkKCkKICBnZXQgc29ja2V0KCkKICByZWdpc3RlcihjdG9yKQogIGxpc3RlbihuZXdfd3MsIG9zID0gZ2xvYmFsVGhpcy5vcykKICBjb25uZWN0KG5ld193cywgb3MgPSBnbG9iYWxUaGlzLm9zKQogIGdldCBjb25uZWN0ZWQoKQogIGdldCBsaXN0KCkKICBnZXQgbGFzdCgpClJQQ1NvY2tldApNYWtlV2ViU29ja2V0KHVybCwgY2FsbGJhY2tzKQoJaXNUaGVuYWJsZSh2YWx1ZSkKCWhhc0hhbmRsZXIob2JqLCBldmVudE5hbWUpCgljYWxsSGFuZGxlcihvYmosIGV2ZW50TmFtZSwgLi4uYXJncykKCXBhcnNlVVJMKHVybF9vcl9wb3J0KQogIHRvU3RyaW5nKCkKCWRlZmluZShvYmosIC4uLmFyZ3MpCglzZXRIYW5kbGVycyhvcywgaGFuZGxlcnMpCiAgLm9uRmQgPSAoZmQsIHJlYWRhYmxlLCB3cml0YWJsZSkKCXN0YXR1c1Jlc3BvbnNlKHN1Y2Nlc3MsIHJlc3VsdF9vcl9lcnJvciwgZGF0YSkKCW9iamVjdENvbW1hbmQoZm4pCgkoZGF0YSkKCWdldFByb3RvdHlwZU5hbWUocHJvdG8pCkRlc2VyaWFsaXplRW50cmllcyhlKQpEZXNlcmlhbGl6ZUtleXMoZSkKRGVzZXJpYWxpemVNYXAoZSkKRGVzZXJpYWxpemVPYmplY3QoZSkKRm9yd2FyZE1ldGhvZHMoZSwgcmV0ID0ge30sIHRoaXNPYmopCkZvcndhcmRPYmplY3QoZSwgdGhpc09iaikKTWFrZUNvbW1hbmRGdW5jdGlvbihjbWQsIGdldENvbm5lY3Rpb24sIHRoaXNPYmosIHQpCgkocGFyYW1zID0ge30pCihwYXJhbXMgPSB7fSkKU2VyaWFsaXplVmFsdWUodmFsdWUsIHNvdXJjZSA9IGZhbHNlKQpEZXNlcmlhbGl6ZVN5bWJvbHMobmFtZXMpCkRlc2VyaWFsaXplVmFsdWUoZGVzYykAAAAAAAAAAMYIAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					734,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/net/rpc.js",
						"symkeys":
						[
							[
								426,
								458
							],
							[
								515,
								533
							],
							[
								585,
								603
							],
							[
								638,
								658
							],
							[
								707,
								726
							],
							[
								732,
								741
							],
							[
								752,
								766
							],
							[
								795,
								816
							],
							[
								882,
								913
							],
							[
								971,
								986
							],
							[
								1058,
								1087
							],
							[
								1504,
								1508
							],
							[
								1537,
								1548
							],
							[
								1635,
								1674
							],
							[
								1887,
								1910
							],
							[
								1921,
								1924
							],
							[
								1941,
								1968
							],
							[
								2111,
								2117
							],
							[
								2132,
								2138
							],
							[
								2167,
								2173
							],
							[
								2213,
								2268
							],
							[
								2278,
								2288
							],
							[
								2305,
								2329
							],
							[
								2605,
								2623
							],
							[
								2638,
								2656
							],
							[
								2685,
								2703
							],
							[
								2755,
								2888
							],
							[
								2891,
								2926
							],
							[
								2939,
								2951
							],
							[
								3039,
								3053
							],
							[
								3236,
								3251
							],
							[
								3379,
								3393
							],
							[
								3517,
								3535
							],
							[
								3650,
								3663
							],
							[
								3841,
								3871
							],
							[
								3893,
								3911
							],
							[
								3925,
								3940
							],
							[
								3954,
								3972
							],
							[
								4053,
								4071
							],
							[
								4120,
								4127
							],
							[
								4188,
								4194
							],
							[
								4236,
								4248
							],
							[
								4258,
								4270
							],
							[
								4287,
								4308
							],
							[
								4350,
								4362
							],
							[
								4419,
								4431
							],
							[
								4494,
								4528
							],
							[
								4568,
								4580
							],
							[
								4649,
								4661
							],
							[
								4723,
								4748
							],
							[
								4791,
								4803
							],
							[
								4826,
								4838
							],
							[
								4874,
								4893
							],
							[
								5126,
								5132
							],
							[
								5174,
								5179
							],
							[
								5202,
								5223
							],
							[
								5341,
								5376
							],
							[
								5492,
								5496
							],
							[
								5523,
								5532
							],
							[
								5585,
								5610
							],
							[
								5615,
								5643
							],
							[
								5873,
								5882
							],
							[
								5983,
								5993
							],
							[
								6023,
								6033
							],
							[
								6127,
								6137
							],
							[
								6223,
								6241
							],
							[
								6366,
								6383
							],
							[
								6420,
								6429
							],
							[
								6466,
								6516
							],
							[
								6633,
								6645
							],
							[
								7119,
								7133
							],
							[
								7359,
								7373
							],
							[
								7545,
								7559
							],
							[
								8173,
								8177
							],
							[
								8271,
								8291
							],
							[
								8397,
								8412
							],
							[
								8590,
								8602
							],
							[
								8657,
								8671
							],
							[
								8796,
								8814
							],
							[
								8941,
								8950
							],
							[
								9040,
								9056
							],
							[
								9426,
								9459
							],
							[
								9975,
								10019
							],
							[
								10141,
								10154
							],
							[
								10224,
								10230
							],
							[
								10315,
								10349
							],
							[
								10605,
								10616
							],
							[
								10674,
								10690
							],
							[
								10771,
								10786
							],
							[
								11137,
								11149
							],
							[
								11367,
								11387
							],
							[
								11482,
								11502
							],
							[
								11666,
								11690
							],
							[
								11816,
								11834
							],
							[
								11939,
								11949
							],
							[
								12013,
								12023
							],
							[
								12084,
								12124
							],
							[
								12142,
								12173
							],
							[
								12503,
								12509
							],
							[
								12674,
								12694
							],
							[
								12790,
								12830
							],
							[
								13000,
								13009
							],
							[
								13039,
								13047
							],
							[
								13225,
								13265
							],
							[
								13364,
								13371
							],
							[
								13390,
								13397
							],
							[
								13482,
								13522
							],
							[
								13587,
								13594
							],
							[
								13672,
								13712
							],
							[
								13777,
								13784
							],
							[
								13824,
								13830
							],
							[
								13897,
								13901
							],
							[
								13956,
								13960
							],
							[
								14032,
								14063
							],
							[
								14326,
								14364
							],
							[
								14448,
								14457
							],
							[
								14933,
								14941
							],
							[
								14977,
								14997
							],
							[
								15578,
								15587
							],
							[
								15897,
								15906
							],
							[
								16306,
								16311
							],
							[
								16367,
								16372
							],
							[
								16471,
								16476
							],
							[
								16508,
								16532
							],
							[
								16785,
								16806
							],
							[
								16832,
								16851
							],
							[
								16881,
								16893
							],
							[
								16937,
								16942
							],
							[
								17016,
								17025
							],
							[
								17333,
								17393
							],
							[
								18000,
								18013
							],
							[
								18185,
								18193
							],
							[
								18311,
								18323
							],
							[
								18654,
								18668
							],
							[
								18888,
								18922
							],
							[
								19221,
								19226
							],
							[
								19321,
								19362
							],
							[
								19672,
								19687
							],
							[
								20148,
								20158
							],
							[
								20195,
								20205
							],
							[
								20274,
								20283
							],
							[
								20341,
								20379
							],
							[
								20512,
								20530
							],
							[
								20560,
								20575
							],
							[
								20602,
								20621
							],
							[
								20656,
								20675
							],
							[
								20710,
								20727
							],
							[
								20760,
								20780
							],
							[
								20872,
								20899
							],
							[
								20998,
								21034
							],
							[
								21192,
								21238
							],
							[
								21337,
								21368
							],
							[
								21937,
								21947
							],
							[
								22081,
								22138
							],
							[
								22157,
								22215
							],
							[
								22534,
								22605
							],
							[
								22667,
								22674
							],
							[
								22765,
								22772
							],
							[
								22859,
								22941
							],
							[
								23488,
								23518
							],
							[
								23886,
								23921
							],
							[
								23934,
								23974
							],
							[
								24153,
								24209
							],
							[
								24438,
								24465
							],
							[
								24476,
								24491
							],
							[
								24504,
								24534
							],
							[
								24791,
								24893
							],
							[
								24919,
								24937
							],
							[
								25233,
								25256
							],
							[
								25364,
								25377
							],
							[
								25986,
								26019
							],
							[
								26088,
								26118
							],
							[
								26157,
								26161
							],
							[
								26248,
								26275
							],
							[
								26314,
								26322
							],
							[
								26402,
								26428
							],
							[
								26474,
								26503
							],
							[
								26560,
								26605
							],
							[
								26705,
								26710
							],
							[
								26810,
								26844
							],
							[
								26961,
								27021
							],
							[
								27240,
								27262
							],
							[
								27434,
								27456
							],
							[
								27554,
								27574
							],
							[
								27606,
								27611
							],
							[
								27740,
								27767
							],
							[
								27999,
								28046
							],
							[
								28864,
								28899
							],
							[
								28921,
								28925
							],
							[
								28957,
								28961
							],
							[
								28983,
								29015
							],
							[
								29149,
								29191
							],
							[
								29244,
								29285
							]
						],
						"symlist":
						[
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"VfnAdapter = vfn =>",
							"get: k =>",
							"set: (k, v) =>",
							"VfnDecorator = vfn =>",
							".memoize = function memoize(fn)",
							"(key, value) =>",
							"self = function(key, ...args)",
							"n =>",
							"(acc, n) =>",
							".GetClasses = function* GetClasses(obj)",
							" function Mapper(map = ",
							"())",
							"self = function(key, value)",
							"Mapper",
							"Mapper",
							"Mapper",
							" function DefaultConstructor(mapper, fn = (...args) => ",
							"(...args))",
							"self = function(...args)",
							"DefaultConstructor",
							"DefaultConstructor",
							"DefaultConstructor",
							" function EventLogger( instance = {}, callback = (name, event, thisObj) => console.log('EventLogger', { name, event, thisObj }) )",
							" function WrapEvent(handler, name)",
							" function(e)",
							"get(obj, prop)",
							"MessageReceiver",
							"onmessage(msg)",
							"MessageTransmitter",
							"sendMessage()",
							" function MessageTransceiver()",
							"MessageTransceiver",
							"MessageReceiver",
							"MessageTransmitter",
							"value: instance =>",
							"ctor =>",
							"none()",
							"encode: v =>",
							"decode: v =>",
							"json(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".js = function js(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".bjson = function bjson()",
							"encode: v =>",
							"decode: v =>",
							" function RPCApi(c)",
							"RPCApi",
							" o =>",
							" function RPCProxy(c)",
							" function RPCObject(id, connection)",
							"r =>",
							"RPCObject",
							" function RPCFactory(api)",
							"async function Factory(opts)",
							"RPCObject",
							"RPCFactory",
							"RPCFactory",
							"Connection",
							"static equal(a, b)",
							"static get last()",
							"makeSeq()",
							"constructor(socket, instance, log, codec = 'none')",
							"log(...args)",
							"error(message)",
							"close(...args)",
							"onmessage(msg)",
							"r =>",
							"processMessage(data)",
							"onconnect(sock)",
							"onpong(data)",
							"onerror(error)",
							"onclose(code, why)",
							"cleanup()",
							"sendMessage(obj)",
							"sendCommand(command, params = {})",
							"static getCallbacks(instance, verbosity = 0)",
							" (...args) =>",
							" () =>",
							"handle = (sock, event, ...args) =>",
							"then: fn =>",
							"remove = sock =>",
							"onConnect(sock)",
							"onOpen(sock)",
							"onMessage(sock, msg)",
							"onError(sock, error)",
							"onClose(sock, code, why)",
							"onPong(sock, data)",
							"Connection",
							"Connection",
							"function RPCServerEndpoint(classes = {})",
							"new({ class: name, args = [] })",
							"list()",
							"({ id }, respond) =>",
							"({ obj, method, args = [] }, respond) =>",
							"result =>",
							"error =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"sym =>",
							"v =>",
							"v =>",
							"({ obj, property }, respond) =>",
							"({ obj, property, value }, respond) =>",
							"RPCServer",
							"makeId()",
							"processMessage(data)",
							"RPCServer",
							"RPCClient",
							" e =>",
							" r =>",
							"() =>",
							"processMessage(response)",
							"command(name, params)",
							"(accept, reject) =>",
							" response =>",
							" e =>",
							"RPCClient",
							" function RPCSocket(url, service = RPCServer, verbosity = 1)",
							" (...args) =>",
							"get fd()",
							"get socket()",
							"register(ctor)",
							"listen(new_ws, os = globalThis.os)",
							"() =>",
							"async connect(new_ws, os = globalThis.os)",
							"get connected()",
							"get list()",
							"get last()",
							"RPCSocket",
							"function MakeWebSocket(url, callbacks)",
							".onconnect = () =>",
							".onopen = () =>",
							".onerror = error =>",
							".onmessage = msg =>",
							".onpong = pong =>",
							".onclose = reason =>",
							" function isThenable(value)",
							" function hasHandler(obj, eventName)",
							" function callHandler(obj, eventName, ...args)",
							" function parseURL(url_or_port)",
							"toString()",
							" function GetProperties( obj, method = obj => Object.",
							"(obj), pred = (obj, depth) => obj !== Object.prototype )",
							" function GetKeys(obj, pred = (obj, depth) => obj !== Object.prototype)",
							" obj =>",
							" obj =>",
							" function getPropertyDescriptors(obj, merge = true, pred = (proto, depth) => true)",
							" function define(obj, ...args)",
							" function setHandlers(os, handlers)",
							".onFd = function(fd, readable, writable)",
							" function statusResponse(success, result_or_error, data)",
							" function objectCommand(fn)",
							" function(data)",
							"respond = (success, result) =>",
							" function MakeListCommand( pred = v => typeof v != 'function', defaults = { maxDepth: Infinity } )",
							"(data, respond) =>",
							" (proto, depth) =>",
							"(acc, key) =>",
							" function getPrototypeName(proto)",
							"function DeserializeEntries(e)",
							"a =>",
							"function DeserializeKeys(e)",
							"([k]) =>",
							"function DeserializeMap(e)",
							"function DeserializeObject(e)",
							"function ForwardMethods(e, ret = {}, thisObj)",
							" o =>",
							"function ForwardObject(e, thisObj)",
							"function MakeCommandFunction(cmd, getConnection, thisObj, t)",
							"getConnection = obj =>",
							" function(params = {})",
							"(resolve, reject) =>",
							" r =>",
							"async function(params = {})",
							" function SerializeValue(value, source = false)",
							" function DeserializeSymbols(names)",
							"n =>",
							"n =>",
							" function DeserializeValue(desc)",
							"RPCConnect = (url, service = RPCClient) =>",
							"RPCListen = (url, service = RPCServer) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADGCAAAICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQogIC5tZW1vaXplID0gbWVtb2l6ZShmbikKICBzZWxmID0gKGtleSwgLi4uYXJncykKICAuR2V0Q2xhc3NlcyA9ICpHZXRDbGFzc2VzKG9iaikKTWFwcGVyKG1hcCA9IAogIHNlbGYgPSAoa2V5LCB2YWx1ZSkKTWFwcGVyCk1hcHBlcgpNYXBwZXIKICBzZWxmID0gKC4uLmFyZ3MpCkRlZmF1bHRDb25zdHJ1Y3RvcgpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCldyYXBFdmVudChoYW5kbGVyLCBuYW1lKQoJKGUpCiAgZ2V0KG9iaiwgcHJvcCkKTWVzc2FnZVJlY2VpdmVyCiAgb25tZXNzYWdlKG1zZykKTWVzc2FnZVRyYW5zbWl0dGVyCiAgc2VuZE1lc3NhZ2UoKQpNZXNzYWdlVHJhbnNjZWl2ZXIoKQpNZXNzYWdlVHJhbnNjZWl2ZXIKTWVzc2FnZVJlY2VpdmVyCk1lc3NhZ2VUcmFuc21pdHRlcgogIG5vbmUoKQogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIC5qcyA9IGpzKHZlcmJvc2UgPSBmYWxzZSkKICAuYmpzb24gPSBianNvbigpClJQQ0FwaShjKQpSUENBcGkKUlBDUHJveHkoYykKUlBDT2JqZWN0KGlkLCBjb25uZWN0aW9uKQpSUENPYmplY3QKUlBDRmFjdG9yeShhcGkpCkZhY3Rvcnkob3B0cykKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkKUlBDRmFjdG9yeQpDb25uZWN0aW9uCiAgc3RhdGljIGVxdWFsKGEsIGIpCiAgc3RhdGljIGdldCBsYXN0KCkKICBtYWtlU2VxKCkKICBjb25zdHJ1Y3Rvcihzb2NrZXQsIGluc3RhbmNlLCBsb2csIGNvZGVjID0gJ25vbmUnKQogIGxvZyguLi5hcmdzKQogIGVycm9yKG1lc3NhZ2UpCiAgY2xvc2UoLi4uYXJncykKICBvbm1lc3NhZ2UobXNnKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICBvbkNvbm5lY3Qoc29jaykKICBvbk9wZW4oc29jaykKICBvbk1lc3NhZ2Uoc29jaywgbXNnKQogIG9uRXJyb3Ioc29jaywgZXJyb3IpCiAgb25DbG9zZShzb2NrLCBjb2RlLCB3aHkpCiAgb25Qb25nKHNvY2ssIGRhdGEpCkNvbm5lY3Rpb24KQ29ubmVjdGlvbgpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQpSUENTZXJ2ZXIKICBtYWtlSWQoKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpClJQQ1NlcnZlcgpSUENDbGllbnQKICBwcm9jZXNzTWVzc2FnZShyZXNwb25zZSkKICBjb21tYW5kKG5hbWUsIHBhcmFtcykKUlBDQ2xpZW50ClJQQ1NvY2tldCh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIsIHZlcmJvc2l0eSA9IDEpCiAgZ2V0IGZkKCkKICBnZXQgc29ja2V0KCkKICByZWdpc3RlcihjdG9yKQogIGxpc3RlbihuZXdfd3MsIG9zID0gZ2xvYmFsVGhpcy5vcykKICBjb25uZWN0KG5ld193cywgb3MgPSBnbG9iYWxUaGlzLm9zKQogIGdldCBjb25uZWN0ZWQoKQogIGdldCBsaXN0KCkKICBnZXQgbGFzdCgpClJQQ1NvY2tldApNYWtlV2ViU29ja2V0KHVybCwgY2FsbGJhY2tzKQoJaXNUaGVuYWJsZSh2YWx1ZSkKCWhhc0hhbmRsZXIob2JqLCBldmVudE5hbWUpCgljYWxsSGFuZGxlcihvYmosIGV2ZW50TmFtZSwgLi4uYXJncykKCXBhcnNlVVJMKHVybF9vcl9wb3J0KQogIHRvU3RyaW5nKCkKCWRlZmluZShvYmosIC4uLmFyZ3MpCglzZXRIYW5kbGVycyhvcywgaGFuZGxlcnMpCiAgLm9uRmQgPSAoZmQsIHJlYWRhYmxlLCB3cml0YWJsZSkKCXN0YXR1c1Jlc3BvbnNlKHN1Y2Nlc3MsIHJlc3VsdF9vcl9lcnJvciwgZGF0YSkKCW9iamVjdENvbW1hbmQoZm4pCgkoZGF0YSkKCWdldFByb3RvdHlwZU5hbWUocHJvdG8pCkRlc2VyaWFsaXplRW50cmllcyhlKQpEZXNlcmlhbGl6ZUtleXMoZSkKRGVzZXJpYWxpemVNYXAoZSkKRGVzZXJpYWxpemVPYmplY3QoZSkKRm9yd2FyZE1ldGhvZHMoZSwgcmV0ID0ge30sIHRoaXNPYmopCkZvcndhcmRPYmplY3QoZSwgdGhpc09iaikKTWFrZUNvbW1hbmRGdW5jdGlvbihjbWQsIGdldENvbm5lY3Rpb24sIHRoaXNPYmosIHQpCgkocGFyYW1zID0ge30pCihwYXJhbXMgPSB7fSkKU2VyaWFsaXplVmFsdWUodmFsdWUsIHNvdXJjZSA9IGZhbHNlKQpEZXNlcmlhbGl6ZVN5bWJvbHMobmFtZXMpCkRlc2VyaWFsaXplVmFsdWUoZGVzYykAAAAAAAAAAMYIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADGCAAAICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQogIC5tZW1vaXplID0gbWVtb2l6ZShmbikKICBzZWxmID0gKGtleSwgLi4uYXJncykKICAuR2V0Q2xhc3NlcyA9ICpHZXRDbGFzc2VzKG9iaikKTWFwcGVyKG1hcCA9IAogIHNlbGYgPSAoa2V5LCB2YWx1ZSkKTWFwcGVyCk1hcHBlcgpNYXBwZXIKICBzZWxmID0gKC4uLmFyZ3MpCkRlZmF1bHRDb25zdHJ1Y3RvcgpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCldyYXBFdmVudChoYW5kbGVyLCBuYW1lKQoJKGUpCiAgZ2V0KG9iaiwgcHJvcCkKTWVzc2FnZVJlY2VpdmVyCiAgb25tZXNzYWdlKG1zZykKTWVzc2FnZVRyYW5zbWl0dGVyCiAgc2VuZE1lc3NhZ2UoKQpNZXNzYWdlVHJhbnNjZWl2ZXIoKQpNZXNzYWdlVHJhbnNjZWl2ZXIKTWVzc2FnZVJlY2VpdmVyCk1lc3NhZ2VUcmFuc21pdHRlcgogIG5vbmUoKQogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIC5qcyA9IGpzKHZlcmJvc2UgPSBmYWxzZSkKICAuYmpzb24gPSBianNvbigpClJQQ0FwaShjKQpSUENBcGkKUlBDUHJveHkoYykKUlBDT2JqZWN0KGlkLCBjb25uZWN0aW9uKQpSUENPYmplY3QKUlBDRmFjdG9yeShhcGkpCkZhY3Rvcnkob3B0cykKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkKUlBDRmFjdG9yeQpDb25uZWN0aW9uCiAgc3RhdGljIGVxdWFsKGEsIGIpCiAgc3RhdGljIGdldCBsYXN0KCkKICBtYWtlU2VxKCkKICBjb25zdHJ1Y3Rvcihzb2NrZXQsIGluc3RhbmNlLCBsb2csIGNvZGVjID0gJ25vbmUnKQogIGxvZyguLi5hcmdzKQogIGVycm9yKG1lc3NhZ2UpCiAgY2xvc2UoLi4uYXJncykKICBvbm1lc3NhZ2UobXNnKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICBvbkNvbm5lY3Qoc29jaykKICBvbk9wZW4oc29jaykKICBvbk1lc3NhZ2Uoc29jaywgbXNnKQogIG9uRXJyb3Ioc29jaywgZXJyb3IpCiAgb25DbG9zZShzb2NrLCBjb2RlLCB3aHkpCiAgb25Qb25nKHNvY2ssIGRhdGEpCkNvbm5lY3Rpb24KQ29ubmVjdGlvbgpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQpSUENTZXJ2ZXIKICBtYWtlSWQoKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpClJQQ1NlcnZlcgpSUENDbGllbnQKICBwcm9jZXNzTWVzc2FnZShyZXNwb25zZSkKICBjb21tYW5kKG5hbWUsIHBhcmFtcykKUlBDQ2xpZW50ClJQQ1NvY2tldCh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIsIHZlcmJvc2l0eSA9IDEpCiAgZ2V0IGZkKCkKICBnZXQgc29ja2V0KCkKICByZWdpc3RlcihjdG9yKQogIGxpc3RlbihuZXdfd3MsIG9zID0gZ2xvYmFsVGhpcy5vcykKICBjb25uZWN0KG5ld193cywgb3MgPSBnbG9iYWxUaGlzLm9zKQogIGdldCBjb25uZWN0ZWQoKQogIGdldCBsaXN0KCkKICBnZXQgbGFzdCgpClJQQ1NvY2tldApNYWtlV2ViU29ja2V0KHVybCwgY2FsbGJhY2tzKQoJaXNUaGVuYWJsZSh2YWx1ZSkKCWhhc0hhbmRsZXIob2JqLCBldmVudE5hbWUpCgljYWxsSGFuZGxlcihvYmosIGV2ZW50TmFtZSwgLi4uYXJncykKCXBhcnNlVVJMKHVybF9vcl9wb3J0KQogIHRvU3RyaW5nKCkKCWRlZmluZShvYmosIC4uLmFyZ3MpCglzZXRIYW5kbGVycyhvcywgaGFuZGxlcnMpCiAgLm9uRmQgPSAoZmQsIHJlYWRhYmxlLCB3cml0YWJsZSkKCXN0YXR1c1Jlc3BvbnNlKHN1Y2Nlc3MsIHJlc3VsdF9vcl9lcnJvciwgZGF0YSkKCW9iamVjdENvbW1hbmQoZm4pCgkoZGF0YSkKCWdldFByb3RvdHlwZU5hbWUocHJvdG8pCkRlc2VyaWFsaXplRW50cmllcyhlKQpEZXNlcmlhbGl6ZUtleXMoZSkKRGVzZXJpYWxpemVNYXAoZSkKRGVzZXJpYWxpemVPYmplY3QoZSkKRm9yd2FyZE1ldGhvZHMoZSwgcmV0ID0ge30sIHRoaXNPYmopCkZvcndhcmRPYmplY3QoZSwgdGhpc09iaikKTWFrZUNvbW1hbmRGdW5jdGlvbihjbWQsIGdldENvbm5lY3Rpb24sIHRoaXNPYmosIHQpCgkocGFyYW1zID0ge30pCihwYXJhbXMgPSB7fSkKU2VyaWFsaXplVmFsdWUodmFsdWUsIHNvdXJjZSA9IGZhbHNlKQpEZXNlcmlhbGl6ZVN5bWJvbHMobmFtZXMpCkRlc2VyaWFsaXplVmFsdWUoZGVzYykAAAAAAAAAAMYIAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					735,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/net/rpc.js",
						"symkeys":
						[
							[
								426,
								458
							],
							[
								515,
								533
							],
							[
								585,
								603
							],
							[
								638,
								658
							],
							[
								707,
								726
							],
							[
								732,
								741
							],
							[
								752,
								766
							],
							[
								795,
								816
							],
							[
								882,
								913
							],
							[
								971,
								986
							],
							[
								1058,
								1087
							],
							[
								1504,
								1508
							],
							[
								1537,
								1548
							],
							[
								1635,
								1674
							],
							[
								1887,
								1910
							],
							[
								1921,
								1924
							],
							[
								1941,
								1968
							],
							[
								2111,
								2117
							],
							[
								2132,
								2138
							],
							[
								2167,
								2173
							],
							[
								2213,
								2268
							],
							[
								2278,
								2288
							],
							[
								2305,
								2329
							],
							[
								2605,
								2623
							],
							[
								2638,
								2656
							],
							[
								2685,
								2703
							],
							[
								2755,
								2888
							],
							[
								2891,
								2926
							],
							[
								2939,
								2951
							],
							[
								3039,
								3053
							],
							[
								3236,
								3251
							],
							[
								3379,
								3393
							],
							[
								3517,
								3535
							],
							[
								3650,
								3663
							],
							[
								3841,
								3871
							],
							[
								3893,
								3911
							],
							[
								3925,
								3940
							],
							[
								3954,
								3972
							],
							[
								4053,
								4071
							],
							[
								4120,
								4127
							],
							[
								4188,
								4194
							],
							[
								4236,
								4248
							],
							[
								4258,
								4270
							],
							[
								4287,
								4308
							],
							[
								4350,
								4362
							],
							[
								4419,
								4431
							],
							[
								4494,
								4528
							],
							[
								4568,
								4580
							],
							[
								4649,
								4661
							],
							[
								4723,
								4748
							],
							[
								4791,
								4803
							],
							[
								4826,
								4838
							],
							[
								4874,
								4893
							],
							[
								5126,
								5132
							],
							[
								5174,
								5179
							],
							[
								5202,
								5223
							],
							[
								5341,
								5376
							],
							[
								5492,
								5496
							],
							[
								5523,
								5532
							],
							[
								5585,
								5610
							],
							[
								5615,
								5643
							],
							[
								5873,
								5882
							],
							[
								5983,
								5993
							],
							[
								6023,
								6033
							],
							[
								6127,
								6137
							],
							[
								6223,
								6241
							],
							[
								6366,
								6383
							],
							[
								6420,
								6429
							],
							[
								6466,
								6516
							],
							[
								6633,
								6645
							],
							[
								7119,
								7133
							],
							[
								7359,
								7373
							],
							[
								7545,
								7559
							],
							[
								8173,
								8177
							],
							[
								8271,
								8291
							],
							[
								8397,
								8412
							],
							[
								8590,
								8602
							],
							[
								8657,
								8671
							],
							[
								8796,
								8814
							],
							[
								8941,
								8950
							],
							[
								9040,
								9056
							],
							[
								9426,
								9459
							],
							[
								9975,
								10019
							],
							[
								10141,
								10154
							],
							[
								10224,
								10230
							],
							[
								10315,
								10349
							],
							[
								10605,
								10616
							],
							[
								10674,
								10690
							],
							[
								10771,
								10786
							],
							[
								11137,
								11149
							],
							[
								11367,
								11387
							],
							[
								11482,
								11502
							],
							[
								11666,
								11690
							],
							[
								11816,
								11834
							],
							[
								11939,
								11949
							],
							[
								12013,
								12023
							],
							[
								12084,
								12124
							],
							[
								12142,
								12173
							],
							[
								12503,
								12509
							],
							[
								12674,
								12694
							],
							[
								12790,
								12830
							],
							[
								13000,
								13009
							],
							[
								13039,
								13047
							],
							[
								13225,
								13265
							],
							[
								13364,
								13371
							],
							[
								13390,
								13397
							],
							[
								13482,
								13522
							],
							[
								13587,
								13594
							],
							[
								13672,
								13712
							],
							[
								13777,
								13784
							],
							[
								13824,
								13830
							],
							[
								13897,
								13901
							],
							[
								13956,
								13960
							],
							[
								14032,
								14063
							],
							[
								14326,
								14364
							],
							[
								14448,
								14457
							],
							[
								14933,
								14941
							],
							[
								14977,
								14997
							],
							[
								15578,
								15587
							],
							[
								15897,
								15906
							],
							[
								16306,
								16311
							],
							[
								16367,
								16372
							],
							[
								16471,
								16476
							],
							[
								16508,
								16532
							],
							[
								16785,
								16806
							],
							[
								16832,
								16851
							],
							[
								16881,
								16893
							],
							[
								16937,
								16942
							],
							[
								17016,
								17025
							],
							[
								17333,
								17393
							],
							[
								18000,
								18013
							],
							[
								18185,
								18193
							],
							[
								18311,
								18323
							],
							[
								18654,
								18668
							],
							[
								18888,
								18922
							],
							[
								19221,
								19226
							],
							[
								19321,
								19362
							],
							[
								19656,
								19671
							],
							[
								20132,
								20142
							],
							[
								20179,
								20189
							],
							[
								20258,
								20267
							],
							[
								20325,
								20363
							],
							[
								20496,
								20514
							],
							[
								20544,
								20559
							],
							[
								20586,
								20605
							],
							[
								20640,
								20659
							],
							[
								20694,
								20711
							],
							[
								20744,
								20764
							],
							[
								20856,
								20883
							],
							[
								20982,
								21018
							],
							[
								21176,
								21222
							],
							[
								21321,
								21352
							],
							[
								21921,
								21931
							],
							[
								22065,
								22122
							],
							[
								22141,
								22199
							],
							[
								22518,
								22589
							],
							[
								22651,
								22658
							],
							[
								22749,
								22756
							],
							[
								22843,
								22925
							],
							[
								23472,
								23502
							],
							[
								23870,
								23905
							],
							[
								23918,
								23958
							],
							[
								24137,
								24193
							],
							[
								24422,
								24449
							],
							[
								24460,
								24475
							],
							[
								24488,
								24518
							],
							[
								24775,
								24877
							],
							[
								24903,
								24921
							],
							[
								25217,
								25240
							],
							[
								25348,
								25361
							],
							[
								25970,
								26003
							],
							[
								26072,
								26102
							],
							[
								26141,
								26145
							],
							[
								26232,
								26259
							],
							[
								26298,
								26306
							],
							[
								26386,
								26412
							],
							[
								26458,
								26487
							],
							[
								26544,
								26589
							],
							[
								26689,
								26694
							],
							[
								26794,
								26828
							],
							[
								26945,
								27005
							],
							[
								27224,
								27246
							],
							[
								27418,
								27440
							],
							[
								27538,
								27558
							],
							[
								27590,
								27595
							],
							[
								27724,
								27751
							],
							[
								27983,
								28030
							],
							[
								28848,
								28883
							],
							[
								28905,
								28909
							],
							[
								28941,
								28945
							],
							[
								28967,
								28999
							],
							[
								29133,
								29175
							],
							[
								29228,
								29269
							]
						],
						"symlist":
						[
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"VfnAdapter = vfn =>",
							"get: k =>",
							"set: (k, v) =>",
							"VfnDecorator = vfn =>",
							".memoize = function memoize(fn)",
							"(key, value) =>",
							"self = function(key, ...args)",
							"n =>",
							"(acc, n) =>",
							".GetClasses = function* GetClasses(obj)",
							" function Mapper(map = ",
							"())",
							"self = function(key, value)",
							"Mapper",
							"Mapper",
							"Mapper",
							" function DefaultConstructor(mapper, fn = (...args) => ",
							"(...args))",
							"self = function(...args)",
							"DefaultConstructor",
							"DefaultConstructor",
							"DefaultConstructor",
							" function EventLogger( instance = {}, callback = (name, event, thisObj) => console.log('EventLogger', { name, event, thisObj }) )",
							" function WrapEvent(handler, name)",
							" function(e)",
							"get(obj, prop)",
							"MessageReceiver",
							"onmessage(msg)",
							"MessageTransmitter",
							"sendMessage()",
							" function MessageTransceiver()",
							"MessageTransceiver",
							"MessageReceiver",
							"MessageTransmitter",
							"value: instance =>",
							"ctor =>",
							"none()",
							"encode: v =>",
							"decode: v =>",
							"json(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".js = function js(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".bjson = function bjson()",
							"encode: v =>",
							"decode: v =>",
							" function RPCApi(c)",
							"RPCApi",
							" o =>",
							" function RPCProxy(c)",
							" function RPCObject(id, connection)",
							"r =>",
							"RPCObject",
							" function RPCFactory(api)",
							"async function Factory(opts)",
							"RPCObject",
							"RPCFactory",
							"RPCFactory",
							"Connection",
							"static equal(a, b)",
							"static get last()",
							"makeSeq()",
							"constructor(socket, instance, log, codec = 'none')",
							"log(...args)",
							"error(message)",
							"close(...args)",
							"onmessage(msg)",
							"r =>",
							"processMessage(data)",
							"onconnect(sock)",
							"onpong(data)",
							"onerror(error)",
							"onclose(code, why)",
							"cleanup()",
							"sendMessage(obj)",
							"sendCommand(command, params = {})",
							"static getCallbacks(instance, verbosity = 0)",
							" (...args) =>",
							" () =>",
							"handle = (sock, event, ...args) =>",
							"then: fn =>",
							"remove = sock =>",
							"onConnect(sock)",
							"onOpen(sock)",
							"onMessage(sock, msg)",
							"onError(sock, error)",
							"onClose(sock, code, why)",
							"onPong(sock, data)",
							"Connection",
							"Connection",
							"function RPCServerEndpoint(classes = {})",
							"new({ class: name, args = [] })",
							"list()",
							"({ id }, respond) =>",
							"({ obj, method, args = [] }, respond) =>",
							"result =>",
							"error =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"sym =>",
							"v =>",
							"v =>",
							"({ obj, property }, respond) =>",
							"({ obj, property, value }, respond) =>",
							"RPCServer",
							"makeId()",
							"processMessage(data)",
							"RPCServer",
							"RPCClient",
							" e =>",
							" r =>",
							"() =>",
							"processMessage(response)",
							"command(name, params)",
							"(accept, reject) =>",
							" response =>",
							" e =>",
							"RPCClient",
							" function RPCSocket(url, service = RPCServer, verbosity = 1)",
							" (...args) =>",
							"get fd()",
							"get socket()",
							"register(ctor)",
							"listen(new_ws, os = globalThis.os)",
							"() =>",
							"async connect(new_ws, os = globalThis.os)",
							"get connected()",
							"get list()",
							"get last()",
							"RPCSocket",
							"function MakeWebSocket(url, callbacks)",
							".onconnect = () =>",
							".onopen = () =>",
							".onerror = error =>",
							".onmessage = msg =>",
							".onpong = pong =>",
							".onclose = reason =>",
							" function isThenable(value)",
							" function hasHandler(obj, eventName)",
							" function callHandler(obj, eventName, ...args)",
							" function parseURL(url_or_port)",
							"toString()",
							" function GetProperties( obj, method = obj => Object.",
							"(obj), pred = (obj, depth) => obj !== Object.prototype )",
							" function GetKeys(obj, pred = (obj, depth) => obj !== Object.prototype)",
							" obj =>",
							" obj =>",
							" function getPropertyDescriptors(obj, merge = true, pred = (proto, depth) => true)",
							" function define(obj, ...args)",
							" function setHandlers(os, handlers)",
							".onFd = function(fd, readable, writable)",
							" function statusResponse(success, result_or_error, data)",
							" function objectCommand(fn)",
							" function(data)",
							"respond = (success, result) =>",
							" function MakeListCommand( pred = v => typeof v != 'function', defaults = { maxDepth: Infinity } )",
							"(data, respond) =>",
							" (proto, depth) =>",
							"(acc, key) =>",
							" function getPrototypeName(proto)",
							"function DeserializeEntries(e)",
							"a =>",
							"function DeserializeKeys(e)",
							"([k]) =>",
							"function DeserializeMap(e)",
							"function DeserializeObject(e)",
							"function ForwardMethods(e, ret = {}, thisObj)",
							" o =>",
							"function ForwardObject(e, thisObj)",
							"function MakeCommandFunction(cmd, getConnection, thisObj, t)",
							"getConnection = obj =>",
							" function(params = {})",
							"(resolve, reject) =>",
							" r =>",
							"async function(params = {})",
							" function SerializeValue(value, source = false)",
							" function DeserializeSymbols(names)",
							"n =>",
							"n =>",
							" function DeserializeValue(desc)",
							"RPCConnect = (url, service = RPCClient) =>",
							"RPCListen = (url, service = RPCServer) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADGCAAAICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQogIC5tZW1vaXplID0gbWVtb2l6ZShmbikKICBzZWxmID0gKGtleSwgLi4uYXJncykKICAuR2V0Q2xhc3NlcyA9ICpHZXRDbGFzc2VzKG9iaikKTWFwcGVyKG1hcCA9IAogIHNlbGYgPSAoa2V5LCB2YWx1ZSkKTWFwcGVyCk1hcHBlcgpNYXBwZXIKICBzZWxmID0gKC4uLmFyZ3MpCkRlZmF1bHRDb25zdHJ1Y3RvcgpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCldyYXBFdmVudChoYW5kbGVyLCBuYW1lKQoJKGUpCiAgZ2V0KG9iaiwgcHJvcCkKTWVzc2FnZVJlY2VpdmVyCiAgb25tZXNzYWdlKG1zZykKTWVzc2FnZVRyYW5zbWl0dGVyCiAgc2VuZE1lc3NhZ2UoKQpNZXNzYWdlVHJhbnNjZWl2ZXIoKQpNZXNzYWdlVHJhbnNjZWl2ZXIKTWVzc2FnZVJlY2VpdmVyCk1lc3NhZ2VUcmFuc21pdHRlcgogIG5vbmUoKQogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIC5qcyA9IGpzKHZlcmJvc2UgPSBmYWxzZSkKICAuYmpzb24gPSBianNvbigpClJQQ0FwaShjKQpSUENBcGkKUlBDUHJveHkoYykKUlBDT2JqZWN0KGlkLCBjb25uZWN0aW9uKQpSUENPYmplY3QKUlBDRmFjdG9yeShhcGkpCkZhY3Rvcnkob3B0cykKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkKUlBDRmFjdG9yeQpDb25uZWN0aW9uCiAgc3RhdGljIGVxdWFsKGEsIGIpCiAgc3RhdGljIGdldCBsYXN0KCkKICBtYWtlU2VxKCkKICBjb25zdHJ1Y3Rvcihzb2NrZXQsIGluc3RhbmNlLCBsb2csIGNvZGVjID0gJ25vbmUnKQogIGxvZyguLi5hcmdzKQogIGVycm9yKG1lc3NhZ2UpCiAgY2xvc2UoLi4uYXJncykKICBvbm1lc3NhZ2UobXNnKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICBvbkNvbm5lY3Qoc29jaykKICBvbk9wZW4oc29jaykKICBvbk1lc3NhZ2Uoc29jaywgbXNnKQogIG9uRXJyb3Ioc29jaywgZXJyb3IpCiAgb25DbG9zZShzb2NrLCBjb2RlLCB3aHkpCiAgb25Qb25nKHNvY2ssIGRhdGEpCkNvbm5lY3Rpb24KQ29ubmVjdGlvbgpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQpSUENTZXJ2ZXIKICBtYWtlSWQoKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpClJQQ1NlcnZlcgpSUENDbGllbnQKICBwcm9jZXNzTWVzc2FnZShyZXNwb25zZSkKICBjb21tYW5kKG5hbWUsIHBhcmFtcykKUlBDQ2xpZW50ClJQQ1NvY2tldCh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIsIHZlcmJvc2l0eSA9IDEpCiAgZ2V0IGZkKCkKICBnZXQgc29ja2V0KCkKICByZWdpc3RlcihjdG9yKQogIGxpc3RlbihuZXdfd3MsIG9zID0gZ2xvYmFsVGhpcy5vcykKICBjb25uZWN0KG5ld193cywgb3MgPSBnbG9iYWxUaGlzLm9zKQogIGdldCBjb25uZWN0ZWQoKQogIGdldCBsaXN0KCkKICBnZXQgbGFzdCgpClJQQ1NvY2tldApNYWtlV2ViU29ja2V0KHVybCwgY2FsbGJhY2tzKQoJaXNUaGVuYWJsZSh2YWx1ZSkKCWhhc0hhbmRsZXIob2JqLCBldmVudE5hbWUpCgljYWxsSGFuZGxlcihvYmosIGV2ZW50TmFtZSwgLi4uYXJncykKCXBhcnNlVVJMKHVybF9vcl9wb3J0KQogIHRvU3RyaW5nKCkKCWRlZmluZShvYmosIC4uLmFyZ3MpCglzZXRIYW5kbGVycyhvcywgaGFuZGxlcnMpCiAgLm9uRmQgPSAoZmQsIHJlYWRhYmxlLCB3cml0YWJsZSkKCXN0YXR1c1Jlc3BvbnNlKHN1Y2Nlc3MsIHJlc3VsdF9vcl9lcnJvciwgZGF0YSkKCW9iamVjdENvbW1hbmQoZm4pCgkoZGF0YSkKCWdldFByb3RvdHlwZU5hbWUocHJvdG8pCkRlc2VyaWFsaXplRW50cmllcyhlKQpEZXNlcmlhbGl6ZUtleXMoZSkKRGVzZXJpYWxpemVNYXAoZSkKRGVzZXJpYWxpemVPYmplY3QoZSkKRm9yd2FyZE1ldGhvZHMoZSwgcmV0ID0ge30sIHRoaXNPYmopCkZvcndhcmRPYmplY3QoZSwgdGhpc09iaikKTWFrZUNvbW1hbmRGdW5jdGlvbihjbWQsIGdldENvbm5lY3Rpb24sIHRoaXNPYmosIHQpCgkocGFyYW1zID0ge30pCihwYXJhbXMgPSB7fSkKU2VyaWFsaXplVmFsdWUodmFsdWUsIHNvdXJjZSA9IGZhbHNlKQpEZXNlcmlhbGl6ZVN5bWJvbHMobmFtZXMpCkRlc2VyaWFsaXplVmFsdWUoZGVzYykAAAAAAAAAAMYIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADGCAAAICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQogIC5tZW1vaXplID0gbWVtb2l6ZShmbikKICBzZWxmID0gKGtleSwgLi4uYXJncykKICAuR2V0Q2xhc3NlcyA9ICpHZXRDbGFzc2VzKG9iaikKTWFwcGVyKG1hcCA9IAogIHNlbGYgPSAoa2V5LCB2YWx1ZSkKTWFwcGVyCk1hcHBlcgpNYXBwZXIKICBzZWxmID0gKC4uLmFyZ3MpCkRlZmF1bHRDb25zdHJ1Y3RvcgpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCldyYXBFdmVudChoYW5kbGVyLCBuYW1lKQoJKGUpCiAgZ2V0KG9iaiwgcHJvcCkKTWVzc2FnZVJlY2VpdmVyCiAgb25tZXNzYWdlKG1zZykKTWVzc2FnZVRyYW5zbWl0dGVyCiAgc2VuZE1lc3NhZ2UoKQpNZXNzYWdlVHJhbnNjZWl2ZXIoKQpNZXNzYWdlVHJhbnNjZWl2ZXIKTWVzc2FnZVJlY2VpdmVyCk1lc3NhZ2VUcmFuc21pdHRlcgogIG5vbmUoKQogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIC5qcyA9IGpzKHZlcmJvc2UgPSBmYWxzZSkKICAuYmpzb24gPSBianNvbigpClJQQ0FwaShjKQpSUENBcGkKUlBDUHJveHkoYykKUlBDT2JqZWN0KGlkLCBjb25uZWN0aW9uKQpSUENPYmplY3QKUlBDRmFjdG9yeShhcGkpCkZhY3Rvcnkob3B0cykKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkKUlBDRmFjdG9yeQpDb25uZWN0aW9uCiAgc3RhdGljIGVxdWFsKGEsIGIpCiAgc3RhdGljIGdldCBsYXN0KCkKICBtYWtlU2VxKCkKICBjb25zdHJ1Y3Rvcihzb2NrZXQsIGluc3RhbmNlLCBsb2csIGNvZGVjID0gJ25vbmUnKQogIGxvZyguLi5hcmdzKQogIGVycm9yKG1lc3NhZ2UpCiAgY2xvc2UoLi4uYXJncykKICBvbm1lc3NhZ2UobXNnKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICBvbkNvbm5lY3Qoc29jaykKICBvbk9wZW4oc29jaykKICBvbk1lc3NhZ2Uoc29jaywgbXNnKQogIG9uRXJyb3Ioc29jaywgZXJyb3IpCiAgb25DbG9zZShzb2NrLCBjb2RlLCB3aHkpCiAgb25Qb25nKHNvY2ssIGRhdGEpCkNvbm5lY3Rpb24KQ29ubmVjdGlvbgpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQpSUENTZXJ2ZXIKICBtYWtlSWQoKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpClJQQ1NlcnZlcgpSUENDbGllbnQKICBwcm9jZXNzTWVzc2FnZShyZXNwb25zZSkKICBjb21tYW5kKG5hbWUsIHBhcmFtcykKUlBDQ2xpZW50ClJQQ1NvY2tldCh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIsIHZlcmJvc2l0eSA9IDEpCiAgZ2V0IGZkKCkKICBnZXQgc29ja2V0KCkKICByZWdpc3RlcihjdG9yKQogIGxpc3RlbihuZXdfd3MsIG9zID0gZ2xvYmFsVGhpcy5vcykKICBjb25uZWN0KG5ld193cywgb3MgPSBnbG9iYWxUaGlzLm9zKQogIGdldCBjb25uZWN0ZWQoKQogIGdldCBsaXN0KCkKICBnZXQgbGFzdCgpClJQQ1NvY2tldApNYWtlV2ViU29ja2V0KHVybCwgY2FsbGJhY2tzKQoJaXNUaGVuYWJsZSh2YWx1ZSkKCWhhc0hhbmRsZXIob2JqLCBldmVudE5hbWUpCgljYWxsSGFuZGxlcihvYmosIGV2ZW50TmFtZSwgLi4uYXJncykKCXBhcnNlVVJMKHVybF9vcl9wb3J0KQogIHRvU3RyaW5nKCkKCWRlZmluZShvYmosIC4uLmFyZ3MpCglzZXRIYW5kbGVycyhvcywgaGFuZGxlcnMpCiAgLm9uRmQgPSAoZmQsIHJlYWRhYmxlLCB3cml0YWJsZSkKCXN0YXR1c1Jlc3BvbnNlKHN1Y2Nlc3MsIHJlc3VsdF9vcl9lcnJvciwgZGF0YSkKCW9iamVjdENvbW1hbmQoZm4pCgkoZGF0YSkKCWdldFByb3RvdHlwZU5hbWUocHJvdG8pCkRlc2VyaWFsaXplRW50cmllcyhlKQpEZXNlcmlhbGl6ZUtleXMoZSkKRGVzZXJpYWxpemVNYXAoZSkKRGVzZXJpYWxpemVPYmplY3QoZSkKRm9yd2FyZE1ldGhvZHMoZSwgcmV0ID0ge30sIHRoaXNPYmopCkZvcndhcmRPYmplY3QoZSwgdGhpc09iaikKTWFrZUNvbW1hbmRGdW5jdGlvbihjbWQsIGdldENvbm5lY3Rpb24sIHRoaXNPYmosIHQpCgkocGFyYW1zID0ge30pCihwYXJhbXMgPSB7fSkKU2VyaWFsaXplVmFsdWUodmFsdWUsIHNvdXJjZSA9IGZhbHNlKQpEZXNlcmlhbGl6ZVN5bWJvbHMobmFtZXMpCkRlc2VyaWFsaXplVmFsdWUoZGVzYykAAAAAAAAAAMYIAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					736,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/net/rpc.js",
						"symkeys":
						[
							[
								426,
								458
							],
							[
								515,
								533
							],
							[
								585,
								603
							],
							[
								638,
								658
							],
							[
								707,
								726
							],
							[
								732,
								741
							],
							[
								752,
								766
							],
							[
								795,
								816
							],
							[
								882,
								913
							],
							[
								971,
								986
							],
							[
								1058,
								1087
							],
							[
								1504,
								1508
							],
							[
								1537,
								1548
							],
							[
								1635,
								1674
							],
							[
								1887,
								1910
							],
							[
								1921,
								1924
							],
							[
								1941,
								1968
							],
							[
								2111,
								2117
							],
							[
								2132,
								2138
							],
							[
								2167,
								2173
							],
							[
								2213,
								2268
							],
							[
								2278,
								2288
							],
							[
								2305,
								2329
							],
							[
								2605,
								2623
							],
							[
								2638,
								2656
							],
							[
								2685,
								2703
							],
							[
								2755,
								2888
							],
							[
								2891,
								2926
							],
							[
								2939,
								2951
							],
							[
								3039,
								3053
							],
							[
								3236,
								3251
							],
							[
								3379,
								3393
							],
							[
								3517,
								3535
							],
							[
								3650,
								3663
							],
							[
								3841,
								3871
							],
							[
								3893,
								3911
							],
							[
								3925,
								3940
							],
							[
								3954,
								3972
							],
							[
								4053,
								4071
							],
							[
								4120,
								4127
							],
							[
								4188,
								4194
							],
							[
								4236,
								4248
							],
							[
								4258,
								4270
							],
							[
								4287,
								4308
							],
							[
								4350,
								4362
							],
							[
								4419,
								4431
							],
							[
								4494,
								4528
							],
							[
								4568,
								4580
							],
							[
								4649,
								4661
							],
							[
								4723,
								4748
							],
							[
								4791,
								4803
							],
							[
								4826,
								4838
							],
							[
								4874,
								4893
							],
							[
								5126,
								5132
							],
							[
								5174,
								5179
							],
							[
								5202,
								5223
							],
							[
								5341,
								5376
							],
							[
								5492,
								5496
							],
							[
								5523,
								5532
							],
							[
								5585,
								5610
							],
							[
								5615,
								5643
							],
							[
								5873,
								5882
							],
							[
								5983,
								5993
							],
							[
								6023,
								6033
							],
							[
								6127,
								6137
							],
							[
								6223,
								6241
							],
							[
								6366,
								6383
							],
							[
								6420,
								6429
							],
							[
								6466,
								6516
							],
							[
								6633,
								6645
							],
							[
								7119,
								7133
							],
							[
								7359,
								7373
							],
							[
								7545,
								7559
							],
							[
								8173,
								8177
							],
							[
								8271,
								8291
							],
							[
								8397,
								8412
							],
							[
								8590,
								8602
							],
							[
								8657,
								8671
							],
							[
								8796,
								8814
							],
							[
								8941,
								8950
							],
							[
								9040,
								9056
							],
							[
								9426,
								9459
							],
							[
								9975,
								10019
							],
							[
								10141,
								10154
							],
							[
								10224,
								10230
							],
							[
								10315,
								10349
							],
							[
								10605,
								10616
							],
							[
								10674,
								10690
							],
							[
								10771,
								10786
							],
							[
								11137,
								11149
							],
							[
								11367,
								11387
							],
							[
								11482,
								11502
							],
							[
								11666,
								11690
							],
							[
								11816,
								11834
							],
							[
								11939,
								11949
							],
							[
								12013,
								12023
							],
							[
								12084,
								12124
							],
							[
								12142,
								12173
							],
							[
								12503,
								12509
							],
							[
								12674,
								12694
							],
							[
								12790,
								12830
							],
							[
								13000,
								13009
							],
							[
								13039,
								13047
							],
							[
								13225,
								13265
							],
							[
								13364,
								13371
							],
							[
								13390,
								13397
							],
							[
								13482,
								13522
							],
							[
								13587,
								13594
							],
							[
								13672,
								13712
							],
							[
								13777,
								13784
							],
							[
								13824,
								13830
							],
							[
								13897,
								13901
							],
							[
								13956,
								13960
							],
							[
								14032,
								14063
							],
							[
								14326,
								14364
							],
							[
								14448,
								14457
							],
							[
								14933,
								14941
							],
							[
								14977,
								14997
							],
							[
								15578,
								15587
							],
							[
								15897,
								15906
							],
							[
								16306,
								16311
							],
							[
								16367,
								16372
							],
							[
								16471,
								16476
							],
							[
								16508,
								16532
							],
							[
								16785,
								16806
							],
							[
								16832,
								16851
							],
							[
								16881,
								16893
							],
							[
								16937,
								16942
							],
							[
								17016,
								17025
							],
							[
								17333,
								17393
							],
							[
								18000,
								18013
							],
							[
								18185,
								18193
							],
							[
								18311,
								18323
							],
							[
								18377,
								18393
							],
							[
								18724,
								18738
							],
							[
								18958,
								18992
							],
							[
								19291,
								19296
							],
							[
								19391,
								19432
							],
							[
								19726,
								19741
							],
							[
								20202,
								20212
							],
							[
								20249,
								20259
							],
							[
								20328,
								20337
							],
							[
								20395,
								20433
							],
							[
								20566,
								20584
							],
							[
								20614,
								20629
							],
							[
								20656,
								20675
							],
							[
								20710,
								20729
							],
							[
								20764,
								20781
							],
							[
								20814,
								20834
							],
							[
								20926,
								20953
							],
							[
								21052,
								21088
							],
							[
								21246,
								21292
							],
							[
								21391,
								21422
							],
							[
								21991,
								22001
							],
							[
								22135,
								22192
							],
							[
								22211,
								22269
							],
							[
								22588,
								22659
							],
							[
								22721,
								22728
							],
							[
								22819,
								22826
							],
							[
								22913,
								22995
							],
							[
								23542,
								23572
							],
							[
								23940,
								23975
							],
							[
								23988,
								24028
							],
							[
								24207,
								24263
							],
							[
								24492,
								24519
							],
							[
								24530,
								24545
							],
							[
								24558,
								24588
							],
							[
								24845,
								24947
							],
							[
								24973,
								24991
							],
							[
								25287,
								25310
							],
							[
								25418,
								25431
							],
							[
								26040,
								26073
							],
							[
								26142,
								26172
							],
							[
								26211,
								26215
							],
							[
								26302,
								26329
							],
							[
								26368,
								26376
							],
							[
								26456,
								26482
							],
							[
								26528,
								26557
							],
							[
								26614,
								26659
							],
							[
								26759,
								26764
							],
							[
								26864,
								26898
							],
							[
								27015,
								27075
							],
							[
								27294,
								27316
							],
							[
								27488,
								27510
							],
							[
								27608,
								27628
							],
							[
								27660,
								27665
							],
							[
								27794,
								27821
							],
							[
								28053,
								28100
							],
							[
								28918,
								28953
							],
							[
								28975,
								28979
							],
							[
								29011,
								29015
							],
							[
								29037,
								29069
							],
							[
								29203,
								29245
							],
							[
								29298,
								29339
							]
						],
						"symlist":
						[
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"VfnAdapter = vfn =>",
							"get: k =>",
							"set: (k, v) =>",
							"VfnDecorator = vfn =>",
							".memoize = function memoize(fn)",
							"(key, value) =>",
							"self = function(key, ...args)",
							"n =>",
							"(acc, n) =>",
							".GetClasses = function* GetClasses(obj)",
							" function Mapper(map = ",
							"())",
							"self = function(key, value)",
							"Mapper",
							"Mapper",
							"Mapper",
							" function DefaultConstructor(mapper, fn = (...args) => ",
							"(...args))",
							"self = function(...args)",
							"DefaultConstructor",
							"DefaultConstructor",
							"DefaultConstructor",
							" function EventLogger( instance = {}, callback = (name, event, thisObj) => console.log('EventLogger', { name, event, thisObj }) )",
							" function WrapEvent(handler, name)",
							" function(e)",
							"get(obj, prop)",
							"MessageReceiver",
							"onmessage(msg)",
							"MessageTransmitter",
							"sendMessage()",
							" function MessageTransceiver()",
							"MessageTransceiver",
							"MessageReceiver",
							"MessageTransmitter",
							"value: instance =>",
							"ctor =>",
							"none()",
							"encode: v =>",
							"decode: v =>",
							"json(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".js = function js(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".bjson = function bjson()",
							"encode: v =>",
							"decode: v =>",
							" function RPCApi(c)",
							"RPCApi",
							" o =>",
							" function RPCProxy(c)",
							" function RPCObject(id, connection)",
							"r =>",
							"RPCObject",
							" function RPCFactory(api)",
							"async function Factory(opts)",
							"RPCObject",
							"RPCFactory",
							"RPCFactory",
							"Connection",
							"static equal(a, b)",
							"static get last()",
							"makeSeq()",
							"constructor(socket, instance, log, codec = 'none')",
							"log(...args)",
							"error(message)",
							"close(...args)",
							"onmessage(msg)",
							"r =>",
							"processMessage(data)",
							"onconnect(sock)",
							"onpong(data)",
							"onerror(error)",
							"onclose(code, why)",
							"cleanup()",
							"sendMessage(obj)",
							"sendCommand(command, params = {})",
							"static getCallbacks(instance, verbosity = 0)",
							" (...args) =>",
							" () =>",
							"handle = (sock, event, ...args) =>",
							"then: fn =>",
							"remove = sock =>",
							"onConnect(sock)",
							"onOpen(sock)",
							"onMessage(sock, msg)",
							"onError(sock, error)",
							"onClose(sock, code, why)",
							"onPong(sock, data)",
							"Connection",
							"Connection",
							"function RPCServerEndpoint(classes = {})",
							"new({ class: name, args = [] })",
							"list()",
							"({ id }, respond) =>",
							"({ obj, method, args = [] }, respond) =>",
							"result =>",
							"error =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"sym =>",
							"v =>",
							"v =>",
							"({ obj, property }, respond) =>",
							"({ obj, property, value }, respond) =>",
							"RPCServer",
							"makeId()",
							"processMessage(data)",
							"RPCServer",
							"RPCClient",
							" e =>",
							" r =>",
							"() =>",
							"processMessage(response)",
							"command(name, params)",
							"(accept, reject) =>",
							" response =>",
							" e =>",
							"RPCClient",
							" function RPCSocket(url, service = RPCServer, verbosity = 1)",
							" (...args) =>",
							"get fd()",
							"get socket()",
							"get connection()",
							"register(ctor)",
							"listen(new_ws, os = globalThis.os)",
							"() =>",
							"async connect(new_ws, os = globalThis.os)",
							"get connected()",
							"get list()",
							"get last()",
							"RPCSocket",
							"function MakeWebSocket(url, callbacks)",
							".onconnect = () =>",
							".onopen = () =>",
							".onerror = error =>",
							".onmessage = msg =>",
							".onpong = pong =>",
							".onclose = reason =>",
							" function isThenable(value)",
							" function hasHandler(obj, eventName)",
							" function callHandler(obj, eventName, ...args)",
							" function parseURL(url_or_port)",
							"toString()",
							" function GetProperties( obj, method = obj => Object.",
							"(obj), pred = (obj, depth) => obj !== Object.prototype )",
							" function GetKeys(obj, pred = (obj, depth) => obj !== Object.prototype)",
							" obj =>",
							" obj =>",
							" function getPropertyDescriptors(obj, merge = true, pred = (proto, depth) => true)",
							" function define(obj, ...args)",
							" function setHandlers(os, handlers)",
							".onFd = function(fd, readable, writable)",
							" function statusResponse(success, result_or_error, data)",
							" function objectCommand(fn)",
							" function(data)",
							"respond = (success, result) =>",
							" function MakeListCommand( pred = v => typeof v != 'function', defaults = { maxDepth: Infinity } )",
							"(data, respond) =>",
							" (proto, depth) =>",
							"(acc, key) =>",
							" function getPrototypeName(proto)",
							"function DeserializeEntries(e)",
							"a =>",
							"function DeserializeKeys(e)",
							"([k]) =>",
							"function DeserializeMap(e)",
							"function DeserializeObject(e)",
							"function ForwardMethods(e, ret = {}, thisObj)",
							" o =>",
							"function ForwardObject(e, thisObj)",
							"function MakeCommandFunction(cmd, getConnection, thisObj, t)",
							"getConnection = obj =>",
							" function(params = {})",
							"(resolve, reject) =>",
							" r =>",
							"async function(params = {})",
							" function SerializeValue(value, source = false)",
							" function DeserializeSymbols(names)",
							"n =>",
							"n =>",
							" function DeserializeValue(desc)",
							"RPCConnect = (url, service = RPCClient) =>",
							"RPCListen = (url, service = RPCServer) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADGCAAAICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQogIC5tZW1vaXplID0gbWVtb2l6ZShmbikKICBzZWxmID0gKGtleSwgLi4uYXJncykKICAuR2V0Q2xhc3NlcyA9ICpHZXRDbGFzc2VzKG9iaikKTWFwcGVyKG1hcCA9IAogIHNlbGYgPSAoa2V5LCB2YWx1ZSkKTWFwcGVyCk1hcHBlcgpNYXBwZXIKICBzZWxmID0gKC4uLmFyZ3MpCkRlZmF1bHRDb25zdHJ1Y3RvcgpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCldyYXBFdmVudChoYW5kbGVyLCBuYW1lKQoJKGUpCiAgZ2V0KG9iaiwgcHJvcCkKTWVzc2FnZVJlY2VpdmVyCiAgb25tZXNzYWdlKG1zZykKTWVzc2FnZVRyYW5zbWl0dGVyCiAgc2VuZE1lc3NhZ2UoKQpNZXNzYWdlVHJhbnNjZWl2ZXIoKQpNZXNzYWdlVHJhbnNjZWl2ZXIKTWVzc2FnZVJlY2VpdmVyCk1lc3NhZ2VUcmFuc21pdHRlcgogIG5vbmUoKQogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIC5qcyA9IGpzKHZlcmJvc2UgPSBmYWxzZSkKICAuYmpzb24gPSBianNvbigpClJQQ0FwaShjKQpSUENBcGkKUlBDUHJveHkoYykKUlBDT2JqZWN0KGlkLCBjb25uZWN0aW9uKQpSUENPYmplY3QKUlBDRmFjdG9yeShhcGkpCkZhY3Rvcnkob3B0cykKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkKUlBDRmFjdG9yeQpDb25uZWN0aW9uCiAgc3RhdGljIGVxdWFsKGEsIGIpCiAgc3RhdGljIGdldCBsYXN0KCkKICBtYWtlU2VxKCkKICBjb25zdHJ1Y3Rvcihzb2NrZXQsIGluc3RhbmNlLCBsb2csIGNvZGVjID0gJ25vbmUnKQogIGxvZyguLi5hcmdzKQogIGVycm9yKG1lc3NhZ2UpCiAgY2xvc2UoLi4uYXJncykKICBvbm1lc3NhZ2UobXNnKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICBvbkNvbm5lY3Qoc29jaykKICBvbk9wZW4oc29jaykKICBvbk1lc3NhZ2Uoc29jaywgbXNnKQogIG9uRXJyb3Ioc29jaywgZXJyb3IpCiAgb25DbG9zZShzb2NrLCBjb2RlLCB3aHkpCiAgb25Qb25nKHNvY2ssIGRhdGEpCkNvbm5lY3Rpb24KQ29ubmVjdGlvbgpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQpSUENTZXJ2ZXIKICBtYWtlSWQoKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpClJQQ1NlcnZlcgpSUENDbGllbnQKICBwcm9jZXNzTWVzc2FnZShyZXNwb25zZSkKICBjb21tYW5kKG5hbWUsIHBhcmFtcykKUlBDQ2xpZW50ClJQQ1NvY2tldCh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIsIHZlcmJvc2l0eSA9IDEpCiAgZ2V0IGZkKCkKICBnZXQgc29ja2V0KCkKICByZWdpc3RlcihjdG9yKQogIGxpc3RlbihuZXdfd3MsIG9zID0gZ2xvYmFsVGhpcy5vcykKICBjb25uZWN0KG5ld193cywgb3MgPSBnbG9iYWxUaGlzLm9zKQogIGdldCBjb25uZWN0ZWQoKQogIGdldCBsaXN0KCkKICBnZXQgbGFzdCgpClJQQ1NvY2tldApNYWtlV2ViU29ja2V0KHVybCwgY2FsbGJhY2tzKQoJaXNUaGVuYWJsZSh2YWx1ZSkKCWhhc0hhbmRsZXIob2JqLCBldmVudE5hbWUpCgljYWxsSGFuZGxlcihvYmosIGV2ZW50TmFtZSwgLi4uYXJncykKCXBhcnNlVVJMKHVybF9vcl9wb3J0KQogIHRvU3RyaW5nKCkKCWRlZmluZShvYmosIC4uLmFyZ3MpCglzZXRIYW5kbGVycyhvcywgaGFuZGxlcnMpCiAgLm9uRmQgPSAoZmQsIHJlYWRhYmxlLCB3cml0YWJsZSkKCXN0YXR1c1Jlc3BvbnNlKHN1Y2Nlc3MsIHJlc3VsdF9vcl9lcnJvciwgZGF0YSkKCW9iamVjdENvbW1hbmQoZm4pCgkoZGF0YSkKCWdldFByb3RvdHlwZU5hbWUocHJvdG8pCkRlc2VyaWFsaXplRW50cmllcyhlKQpEZXNlcmlhbGl6ZUtleXMoZSkKRGVzZXJpYWxpemVNYXAoZSkKRGVzZXJpYWxpemVPYmplY3QoZSkKRm9yd2FyZE1ldGhvZHMoZSwgcmV0ID0ge30sIHRoaXNPYmopCkZvcndhcmRPYmplY3QoZSwgdGhpc09iaikKTWFrZUNvbW1hbmRGdW5jdGlvbihjbWQsIGdldENvbm5lY3Rpb24sIHRoaXNPYmosIHQpCgkocGFyYW1zID0ge30pCihwYXJhbXMgPSB7fSkKU2VyaWFsaXplVmFsdWUodmFsdWUsIHNvdXJjZSA9IGZhbHNlKQpEZXNlcmlhbGl6ZVN5bWJvbHMobmFtZXMpCkRlc2VyaWFsaXplVmFsdWUoZGVzYykAAAAAAAAAANkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADZCAAAICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQogIC5tZW1vaXplID0gbWVtb2l6ZShmbikKICBzZWxmID0gKGtleSwgLi4uYXJncykKICAuR2V0Q2xhc3NlcyA9ICpHZXRDbGFzc2VzKG9iaikKTWFwcGVyKG1hcCA9IAogIHNlbGYgPSAoa2V5LCB2YWx1ZSkKTWFwcGVyCk1hcHBlcgpNYXBwZXIKICBzZWxmID0gKC4uLmFyZ3MpCkRlZmF1bHRDb25zdHJ1Y3RvcgpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCldyYXBFdmVudChoYW5kbGVyLCBuYW1lKQoJKGUpCiAgZ2V0KG9iaiwgcHJvcCkKTWVzc2FnZVJlY2VpdmVyCiAgb25tZXNzYWdlKG1zZykKTWVzc2FnZVRyYW5zbWl0dGVyCiAgc2VuZE1lc3NhZ2UoKQpNZXNzYWdlVHJhbnNjZWl2ZXIoKQpNZXNzYWdlVHJhbnNjZWl2ZXIKTWVzc2FnZVJlY2VpdmVyCk1lc3NhZ2VUcmFuc21pdHRlcgogIG5vbmUoKQogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIC5qcyA9IGpzKHZlcmJvc2UgPSBmYWxzZSkKICAuYmpzb24gPSBianNvbigpClJQQ0FwaShjKQpSUENBcGkKUlBDUHJveHkoYykKUlBDT2JqZWN0KGlkLCBjb25uZWN0aW9uKQpSUENPYmplY3QKUlBDRmFjdG9yeShhcGkpCkZhY3Rvcnkob3B0cykKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkKUlBDRmFjdG9yeQpDb25uZWN0aW9uCiAgc3RhdGljIGVxdWFsKGEsIGIpCiAgc3RhdGljIGdldCBsYXN0KCkKICBtYWtlU2VxKCkKICBjb25zdHJ1Y3Rvcihzb2NrZXQsIGluc3RhbmNlLCBsb2csIGNvZGVjID0gJ25vbmUnKQogIGxvZyguLi5hcmdzKQogIGVycm9yKG1lc3NhZ2UpCiAgY2xvc2UoLi4uYXJncykKICBvbm1lc3NhZ2UobXNnKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICBvbkNvbm5lY3Qoc29jaykKICBvbk9wZW4oc29jaykKICBvbk1lc3NhZ2Uoc29jaywgbXNnKQogIG9uRXJyb3Ioc29jaywgZXJyb3IpCiAgb25DbG9zZShzb2NrLCBjb2RlLCB3aHkpCiAgb25Qb25nKHNvY2ssIGRhdGEpCkNvbm5lY3Rpb24KQ29ubmVjdGlvbgpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQpSUENTZXJ2ZXIKICBtYWtlSWQoKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpClJQQ1NlcnZlcgpSUENDbGllbnQKICBwcm9jZXNzTWVzc2FnZShyZXNwb25zZSkKICBjb21tYW5kKG5hbWUsIHBhcmFtcykKUlBDQ2xpZW50ClJQQ1NvY2tldCh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIsIHZlcmJvc2l0eSA9IDEpCiAgZ2V0IGZkKCkKICBnZXQgc29ja2V0KCkKICBnZXQgY29ubmVjdGlvbigpCiAgcmVnaXN0ZXIoY3RvcikKICBsaXN0ZW4obmV3X3dzLCBvcyA9IGdsb2JhbFRoaXMub3MpCiAgY29ubmVjdChuZXdfd3MsIG9zID0gZ2xvYmFsVGhpcy5vcykKICBnZXQgY29ubmVjdGVkKCkKICBnZXQgbGlzdCgpCiAgZ2V0IGxhc3QoKQpSUENTb2NrZXQKTWFrZVdlYlNvY2tldCh1cmwsIGNhbGxiYWNrcykKCWlzVGhlbmFibGUodmFsdWUpCgloYXNIYW5kbGVyKG9iaiwgZXZlbnROYW1lKQoJY2FsbEhhbmRsZXIob2JqLCBldmVudE5hbWUsIC4uLmFyZ3MpCglwYXJzZVVSTCh1cmxfb3JfcG9ydCkKICB0b1N0cmluZygpCglkZWZpbmUob2JqLCAuLi5hcmdzKQoJc2V0SGFuZGxlcnMob3MsIGhhbmRsZXJzKQogIC5vbkZkID0gKGZkLCByZWFkYWJsZSwgd3JpdGFibGUpCglzdGF0dXNSZXNwb25zZShzdWNjZXNzLCByZXN1bHRfb3JfZXJyb3IsIGRhdGEpCglvYmplY3RDb21tYW5kKGZuKQoJKGRhdGEpCglnZXRQcm90b3R5cGVOYW1lKHByb3RvKQpEZXNlcmlhbGl6ZUVudHJpZXMoZSkKRGVzZXJpYWxpemVLZXlzKGUpCkRlc2VyaWFsaXplTWFwKGUpCkRlc2VyaWFsaXplT2JqZWN0KGUpCkZvcndhcmRNZXRob2RzKGUsIHJldCA9IHt9LCB0aGlzT2JqKQpGb3J3YXJkT2JqZWN0KGUsIHRoaXNPYmopCk1ha2VDb21tYW5kRnVuY3Rpb24oY21kLCBnZXRDb25uZWN0aW9uLCB0aGlzT2JqLCB0KQoJKHBhcmFtcyA9IHt9KQoocGFyYW1zID0ge30pClNlcmlhbGl6ZVZhbHVlKHZhbHVlLCBzb3VyY2UgPSBmYWxzZSkKRGVzZXJpYWxpemVTeW1ib2xzKG5hbWVzKQpEZXNlcmlhbGl6ZVZhbHVlKGRlc2MpAAAAAAAAAADZCAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					737,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/net/rpc.js",
						"symkeys":
						[
							[
								426,
								458
							],
							[
								515,
								533
							],
							[
								585,
								603
							],
							[
								638,
								658
							],
							[
								707,
								726
							],
							[
								732,
								741
							],
							[
								752,
								766
							],
							[
								795,
								816
							],
							[
								882,
								913
							],
							[
								971,
								986
							],
							[
								1058,
								1087
							],
							[
								1504,
								1508
							],
							[
								1537,
								1548
							],
							[
								1635,
								1674
							],
							[
								1887,
								1910
							],
							[
								1921,
								1924
							],
							[
								1941,
								1968
							],
							[
								2111,
								2117
							],
							[
								2132,
								2138
							],
							[
								2167,
								2173
							],
							[
								2213,
								2268
							],
							[
								2278,
								2288
							],
							[
								2305,
								2329
							],
							[
								2605,
								2623
							],
							[
								2638,
								2656
							],
							[
								2685,
								2703
							],
							[
								2755,
								2888
							],
							[
								2891,
								2926
							],
							[
								2939,
								2951
							],
							[
								3039,
								3053
							],
							[
								3236,
								3251
							],
							[
								3379,
								3393
							],
							[
								3517,
								3535
							],
							[
								3650,
								3663
							],
							[
								3841,
								3871
							],
							[
								3893,
								3911
							],
							[
								3925,
								3940
							],
							[
								3954,
								3972
							],
							[
								4053,
								4071
							],
							[
								4120,
								4127
							],
							[
								4188,
								4194
							],
							[
								4236,
								4248
							],
							[
								4258,
								4270
							],
							[
								4287,
								4308
							],
							[
								4350,
								4362
							],
							[
								4419,
								4431
							],
							[
								4494,
								4528
							],
							[
								4568,
								4580
							],
							[
								4649,
								4661
							],
							[
								4723,
								4748
							],
							[
								4791,
								4803
							],
							[
								4826,
								4838
							],
							[
								4874,
								4893
							],
							[
								5126,
								5132
							],
							[
								5174,
								5179
							],
							[
								5202,
								5223
							],
							[
								5341,
								5376
							],
							[
								5492,
								5496
							],
							[
								5523,
								5532
							],
							[
								5585,
								5610
							],
							[
								5615,
								5643
							],
							[
								5873,
								5882
							],
							[
								5983,
								5993
							],
							[
								6023,
								6033
							],
							[
								6127,
								6137
							],
							[
								6223,
								6241
							],
							[
								6366,
								6383
							],
							[
								6420,
								6429
							],
							[
								6466,
								6516
							],
							[
								6633,
								6645
							],
							[
								7119,
								7133
							],
							[
								7359,
								7373
							],
							[
								7545,
								7559
							],
							[
								8173,
								8177
							],
							[
								8271,
								8291
							],
							[
								8397,
								8412
							],
							[
								8590,
								8602
							],
							[
								8657,
								8671
							],
							[
								8796,
								8814
							],
							[
								8941,
								8950
							],
							[
								9040,
								9056
							],
							[
								9426,
								9459
							],
							[
								9975,
								10019
							],
							[
								10141,
								10154
							],
							[
								10224,
								10230
							],
							[
								10315,
								10349
							],
							[
								10605,
								10616
							],
							[
								10674,
								10690
							],
							[
								10771,
								10786
							],
							[
								11137,
								11149
							],
							[
								11367,
								11387
							],
							[
								11482,
								11502
							],
							[
								11666,
								11690
							],
							[
								11816,
								11834
							],
							[
								11939,
								11949
							],
							[
								12013,
								12023
							],
							[
								12084,
								12124
							],
							[
								12142,
								12173
							],
							[
								12503,
								12509
							],
							[
								12674,
								12694
							],
							[
								12790,
								12830
							],
							[
								13000,
								13009
							],
							[
								13039,
								13047
							],
							[
								13225,
								13265
							],
							[
								13364,
								13371
							],
							[
								13390,
								13397
							],
							[
								13482,
								13522
							],
							[
								13587,
								13594
							],
							[
								13672,
								13712
							],
							[
								13777,
								13784
							],
							[
								13824,
								13830
							],
							[
								13897,
								13901
							],
							[
								13956,
								13960
							],
							[
								14032,
								14063
							],
							[
								14326,
								14364
							],
							[
								14448,
								14457
							],
							[
								14933,
								14941
							],
							[
								14977,
								14997
							],
							[
								15578,
								15587
							],
							[
								15897,
								15906
							],
							[
								16306,
								16311
							],
							[
								16367,
								16372
							],
							[
								16471,
								16476
							],
							[
								16508,
								16532
							],
							[
								16785,
								16806
							],
							[
								16832,
								16851
							],
							[
								16881,
								16893
							],
							[
								16937,
								16942
							],
							[
								17016,
								17025
							],
							[
								17333,
								17393
							],
							[
								18000,
								18013
							],
							[
								18185,
								18193
							],
							[
								18311,
								18323
							],
							[
								18377,
								18393
							],
							[
								18716,
								18730
							],
							[
								18950,
								18984
							],
							[
								19283,
								19288
							],
							[
								19383,
								19424
							],
							[
								19718,
								19733
							],
							[
								20194,
								20204
							],
							[
								20241,
								20251
							],
							[
								20320,
								20329
							],
							[
								20387,
								20425
							],
							[
								20558,
								20576
							],
							[
								20606,
								20621
							],
							[
								20648,
								20667
							],
							[
								20702,
								20721
							],
							[
								20756,
								20773
							],
							[
								20806,
								20826
							],
							[
								20918,
								20945
							],
							[
								21044,
								21080
							],
							[
								21238,
								21284
							],
							[
								21383,
								21414
							],
							[
								21983,
								21993
							],
							[
								22127,
								22184
							],
							[
								22203,
								22261
							],
							[
								22580,
								22651
							],
							[
								22713,
								22720
							],
							[
								22811,
								22818
							],
							[
								22905,
								22987
							],
							[
								23534,
								23564
							],
							[
								23932,
								23967
							],
							[
								23980,
								24020
							],
							[
								24199,
								24255
							],
							[
								24484,
								24511
							],
							[
								24522,
								24537
							],
							[
								24550,
								24580
							],
							[
								24837,
								24939
							],
							[
								24965,
								24983
							],
							[
								25279,
								25302
							],
							[
								25410,
								25423
							],
							[
								26032,
								26065
							],
							[
								26134,
								26164
							],
							[
								26203,
								26207
							],
							[
								26294,
								26321
							],
							[
								26360,
								26368
							],
							[
								26448,
								26474
							],
							[
								26520,
								26549
							],
							[
								26606,
								26651
							],
							[
								26751,
								26756
							],
							[
								26856,
								26890
							],
							[
								27007,
								27067
							],
							[
								27286,
								27308
							],
							[
								27480,
								27502
							],
							[
								27600,
								27620
							],
							[
								27652,
								27657
							],
							[
								27786,
								27813
							],
							[
								28045,
								28092
							],
							[
								28910,
								28945
							],
							[
								28967,
								28971
							],
							[
								29003,
								29007
							],
							[
								29029,
								29061
							],
							[
								29195,
								29237
							],
							[
								29290,
								29331
							]
						],
						"symlist":
						[
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"VfnAdapter = vfn =>",
							"get: k =>",
							"set: (k, v) =>",
							"VfnDecorator = vfn =>",
							".memoize = function memoize(fn)",
							"(key, value) =>",
							"self = function(key, ...args)",
							"n =>",
							"(acc, n) =>",
							".GetClasses = function* GetClasses(obj)",
							" function Mapper(map = ",
							"())",
							"self = function(key, value)",
							"Mapper",
							"Mapper",
							"Mapper",
							" function DefaultConstructor(mapper, fn = (...args) => ",
							"(...args))",
							"self = function(...args)",
							"DefaultConstructor",
							"DefaultConstructor",
							"DefaultConstructor",
							" function EventLogger( instance = {}, callback = (name, event, thisObj) => console.log('EventLogger', { name, event, thisObj }) )",
							" function WrapEvent(handler, name)",
							" function(e)",
							"get(obj, prop)",
							"MessageReceiver",
							"onmessage(msg)",
							"MessageTransmitter",
							"sendMessage()",
							" function MessageTransceiver()",
							"MessageTransceiver",
							"MessageReceiver",
							"MessageTransmitter",
							"value: instance =>",
							"ctor =>",
							"none()",
							"encode: v =>",
							"decode: v =>",
							"json(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".js = function js(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".bjson = function bjson()",
							"encode: v =>",
							"decode: v =>",
							" function RPCApi(c)",
							"RPCApi",
							" o =>",
							" function RPCProxy(c)",
							" function RPCObject(id, connection)",
							"r =>",
							"RPCObject",
							" function RPCFactory(api)",
							"async function Factory(opts)",
							"RPCObject",
							"RPCFactory",
							"RPCFactory",
							"Connection",
							"static equal(a, b)",
							"static get last()",
							"makeSeq()",
							"constructor(socket, instance, log, codec = 'none')",
							"log(...args)",
							"error(message)",
							"close(...args)",
							"onmessage(msg)",
							"r =>",
							"processMessage(data)",
							"onconnect(sock)",
							"onpong(data)",
							"onerror(error)",
							"onclose(code, why)",
							"cleanup()",
							"sendMessage(obj)",
							"sendCommand(command, params = {})",
							"static getCallbacks(instance, verbosity = 0)",
							" (...args) =>",
							" () =>",
							"handle = (sock, event, ...args) =>",
							"then: fn =>",
							"remove = sock =>",
							"onConnect(sock)",
							"onOpen(sock)",
							"onMessage(sock, msg)",
							"onError(sock, error)",
							"onClose(sock, code, why)",
							"onPong(sock, data)",
							"Connection",
							"Connection",
							"function RPCServerEndpoint(classes = {})",
							"new({ class: name, args = [] })",
							"list()",
							"({ id }, respond) =>",
							"({ obj, method, args = [] }, respond) =>",
							"result =>",
							"error =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"sym =>",
							"v =>",
							"v =>",
							"({ obj, property }, respond) =>",
							"({ obj, property, value }, respond) =>",
							"RPCServer",
							"makeId()",
							"processMessage(data)",
							"RPCServer",
							"RPCClient",
							" e =>",
							" r =>",
							"() =>",
							"processMessage(response)",
							"command(name, params)",
							"(accept, reject) =>",
							" response =>",
							" e =>",
							"RPCClient",
							" function RPCSocket(url, service = RPCServer, verbosity = 1)",
							" (...args) =>",
							"get fd()",
							"get socket()",
							"get connection()",
							"register(ctor)",
							"listen(new_ws, os = globalThis.os)",
							"() =>",
							"async connect(new_ws, os = globalThis.os)",
							"get connected()",
							"get list()",
							"get last()",
							"RPCSocket",
							"function MakeWebSocket(url, callbacks)",
							".onconnect = () =>",
							".onopen = () =>",
							".onerror = error =>",
							".onmessage = msg =>",
							".onpong = pong =>",
							".onclose = reason =>",
							" function isThenable(value)",
							" function hasHandler(obj, eventName)",
							" function callHandler(obj, eventName, ...args)",
							" function parseURL(url_or_port)",
							"toString()",
							" function GetProperties( obj, method = obj => Object.",
							"(obj), pred = (obj, depth) => obj !== Object.prototype )",
							" function GetKeys(obj, pred = (obj, depth) => obj !== Object.prototype)",
							" obj =>",
							" obj =>",
							" function getPropertyDescriptors(obj, merge = true, pred = (proto, depth) => true)",
							" function define(obj, ...args)",
							" function setHandlers(os, handlers)",
							".onFd = function(fd, readable, writable)",
							" function statusResponse(success, result_or_error, data)",
							" function objectCommand(fn)",
							" function(data)",
							"respond = (success, result) =>",
							" function MakeListCommand( pred = v => typeof v != 'function', defaults = { maxDepth: Infinity } )",
							"(data, respond) =>",
							" (proto, depth) =>",
							"(acc, key) =>",
							" function getPrototypeName(proto)",
							"function DeserializeEntries(e)",
							"a =>",
							"function DeserializeKeys(e)",
							"([k]) =>",
							"function DeserializeMap(e)",
							"function DeserializeObject(e)",
							"function ForwardMethods(e, ret = {}, thisObj)",
							" o =>",
							"function ForwardObject(e, thisObj)",
							"function MakeCommandFunction(cmd, getConnection, thisObj, t)",
							"getConnection = obj =>",
							" function(params = {})",
							"(resolve, reject) =>",
							" r =>",
							"async function(params = {})",
							" function SerializeValue(value, source = false)",
							" function DeserializeSymbols(names)",
							"n =>",
							"n =>",
							" function DeserializeValue(desc)",
							"RPCConnect = (url, service = RPCClient) =>",
							"RPCListen = (url, service = RPCServer) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADZCAAAICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQogIC5tZW1vaXplID0gbWVtb2l6ZShmbikKICBzZWxmID0gKGtleSwgLi4uYXJncykKICAuR2V0Q2xhc3NlcyA9ICpHZXRDbGFzc2VzKG9iaikKTWFwcGVyKG1hcCA9IAogIHNlbGYgPSAoa2V5LCB2YWx1ZSkKTWFwcGVyCk1hcHBlcgpNYXBwZXIKICBzZWxmID0gKC4uLmFyZ3MpCkRlZmF1bHRDb25zdHJ1Y3RvcgpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCldyYXBFdmVudChoYW5kbGVyLCBuYW1lKQoJKGUpCiAgZ2V0KG9iaiwgcHJvcCkKTWVzc2FnZVJlY2VpdmVyCiAgb25tZXNzYWdlKG1zZykKTWVzc2FnZVRyYW5zbWl0dGVyCiAgc2VuZE1lc3NhZ2UoKQpNZXNzYWdlVHJhbnNjZWl2ZXIoKQpNZXNzYWdlVHJhbnNjZWl2ZXIKTWVzc2FnZVJlY2VpdmVyCk1lc3NhZ2VUcmFuc21pdHRlcgogIG5vbmUoKQogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIC5qcyA9IGpzKHZlcmJvc2UgPSBmYWxzZSkKICAuYmpzb24gPSBianNvbigpClJQQ0FwaShjKQpSUENBcGkKUlBDUHJveHkoYykKUlBDT2JqZWN0KGlkLCBjb25uZWN0aW9uKQpSUENPYmplY3QKUlBDRmFjdG9yeShhcGkpCkZhY3Rvcnkob3B0cykKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkKUlBDRmFjdG9yeQpDb25uZWN0aW9uCiAgc3RhdGljIGVxdWFsKGEsIGIpCiAgc3RhdGljIGdldCBsYXN0KCkKICBtYWtlU2VxKCkKICBjb25zdHJ1Y3Rvcihzb2NrZXQsIGluc3RhbmNlLCBsb2csIGNvZGVjID0gJ25vbmUnKQogIGxvZyguLi5hcmdzKQogIGVycm9yKG1lc3NhZ2UpCiAgY2xvc2UoLi4uYXJncykKICBvbm1lc3NhZ2UobXNnKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICBvbkNvbm5lY3Qoc29jaykKICBvbk9wZW4oc29jaykKICBvbk1lc3NhZ2Uoc29jaywgbXNnKQogIG9uRXJyb3Ioc29jaywgZXJyb3IpCiAgb25DbG9zZShzb2NrLCBjb2RlLCB3aHkpCiAgb25Qb25nKHNvY2ssIGRhdGEpCkNvbm5lY3Rpb24KQ29ubmVjdGlvbgpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQpSUENTZXJ2ZXIKICBtYWtlSWQoKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpClJQQ1NlcnZlcgpSUENDbGllbnQKICBwcm9jZXNzTWVzc2FnZShyZXNwb25zZSkKICBjb21tYW5kKG5hbWUsIHBhcmFtcykKUlBDQ2xpZW50ClJQQ1NvY2tldCh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIsIHZlcmJvc2l0eSA9IDEpCiAgZ2V0IGZkKCkKICBnZXQgc29ja2V0KCkKICBnZXQgY29ubmVjdGlvbigpCiAgcmVnaXN0ZXIoY3RvcikKICBsaXN0ZW4obmV3X3dzLCBvcyA9IGdsb2JhbFRoaXMub3MpCiAgY29ubmVjdChuZXdfd3MsIG9zID0gZ2xvYmFsVGhpcy5vcykKICBnZXQgY29ubmVjdGVkKCkKICBnZXQgbGlzdCgpCiAgZ2V0IGxhc3QoKQpSUENTb2NrZXQKTWFrZVdlYlNvY2tldCh1cmwsIGNhbGxiYWNrcykKCWlzVGhlbmFibGUodmFsdWUpCgloYXNIYW5kbGVyKG9iaiwgZXZlbnROYW1lKQoJY2FsbEhhbmRsZXIob2JqLCBldmVudE5hbWUsIC4uLmFyZ3MpCglwYXJzZVVSTCh1cmxfb3JfcG9ydCkKICB0b1N0cmluZygpCglkZWZpbmUob2JqLCAuLi5hcmdzKQoJc2V0SGFuZGxlcnMob3MsIGhhbmRsZXJzKQogIC5vbkZkID0gKGZkLCByZWFkYWJsZSwgd3JpdGFibGUpCglzdGF0dXNSZXNwb25zZShzdWNjZXNzLCByZXN1bHRfb3JfZXJyb3IsIGRhdGEpCglvYmplY3RDb21tYW5kKGZuKQoJKGRhdGEpCglnZXRQcm90b3R5cGVOYW1lKHByb3RvKQpEZXNlcmlhbGl6ZUVudHJpZXMoZSkKRGVzZXJpYWxpemVLZXlzKGUpCkRlc2VyaWFsaXplTWFwKGUpCkRlc2VyaWFsaXplT2JqZWN0KGUpCkZvcndhcmRNZXRob2RzKGUsIHJldCA9IHt9LCB0aGlzT2JqKQpGb3J3YXJkT2JqZWN0KGUsIHRoaXNPYmopCk1ha2VDb21tYW5kRnVuY3Rpb24oY21kLCBnZXRDb25uZWN0aW9uLCB0aGlzT2JqLCB0KQoJKHBhcmFtcyA9IHt9KQoocGFyYW1zID0ge30pClNlcmlhbGl6ZVZhbHVlKHZhbHVlLCBzb3VyY2UgPSBmYWxzZSkKRGVzZXJpYWxpemVTeW1ib2xzKG5hbWVzKQpEZXNlcmlhbGl6ZVZhbHVlKGRlc2MpAAAAAAAAAADZCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2QgAACAgLkxvZ1dyYXAgPSBMb2dXcmFwKGxvZykKICAubWVtb2l6ZSA9IG1lbW9pemUoZm4pCiAgc2VsZiA9IChrZXksIC4uLmFyZ3MpCiAgLkdldENsYXNzZXMgPSAqR2V0Q2xhc3NlcyhvYmopCk1hcHBlcihtYXAgPSAKICBzZWxmID0gKGtleSwgdmFsdWUpCk1hcHBlcgpNYXBwZXIKTWFwcGVyCiAgc2VsZiA9ICguLi5hcmdzKQpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCkRlZmF1bHRDb25zdHJ1Y3RvcgpXcmFwRXZlbnQoaGFuZGxlciwgbmFtZSkKCShlKQogIGdldChvYmosIHByb3ApCk1lc3NhZ2VSZWNlaXZlcgogIG9ubWVzc2FnZShtc2cpCk1lc3NhZ2VUcmFuc21pdHRlcgogIHNlbmRNZXNzYWdlKCkKTWVzc2FnZVRyYW5zY2VpdmVyKCkKTWVzc2FnZVRyYW5zY2VpdmVyCk1lc3NhZ2VSZWNlaXZlcgpNZXNzYWdlVHJhbnNtaXR0ZXIKICBub25lKCkKICBqc29uKHZlcmJvc2UgPSBmYWxzZSkKICAuanMgPSBqcyh2ZXJib3NlID0gZmFsc2UpCiAgLmJqc29uID0gYmpzb24oKQpSUENBcGkoYykKUlBDQXBpClJQQ1Byb3h5KGMpClJQQ09iamVjdChpZCwgY29ubmVjdGlvbikKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkoYXBpKQpGYWN0b3J5KG9wdHMpClJQQ09iamVjdApSUENGYWN0b3J5ClJQQ0ZhY3RvcnkKQ29ubmVjdGlvbgogIHN0YXRpYyBlcXVhbChhLCBiKQogIHN0YXRpYyBnZXQgbGFzdCgpCiAgbWFrZVNlcSgpCiAgY29uc3RydWN0b3Ioc29ja2V0LCBpbnN0YW5jZSwgbG9nLCBjb2RlYyA9ICdub25lJykKICBsb2coLi4uYXJncykKICBlcnJvcihtZXNzYWdlKQogIGNsb3NlKC4uLmFyZ3MpCiAgb25tZXNzYWdlKG1zZykKICBwcm9jZXNzTWVzc2FnZShkYXRhKQogIG9uY29ubmVjdChzb2NrKQogIG9ucG9uZyhkYXRhKQogIG9uZXJyb3IoZXJyb3IpCiAgb25jbG9zZShjb2RlLCB3aHkpCiAgY2xlYW51cCgpCiAgc2VuZE1lc3NhZ2Uob2JqKQogIHNlbmRDb21tYW5kKGNvbW1hbmQsIHBhcmFtcyA9IHt9KQogIHN0YXRpYyBnZXRDYWxsYmFja3MoaW5zdGFuY2UsIHZlcmJvc2l0eSA9IDApCiAgb25Db25uZWN0KHNvY2spCiAgb25PcGVuKHNvY2spCiAgb25NZXNzYWdlKHNvY2ssIG1zZykKICBvbkVycm9yKHNvY2ssIGVycm9yKQogIG9uQ2xvc2Uoc29jaywgY29kZSwgd2h5KQogIG9uUG9uZyhzb2NrLCBkYXRhKQpDb25uZWN0aW9uCkNvbm5lY3Rpb24KUlBDU2VydmVyRW5kcG9pbnQoY2xhc3NlcyA9IHt9KQogIG5ldyh7IGNsYXNzOiBuYW1lLCBhcmdzID0gW10gfSkKICBsaXN0KCkKUlBDU2VydmVyCiAgbWFrZUlkKCkKICBwcm9jZXNzTWVzc2FnZShkYXRhKQpSUENTZXJ2ZXIKUlBDQ2xpZW50CiAgcHJvY2Vzc01lc3NhZ2UocmVzcG9uc2UpCiAgY29tbWFuZChuYW1lLCBwYXJhbXMpClJQQ0NsaWVudApSUENTb2NrZXQodXJsLCBzZXJ2aWNlID0gUlBDU2VydmVyLCB2ZXJib3NpdHkgPSAxKQogIGdldCBmZCgpCiAgZ2V0IHNvY2tldCgpCiAgZ2V0IGNvbm5lY3Rpb24oKQogIHJlZ2lzdGVyKGN0b3IpCiAgbGlzdGVuKG5ld193cywgb3MgPSBnbG9iYWxUaGlzLm9zKQogIGNvbm5lY3QobmV3X3dzLCBvcyA9IGdsb2JhbFRoaXMub3MpCiAgZ2V0IGNvbm5lY3RlZCgpCiAgZ2V0IGxpc3QoKQogIGdldCBsYXN0KCkKUlBDU29ja2V0Ck1ha2VXZWJTb2NrZXQodXJsLCBjYWxsYmFja3MpCglpc1RoZW5hYmxlKHZhbHVlKQoJaGFzSGFuZGxlcihvYmosIGV2ZW50TmFtZSkKCWNhbGxIYW5kbGVyKG9iaiwgZXZlbnROYW1lLCAuLi5hcmdzKQoJcGFyc2VVUkwodXJsX29yX3BvcnQpCiAgdG9TdHJpbmcoKQoJZGVmaW5lKG9iaiwgLi4uYXJncykKCXNldEhhbmRsZXJzKG9zLCBoYW5kbGVycykKICAub25GZCA9IChmZCwgcmVhZGFibGUsIHdyaXRhYmxlKQoJc3RhdHVzUmVzcG9uc2Uoc3VjY2VzcywgcmVzdWx0X29yX2Vycm9yLCBkYXRhKQoJb2JqZWN0Q29tbWFuZChmbikKCShkYXRhKQoJZ2V0UHJvdG90eXBlTmFtZShwcm90bykKRGVzZXJpYWxpemVFbnRyaWVzKGUpCkRlc2VyaWFsaXplS2V5cyhlKQpEZXNlcmlhbGl6ZU1hcChlKQpEZXNlcmlhbGl6ZU9iamVjdChlKQpGb3J3YXJkTWV0aG9kcyhlLCByZXQgPSB7fSwgdGhpc09iaikKRm9yd2FyZE9iamVjdChlLCB0aGlzT2JqKQpNYWtlQ29tbWFuZEZ1bmN0aW9uKGNtZCwgZ2V0Q29ubmVjdGlvbiwgdGhpc09iaiwgdCkKCShwYXJhbXMgPSB7fSkKKHBhcmFtcyA9IHt9KQpTZXJpYWxpemVWYWx1ZSh2YWx1ZSwgc291cmNlID0gZmFsc2UpCkRlc2VyaWFsaXplU3ltYm9scyhuYW1lcykKRGVzZXJpYWxpemVWYWx1ZShkZXNjKQAAAAAAAAAA2QgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					744,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADZCAAAICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQogIC5tZW1vaXplID0gbWVtb2l6ZShmbikKICBzZWxmID0gKGtleSwgLi4uYXJncykKICAuR2V0Q2xhc3NlcyA9ICpHZXRDbGFzc2VzKG9iaikKTWFwcGVyKG1hcCA9IAogIHNlbGYgPSAoa2V5LCB2YWx1ZSkKTWFwcGVyCk1hcHBlcgpNYXBwZXIKICBzZWxmID0gKC4uLmFyZ3MpCkRlZmF1bHRDb25zdHJ1Y3RvcgpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCldyYXBFdmVudChoYW5kbGVyLCBuYW1lKQoJKGUpCiAgZ2V0KG9iaiwgcHJvcCkKTWVzc2FnZVJlY2VpdmVyCiAgb25tZXNzYWdlKG1zZykKTWVzc2FnZVRyYW5zbWl0dGVyCiAgc2VuZE1lc3NhZ2UoKQpNZXNzYWdlVHJhbnNjZWl2ZXIoKQpNZXNzYWdlVHJhbnNjZWl2ZXIKTWVzc2FnZVJlY2VpdmVyCk1lc3NhZ2VUcmFuc21pdHRlcgogIG5vbmUoKQogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIC5qcyA9IGpzKHZlcmJvc2UgPSBmYWxzZSkKICAuYmpzb24gPSBianNvbigpClJQQ0FwaShjKQpSUENBcGkKUlBDUHJveHkoYykKUlBDT2JqZWN0KGlkLCBjb25uZWN0aW9uKQpSUENPYmplY3QKUlBDRmFjdG9yeShhcGkpCkZhY3Rvcnkob3B0cykKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkKUlBDRmFjdG9yeQpDb25uZWN0aW9uCiAgc3RhdGljIGVxdWFsKGEsIGIpCiAgc3RhdGljIGdldCBsYXN0KCkKICBtYWtlU2VxKCkKICBjb25zdHJ1Y3Rvcihzb2NrZXQsIGluc3RhbmNlLCBsb2csIGNvZGVjID0gJ25vbmUnKQogIGxvZyguLi5hcmdzKQogIGVycm9yKG1lc3NhZ2UpCiAgY2xvc2UoLi4uYXJncykKICBvbm1lc3NhZ2UobXNnKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICBvbkNvbm5lY3Qoc29jaykKICBvbk9wZW4oc29jaykKICBvbk1lc3NhZ2Uoc29jaywgbXNnKQogIG9uRXJyb3Ioc29jaywgZXJyb3IpCiAgb25DbG9zZShzb2NrLCBjb2RlLCB3aHkpCiAgb25Qb25nKHNvY2ssIGRhdGEpCkNvbm5lY3Rpb24KQ29ubmVjdGlvbgpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQpSUENTZXJ2ZXIKICBtYWtlSWQoKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpClJQQ1NlcnZlcgpSUENDbGllbnQKICBwcm9jZXNzTWVzc2FnZShyZXNwb25zZSkKICBjb21tYW5kKG5hbWUsIHBhcmFtcykKUlBDQ2xpZW50ClJQQ1NvY2tldCh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIsIHZlcmJvc2l0eSA9IDEpCiAgZ2V0IGZkKCkKICBnZXQgc29ja2V0KCkKICBnZXQgY29ubmVjdGlvbigpCiAgcmVnaXN0ZXIoY3RvcikKICBsaXN0ZW4obmV3X3dzLCBvcyA9IGdsb2JhbFRoaXMub3MpCiAgY29ubmVjdChuZXdfd3MsIG9zID0gZ2xvYmFsVGhpcy5vcykKICBnZXQgY29ubmVjdGVkKCkKICBnZXQgbGlzdCgpCiAgZ2V0IGxhc3QoKQpSUENTb2NrZXQKTWFrZVdlYlNvY2tldCh1cmwsIGNhbGxiYWNrcykKCWlzVGhlbmFibGUodmFsdWUpCgloYXNIYW5kbGVyKG9iaiwgZXZlbnROYW1lKQoJY2FsbEhhbmRsZXIob2JqLCBldmVudE5hbWUsIC4uLmFyZ3MpCglwYXJzZVVSTCh1cmxfb3JfcG9ydCkKICB0b1N0cmluZygpCglkZWZpbmUob2JqLCAuLi5hcmdzKQoJc2V0SGFuZGxlcnMob3MsIGhhbmRsZXJzKQogIC5vbkZkID0gKGZkLCByZWFkYWJsZSwgd3JpdGFibGUpCglzdGF0dXNSZXNwb25zZShzdWNjZXNzLCByZXN1bHRfb3JfZXJyb3IsIGRhdGEpCglvYmplY3RDb21tYW5kKGZuKQoJKGRhdGEpCglnZXRQcm90b3R5cGVOYW1lKHByb3RvKQpEZXNlcmlhbGl6ZUVudHJpZXMoZSkKRGVzZXJpYWxpemVLZXlzKGUpCkRlc2VyaWFsaXplTWFwKGUpCkRlc2VyaWFsaXplT2JqZWN0KGUpCkZvcndhcmRNZXRob2RzKGUsIHJldCA9IHt9LCB0aGlzT2JqKQpGb3J3YXJkT2JqZWN0KGUsIHRoaXNPYmopCk1ha2VDb21tYW5kRnVuY3Rpb24oY21kLCBnZXRDb25uZWN0aW9uLCB0aGlzT2JqLCB0KQoJKHBhcmFtcyA9IHt9KQoocGFyYW1zID0ge30pClNlcmlhbGl6ZVZhbHVlKHZhbHVlLCBzb3VyY2UgPSBmYWxzZSkKRGVzZXJpYWxpemVTeW1ib2xzKG5hbWVzKQpEZXNlcmlhbGl6ZVZhbHVlKGRlc2MpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAowcAAAAAAAC1BwAAAAAAAAAAAAAAAPC/"
				],
				[
					745,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/events.js",
						"symkeys":
						[
							[
								62,
								93
							],
							[
								143,
								176
							],
							[
								336,
								368
							],
							[
								425,
								443
							],
							[
								495,
								513
							],
							[
								548,
								568
							],
							[
								617,
								629
							],
							[
								650,
								663
							],
							[
								744,
								763
							],
							[
								951,
								982
							],
							[
								1328,
								1352
							],
							[
								1495,
								1507
							],
							[
								1611,
								1631
							],
							[
								2034,
								2055
							],
							[
								2080,
								2095
							],
							[
								2216,
								2230
							],
							[
								2257,
								2278
							],
							[
								2459,
								2471
							],
							[
								2517,
								2536
							],
							[
								2582,
								2597
							],
							[
								2690,
								2703
							],
							[
								2716,
								2732
							],
							[
								2748,
								2753
							],
							[
								2805,
								2818
							],
							[
								2844,
								2864
							],
							[
								3090,
								3099
							],
							[
								3226,
								3237
							],
							[
								3399,
								3419
							],
							[
								3522,
								3554
							],
							[
								3785,
								3820
							],
							[
								4175,
								4201
							],
							[
								4868,
								4877
							],
							[
								4957,
								4976
							],
							[
								5023,
								5027
							],
							[
								5060,
								5071
							],
							[
								5118,
								5136
							]
						],
						"symlist":
						[
							"indexOf = (haystack, needle) =>",
							"function define(obj, prop, value)",
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"EventEmitter",
							"constructor()",
							"on(event, listener)",
							"removeListener(event, listener)",
							"removeAllListeners(type)",
							"off(...args)",
							"emit(event, ...args)",
							"once(event, listener)",
							"callback = e =>",
							"iterator(type)",
							"async (push, stop) =>",
							"eventNames()",
							"listenerCount(type)",
							"listeners(type)",
							"next: type =>",
							"async resolve =>",
							" e =>",
							"waitFor(type)",
							"(resolve, reject) =>",
							"method =>",
							"EventTarget",
							"typedListeners(type)",
							"addEventListener(type, listener)",
							"removeEventListener(type, listener)",
							"dispatchEvent(type, event)",
							"method =>",
							"getMethods = obj =>",
							"n =>",
							"(acc, n) =>",
							"eventify = self =>"
						]
					},
					"AQAAAAAAAAAAAAAAwwEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					746,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/net/rpc.js",
						"symkeys":
						[
							[
								426,
								458
							],
							[
								515,
								533
							],
							[
								585,
								603
							],
							[
								638,
								658
							],
							[
								707,
								726
							],
							[
								732,
								741
							],
							[
								752,
								766
							],
							[
								795,
								816
							],
							[
								882,
								913
							],
							[
								971,
								986
							],
							[
								1058,
								1087
							],
							[
								1504,
								1508
							],
							[
								1537,
								1548
							],
							[
								1635,
								1674
							],
							[
								1887,
								1910
							],
							[
								1921,
								1924
							],
							[
								1941,
								1968
							],
							[
								2111,
								2117
							],
							[
								2132,
								2138
							],
							[
								2167,
								2173
							],
							[
								2213,
								2268
							],
							[
								2278,
								2288
							],
							[
								2305,
								2329
							],
							[
								2605,
								2623
							],
							[
								2638,
								2656
							],
							[
								2685,
								2703
							],
							[
								2755,
								2888
							],
							[
								2891,
								2926
							],
							[
								2939,
								2951
							],
							[
								3039,
								3053
							],
							[
								3236,
								3251
							],
							[
								3379,
								3393
							],
							[
								3517,
								3535
							],
							[
								3650,
								3663
							],
							[
								3841,
								3871
							],
							[
								3893,
								3911
							],
							[
								3925,
								3940
							],
							[
								3954,
								3972
							],
							[
								4053,
								4071
							],
							[
								4120,
								4127
							],
							[
								4188,
								4194
							],
							[
								4236,
								4248
							],
							[
								4258,
								4270
							],
							[
								4287,
								4308
							],
							[
								4350,
								4362
							],
							[
								4419,
								4431
							],
							[
								4494,
								4528
							],
							[
								4568,
								4580
							],
							[
								4649,
								4661
							],
							[
								4723,
								4748
							],
							[
								4791,
								4803
							],
							[
								4826,
								4838
							],
							[
								4874,
								4893
							],
							[
								5126,
								5132
							],
							[
								5174,
								5179
							],
							[
								5202,
								5223
							],
							[
								5341,
								5376
							],
							[
								5492,
								5496
							],
							[
								5523,
								5532
							],
							[
								5585,
								5610
							],
							[
								5615,
								5643
							],
							[
								5873,
								5882
							],
							[
								5983,
								5993
							],
							[
								6023,
								6033
							],
							[
								6127,
								6137
							],
							[
								6223,
								6241
							],
							[
								6366,
								6383
							],
							[
								6420,
								6429
							],
							[
								6466,
								6516
							],
							[
								6633,
								6645
							],
							[
								7119,
								7133
							],
							[
								7359,
								7373
							],
							[
								7545,
								7559
							],
							[
								8173,
								8177
							],
							[
								8271,
								8291
							],
							[
								8397,
								8412
							],
							[
								8590,
								8602
							],
							[
								8657,
								8671
							],
							[
								8796,
								8814
							],
							[
								8941,
								8950
							],
							[
								9040,
								9056
							],
							[
								9426,
								9459
							],
							[
								9975,
								10019
							],
							[
								10141,
								10154
							],
							[
								10224,
								10230
							],
							[
								10315,
								10349
							],
							[
								10605,
								10616
							],
							[
								10674,
								10690
							],
							[
								10771,
								10786
							],
							[
								11137,
								11149
							],
							[
								11367,
								11387
							],
							[
								11482,
								11502
							],
							[
								11666,
								11690
							],
							[
								11816,
								11834
							],
							[
								11939,
								11949
							],
							[
								12013,
								12023
							],
							[
								12084,
								12124
							],
							[
								12142,
								12173
							],
							[
								12503,
								12509
							],
							[
								12674,
								12694
							],
							[
								12790,
								12830
							],
							[
								13000,
								13009
							],
							[
								13039,
								13047
							],
							[
								13225,
								13265
							],
							[
								13364,
								13371
							],
							[
								13390,
								13397
							],
							[
								13482,
								13522
							],
							[
								13587,
								13594
							],
							[
								13672,
								13712
							],
							[
								13777,
								13784
							],
							[
								13824,
								13830
							],
							[
								13897,
								13901
							],
							[
								13956,
								13960
							],
							[
								14032,
								14063
							],
							[
								14326,
								14364
							],
							[
								14448,
								14457
							],
							[
								14933,
								14941
							],
							[
								14977,
								14997
							],
							[
								15578,
								15587
							],
							[
								15897,
								15906
							],
							[
								16306,
								16311
							],
							[
								16367,
								16372
							],
							[
								16471,
								16476
							],
							[
								16508,
								16532
							],
							[
								16785,
								16806
							],
							[
								16832,
								16851
							],
							[
								16881,
								16893
							],
							[
								16937,
								16942
							],
							[
								17016,
								17025
							],
							[
								17333,
								17393
							],
							[
								18000,
								18013
							],
							[
								18185,
								18193
							],
							[
								18311,
								18323
							],
							[
								18377,
								18393
							],
							[
								18716,
								18730
							],
							[
								18950,
								18984
							],
							[
								19283,
								19288
							],
							[
								19383,
								19424
							],
							[
								19718,
								19733
							],
							[
								20194,
								20204
							],
							[
								20241,
								20251
							],
							[
								20320,
								20329
							],
							[
								20387,
								20425
							],
							[
								20558,
								20576
							],
							[
								20606,
								20621
							],
							[
								20648,
								20667
							],
							[
								20702,
								20721
							],
							[
								20756,
								20773
							],
							[
								20806,
								20826
							],
							[
								20918,
								20945
							],
							[
								21044,
								21080
							],
							[
								21238,
								21284
							],
							[
								21383,
								21414
							],
							[
								21983,
								21993
							],
							[
								22127,
								22184
							],
							[
								22203,
								22261
							],
							[
								22580,
								22651
							],
							[
								22713,
								22720
							],
							[
								22811,
								22818
							],
							[
								22905,
								22987
							],
							[
								23534,
								23564
							],
							[
								23932,
								23967
							],
							[
								23980,
								24020
							],
							[
								24199,
								24255
							],
							[
								24484,
								24511
							],
							[
								24522,
								24537
							],
							[
								24550,
								24580
							],
							[
								24837,
								24939
							],
							[
								24965,
								24983
							],
							[
								25279,
								25302
							],
							[
								25410,
								25423
							],
							[
								26032,
								26065
							],
							[
								26134,
								26164
							],
							[
								26203,
								26207
							],
							[
								26294,
								26321
							],
							[
								26360,
								26368
							],
							[
								26448,
								26474
							],
							[
								26520,
								26549
							],
							[
								26606,
								26651
							],
							[
								26751,
								26756
							],
							[
								26856,
								26890
							],
							[
								27007,
								27067
							],
							[
								27286,
								27308
							],
							[
								27480,
								27502
							],
							[
								27600,
								27620
							],
							[
								27652,
								27657
							],
							[
								27786,
								27813
							],
							[
								28045,
								28092
							],
							[
								28910,
								28945
							],
							[
								28967,
								28971
							],
							[
								29003,
								29007
							],
							[
								29029,
								29061
							],
							[
								29195,
								29237
							],
							[
								29290,
								29331
							]
						],
						"symlist":
						[
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"VfnAdapter = vfn =>",
							"get: k =>",
							"set: (k, v) =>",
							"VfnDecorator = vfn =>",
							".memoize = function memoize(fn)",
							"(key, value) =>",
							"self = function(key, ...args)",
							"n =>",
							"(acc, n) =>",
							".GetClasses = function* GetClasses(obj)",
							" function Mapper(map = ",
							"())",
							"self = function(key, value)",
							"Mapper",
							"Mapper",
							"Mapper",
							" function DefaultConstructor(mapper, fn = (...args) => ",
							"(...args))",
							"self = function(...args)",
							"DefaultConstructor",
							"DefaultConstructor",
							"DefaultConstructor",
							" function EventLogger( instance = {}, callback = (name, event, thisObj) => console.log('EventLogger', { name, event, thisObj }) )",
							" function WrapEvent(handler, name)",
							" function(e)",
							"get(obj, prop)",
							"MessageReceiver",
							"onmessage(msg)",
							"MessageTransmitter",
							"sendMessage()",
							" function MessageTransceiver()",
							"MessageTransceiver",
							"MessageReceiver",
							"MessageTransmitter",
							"value: instance =>",
							"ctor =>",
							"none()",
							"encode: v =>",
							"decode: v =>",
							"json(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".js = function js(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".bjson = function bjson()",
							"encode: v =>",
							"decode: v =>",
							" function RPCApi(c)",
							"RPCApi",
							" o =>",
							" function RPCProxy(c)",
							" function RPCObject(id, connection)",
							"r =>",
							"RPCObject",
							" function RPCFactory(api)",
							"async function Factory(opts)",
							"RPCObject",
							"RPCFactory",
							"RPCFactory",
							"Connection",
							"static equal(a, b)",
							"static get last()",
							"makeSeq()",
							"constructor(socket, instance, log, codec = 'none')",
							"log(...args)",
							"error(message)",
							"close(...args)",
							"onmessage(msg)",
							"r =>",
							"processMessage(data)",
							"onconnect(sock)",
							"onpong(data)",
							"onerror(error)",
							"onclose(code, why)",
							"cleanup()",
							"sendMessage(obj)",
							"sendCommand(command, params = {})",
							"static getCallbacks(instance, verbosity = 0)",
							" (...args) =>",
							" () =>",
							"handle = (sock, event, ...args) =>",
							"then: fn =>",
							"remove = sock =>",
							"onConnect(sock)",
							"onOpen(sock)",
							"onMessage(sock, msg)",
							"onError(sock, error)",
							"onClose(sock, code, why)",
							"onPong(sock, data)",
							"Connection",
							"Connection",
							"function RPCServerEndpoint(classes = {})",
							"new({ class: name, args = [] })",
							"list()",
							"({ id }, respond) =>",
							"({ obj, method, args = [] }, respond) =>",
							"result =>",
							"error =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"sym =>",
							"v =>",
							"v =>",
							"({ obj, property }, respond) =>",
							"({ obj, property, value }, respond) =>",
							"RPCServer",
							"makeId()",
							"processMessage(data)",
							"RPCServer",
							"RPCClient",
							" e =>",
							" r =>",
							"() =>",
							"processMessage(response)",
							"command(name, params)",
							"(accept, reject) =>",
							" response =>",
							" e =>",
							"RPCClient",
							" function RPCSocket(url, service = RPCServer, verbosity = 1)",
							" (...args) =>",
							"get fd()",
							"get socket()",
							"get connection()",
							"register(ctor)",
							"listen(new_ws, os = globalThis.os)",
							"() =>",
							"async connect(new_ws, os = globalThis.os)",
							"get connected()",
							"get list()",
							"get last()",
							"RPCSocket",
							"function MakeWebSocket(url, callbacks)",
							".onconnect = () =>",
							".onopen = () =>",
							".onerror = error =>",
							".onmessage = msg =>",
							".onpong = pong =>",
							".onclose = reason =>",
							" function isThenable(value)",
							" function hasHandler(obj, eventName)",
							" function callHandler(obj, eventName, ...args)",
							" function parseURL(url_or_port)",
							"toString()",
							" function GetProperties( obj, method = obj => Object.",
							"(obj), pred = (obj, depth) => obj !== Object.prototype )",
							" function GetKeys(obj, pred = (obj, depth) => obj !== Object.prototype)",
							" obj =>",
							" obj =>",
							" function getPropertyDescriptors(obj, merge = true, pred = (proto, depth) => true)",
							" function define(obj, ...args)",
							" function setHandlers(os, handlers)",
							".onFd = function(fd, readable, writable)",
							" function statusResponse(success, result_or_error, data)",
							" function objectCommand(fn)",
							" function(data)",
							"respond = (success, result) =>",
							" function MakeListCommand( pred = v => typeof v != 'function', defaults = { maxDepth: Infinity } )",
							"(data, respond) =>",
							" (proto, depth) =>",
							"(acc, key) =>",
							" function getPrototypeName(proto)",
							"function DeserializeEntries(e)",
							"a =>",
							"function DeserializeKeys(e)",
							"([k]) =>",
							"function DeserializeMap(e)",
							"function DeserializeObject(e)",
							"function ForwardMethods(e, ret = {}, thisObj)",
							" o =>",
							"function ForwardObject(e, thisObj)",
							"function MakeCommandFunction(cmd, getConnection, thisObj, t)",
							"getConnection = obj =>",
							" function(params = {})",
							"(resolve, reject) =>",
							" r =>",
							"async function(params = {})",
							" function SerializeValue(value, source = false)",
							" function DeserializeSymbols(names)",
							"n =>",
							"n =>",
							" function DeserializeValue(desc)",
							"RPCConnect = (url, service = RPCClient) =>",
							"RPCListen = (url, service = RPCServer) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADDAQAAICBkZWZpbmUob2JqLCBwcm9wLCB2YWx1ZSkKICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQpFdmVudEVtaXR0ZXIKICBjb25zdHJ1Y3RvcigpCiAgb24oZXZlbnQsIGxpc3RlbmVyKQogIHJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcikKICByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkKICBvZmYoLi4uYXJncykKICBlbWl0KGV2ZW50LCAuLi5hcmdzKQogIG9uY2UoZXZlbnQsIGxpc3RlbmVyKQogIGl0ZXJhdG9yKHR5cGUpCiAgZXZlbnROYW1lcygpCiAgbGlzdGVuZXJDb3VudCh0eXBlKQogIGxpc3RlbmVycyh0eXBlKQogIHdhaXRGb3IodHlwZSkKRXZlbnRUYXJnZXQKICB0eXBlZExpc3RlbmVycyh0eXBlKQogIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpCiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikKICBkaXNwYXRjaEV2ZW50KHR5cGUsIGV2ZW50KQAAAAAAAAAA2QgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					747,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/events.js",
						"symkeys":
						[
							[
								62,
								93
							],
							[
								143,
								176
							],
							[
								336,
								368
							],
							[
								425,
								443
							],
							[
								495,
								513
							],
							[
								548,
								568
							],
							[
								617,
								629
							],
							[
								650,
								663
							],
							[
								744,
								763
							],
							[
								951,
								982
							],
							[
								1328,
								1352
							],
							[
								1495,
								1507
							],
							[
								1611,
								1631
							],
							[
								2034,
								2055
							],
							[
								2080,
								2095
							],
							[
								2216,
								2230
							],
							[
								2257,
								2278
							],
							[
								2459,
								2471
							],
							[
								2517,
								2536
							],
							[
								2582,
								2597
							],
							[
								2690,
								2703
							],
							[
								2716,
								2732
							],
							[
								2748,
								2753
							],
							[
								2805,
								2818
							],
							[
								2844,
								2864
							],
							[
								3090,
								3099
							],
							[
								3226,
								3237
							],
							[
								3399,
								3419
							],
							[
								3522,
								3554
							],
							[
								3785,
								3820
							],
							[
								4175,
								4201
							],
							[
								4868,
								4877
							],
							[
								4957,
								4976
							],
							[
								5023,
								5027
							],
							[
								5060,
								5071
							],
							[
								5118,
								5136
							]
						],
						"symlist":
						[
							"indexOf = (haystack, needle) =>",
							"function define(obj, prop, value)",
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"EventEmitter",
							"constructor()",
							"on(event, listener)",
							"removeListener(event, listener)",
							"removeAllListeners(type)",
							"off(...args)",
							"emit(event, ...args)",
							"once(event, listener)",
							"callback = e =>",
							"iterator(type)",
							"async (push, stop) =>",
							"eventNames()",
							"listenerCount(type)",
							"listeners(type)",
							"next: type =>",
							"async resolve =>",
							" e =>",
							"waitFor(type)",
							"(resolve, reject) =>",
							"method =>",
							"EventTarget",
							"typedListeners(type)",
							"addEventListener(type, listener)",
							"removeEventListener(type, listener)",
							"dispatchEvent(type, event)",
							"method =>",
							"getMethods = obj =>",
							"n =>",
							"(acc, n) =>",
							"eventify = self =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADZCAAAICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQogIC5tZW1vaXplID0gbWVtb2l6ZShmbikKICBzZWxmID0gKGtleSwgLi4uYXJncykKICAuR2V0Q2xhc3NlcyA9ICpHZXRDbGFzc2VzKG9iaikKTWFwcGVyKG1hcCA9IAogIHNlbGYgPSAoa2V5LCB2YWx1ZSkKTWFwcGVyCk1hcHBlcgpNYXBwZXIKICBzZWxmID0gKC4uLmFyZ3MpCkRlZmF1bHRDb25zdHJ1Y3RvcgpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCldyYXBFdmVudChoYW5kbGVyLCBuYW1lKQoJKGUpCiAgZ2V0KG9iaiwgcHJvcCkKTWVzc2FnZVJlY2VpdmVyCiAgb25tZXNzYWdlKG1zZykKTWVzc2FnZVRyYW5zbWl0dGVyCiAgc2VuZE1lc3NhZ2UoKQpNZXNzYWdlVHJhbnNjZWl2ZXIoKQpNZXNzYWdlVHJhbnNjZWl2ZXIKTWVzc2FnZVJlY2VpdmVyCk1lc3NhZ2VUcmFuc21pdHRlcgogIG5vbmUoKQogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIC5qcyA9IGpzKHZlcmJvc2UgPSBmYWxzZSkKICAuYmpzb24gPSBianNvbigpClJQQ0FwaShjKQpSUENBcGkKUlBDUHJveHkoYykKUlBDT2JqZWN0KGlkLCBjb25uZWN0aW9uKQpSUENPYmplY3QKUlBDRmFjdG9yeShhcGkpCkZhY3Rvcnkob3B0cykKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkKUlBDRmFjdG9yeQpDb25uZWN0aW9uCiAgc3RhdGljIGVxdWFsKGEsIGIpCiAgc3RhdGljIGdldCBsYXN0KCkKICBtYWtlU2VxKCkKICBjb25zdHJ1Y3Rvcihzb2NrZXQsIGluc3RhbmNlLCBsb2csIGNvZGVjID0gJ25vbmUnKQogIGxvZyguLi5hcmdzKQogIGVycm9yKG1lc3NhZ2UpCiAgY2xvc2UoLi4uYXJncykKICBvbm1lc3NhZ2UobXNnKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICBvbkNvbm5lY3Qoc29jaykKICBvbk9wZW4oc29jaykKICBvbk1lc3NhZ2Uoc29jaywgbXNnKQogIG9uRXJyb3Ioc29jaywgZXJyb3IpCiAgb25DbG9zZShzb2NrLCBjb2RlLCB3aHkpCiAgb25Qb25nKHNvY2ssIGRhdGEpCkNvbm5lY3Rpb24KQ29ubmVjdGlvbgpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQpSUENTZXJ2ZXIKICBtYWtlSWQoKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpClJQQ1NlcnZlcgpSUENDbGllbnQKICBwcm9jZXNzTWVzc2FnZShyZXNwb25zZSkKICBjb21tYW5kKG5hbWUsIHBhcmFtcykKUlBDQ2xpZW50ClJQQ1NvY2tldCh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIsIHZlcmJvc2l0eSA9IDEpCiAgZ2V0IGZkKCkKICBnZXQgc29ja2V0KCkKICBnZXQgY29ubmVjdGlvbigpCiAgcmVnaXN0ZXIoY3RvcikKICBsaXN0ZW4obmV3X3dzLCBvcyA9IGdsb2JhbFRoaXMub3MpCiAgY29ubmVjdChuZXdfd3MsIG9zID0gZ2xvYmFsVGhpcy5vcykKICBnZXQgY29ubmVjdGVkKCkKICBnZXQgbGlzdCgpCiAgZ2V0IGxhc3QoKQpSUENTb2NrZXQKTWFrZVdlYlNvY2tldCh1cmwsIGNhbGxiYWNrcykKCWlzVGhlbmFibGUodmFsdWUpCgloYXNIYW5kbGVyKG9iaiwgZXZlbnROYW1lKQoJY2FsbEhhbmRsZXIob2JqLCBldmVudE5hbWUsIC4uLmFyZ3MpCglwYXJzZVVSTCh1cmxfb3JfcG9ydCkKICB0b1N0cmluZygpCglkZWZpbmUob2JqLCAuLi5hcmdzKQoJc2V0SGFuZGxlcnMob3MsIGhhbmRsZXJzKQogIC5vbkZkID0gKGZkLCByZWFkYWJsZSwgd3JpdGFibGUpCglzdGF0dXNSZXNwb25zZShzdWNjZXNzLCByZXN1bHRfb3JfZXJyb3IsIGRhdGEpCglvYmplY3RDb21tYW5kKGZuKQoJKGRhdGEpCglnZXRQcm90b3R5cGVOYW1lKHByb3RvKQpEZXNlcmlhbGl6ZUVudHJpZXMoZSkKRGVzZXJpYWxpemVLZXlzKGUpCkRlc2VyaWFsaXplTWFwKGUpCkRlc2VyaWFsaXplT2JqZWN0KGUpCkZvcndhcmRNZXRob2RzKGUsIHJldCA9IHt9LCB0aGlzT2JqKQpGb3J3YXJkT2JqZWN0KGUsIHRoaXNPYmopCk1ha2VDb21tYW5kRnVuY3Rpb24oY21kLCBnZXRDb25uZWN0aW9uLCB0aGlzT2JqLCB0KQoJKHBhcmFtcyA9IHt9KQoocGFyYW1zID0ge30pClNlcmlhbGl6ZVZhbHVlKHZhbHVlLCBzb3VyY2UgPSBmYWxzZSkKRGVzZXJpYWxpemVTeW1ib2xzKG5hbWVzKQpEZXNlcmlhbGl6ZVZhbHVlKGRlc2MpAAAAAAAAAADDAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					748,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/net/rpc.js",
						"symkeys":
						[
							[
								426,
								458
							],
							[
								515,
								533
							],
							[
								585,
								603
							],
							[
								638,
								658
							],
							[
								707,
								726
							],
							[
								732,
								741
							],
							[
								752,
								766
							],
							[
								795,
								816
							],
							[
								882,
								913
							],
							[
								971,
								986
							],
							[
								1058,
								1087
							],
							[
								1504,
								1508
							],
							[
								1537,
								1548
							],
							[
								1635,
								1674
							],
							[
								1887,
								1910
							],
							[
								1921,
								1924
							],
							[
								1941,
								1968
							],
							[
								2111,
								2117
							],
							[
								2132,
								2138
							],
							[
								2167,
								2173
							],
							[
								2213,
								2268
							],
							[
								2278,
								2288
							],
							[
								2305,
								2329
							],
							[
								2605,
								2623
							],
							[
								2638,
								2656
							],
							[
								2685,
								2703
							],
							[
								2755,
								2888
							],
							[
								2891,
								2926
							],
							[
								2939,
								2951
							],
							[
								3039,
								3053
							],
							[
								3236,
								3251
							],
							[
								3379,
								3393
							],
							[
								3517,
								3535
							],
							[
								3650,
								3663
							],
							[
								3841,
								3871
							],
							[
								3893,
								3911
							],
							[
								3925,
								3940
							],
							[
								3954,
								3972
							],
							[
								4053,
								4071
							],
							[
								4120,
								4127
							],
							[
								4188,
								4194
							],
							[
								4236,
								4248
							],
							[
								4258,
								4270
							],
							[
								4287,
								4308
							],
							[
								4350,
								4362
							],
							[
								4419,
								4431
							],
							[
								4494,
								4528
							],
							[
								4568,
								4580
							],
							[
								4649,
								4661
							],
							[
								4723,
								4748
							],
							[
								4791,
								4803
							],
							[
								4826,
								4838
							],
							[
								4874,
								4893
							],
							[
								5126,
								5132
							],
							[
								5174,
								5179
							],
							[
								5202,
								5223
							],
							[
								5341,
								5376
							],
							[
								5492,
								5496
							],
							[
								5523,
								5532
							],
							[
								5585,
								5610
							],
							[
								5615,
								5643
							],
							[
								5873,
								5882
							],
							[
								5983,
								5993
							],
							[
								6023,
								6033
							],
							[
								6127,
								6137
							],
							[
								6223,
								6241
							],
							[
								6366,
								6383
							],
							[
								6420,
								6429
							],
							[
								6466,
								6516
							],
							[
								6633,
								6645
							],
							[
								7119,
								7133
							],
							[
								7359,
								7373
							],
							[
								7545,
								7559
							],
							[
								8173,
								8177
							],
							[
								8271,
								8291
							],
							[
								8397,
								8412
							],
							[
								8590,
								8602
							],
							[
								8657,
								8671
							],
							[
								8796,
								8814
							],
							[
								8941,
								8950
							],
							[
								9040,
								9056
							],
							[
								9426,
								9459
							],
							[
								9975,
								10019
							],
							[
								10141,
								10154
							],
							[
								10224,
								10230
							],
							[
								10315,
								10349
							],
							[
								10605,
								10616
							],
							[
								10674,
								10690
							],
							[
								10771,
								10786
							],
							[
								11137,
								11149
							],
							[
								11367,
								11387
							],
							[
								11482,
								11502
							],
							[
								11666,
								11690
							],
							[
								11816,
								11834
							],
							[
								11939,
								11949
							],
							[
								12013,
								12023
							],
							[
								12084,
								12124
							],
							[
								12142,
								12173
							],
							[
								12503,
								12509
							],
							[
								12674,
								12694
							],
							[
								12790,
								12830
							],
							[
								13000,
								13009
							],
							[
								13039,
								13047
							],
							[
								13225,
								13265
							],
							[
								13364,
								13371
							],
							[
								13390,
								13397
							],
							[
								13482,
								13522
							],
							[
								13587,
								13594
							],
							[
								13672,
								13712
							],
							[
								13777,
								13784
							],
							[
								13824,
								13830
							],
							[
								13897,
								13901
							],
							[
								13956,
								13960
							],
							[
								14032,
								14063
							],
							[
								14326,
								14364
							],
							[
								14448,
								14457
							],
							[
								14933,
								14941
							],
							[
								14977,
								14997
							],
							[
								15578,
								15587
							],
							[
								15897,
								15906
							],
							[
								16306,
								16311
							],
							[
								16367,
								16372
							],
							[
								16471,
								16476
							],
							[
								16508,
								16532
							],
							[
								16785,
								16806
							],
							[
								16832,
								16851
							],
							[
								16881,
								16893
							],
							[
								16937,
								16942
							],
							[
								17016,
								17025
							],
							[
								17333,
								17393
							],
							[
								18000,
								18013
							],
							[
								18185,
								18193
							],
							[
								18311,
								18323
							],
							[
								18377,
								18393
							],
							[
								18716,
								18730
							],
							[
								18950,
								18984
							],
							[
								19283,
								19288
							],
							[
								19383,
								19424
							],
							[
								19718,
								19733
							],
							[
								20194,
								20204
							],
							[
								20241,
								20251
							],
							[
								20320,
								20329
							],
							[
								20387,
								20425
							],
							[
								20558,
								20576
							],
							[
								20606,
								20621
							],
							[
								20648,
								20667
							],
							[
								20702,
								20721
							],
							[
								20756,
								20773
							],
							[
								20806,
								20826
							],
							[
								20918,
								20945
							],
							[
								21044,
								21080
							],
							[
								21238,
								21284
							],
							[
								21383,
								21414
							],
							[
								21983,
								21993
							],
							[
								22127,
								22184
							],
							[
								22203,
								22261
							],
							[
								22580,
								22651
							],
							[
								22713,
								22720
							],
							[
								22811,
								22818
							],
							[
								22905,
								22987
							],
							[
								23534,
								23564
							],
							[
								23932,
								23967
							],
							[
								23980,
								24020
							],
							[
								24199,
								24255
							],
							[
								24484,
								24511
							],
							[
								24522,
								24537
							],
							[
								24550,
								24580
							],
							[
								24837,
								24939
							],
							[
								24965,
								24983
							],
							[
								25279,
								25302
							],
							[
								25410,
								25423
							],
							[
								26032,
								26065
							],
							[
								26134,
								26164
							],
							[
								26203,
								26207
							],
							[
								26294,
								26321
							],
							[
								26360,
								26368
							],
							[
								26448,
								26474
							],
							[
								26520,
								26549
							],
							[
								26606,
								26651
							],
							[
								26751,
								26756
							],
							[
								26856,
								26890
							],
							[
								27007,
								27067
							],
							[
								27286,
								27308
							],
							[
								27480,
								27502
							],
							[
								27600,
								27620
							],
							[
								27652,
								27657
							],
							[
								27786,
								27813
							],
							[
								28045,
								28092
							],
							[
								28910,
								28945
							],
							[
								28967,
								28971
							],
							[
								29003,
								29007
							],
							[
								29029,
								29061
							],
							[
								29195,
								29237
							],
							[
								29290,
								29331
							]
						],
						"symlist":
						[
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"VfnAdapter = vfn =>",
							"get: k =>",
							"set: (k, v) =>",
							"VfnDecorator = vfn =>",
							".memoize = function memoize(fn)",
							"(key, value) =>",
							"self = function(key, ...args)",
							"n =>",
							"(acc, n) =>",
							".GetClasses = function* GetClasses(obj)",
							" function Mapper(map = ",
							"())",
							"self = function(key, value)",
							"Mapper",
							"Mapper",
							"Mapper",
							" function DefaultConstructor(mapper, fn = (...args) => ",
							"(...args))",
							"self = function(...args)",
							"DefaultConstructor",
							"DefaultConstructor",
							"DefaultConstructor",
							" function EventLogger( instance = {}, callback = (name, event, thisObj) => console.log('EventLogger', { name, event, thisObj }) )",
							" function WrapEvent(handler, name)",
							" function(e)",
							"get(obj, prop)",
							"MessageReceiver",
							"onmessage(msg)",
							"MessageTransmitter",
							"sendMessage()",
							" function MessageTransceiver()",
							"MessageTransceiver",
							"MessageReceiver",
							"MessageTransmitter",
							"value: instance =>",
							"ctor =>",
							"none()",
							"encode: v =>",
							"decode: v =>",
							"json(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".js = function js(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".bjson = function bjson()",
							"encode: v =>",
							"decode: v =>",
							" function RPCApi(c)",
							"RPCApi",
							" o =>",
							" function RPCProxy(c)",
							" function RPCObject(id, connection)",
							"r =>",
							"RPCObject",
							" function RPCFactory(api)",
							"async function Factory(opts)",
							"RPCObject",
							"RPCFactory",
							"RPCFactory",
							"Connection",
							"static equal(a, b)",
							"static get last()",
							"makeSeq()",
							"constructor(socket, instance, log, codec = 'none')",
							"log(...args)",
							"error(message)",
							"close(...args)",
							"onmessage(msg)",
							"r =>",
							"processMessage(data)",
							"onconnect(sock)",
							"onpong(data)",
							"onerror(error)",
							"onclose(code, why)",
							"cleanup()",
							"sendMessage(obj)",
							"sendCommand(command, params = {})",
							"static getCallbacks(instance, verbosity = 0)",
							" (...args) =>",
							" () =>",
							"handle = (sock, event, ...args) =>",
							"then: fn =>",
							"remove = sock =>",
							"onConnect(sock)",
							"onOpen(sock)",
							"onMessage(sock, msg)",
							"onError(sock, error)",
							"onClose(sock, code, why)",
							"onPong(sock, data)",
							"Connection",
							"Connection",
							"function RPCServerEndpoint(classes = {})",
							"new({ class: name, args = [] })",
							"list()",
							"({ id }, respond) =>",
							"({ obj, method, args = [] }, respond) =>",
							"result =>",
							"error =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"sym =>",
							"v =>",
							"v =>",
							"({ obj, property }, respond) =>",
							"({ obj, property, value }, respond) =>",
							"RPCServer",
							"makeId()",
							"processMessage(data)",
							"RPCServer",
							"RPCClient",
							" e =>",
							" r =>",
							"() =>",
							"processMessage(response)",
							"command(name, params)",
							"(accept, reject) =>",
							" response =>",
							" e =>",
							"RPCClient",
							" function RPCSocket(url, service = RPCServer, verbosity = 1)",
							" (...args) =>",
							"get fd()",
							"get socket()",
							"get connection()",
							"register(ctor)",
							"listen(new_ws, os = globalThis.os)",
							"() =>",
							"async connect(new_ws, os = globalThis.os)",
							"get connected()",
							"get list()",
							"get last()",
							"RPCSocket",
							"function MakeWebSocket(url, callbacks)",
							".onconnect = () =>",
							".onopen = () =>",
							".onerror = error =>",
							".onmessage = msg =>",
							".onpong = pong =>",
							".onclose = reason =>",
							" function isThenable(value)",
							" function hasHandler(obj, eventName)",
							" function callHandler(obj, eventName, ...args)",
							" function parseURL(url_or_port)",
							"toString()",
							" function GetProperties( obj, method = obj => Object.",
							"(obj), pred = (obj, depth) => obj !== Object.prototype )",
							" function GetKeys(obj, pred = (obj, depth) => obj !== Object.prototype)",
							" obj =>",
							" obj =>",
							" function getPropertyDescriptors(obj, merge = true, pred = (proto, depth) => true)",
							" function define(obj, ...args)",
							" function setHandlers(os, handlers)",
							".onFd = function(fd, readable, writable)",
							" function statusResponse(success, result_or_error, data)",
							" function objectCommand(fn)",
							" function(data)",
							"respond = (success, result) =>",
							" function MakeListCommand( pred = v => typeof v != 'function', defaults = { maxDepth: Infinity } )",
							"(data, respond) =>",
							" (proto, depth) =>",
							"(acc, key) =>",
							" function getPrototypeName(proto)",
							"function DeserializeEntries(e)",
							"a =>",
							"function DeserializeKeys(e)",
							"([k]) =>",
							"function DeserializeMap(e)",
							"function DeserializeObject(e)",
							"function ForwardMethods(e, ret = {}, thisObj)",
							" o =>",
							"function ForwardObject(e, thisObj)",
							"function MakeCommandFunction(cmd, getConnection, thisObj, t)",
							"getConnection = obj =>",
							" function(params = {})",
							"(resolve, reject) =>",
							" r =>",
							"async function(params = {})",
							" function SerializeValue(value, source = false)",
							" function DeserializeSymbols(names)",
							"n =>",
							"n =>",
							" function DeserializeValue(desc)",
							"RPCConnect = (url, service = RPCClient) =>",
							"RPCListen = (url, service = RPCServer) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADDAQAAICBkZWZpbmUob2JqLCBwcm9wLCB2YWx1ZSkKICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQpFdmVudEVtaXR0ZXIKICBjb25zdHJ1Y3RvcigpCiAgb24oZXZlbnQsIGxpc3RlbmVyKQogIHJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcikKICByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkKICBvZmYoLi4uYXJncykKICBlbWl0KGV2ZW50LCAuLi5hcmdzKQogIG9uY2UoZXZlbnQsIGxpc3RlbmVyKQogIGl0ZXJhdG9yKHR5cGUpCiAgZXZlbnROYW1lcygpCiAgbGlzdGVuZXJDb3VudCh0eXBlKQogIGxpc3RlbmVycyh0eXBlKQogIHdhaXRGb3IodHlwZSkKRXZlbnRUYXJnZXQKICB0eXBlZExpc3RlbmVycyh0eXBlKQogIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpCiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikKICBkaXNwYXRjaEV2ZW50KHR5cGUsIGV2ZW50KQAAAAAAAAAA2QgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					753,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/net/rpc.js",
						"symkeys":
						[
							[
								426,
								458
							],
							[
								515,
								533
							],
							[
								585,
								603
							],
							[
								638,
								658
							],
							[
								707,
								726
							],
							[
								732,
								741
							],
							[
								752,
								766
							],
							[
								795,
								816
							],
							[
								882,
								913
							],
							[
								971,
								986
							],
							[
								1058,
								1087
							],
							[
								1504,
								1508
							],
							[
								1537,
								1548
							],
							[
								1635,
								1674
							],
							[
								1887,
								1910
							],
							[
								1921,
								1924
							],
							[
								1941,
								1968
							],
							[
								2111,
								2117
							],
							[
								2132,
								2138
							],
							[
								2167,
								2173
							],
							[
								2213,
								2268
							],
							[
								2278,
								2288
							],
							[
								2305,
								2329
							],
							[
								2605,
								2623
							],
							[
								2638,
								2656
							],
							[
								2685,
								2703
							],
							[
								2755,
								2888
							],
							[
								2891,
								2926
							],
							[
								2939,
								2951
							],
							[
								3039,
								3053
							],
							[
								3236,
								3251
							],
							[
								3379,
								3393
							],
							[
								3517,
								3535
							],
							[
								3650,
								3663
							],
							[
								3841,
								3871
							],
							[
								3893,
								3911
							],
							[
								3925,
								3940
							],
							[
								3954,
								3972
							],
							[
								4053,
								4071
							],
							[
								4120,
								4127
							],
							[
								4188,
								4194
							],
							[
								4236,
								4248
							],
							[
								4258,
								4270
							],
							[
								4287,
								4308
							],
							[
								4350,
								4362
							],
							[
								4419,
								4431
							],
							[
								4494,
								4528
							],
							[
								4568,
								4580
							],
							[
								4649,
								4661
							],
							[
								4723,
								4748
							],
							[
								4791,
								4803
							],
							[
								4826,
								4838
							],
							[
								4874,
								4893
							],
							[
								5126,
								5132
							],
							[
								5174,
								5179
							],
							[
								5202,
								5223
							],
							[
								5341,
								5376
							],
							[
								5492,
								5496
							],
							[
								5523,
								5532
							],
							[
								5585,
								5610
							],
							[
								5615,
								5643
							],
							[
								5873,
								5882
							],
							[
								5983,
								5993
							],
							[
								6023,
								6033
							],
							[
								6127,
								6137
							],
							[
								6223,
								6241
							],
							[
								6366,
								6383
							],
							[
								6420,
								6429
							],
							[
								6466,
								6516
							],
							[
								6633,
								6645
							],
							[
								7119,
								7133
							],
							[
								7359,
								7373
							],
							[
								7545,
								7559
							],
							[
								8173,
								8177
							],
							[
								8271,
								8291
							],
							[
								8397,
								8412
							],
							[
								8590,
								8602
							],
							[
								8657,
								8671
							],
							[
								8796,
								8814
							],
							[
								8941,
								8950
							],
							[
								9040,
								9056
							],
							[
								9426,
								9459
							],
							[
								9975,
								10019
							],
							[
								10141,
								10154
							],
							[
								10224,
								10230
							],
							[
								10315,
								10349
							],
							[
								10605,
								10616
							],
							[
								10674,
								10690
							],
							[
								10771,
								10786
							],
							[
								11137,
								11149
							],
							[
								11367,
								11387
							],
							[
								11482,
								11502
							],
							[
								11666,
								11690
							],
							[
								11816,
								11834
							],
							[
								11939,
								11949
							],
							[
								12013,
								12023
							],
							[
								12084,
								12124
							],
							[
								12142,
								12173
							],
							[
								12503,
								12509
							],
							[
								12674,
								12694
							],
							[
								12790,
								12830
							],
							[
								13000,
								13009
							],
							[
								13039,
								13047
							],
							[
								13225,
								13265
							],
							[
								13364,
								13371
							],
							[
								13390,
								13397
							],
							[
								13482,
								13522
							],
							[
								13587,
								13594
							],
							[
								13672,
								13712
							],
							[
								13777,
								13784
							],
							[
								13824,
								13830
							],
							[
								13897,
								13901
							],
							[
								13956,
								13960
							],
							[
								14032,
								14063
							],
							[
								14326,
								14364
							],
							[
								14448,
								14457
							],
							[
								14933,
								14941
							],
							[
								14977,
								14997
							],
							[
								15578,
								15587
							],
							[
								15897,
								15906
							],
							[
								16306,
								16311
							],
							[
								16473,
								16478
							],
							[
								16510,
								16534
							],
							[
								16787,
								16808
							],
							[
								16834,
								16853
							],
							[
								16883,
								16895
							],
							[
								16939,
								16944
							],
							[
								17018,
								17027
							],
							[
								17335,
								17395
							],
							[
								18002,
								18015
							],
							[
								18187,
								18195
							],
							[
								18313,
								18325
							],
							[
								18379,
								18395
							],
							[
								18718,
								18732
							],
							[
								18952,
								18986
							],
							[
								19285,
								19290
							],
							[
								19385,
								19426
							],
							[
								19720,
								19735
							],
							[
								20196,
								20206
							],
							[
								20243,
								20253
							],
							[
								20322,
								20331
							],
							[
								20389,
								20427
							],
							[
								20560,
								20578
							],
							[
								20608,
								20623
							],
							[
								20650,
								20669
							],
							[
								20704,
								20723
							],
							[
								20758,
								20775
							],
							[
								20808,
								20828
							],
							[
								20920,
								20947
							],
							[
								21046,
								21082
							],
							[
								21240,
								21286
							],
							[
								21385,
								21416
							],
							[
								21985,
								21995
							],
							[
								22129,
								22186
							],
							[
								22205,
								22263
							],
							[
								22582,
								22653
							],
							[
								22715,
								22722
							],
							[
								22813,
								22820
							],
							[
								22907,
								22989
							],
							[
								23536,
								23566
							],
							[
								23934,
								23969
							],
							[
								23982,
								24022
							],
							[
								24201,
								24257
							],
							[
								24486,
								24513
							],
							[
								24524,
								24539
							],
							[
								24552,
								24582
							],
							[
								24839,
								24941
							],
							[
								24967,
								24985
							],
							[
								25281,
								25304
							],
							[
								25412,
								25425
							],
							[
								26034,
								26067
							],
							[
								26136,
								26166
							],
							[
								26205,
								26209
							],
							[
								26296,
								26323
							],
							[
								26362,
								26370
							],
							[
								26450,
								26476
							],
							[
								26522,
								26551
							],
							[
								26608,
								26653
							],
							[
								26753,
								26758
							],
							[
								26858,
								26892
							],
							[
								27009,
								27069
							],
							[
								27288,
								27310
							],
							[
								27482,
								27504
							],
							[
								27602,
								27622
							],
							[
								27654,
								27659
							],
							[
								27788,
								27815
							],
							[
								28047,
								28094
							],
							[
								28912,
								28947
							],
							[
								28969,
								28973
							],
							[
								29005,
								29009
							],
							[
								29031,
								29063
							],
							[
								29197,
								29239
							],
							[
								29292,
								29333
							]
						],
						"symlist":
						[
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"VfnAdapter = vfn =>",
							"get: k =>",
							"set: (k, v) =>",
							"VfnDecorator = vfn =>",
							".memoize = function memoize(fn)",
							"(key, value) =>",
							"self = function(key, ...args)",
							"n =>",
							"(acc, n) =>",
							".GetClasses = function* GetClasses(obj)",
							" function Mapper(map = ",
							"())",
							"self = function(key, value)",
							"Mapper",
							"Mapper",
							"Mapper",
							" function DefaultConstructor(mapper, fn = (...args) => ",
							"(...args))",
							"self = function(...args)",
							"DefaultConstructor",
							"DefaultConstructor",
							"DefaultConstructor",
							" function EventLogger( instance = {}, callback = (name, event, thisObj) => console.log('EventLogger', { name, event, thisObj }) )",
							" function WrapEvent(handler, name)",
							" function(e)",
							"get(obj, prop)",
							"MessageReceiver",
							"onmessage(msg)",
							"MessageTransmitter",
							"sendMessage()",
							" function MessageTransceiver()",
							"MessageTransceiver",
							"MessageReceiver",
							"MessageTransmitter",
							"value: instance =>",
							"ctor =>",
							"none()",
							"encode: v =>",
							"decode: v =>",
							"json(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".js = function js(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".bjson = function bjson()",
							"encode: v =>",
							"decode: v =>",
							" function RPCApi(c)",
							"RPCApi",
							" o =>",
							" function RPCProxy(c)",
							" function RPCObject(id, connection)",
							"r =>",
							"RPCObject",
							" function RPCFactory(api)",
							"async function Factory(opts)",
							"RPCObject",
							"RPCFactory",
							"RPCFactory",
							"Connection",
							"static equal(a, b)",
							"static get last()",
							"makeSeq()",
							"constructor(socket, instance, log, codec = 'none')",
							"log(...args)",
							"error(message)",
							"close(...args)",
							"onmessage(msg)",
							"r =>",
							"processMessage(data)",
							"onconnect(sock)",
							"onpong(data)",
							"onerror(error)",
							"onclose(code, why)",
							"cleanup()",
							"sendMessage(obj)",
							"sendCommand(command, params = {})",
							"static getCallbacks(instance, verbosity = 0)",
							" (...args) =>",
							" () =>",
							"handle = (sock, event, ...args) =>",
							"then: fn =>",
							"remove = sock =>",
							"onConnect(sock)",
							"onOpen(sock)",
							"onMessage(sock, msg)",
							"onError(sock, error)",
							"onClose(sock, code, why)",
							"onPong(sock, data)",
							"Connection",
							"Connection",
							"function RPCServerEndpoint(classes = {})",
							"new({ class: name, args = [] })",
							"list()",
							"({ id }, respond) =>",
							"({ obj, method, args = [] }, respond) =>",
							"result =>",
							"error =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"sym =>",
							"v =>",
							"v =>",
							"({ obj, property }, respond) =>",
							"({ obj, property, value }, respond) =>",
							"RPCServer",
							"makeId()",
							"processMessage(data)",
							"RPCServer",
							"RPCClient",
							" e =>",
							"() =>",
							"processMessage(response)",
							"command(name, params)",
							"(accept, reject) =>",
							" response =>",
							" e =>",
							"RPCClient",
							" function RPCSocket(url, service = RPCServer, verbosity = 1)",
							" (...args) =>",
							"get fd()",
							"get socket()",
							"get connection()",
							"register(ctor)",
							"listen(new_ws, os = globalThis.os)",
							"() =>",
							"async connect(new_ws, os = globalThis.os)",
							"get connected()",
							"get list()",
							"get last()",
							"RPCSocket",
							"function MakeWebSocket(url, callbacks)",
							".onconnect = () =>",
							".onopen = () =>",
							".onerror = error =>",
							".onmessage = msg =>",
							".onpong = pong =>",
							".onclose = reason =>",
							" function isThenable(value)",
							" function hasHandler(obj, eventName)",
							" function callHandler(obj, eventName, ...args)",
							" function parseURL(url_or_port)",
							"toString()",
							" function GetProperties( obj, method = obj => Object.",
							"(obj), pred = (obj, depth) => obj !== Object.prototype )",
							" function GetKeys(obj, pred = (obj, depth) => obj !== Object.prototype)",
							" obj =>",
							" obj =>",
							" function getPropertyDescriptors(obj, merge = true, pred = (proto, depth) => true)",
							" function define(obj, ...args)",
							" function setHandlers(os, handlers)",
							".onFd = function(fd, readable, writable)",
							" function statusResponse(success, result_or_error, data)",
							" function objectCommand(fn)",
							" function(data)",
							"respond = (success, result) =>",
							" function MakeListCommand( pred = v => typeof v != 'function', defaults = { maxDepth: Infinity } )",
							"(data, respond) =>",
							" (proto, depth) =>",
							"(acc, key) =>",
							" function getPrototypeName(proto)",
							"function DeserializeEntries(e)",
							"a =>",
							"function DeserializeKeys(e)",
							"([k]) =>",
							"function DeserializeMap(e)",
							"function DeserializeObject(e)",
							"function ForwardMethods(e, ret = {}, thisObj)",
							" o =>",
							"function ForwardObject(e, thisObj)",
							"function MakeCommandFunction(cmd, getConnection, thisObj, t)",
							"getConnection = obj =>",
							" function(params = {})",
							"(resolve, reject) =>",
							" r =>",
							"async function(params = {})",
							" function SerializeValue(value, source = false)",
							" function DeserializeSymbols(names)",
							"n =>",
							"n =>",
							" function DeserializeValue(desc)",
							"RPCConnect = (url, service = RPCClient) =>",
							"RPCListen = (url, service = RPCServer) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADZCAAAICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQogIC5tZW1vaXplID0gbWVtb2l6ZShmbikKICBzZWxmID0gKGtleSwgLi4uYXJncykKICAuR2V0Q2xhc3NlcyA9ICpHZXRDbGFzc2VzKG9iaikKTWFwcGVyKG1hcCA9IAogIHNlbGYgPSAoa2V5LCB2YWx1ZSkKTWFwcGVyCk1hcHBlcgpNYXBwZXIKICBzZWxmID0gKC4uLmFyZ3MpCkRlZmF1bHRDb25zdHJ1Y3RvcgpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCldyYXBFdmVudChoYW5kbGVyLCBuYW1lKQoJKGUpCiAgZ2V0KG9iaiwgcHJvcCkKTWVzc2FnZVJlY2VpdmVyCiAgb25tZXNzYWdlKG1zZykKTWVzc2FnZVRyYW5zbWl0dGVyCiAgc2VuZE1lc3NhZ2UoKQpNZXNzYWdlVHJhbnNjZWl2ZXIoKQpNZXNzYWdlVHJhbnNjZWl2ZXIKTWVzc2FnZVJlY2VpdmVyCk1lc3NhZ2VUcmFuc21pdHRlcgogIG5vbmUoKQogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIC5qcyA9IGpzKHZlcmJvc2UgPSBmYWxzZSkKICAuYmpzb24gPSBianNvbigpClJQQ0FwaShjKQpSUENBcGkKUlBDUHJveHkoYykKUlBDT2JqZWN0KGlkLCBjb25uZWN0aW9uKQpSUENPYmplY3QKUlBDRmFjdG9yeShhcGkpCkZhY3Rvcnkob3B0cykKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkKUlBDRmFjdG9yeQpDb25uZWN0aW9uCiAgc3RhdGljIGVxdWFsKGEsIGIpCiAgc3RhdGljIGdldCBsYXN0KCkKICBtYWtlU2VxKCkKICBjb25zdHJ1Y3Rvcihzb2NrZXQsIGluc3RhbmNlLCBsb2csIGNvZGVjID0gJ25vbmUnKQogIGxvZyguLi5hcmdzKQogIGVycm9yKG1lc3NhZ2UpCiAgY2xvc2UoLi4uYXJncykKICBvbm1lc3NhZ2UobXNnKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICBvbkNvbm5lY3Qoc29jaykKICBvbk9wZW4oc29jaykKICBvbk1lc3NhZ2Uoc29jaywgbXNnKQogIG9uRXJyb3Ioc29jaywgZXJyb3IpCiAgb25DbG9zZShzb2NrLCBjb2RlLCB3aHkpCiAgb25Qb25nKHNvY2ssIGRhdGEpCkNvbm5lY3Rpb24KQ29ubmVjdGlvbgpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQpSUENTZXJ2ZXIKICBtYWtlSWQoKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpClJQQ1NlcnZlcgpSUENDbGllbnQKICBwcm9jZXNzTWVzc2FnZShyZXNwb25zZSkKICBjb21tYW5kKG5hbWUsIHBhcmFtcykKUlBDQ2xpZW50ClJQQ1NvY2tldCh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIsIHZlcmJvc2l0eSA9IDEpCiAgZ2V0IGZkKCkKICBnZXQgc29ja2V0KCkKICBnZXQgY29ubmVjdGlvbigpCiAgcmVnaXN0ZXIoY3RvcikKICBsaXN0ZW4obmV3X3dzLCBvcyA9IGdsb2JhbFRoaXMub3MpCiAgY29ubmVjdChuZXdfd3MsIG9zID0gZ2xvYmFsVGhpcy5vcykKICBnZXQgY29ubmVjdGVkKCkKICBnZXQgbGlzdCgpCiAgZ2V0IGxhc3QoKQpSUENTb2NrZXQKTWFrZVdlYlNvY2tldCh1cmwsIGNhbGxiYWNrcykKCWlzVGhlbmFibGUodmFsdWUpCgloYXNIYW5kbGVyKG9iaiwgZXZlbnROYW1lKQoJY2FsbEhhbmRsZXIob2JqLCBldmVudE5hbWUsIC4uLmFyZ3MpCglwYXJzZVVSTCh1cmxfb3JfcG9ydCkKICB0b1N0cmluZygpCglkZWZpbmUob2JqLCAuLi5hcmdzKQoJc2V0SGFuZGxlcnMob3MsIGhhbmRsZXJzKQogIC5vbkZkID0gKGZkLCByZWFkYWJsZSwgd3JpdGFibGUpCglzdGF0dXNSZXNwb25zZShzdWNjZXNzLCByZXN1bHRfb3JfZXJyb3IsIGRhdGEpCglvYmplY3RDb21tYW5kKGZuKQoJKGRhdGEpCglnZXRQcm90b3R5cGVOYW1lKHByb3RvKQpEZXNlcmlhbGl6ZUVudHJpZXMoZSkKRGVzZXJpYWxpemVLZXlzKGUpCkRlc2VyaWFsaXplTWFwKGUpCkRlc2VyaWFsaXplT2JqZWN0KGUpCkZvcndhcmRNZXRob2RzKGUsIHJldCA9IHt9LCB0aGlzT2JqKQpGb3J3YXJkT2JqZWN0KGUsIHRoaXNPYmopCk1ha2VDb21tYW5kRnVuY3Rpb24oY21kLCBnZXRDb25uZWN0aW9uLCB0aGlzT2JqLCB0KQoJKHBhcmFtcyA9IHt9KQoocGFyYW1zID0ge30pClNlcmlhbGl6ZVZhbHVlKHZhbHVlLCBzb3VyY2UgPSBmYWxzZSkKRGVzZXJpYWxpemVTeW1ib2xzKG5hbWVzKQpEZXNlcmlhbGl6ZVZhbHVlKGRlc2MpAAAAAAAAAADZCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2QgAACAgLkxvZ1dyYXAgPSBMb2dXcmFwKGxvZykKICAubWVtb2l6ZSA9IG1lbW9pemUoZm4pCiAgc2VsZiA9IChrZXksIC4uLmFyZ3MpCiAgLkdldENsYXNzZXMgPSAqR2V0Q2xhc3NlcyhvYmopCk1hcHBlcihtYXAgPSAKICBzZWxmID0gKGtleSwgdmFsdWUpCk1hcHBlcgpNYXBwZXIKTWFwcGVyCiAgc2VsZiA9ICguLi5hcmdzKQpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCkRlZmF1bHRDb25zdHJ1Y3RvcgpXcmFwRXZlbnQoaGFuZGxlciwgbmFtZSkKCShlKQogIGdldChvYmosIHByb3ApCk1lc3NhZ2VSZWNlaXZlcgogIG9ubWVzc2FnZShtc2cpCk1lc3NhZ2VUcmFuc21pdHRlcgogIHNlbmRNZXNzYWdlKCkKTWVzc2FnZVRyYW5zY2VpdmVyKCkKTWVzc2FnZVRyYW5zY2VpdmVyCk1lc3NhZ2VSZWNlaXZlcgpNZXNzYWdlVHJhbnNtaXR0ZXIKICBub25lKCkKICBqc29uKHZlcmJvc2UgPSBmYWxzZSkKICAuanMgPSBqcyh2ZXJib3NlID0gZmFsc2UpCiAgLmJqc29uID0gYmpzb24oKQpSUENBcGkoYykKUlBDQXBpClJQQ1Byb3h5KGMpClJQQ09iamVjdChpZCwgY29ubmVjdGlvbikKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkoYXBpKQpGYWN0b3J5KG9wdHMpClJQQ09iamVjdApSUENGYWN0b3J5ClJQQ0ZhY3RvcnkKQ29ubmVjdGlvbgogIHN0YXRpYyBlcXVhbChhLCBiKQogIHN0YXRpYyBnZXQgbGFzdCgpCiAgbWFrZVNlcSgpCiAgY29uc3RydWN0b3Ioc29ja2V0LCBpbnN0YW5jZSwgbG9nLCBjb2RlYyA9ICdub25lJykKICBsb2coLi4uYXJncykKICBlcnJvcihtZXNzYWdlKQogIGNsb3NlKC4uLmFyZ3MpCiAgb25tZXNzYWdlKG1zZykKICBwcm9jZXNzTWVzc2FnZShkYXRhKQogIG9uY29ubmVjdChzb2NrKQogIG9ucG9uZyhkYXRhKQogIG9uZXJyb3IoZXJyb3IpCiAgb25jbG9zZShjb2RlLCB3aHkpCiAgY2xlYW51cCgpCiAgc2VuZE1lc3NhZ2Uob2JqKQogIHNlbmRDb21tYW5kKGNvbW1hbmQsIHBhcmFtcyA9IHt9KQogIHN0YXRpYyBnZXRDYWxsYmFja3MoaW5zdGFuY2UsIHZlcmJvc2l0eSA9IDApCiAgb25Db25uZWN0KHNvY2spCiAgb25PcGVuKHNvY2spCiAgb25NZXNzYWdlKHNvY2ssIG1zZykKICBvbkVycm9yKHNvY2ssIGVycm9yKQogIG9uQ2xvc2Uoc29jaywgY29kZSwgd2h5KQogIG9uUG9uZyhzb2NrLCBkYXRhKQpDb25uZWN0aW9uCkNvbm5lY3Rpb24KUlBDU2VydmVyRW5kcG9pbnQoY2xhc3NlcyA9IHt9KQogIG5ldyh7IGNsYXNzOiBuYW1lLCBhcmdzID0gW10gfSkKICBsaXN0KCkKUlBDU2VydmVyCiAgbWFrZUlkKCkKICBwcm9jZXNzTWVzc2FnZShkYXRhKQpSUENTZXJ2ZXIKUlBDQ2xpZW50CiAgcHJvY2Vzc01lc3NhZ2UocmVzcG9uc2UpCiAgY29tbWFuZChuYW1lLCBwYXJhbXMpClJQQ0NsaWVudApSUENTb2NrZXQodXJsLCBzZXJ2aWNlID0gUlBDU2VydmVyLCB2ZXJib3NpdHkgPSAxKQogIGdldCBmZCgpCiAgZ2V0IHNvY2tldCgpCiAgZ2V0IGNvbm5lY3Rpb24oKQogIHJlZ2lzdGVyKGN0b3IpCiAgbGlzdGVuKG5ld193cywgb3MgPSBnbG9iYWxUaGlzLm9zKQogIGNvbm5lY3QobmV3X3dzLCBvcyA9IGdsb2JhbFRoaXMub3MpCiAgZ2V0IGNvbm5lY3RlZCgpCiAgZ2V0IGxpc3QoKQogIGdldCBsYXN0KCkKUlBDU29ja2V0Ck1ha2VXZWJTb2NrZXQodXJsLCBjYWxsYmFja3MpCglpc1RoZW5hYmxlKHZhbHVlKQoJaGFzSGFuZGxlcihvYmosIGV2ZW50TmFtZSkKCWNhbGxIYW5kbGVyKG9iaiwgZXZlbnROYW1lLCAuLi5hcmdzKQoJcGFyc2VVUkwodXJsX29yX3BvcnQpCiAgdG9TdHJpbmcoKQoJZGVmaW5lKG9iaiwgLi4uYXJncykKCXNldEhhbmRsZXJzKG9zLCBoYW5kbGVycykKICAub25GZCA9IChmZCwgcmVhZGFibGUsIHdyaXRhYmxlKQoJc3RhdHVzUmVzcG9uc2Uoc3VjY2VzcywgcmVzdWx0X29yX2Vycm9yLCBkYXRhKQoJb2JqZWN0Q29tbWFuZChmbikKCShkYXRhKQoJZ2V0UHJvdG90eXBlTmFtZShwcm90bykKRGVzZXJpYWxpemVFbnRyaWVzKGUpCkRlc2VyaWFsaXplS2V5cyhlKQpEZXNlcmlhbGl6ZU1hcChlKQpEZXNlcmlhbGl6ZU9iamVjdChlKQpGb3J3YXJkTWV0aG9kcyhlLCByZXQgPSB7fSwgdGhpc09iaikKRm9yd2FyZE9iamVjdChlLCB0aGlzT2JqKQpNYWtlQ29tbWFuZEZ1bmN0aW9uKGNtZCwgZ2V0Q29ubmVjdGlvbiwgdGhpc09iaiwgdCkKCShwYXJhbXMgPSB7fSkKKHBhcmFtcyA9IHt9KQpTZXJpYWxpemVWYWx1ZSh2YWx1ZSwgc291cmNlID0gZmFsc2UpCkRlc2VyaWFsaXplU3ltYm9scyhuYW1lcykKRGVzZXJpYWxpemVWYWx1ZShkZXNjKQAAAAAAAAAA2QgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgUAAAAAAABKBQAAAAAAAAAAAAAAAPC/"
				],
				[
					754,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/events.js",
						"symkeys":
						[
							[
								62,
								93
							],
							[
								143,
								176
							],
							[
								336,
								368
							],
							[
								425,
								443
							],
							[
								495,
								513
							],
							[
								548,
								568
							],
							[
								617,
								629
							],
							[
								650,
								663
							],
							[
								744,
								763
							],
							[
								951,
								982
							],
							[
								1328,
								1352
							],
							[
								1495,
								1507
							],
							[
								1611,
								1631
							],
							[
								2034,
								2055
							],
							[
								2080,
								2095
							],
							[
								2216,
								2230
							],
							[
								2257,
								2278
							],
							[
								2459,
								2471
							],
							[
								2517,
								2536
							],
							[
								2582,
								2597
							],
							[
								2690,
								2703
							],
							[
								2716,
								2732
							],
							[
								2748,
								2753
							],
							[
								2805,
								2818
							],
							[
								2844,
								2864
							],
							[
								3090,
								3099
							],
							[
								3226,
								3237
							],
							[
								3399,
								3419
							],
							[
								3522,
								3554
							],
							[
								3785,
								3820
							],
							[
								4175,
								4201
							],
							[
								4868,
								4877
							],
							[
								4957,
								4976
							],
							[
								5023,
								5027
							],
							[
								5060,
								5071
							],
							[
								5118,
								5136
							]
						],
						"symlist":
						[
							"indexOf = (haystack, needle) =>",
							"function define(obj, prop, value)",
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"EventEmitter",
							"constructor()",
							"on(event, listener)",
							"removeListener(event, listener)",
							"removeAllListeners(type)",
							"off(...args)",
							"emit(event, ...args)",
							"once(event, listener)",
							"callback = e =>",
							"iterator(type)",
							"async (push, stop) =>",
							"eventNames()",
							"listenerCount(type)",
							"listeners(type)",
							"next: type =>",
							"async resolve =>",
							" e =>",
							"waitFor(type)",
							"(resolve, reject) =>",
							"method =>",
							"EventTarget",
							"typedListeners(type)",
							"addEventListener(type, listener)",
							"removeEventListener(type, listener)",
							"dispatchEvent(type, event)",
							"method =>",
							"getMethods = obj =>",
							"n =>",
							"(acc, n) =>",
							"eventify = self =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADZCAAAICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQogIC5tZW1vaXplID0gbWVtb2l6ZShmbikKICBzZWxmID0gKGtleSwgLi4uYXJncykKICAuR2V0Q2xhc3NlcyA9ICpHZXRDbGFzc2VzKG9iaikKTWFwcGVyKG1hcCA9IAogIHNlbGYgPSAoa2V5LCB2YWx1ZSkKTWFwcGVyCk1hcHBlcgpNYXBwZXIKICBzZWxmID0gKC4uLmFyZ3MpCkRlZmF1bHRDb25zdHJ1Y3RvcgpEZWZhdWx0Q29uc3RydWN0b3IKRGVmYXVsdENvbnN0cnVjdG9yCldyYXBFdmVudChoYW5kbGVyLCBuYW1lKQoJKGUpCiAgZ2V0KG9iaiwgcHJvcCkKTWVzc2FnZVJlY2VpdmVyCiAgb25tZXNzYWdlKG1zZykKTWVzc2FnZVRyYW5zbWl0dGVyCiAgc2VuZE1lc3NhZ2UoKQpNZXNzYWdlVHJhbnNjZWl2ZXIoKQpNZXNzYWdlVHJhbnNjZWl2ZXIKTWVzc2FnZVJlY2VpdmVyCk1lc3NhZ2VUcmFuc21pdHRlcgogIG5vbmUoKQogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIC5qcyA9IGpzKHZlcmJvc2UgPSBmYWxzZSkKICAuYmpzb24gPSBianNvbigpClJQQ0FwaShjKQpSUENBcGkKUlBDUHJveHkoYykKUlBDT2JqZWN0KGlkLCBjb25uZWN0aW9uKQpSUENPYmplY3QKUlBDRmFjdG9yeShhcGkpCkZhY3Rvcnkob3B0cykKUlBDT2JqZWN0ClJQQ0ZhY3RvcnkKUlBDRmFjdG9yeQpDb25uZWN0aW9uCiAgc3RhdGljIGVxdWFsKGEsIGIpCiAgc3RhdGljIGdldCBsYXN0KCkKICBtYWtlU2VxKCkKICBjb25zdHJ1Y3Rvcihzb2NrZXQsIGluc3RhbmNlLCBsb2csIGNvZGVjID0gJ25vbmUnKQogIGxvZyguLi5hcmdzKQogIGVycm9yKG1lc3NhZ2UpCiAgY2xvc2UoLi4uYXJncykKICBvbm1lc3NhZ2UobXNnKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICBvbkNvbm5lY3Qoc29jaykKICBvbk9wZW4oc29jaykKICBvbk1lc3NhZ2Uoc29jaywgbXNnKQogIG9uRXJyb3Ioc29jaywgZXJyb3IpCiAgb25DbG9zZShzb2NrLCBjb2RlLCB3aHkpCiAgb25Qb25nKHNvY2ssIGRhdGEpCkNvbm5lY3Rpb24KQ29ubmVjdGlvbgpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQpSUENTZXJ2ZXIKICBtYWtlSWQoKQogIHByb2Nlc3NNZXNzYWdlKGRhdGEpClJQQ1NlcnZlcgpSUENDbGllbnQKICBwcm9jZXNzTWVzc2FnZShyZXNwb25zZSkKICBjb21tYW5kKG5hbWUsIHBhcmFtcykKUlBDQ2xpZW50ClJQQ1NvY2tldCh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIsIHZlcmJvc2l0eSA9IDEpCiAgZ2V0IGZkKCkKICBnZXQgc29ja2V0KCkKICBnZXQgY29ubmVjdGlvbigpCiAgcmVnaXN0ZXIoY3RvcikKICBsaXN0ZW4obmV3X3dzLCBvcyA9IGdsb2JhbFRoaXMub3MpCiAgY29ubmVjdChuZXdfd3MsIG9zID0gZ2xvYmFsVGhpcy5vcykKICBnZXQgY29ubmVjdGVkKCkKICBnZXQgbGlzdCgpCiAgZ2V0IGxhc3QoKQpSUENTb2NrZXQKTWFrZVdlYlNvY2tldCh1cmwsIGNhbGxiYWNrcykKCWlzVGhlbmFibGUodmFsdWUpCgloYXNIYW5kbGVyKG9iaiwgZXZlbnROYW1lKQoJY2FsbEhhbmRsZXIob2JqLCBldmVudE5hbWUsIC4uLmFyZ3MpCglwYXJzZVVSTCh1cmxfb3JfcG9ydCkKICB0b1N0cmluZygpCglkZWZpbmUob2JqLCAuLi5hcmdzKQoJc2V0SGFuZGxlcnMob3MsIGhhbmRsZXJzKQogIC5vbkZkID0gKGZkLCByZWFkYWJsZSwgd3JpdGFibGUpCglzdGF0dXNSZXNwb25zZShzdWNjZXNzLCByZXN1bHRfb3JfZXJyb3IsIGRhdGEpCglvYmplY3RDb21tYW5kKGZuKQoJKGRhdGEpCglnZXRQcm90b3R5cGVOYW1lKHByb3RvKQpEZXNlcmlhbGl6ZUVudHJpZXMoZSkKRGVzZXJpYWxpemVLZXlzKGUpCkRlc2VyaWFsaXplTWFwKGUpCkRlc2VyaWFsaXplT2JqZWN0KGUpCkZvcndhcmRNZXRob2RzKGUsIHJldCA9IHt9LCB0aGlzT2JqKQpGb3J3YXJkT2JqZWN0KGUsIHRoaXNPYmopCk1ha2VDb21tYW5kRnVuY3Rpb24oY21kLCBnZXRDb25uZWN0aW9uLCB0aGlzT2JqLCB0KQoJKHBhcmFtcyA9IHt9KQoocGFyYW1zID0ge30pClNlcmlhbGl6ZVZhbHVlKHZhbHVlLCBzb3VyY2UgPSBmYWxzZSkKRGVzZXJpYWxpemVTeW1ib2xzKG5hbWVzKQpEZXNlcmlhbGl6ZVZhbHVlKGRlc2MpAAAAAAAAAADDAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					755,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debugger.html",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADDAQAAICBkZWZpbmUob2JqLCBwcm9wLCB2YWx1ZSkKICAuTG9nV3JhcCA9IExvZ1dyYXAobG9nKQpFdmVudEVtaXR0ZXIKICBjb25zdHJ1Y3RvcigpCiAgb24oZXZlbnQsIGxpc3RlbmVyKQogIHJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcikKICByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkKICBvZmYoLi4uYXJncykKICBlbWl0KGV2ZW50LCAuLi5hcmdzKQogIG9uY2UoZXZlbnQsIGxpc3RlbmVyKQogIGl0ZXJhdG9yKHR5cGUpCiAgZXZlbnROYW1lcygpCiAgbGlzdGVuZXJDb3VudCh0eXBlKQogIGxpc3RlbmVycyh0eXBlKQogIHdhaXRGb3IodHlwZSkKRXZlbnRUYXJnZXQKICB0eXBlZExpc3RlbmVycyh0eXBlKQogIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpCiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikKICBkaXNwYXRjaEV2ZW50KHR5cGUsIGV2ZW50KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					756,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/minnet-quickjs/libwebsockets/include/libwebsockets/lws-callbacks.h",
						"symkeys":
						[
							[
								1642,
								1654
							],
							[
								1688,
								1709
							],
							[
								2342,
								2366
							],
							[
								2586,
								2614
							],
							[
								2934,
								2954
							]
						],
						"symlist":
						[
							"lws_ssl_info",
							"lws_cert_update_state",
							"lws_acme_cert_aging_args",
							"lws_filter_network_conn_args",
							"lws_callback_reasons"
						]
					},
					"AQAAAAAAAAAAAAAAdwAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "/home/roman/Projects/plot-cv/quickjs/net/rpc.js",
			"settings":
			{
				"buffer_size": 29758,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					404,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAP9CAAAAAAAAAEMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/0IAAAAAAAD/QgAAAAAAAAAAAAAAAPC/"
				],
				[
					405,
					1,
					"left_delete",
					null,
					"AQAAAP9CAAAAAAAA/0IAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAAEMAAAAAAAAAQwAAAAAAAAAAAAAAAPC/"
				],
				[
					516,
					1,
					"cut",
					null,
					"AQAAAEMAAAAAAAAAQwAAAAAAAAAyAAAAaW1wb3J0IHsgU3lzY2FsbEVycm9yIH0gZnJvbSAnLi4vLi4vbGliL21pc2MuanMnOwo",
					"AQAAAAAAAAABAAAAQwAAAAAAAAB1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					517,
					2,
					"paste",
					null,
					"AgAAAEMAAAAAAAAAdQAAAAAAAAAAAAAAdQAAAAAAAACnAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwAAAAAAAABDAAAAAAAAAAAAAAAAAPC/"
				],
				[
					521,
					1,
					"insert",
					{
						"characters": "weakAssign"
					},
					"CwAAAEwAAAAAAAAATQAAAAAAAAAAAAAATQAAAAAAAABNAAAAAAAAAAwAAABTeXNjYWxsRXJyb3JNAAAAAAAAAE4AAAAAAAAAAAAAAE4AAAAAAAAATwAAAAAAAAAAAAAATwAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAFEAAAAAAAAAAAAAAFEAAAAAAAAAUgAAAAAAAAAAAAAAUgAAAAAAAABTAAAAAAAAAAAAAABTAAAAAAAAAFQAAAAAAAAAAAAAAFQAAAAAAAAAVQAAAAAAAAAAAAAAVQAAAAAAAABWAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAAAAAAAAABYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					528,
					1,
					"cut",
					null,
					"AQAAAEwAAAAAAAAATAAAAAAAAAAKAAAAd2Vha0Fzc2lnbg",
					"AQAAAAAAAAABAAAATAAAAAAAAABWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					529,
					1,
					"paste",
					null,
					"AQAAAEwAAAAAAAAAVgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAAAAAAAAABMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					532,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIgAAAAAAAAAiQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAAAAAAAAACIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					533,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIkAAAAAAAAAigAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQAAAAAAAACJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					534,
					1,
					"paste",
					null,
					"AQAAAIoAAAAAAAAAlAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigAAAAAAAACKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					538,
					1,
					"left_delete",
					null,
					"AQAAAEMAAAAAAAAAQwAAAAAAAAAwAAAAaW1wb3J0IHsgd2Vha0Fzc2lnbiB9IGZyb20gJy4uLy4uL2xpYi9taXNjLmpzJzsK",
					"AQAAAAAAAAABAAAAQwAAAAAAAABzAAAAAAAAAAAAAAAAAAAA"
				],
				[
					543,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABYuAAAAAAAAFy4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFi4AAAAAAAAWLgAAAAAAAAAAAAAAAPC/"
				],
				[
					546,
					1,
					"insert",
					{
						"characters": "w"
					},
					"AQAAABcuAAAAAAAAGC4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFy4AAAAAAAAXLgAAAAAAAAAAAAAAAAAA"
				],
				[
					547,
					1,
					"left_delete",
					null,
					"AQAAABcuAAAAAAAAFy4AAAAAAAABAAAAdw",
					"AQAAAAAAAAABAAAAGC4AAAAAAAAYLgAAAAAAAAAAAAAAAPC/"
				],
				[
					549,
					1,
					"insert",
					{
						"characters": "weakAssign"
					},
					"CgAAABYuAAAAAAAAFy4AAAAAAAAAAAAAFy4AAAAAAAAYLgAAAAAAAAAAAAAYLgAAAAAAABkuAAAAAAAAAAAAABkuAAAAAAAAGi4AAAAAAAAAAAAAGi4AAAAAAAAbLgAAAAAAAAAAAAAbLgAAAAAAABwuAAAAAAAAAAAAABwuAAAAAAAAHS4AAAAAAAAAAAAAHS4AAAAAAAAeLgAAAAAAAAAAAAAeLgAAAAAAAB8uAAAAAAAAAAAAAB8uAAAAAAAAIC4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFi4AAAAAAAAWLgAAAAAAAAAAAAAAAAAA"
				],
				[
					550,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACAuAAAAAAAAIi4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIC4AAAAAAAAgLgAAAAAAAAAAAAAAAPC/"
				],
				[
					551,
					1,
					"insert",
					{
						"characters": "Connection.prototype"
					},
					"FAAAACEuAAAAAAAAIi4AAAAAAAAAAAAAIi4AAAAAAAAjLgAAAAAAAAAAAAAjLgAAAAAAACQuAAAAAAAAAAAAACQuAAAAAAAAJS4AAAAAAAAAAAAAJS4AAAAAAAAmLgAAAAAAAAAAAAAmLgAAAAAAACcuAAAAAAAAAAAAACcuAAAAAAAAKC4AAAAAAAAAAAAAKC4AAAAAAAApLgAAAAAAAAAAAAApLgAAAAAAACouAAAAAAAAAAAAACouAAAAAAAAKy4AAAAAAAAAAAAAKy4AAAAAAAAsLgAAAAAAAAAAAAAsLgAAAAAAAC0uAAAAAAAAAAAAAC0uAAAAAAAALi4AAAAAAAAAAAAALi4AAAAAAAAvLgAAAAAAAAAAAAAvLgAAAAAAADAuAAAAAAAAAAAAADAuAAAAAAAAMS4AAAAAAAAAAAAAMS4AAAAAAAAyLgAAAAAAAAAAAAAyLgAAAAAAADMuAAAAAAAAAAAAADMuAAAAAAAANC4AAAAAAAAAAAAANC4AAAAAAAA1LgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIS4AAAAAAAAhLgAAAAAAAAAAAAAAAPC/"
				],
				[
					552,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADUuAAAAAAAANi4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANS4AAAAAAAA1LgAAAAAAAAAAAAAAAPC/"
				],
				[
					553,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADYuAAAAAAAANy4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANi4AAAAAAAA2LgAAAAAAAAAAAAAAAPC/"
				],
				[
					554,
					1,
					"insert",
					{
						"characters": "EventEmitter."
					},
					"DQAAADcuAAAAAAAAOC4AAAAAAAAAAAAAOC4AAAAAAAA5LgAAAAAAAAAAAAA5LgAAAAAAADouAAAAAAAAAAAAADouAAAAAAAAOy4AAAAAAAAAAAAAOy4AAAAAAAA8LgAAAAAAAAAAAAA8LgAAAAAAAD0uAAAAAAAAAAAAAD0uAAAAAAAAPi4AAAAAAAAAAAAAPi4AAAAAAAA/LgAAAAAAAAAAAAA/LgAAAAAAAEAuAAAAAAAAAAAAAEAuAAAAAAAAQS4AAAAAAAAAAAAAQS4AAAAAAABCLgAAAAAAAAAAAABCLgAAAAAAAEMuAAAAAAAAAAAAAEMuAAAAAAAARC4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANy4AAAAAAAA3LgAAAAAAAAAAAAAAAPC/"
				],
				[
					555,
					1,
					"insert",
					{
						"characters": "prototype"
					},
					"CQAAAEQuAAAAAAAARS4AAAAAAAAAAAAARS4AAAAAAABGLgAAAAAAAAAAAABGLgAAAAAAAEcuAAAAAAAAAAAAAEcuAAAAAAAASC4AAAAAAAAAAAAASC4AAAAAAABJLgAAAAAAAAAAAABJLgAAAAAAAEouAAAAAAAAAAAAAEouAAAAAAAASy4AAAAAAAAAAAAASy4AAAAAAABMLgAAAAAAAAAAAABMLgAAAAAAAE0uAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARC4AAAAAAABELgAAAAAAAAAAAAAAAPC/"
				],
				[
					557,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAE4uAAAAAAAATy4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATi4AAAAAAABOLgAAAAAAAAAAAAAAAPC/"
				],
				[
					558,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAE8uAAAAAAAAUC4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATy4AAAAAAABPLgAAAAAAAAAAAAAAAPC/"
				],
				[
					559,
					1,
					"left_delete",
					null,
					"AQAAAE8uAAAAAAAATy4AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAUC4AAAAAAABQLgAAAAAAAAAAAAAAAPC/"
				],
				[
					611,
					1,
					"insert",
					{
						"characters": "code,"
					},
					"BQAAAOYsAAAAAAAA5ywAAAAAAAAAAAAA5ywAAAAAAADoLAAAAAAAAAAAAADoLAAAAAAAAOksAAAAAAAAAAAAAOksAAAAAAAA6iwAAAAAAAAAAAAA6iwAAAAAAADrLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5iwAAAAAAADmLAAAAAAAAAAAAAAAAPC/"
				],
				[
					612,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOssAAAAAAAA7CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6ywAAAAAAADrLAAAAAAAAAAAAAAAAPC/"
				],
				[
					618,
					1,
					"paste",
					null,
					"AQAAABMtAAAAAAAAGS0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEy0AAAAAAAATLQAAAAAAAAAAAAAAAPC/"
				],
				[
					621,
					1,
					"paste",
					null,
					"AQAAAD0tAAAAAAAAQy0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPS0AAAAAAAA9LQAAAAAAAAAAAAAAAPC/"
				],
				[
					627,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA1C0AAAAAAADbLQAAAAAAAAAAAAAAAPC/"
				],
				[
					635,
					1,
					"insert",
					{
						"characters": "coe"
					},
					"AwAAAE4iAAAAAAAATyIAAAAAAAAAAAAATyIAAAAAAABQIgAAAAAAAAAAAABQIgAAAAAAAFEiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATiIAAAAAAABOIgAAAAAAAAAAAAAAAPC/"
				],
				[
					636,
					1,
					"left_delete",
					null,
					"AQAAAFAiAAAAAAAAUCIAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAUSIAAAAAAABRIgAAAAAAAAAAAAAAAPC/"
				],
				[
					637,
					1,
					"insert",
					{
						"characters": "de,"
					},
					"AwAAAFAiAAAAAAAAUSIAAAAAAAAAAAAAUSIAAAAAAABSIgAAAAAAAAAAAABSIgAAAAAAAFMiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUCIAAAAAAABQIgAAAAAAAAAAAAAAAPC/"
				],
				[
					638,
					1,
					"insert",
					{
						"characters": " why"
					},
					"BAAAAFMiAAAAAAAAVCIAAAAAAAAAAAAAVCIAAAAAAABVIgAAAAAAAAAAAABVIgAAAAAAAFYiAAAAAAAAAAAAAFYiAAAAAAAAVyIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUyIAAAAAAABTIgAAAAAAAAAAAAAAAPC/"
				],
				[
					644,
					1,
					"left_delete",
					null,
					"AQAAAFciAAAAAAAAVyIAAAAAAAAGAAAAcmVhc29u",
					"AQAAAAAAAAABAAAAVyIAAAAAAABdIgAAAAAAAAAAAAAAAPC/"
				],
				[
					647,
					1,
					"insert",
					{
						"characters": "code,"
					},
					"BQAAAIAiAAAAAAAAgSIAAAAAAAAAAAAAgSIAAAAAAACCIgAAAAAAAAAAAACCIgAAAAAAAIMiAAAAAAAAAAAAAIMiAAAAAAAAhCIAAAAAAAAAAAAAhCIAAAAAAACFIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgCIAAAAAAACAIgAAAAAAAAAAAAAAAPC/"
				],
				[
					648,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIUiAAAAAAAAhiIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhSIAAAAAAACFIgAAAAAAAAAAAAAAAPC/"
				],
				[
					660,
					1,
					"paste",
					null,
					"AgAAAIciAAAAAAAAiiIAAAAAAAAAAAAAiiIAAAAAAACKIgAAAAAAAAYAAAByZWFzb24",
					"AQAAAAAAAAABAAAAhyIAAAAAAACNIgAAAAAAAAAAAAAAAPC/"
				],
				[
					664,
					1,
					"paste",
					null,
					"AgAAAJIiAAAAAAAAlSIAAAAAAAAAAAAAlSIAAAAAAACVIgAAAAAAAAYAAAByZWFzb24",
					"AQAAAAAAAAABAAAAkiIAAAAAAACYIgAAAAAAAAAAAAAAAPC/"
				],
				[
					668,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAANyMAAAAAAAA3IwAAAAAAAAAAAAAAAPC/"
				],
				[
					674,
					1,
					"cut",
					null,
					"AQAAAHhyAAAAAAAAeHIAAAAAAAAfAAAAICBTZXJ2ZXJDb25uZWN0aW9uOiBSUENTZXJ2ZXIsCg",
					"AQAAAAAAAAABAAAAeHIAAAAAAACXcgAAAAAAAAAAAAAAAPC/"
				],
				[
					675,
					2,
					"paste",
					null,
					"AgAAAHhyAAAAAAAAl3IAAAAAAAAAAAAAl3IAAAAAAAC2cgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeHIAAAAAAAB4cgAAAAAAAAAAAAAAAPC/"
				],
				[
					678,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAHpyAAAAAAAAe3IAAAAAAAAAAAAAe3IAAAAAAAB7cgAAAAAAAAYAAABTZXJ2ZXI",
					"AQAAAAAAAAABAAAAgHIAAAAAAAB6cgAAAAAAAAAAAAAAAPC/"
				],
				[
					682,
					3,
					"left_delete",
					null,
					"AwAAAIdyAAAAAAAAh3IAAAAAAAAJAAAAUlBDU2VydmVyhnIAAAAAAACGcgAAAAAAAAEAAAAghXIAAAAAAACFcgAAAAAAAAEAAAA6",
					"AQAAAAAAAAABAAAAh3IAAAAAAACQcgAAAAAAAAAAAAAAAPC/"
				],
				[
					683,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAhXIAAAAAAACFcgAAAAAAAAAAAAAAAPC/"
				],
				[
					731,
					1,
					"insert",
					{
						"characters": "(this.constructor"
					},
					"EQAAAGsbAAAAAAAAbBsAAAAAAAAAAAAAbBsAAAAAAABtGwAAAAAAAAAAAABtGwAAAAAAAG4bAAAAAAAAAAAAAG4bAAAAAAAAbxsAAAAAAAAAAAAAbxsAAAAAAABwGwAAAAAAAAAAAABwGwAAAAAAAHEbAAAAAAAAAAAAAHEbAAAAAAAAchsAAAAAAAAAAAAAchsAAAAAAABzGwAAAAAAAAAAAABzGwAAAAAAAHQbAAAAAAAAAAAAAHQbAAAAAAAAdRsAAAAAAAAAAAAAdRsAAAAAAAB2GwAAAAAAAAAAAAB2GwAAAAAAAHcbAAAAAAAAAAAAAHcbAAAAAAAAeBsAAAAAAAAAAAAAeBsAAAAAAAB5GwAAAAAAAAAAAAB5GwAAAAAAAHobAAAAAAAAAAAAAHobAAAAAAAAexsAAAAAAAAAAAAAexsAAAAAAAB8GwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaxsAAAAAAABrGwAAAAAAAAAAAAAAAPC/"
				],
				[
					732,
					1,
					"insert",
					{
						"characters": " ??"
					},
					"AwAAAHwbAAAAAAAAfRsAAAAAAAAAAAAAfRsAAAAAAAB+GwAAAAAAAAAAAAB+GwAAAAAAAH8bAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfBsAAAAAAAB8GwAAAAAAAAAAAAAAAPC/"
				],
				[
					733,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH8bAAAAAAAAgBsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfxsAAAAAAAB/GwAAAAAAAAAAAAAAAPC/"
				],
				[
					735,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAIobAAAAAAAAixsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAihsAAAAAAACKGwAAAAAAAAAAAAAAAPC/"
				],
				[
					761,
					1,
					"insert",
					{
						"characters": "this.fdlist"
					},
					"DAAAAKFMAAAAAAAAokwAAAAAAAAAAAAAokwAAAAAAACiTAAAAAAAAAQAAAB0aGlzokwAAAAAAACjTAAAAAAAAAAAAACjTAAAAAAAAKRMAAAAAAAAAAAAAKRMAAAAAAAApUwAAAAAAAAAAAAApUwAAAAAAACmTAAAAAAAAAAAAACmTAAAAAAAAKdMAAAAAAAAAAAAAKdMAAAAAAAAqEwAAAAAAAAAAAAAqEwAAAAAAACpTAAAAAAAAAAAAACpTAAAAAAAAKpMAAAAAAAAAAAAAKpMAAAAAAAAq0wAAAAAAAAAAAAAq0wAAAAAAACsTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoUwAAAAAAAClTAAAAAAAAAAAAAAAAPC/"
				],
				[
					762,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAKxMAAAAAAAArkwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArEwAAAAAAACsTAAAAAAAAAAAAAAAAPC/"
				],
				[
					764,
					1,
					"left_delete",
					null,
					"AQAAAK1MAAAAAAAArUwAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAArkwAAAAAAACuTAAAAAAAAAAAAAAAAPC/"
				],
				[
					765,
					1,
					"insert",
					{
						"characters": "Object.keys"
					},
					"CwAAAK1MAAAAAAAArkwAAAAAAAAAAAAArkwAAAAAAACvTAAAAAAAAAAAAACvTAAAAAAAALBMAAAAAAAAAAAAALBMAAAAAAAAsUwAAAAAAAAAAAAAsUwAAAAAAACyTAAAAAAAAAAAAACyTAAAAAAAALNMAAAAAAAAAAAAALNMAAAAAAAAtEwAAAAAAAAAAAAAtEwAAAAAAAC1TAAAAAAAAAAAAAC1TAAAAAAAALZMAAAAAAAAAAAAALZMAAAAAAAAt0wAAAAAAAAAAAAAt0wAAAAAAAC4TAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArUwAAAAAAACtTAAAAAAAAAAAAAAAAPC/"
				],
				[
					766,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALhMAAAAAAAAukwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuEwAAAAAAAC4TAAAAAAAAAAAAAAAAPC/"
				],
				[
					767,
					1,
					"insert",
					{
						"characters": "this.fldist"
					},
					"CwAAALlMAAAAAAAAukwAAAAAAAAAAAAAukwAAAAAAAC7TAAAAAAAAAAAAAC7TAAAAAAAALxMAAAAAAAAAAAAALxMAAAAAAAAvUwAAAAAAAAAAAAAvUwAAAAAAAC+TAAAAAAAAAAAAAC+TAAAAAAAAL9MAAAAAAAAAAAAAL9MAAAAAAAAwEwAAAAAAAAAAAAAwEwAAAAAAADBTAAAAAAAAAAAAADBTAAAAAAAAMJMAAAAAAAAAAAAAMJMAAAAAAAAw0wAAAAAAAAAAAAAw0wAAAAAAADETAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuUwAAAAAAAC5TAAAAAAAAAAAAAAAAPC/"
				],
				[
					768,
					5,
					"left_delete",
					null,
					"BQAAAMNMAAAAAAAAw0wAAAAAAAABAAAAdMJMAAAAAAAAwkwAAAAAAAABAAAAc8FMAAAAAAAAwUwAAAAAAAABAAAAacBMAAAAAAAAwEwAAAAAAAABAAAAZL9MAAAAAAAAv0wAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAAxEwAAAAAAADETAAAAAAAAAAAAAAAAPC/"
				],
				[
					769,
					1,
					"insert",
					{
						"characters": "dlist"
					},
					"BQAAAL9MAAAAAAAAwEwAAAAAAAAAAAAAwEwAAAAAAADBTAAAAAAAAAAAAADBTAAAAAAAAMJMAAAAAAAAAAAAAMJMAAAAAAAAw0wAAAAAAAAAAAAAw0wAAAAAAADETAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAv0wAAAAAAAC/TAAAAAAAAAAAAAAAAPC/"
				],
				[
					771,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAMVMAAAAAAAAx0wAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxUwAAAAAAADFTAAAAAAAAAAAAAAAAPC/"
				],
				[
					772,
					1,
					"insert",
					{
						"characters": "09"
					},
					"AgAAAMZMAAAAAAAAx0wAAAAAAAAAAAAAx0wAAAAAAADITAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxkwAAAAAAADGTAAAAAAAAAAAAAAAAPC/"
				],
				[
					773,
					1,
					"left_delete",
					null,
					"AQAAAMdMAAAAAAAAx0wAAAAAAAABAAAAOQ",
					"AQAAAAAAAAABAAAAyEwAAAAAAADITAAAAAAAAAAAAAAAAPC/"
				],
				[
					775,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAAMhMAAAAAAAAyUwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyEwAAAAAAADITAAAAAAAAAAAAAAAAPC/"
				],
				[
					785,
					1,
					"insert",
					{
						"characters": "this.fd"
					},
					"CAAAAK1MAAAAAAAArkwAAAAAAAAAAAAArkwAAAAAAACuTAAAAAAAABsAAABPYmplY3Qua2V5cyh0aGlzLmZkbGlzdClbMF2uTAAAAAAAAK9MAAAAAAAAAAAAAK9MAAAAAAAAsEwAAAAAAAAAAAAAsEwAAAAAAACxTAAAAAAAAAAAAACxTAAAAAAAALJMAAAAAAAAAAAAALJMAAAAAAAAs0wAAAAAAAAAAAAAs0wAAAAAAAC0TAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArUwAAAAAAADITAAAAAAAAAAAAAAAAPC/"
				],
				[
					788,
					1,
					"left_delete",
					null,
					"AQAAAKVMAAAAAAAApUwAAAAAAAAQAAAALmZkbGlzdFt0aGlzLmZkXQ",
					"AQAAAAAAAAABAAAApUwAAAAAAAC1TAAAAAAAAAAAAAAAAPC/"
				],
				[
					799,
					1,
					"cut",
					null,
					"AQAAAIVHAAAAAAAAhUcAAAAAAABCAAAAICBnZXQgc29ja2V0KCkgewogICAgICByZXR1cm4gdGhpcy5mZGxpc3RbdGhpcy5mZF0/LnNvY2tldDsKICAgIH0s",
					"AQAAAAAAAAABAAAAhUcAAAAAAADHRwAAAAAAAAAAAAAAAPC/"
				],
				[
					800,
					2,
					"paste",
					null,
					"AgAAAIVHAAAAAAAAx0cAAAAAAAAAAAAAx0cAAAAAAAAJSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhUcAAAAAAACFRwAAAAAAAAAAAAAAAPC/"
				],
				[
					804,
					1,
					"insert",
					{
						"characters": "connection"
					},
					"CwAAAM1HAAAAAAAAzkcAAAAAAAAAAAAAzkcAAAAAAADORwAAAAAAAAYAAABzb2NrZXTORwAAAAAAAM9HAAAAAAAAAAAAAM9HAAAAAAAA0EcAAAAAAAAAAAAA0EcAAAAAAADRRwAAAAAAAAAAAADRRwAAAAAAANJHAAAAAAAAAAAAANJHAAAAAAAA00cAAAAAAAAAAAAA00cAAAAAAADURwAAAAAAAAAAAADURwAAAAAAANVHAAAAAAAAAAAAANVHAAAAAAAA1kcAAAAAAAAAAAAA1kcAAAAAAADXRwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzUcAAAAAAADTRwAAAAAAAAAAAAAAAPC/"
				],
				[
					813,
					3,
					"left_delete",
					null,
					"AwAAAP9HAAAAAAAA/0cAAAAAAAAGAAAAc29ja2V0/kcAAAAAAAD+RwAAAAAAAAEAAAAu/UcAAAAAAAD9RwAAAAAAAAEAAAA/",
					"AQAAAAAAAAABAAAA/0cAAAAAAAAFSAAAAAAAAAAAAAAAAPC/"
				],
				[
					837,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAANw/AAAAAAAA3T8AAAAAAAAAAAAA3T8AAAAAAADePwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3D8AAAAAAADcPwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/home/roman/Projects/plot-cv/lib/events.js",
			"settings":
			{
				"buffer_size": 5344,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "/home/roman/Projects/plot-cv/debugger-client.js",
			"settings":
			{
				"buffer_size": 2107,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"insert",
					{
						"characters": "command"
					},
					"CAAAAOsGAAAAAAAA7AYAAAAAAAAAAAAA7AYAAAAAAADsBgAAAAAAAAQAAAB0eXBl7AYAAAAAAADtBgAAAAAAAAAAAADtBgAAAAAAAO4GAAAAAAAAAAAAAO4GAAAAAAAA7wYAAAAAAAAAAAAA7wYAAAAAAADwBgAAAAAAAAAAAADwBgAAAAAAAPEGAAAAAAAAAAAAAPEGAAAAAAAA8gYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6wYAAAAAAADvBgAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"cut",
					null,
					"AQAAAK4BAAAAAAAArgEAAAAAAABHAAAAaW1wb3J0IHsgRUNNQVNjcmlwdFBhcnNlciwgTGV4ZXIgfSBmcm9tICcuL2xpYi9lY21hc2NyaXB0L3BhcnNlcjIuanMnOwo",
					"AQAAAAAAAAABAAAArgEAAAAAAAD1AQAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					2,
					"paste",
					null,
					"AgAAAK4BAAAAAAAA9QEAAAAAAAAAAAAA9QEAAAAAAAA8AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArgEAAAAAAACuAQAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "Event"
					},
					"BgAAAP4BAAAAAAAA/wEAAAAAAAAAAAAA/wEAAAAAAAD/AQAAAAAAABAAAABFQ01BU2NyaXB0UGFyc2Vy/wEAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAECAAAAAAAAAAAAAAECAAAAAAAAAgIAAAAAAAAAAAAAAgIAAAAAAAADAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gEAAAAAAAAOAgAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert_completion",
					{
						"completion": "EventEmitter",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "EventEmitter"
					},
					"AgAAAP4BAAAAAAAA/gEAAAAAAAAFAAAARXZlbnT+AQAAAAAAAAoCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwIAAAAAAAADAgAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "EventTarget"
					},
					"DAAAAAwCAAAAAAAADQIAAAAAAAAAAAAADQIAAAAAAAANAgAAAAAAAAUAAABMZXhlcg0CAAAAAAAADgIAAAAAAAAAAAAADgIAAAAAAAAPAgAAAAAAAAAAAAAPAgAAAAAAABACAAAAAAAAAAAAABACAAAAAAAAEQIAAAAAAAAAAAAAEQIAAAAAAAASAgAAAAAAAAAAAAASAgAAAAAAABMCAAAAAAAAAAAAABMCAAAAAAAAFAIAAAAAAAAAAAAAFAIAAAAAAAAVAgAAAAAAAAAAAAAVAgAAAAAAABYCAAAAAAAAAAAAABYCAAAAAAAAFwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADAIAAAAAAAARAgAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "events"
					},
					"BwAAACYCAAAAAAAAJwIAAAAAAAAAAAAAJwIAAAAAAAAnAgAAAAAAAAoAAABlY21hc2NyaXB0JwIAAAAAAAAoAgAAAAAAAAAAAAAoAgAAAAAAACkCAAAAAAAAAAAAACkCAAAAAAAAKgIAAAAAAAAAAAAAKgIAAAAAAAArAgAAAAAAAAAAAAArAgAAAAAAACwCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJgIAAAAAAAAwAgAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"left_delete",
					null,
					"AQAAACwCAAAAAAAALAIAAAAAAAAIAAAAL3BhcnNlcjI",
					"AQAAAAAAAAABAAAALAIAAAAAAAA0AgAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "\nEvent"
					},
					"BwAAAEwFAAAAAAAATQUAAAAAAAAAAAAATQUAAAAAAABPBQAAAAAAAAAAAABPBQAAAAAAAFAFAAAAAAAAAAAAAFAFAAAAAAAAUQUAAAAAAAAAAAAAUQUAAAAAAABSBQAAAAAAAAAAAABSBQAAAAAAAFMFAAAAAAAAAAAAAFMFAAAAAAAAVAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAUAAAAAAABMBQAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert_completion",
					{
						"completion": "EventEmitter",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "EventEmitter"
					},
					"AgAAAE8FAAAAAAAATwUAAAAAAAAFAAAARXZlbnRPBQAAAAAAAFsFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVAUAAAAAAABUBQAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": ",Event"
					},
					"BgAAAFsFAAAAAAAAXAUAAAAAAAAAAAAAXAUAAAAAAABdBQAAAAAAAAAAAABdBQAAAAAAAF4FAAAAAAAAAAAAAF4FAAAAAAAAXwUAAAAAAAAAAAAAXwUAAAAAAABgBQAAAAAAAAAAAABgBQAAAAAAAGEFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWwUAAAAAAABbBQAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert_completion",
					{
						"completion": "EventTarget",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "EventTarget"
					},
					"AgAAAFwFAAAAAAAAXAUAAAAAAAAFAAAARXZlbnRcBQAAAAAAAGcFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQUAAAAAAABhBQAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": ",m"
					},
					"AgAAAGcFAAAAAAAAaAUAAAAAAAAAAAAAaAUAAAAAAABpBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZwUAAAAAAABnBQAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"left_delete",
					null,
					"AQAAAGgFAAAAAAAAaAUAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAAaQUAAAAAAABpBQAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAgCAAAaW1wb3J0IHsgV2ViU29ja2V0Q2xpZW50IH0gZnJvbSAnLi9saWIvbmV0L3dlYnNvY2tldC1hc3luYy5qcyc7CmltcG9ydCBVdGlsIGZyb20gJy4vbGliL3V0aWwuanMnOwppbXBvcnQgeyBEZWJ1Z2dlclByb3RvY29sIH0gZnJvbSAnLi9kZWJ1Z2dlcnByb3RvY29sLmpzJzsKaW1wb3J0IHsgdG9TdHJpbmcgYXMgQXJyYXlCdWZmZXJUb1N0cmluZywgdG9BcnJheUJ1ZmZlciBhcyBTdHJpbmdUb0FycmF5QnVmZmVyLCBidG9hIGFzIEJhc2U2NEVuY29kZSwgYXRvYiBhcyBCYXNlNjREZWNvZGUgfSBmcm9tICcuL2xpYi9taXNjLmpzJzsKaW1wb3J0IFJlYWN0LCB7IGgsIGh0bWwsIHJlbmRlciwgRnJhZ21lbnQsIENvbXBvbmVudCwgdXNlU3RhdGUsIHVzZUxheW91dEVmZmVjdCwgdXNlUmVmIH0gZnJvbSAnLi9saWIvZG9tL3ByZWFjdENvbXBvbmVudC5qcyc7CmltcG9ydCB7IEVDTUFTY3JpcHRQYXJzZXIsIExleGVyIH0gZnJvbSAnLi9saWIvZWNtYXNjcmlwdC9wYXJzZXIyLmpzJzsKaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBFdmVudFRhcmdldCB9IGZyb20gJy4vbGliL2V2ZW50cy5qcyc7CmltcG9ydCAqIGFzIGRvbSBmcm9tICcuL2xpYi9kb20uanMnOwppbXBvcnQgcnBjIGZyb20gJy4vcXVpY2tqcy9uZXQvcnBjLmpzJzsKCndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgYXN5bmMgZSA9PiB7CiAgbGV0IHVybCA9IFV0aWwucGFyc2VVUkwoKTsKICBsZXQgc29ja2V0VVJMID0gVXRpbC5tYWtlVVJMKHsKICAgIGxvY2F0aW9uOiB1cmwubG9jYXRpb24gKyAnL3dzJywKICAgIHByb3RvY29sOiB1cmwucHJvdG9jb2wgPT0gJ2h0dHBzJyA/ICd3c3MnIDogJ3dzJwogIH0pOwoKICBnbG9iYWxUaGlzLndzID0gYXdhaXQgQ3JlYXRlU29ja2V0KHNvY2tldFVSTCk7CiAgY29uc29sZS5sb2coYExvYWRlZGAsIHsgc29ja2V0VVJMLCB3cyB9KTsKfSk7Cgphc3luYyBmdW5jdGlvbiBMb2FkU291cmNlKGZpbGVuYW1lKSB7CiAgdHJ5IHsKICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGZpbGVuYW1lKTsKICAgIHJldHVybiBhd2FpdCByZXNwb25zZS50ZXh0KCk7CiAgfSBjYXRjaChlKSB7fQp9CgpPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHsKICBEZWJ1Z2dlclByb3RvY29sLAogIExvYWRTb3VyY2UsCiAgVXRpbCwKICBBcnJheUJ1ZmZlclRvU3RyaW5nLAogIFN0cmluZ1RvQXJyYXlCdWZmZXIsCiAgQmFzZTY0RW5jb2RlLAogIEJhc2U2NERlY29kZSwKICBSZWFjdCwKICBoLAogIGh0bWwsCiAgcmVuZGVyLAogIEZyYWdtZW50LAogIENvbXBvbmVudCwKICB1c2VTdGF0ZSwKICB1c2VMYXlvdXRFZmZlY3QsCiAgdXNlUmVmLAogIEVDTUFTY3JpcHRQYXJzZXIsCiAgTGV4ZXIsCiAgRXZlbnRFbWl0dGVyLEV2ZW50VGFyZ2V0LAogIGRvbSwKICBycGMKfSk7Cgphc3luYyBmdW5jdGlvbiBDcmVhdGVTb2NrZXQodXJsKSB7CiAgbGV0IHdzID0gKFV0aWwuZ2V0R2xvYmFsT2JqZWN0KCkud3MgPSBuZXcgV2ViU29ja2V0Q2xpZW50KCkpOwoKICBjb25zb2xlLmxvZygnd3MnLCB3cyk7CiAgYXdhaXQgd3MuY29ubmVjdCh1cmwpOwoKICAoYXN5bmMgZnVuY3Rpb24gUmVhZFNvY2tldCgpIHsKICAgIGZvciBhd2FpdChsZXQgbXNnIG9mIHdzKSB7CiAgICAgIGxldCBkYXRhOwogICAgICB0cnkgewogICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKG1zZy5kYXRhKTsKICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1dTIEVSUk9SIHBhcnNpbmcnLCBtc2cuZGF0YSk7CiAgICAgIH0KICAgICAgaWYoZGF0YSkgY29uc29sZS5sb2coJ1dTJywgZGF0YSk7CiAgICB9CiAgfSkoKTsKCiAgYXdhaXQgd3Muc2VuZCgKICAgIEpTT04uc3RyaW5naWZ5KHsKICAgICAgY29tbWFuZDogJ3N0YXJ0JywKICAgICAgc3RhcnQ6IHsgY29ubmVjdDogZmFsc2UsIGFyZ3M6IFsndGVzdC1lY21hc2NyaXB0Mi5qcyddLCBhZGRyZXNzOiAnMTI3LjAuMC4xOjk5MDEnIH0KICAgIH0pCiAgKTsKCiAgd3Muc2VuZE1lc3NhZ2UgPSBmdW5jdGlvbihtc2cpIHsKICAgIHJldHVybiB0aGlzLnNlbmQoSlNPTi5zdHJpbmdpZnkobXNnKSk7CiAgfTsKCiAgcmV0dXJuIHdzOwp9CgAAAAAAAAAAOwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAUAAAAAAABoBQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/home/roman/Projects/plot-cv/debugger.js",
			"settings":
			{
				"buffer_size": 4260,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "/home/roman/Projects/plot-cv/debugger.html",
			"settings":
			{
				"buffer_size": 340,
				"line_ending": "Unix"
			}
		},
		{
			"file": "libwebsockets/include/libwebsockets/lws-callbacks.h",
			"settings":
			{
				"buffer_size": 37291,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					37,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAABSQAAAAAAAA6JAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "/*\n * lws-minimal-http-server-form-post\n *\n * Written in 2010-2019 by Andy Green <andy@warmcat.com>\n *\n * This file is made available under the Creative Commons CC0 1.0\n * Universal Public Domain Dedication.\n *\n * This demonstrates a minimal http server that performs POST with a couple\n * of parameters.  It dumps the parameters to the console log and redirects\n * to another page.\n */\n\n#include <libwebsockets.h>\n#include <string.h>\n#include <signal.h>\n\n/*\n * Unlike ws, http is a stateless protocol.  This pss only exists for the\n * duration of a single http transaction.  With http/1.1 keep-alive and http/2,\n * that is unrelated to (shorter than) the lifetime of the network connection.\n */\nstruct pss {\n\tstruct lws_spa *spa;\n};\n\nstatic int interrupted, use303;\n\nstatic const char * const param_names[] = {\n\t\"text1\",\n\t\"send\",\n};\n\nenum enum_param_names {\n\tEPN_TEXT1,\n\tEPN_SEND,\n};\n\nstatic int\ncallback_http(struct lws *wsi, enum lws_callback_reasons reason, void *user,\n\t      void *in, size_t len)\n{\n\tstruct pss *pss = (struct pss *)user;\n\tuint8_t buf[LWS_PRE + LWS_RECOMMENDED_MIN_HEADER_SPACE], *start = &buf[LWS_PRE],\n\t\t*p = start, *end = &buf[sizeof(buf) - 1];\n\tint n;\n\n\tswitch (reason) {\n\tcase LWS_CALLBACK_HTTP:\n\n\t\t/*\n\t\t * Manually report that our form target URL exists\n\t\t *\n\t\t * you can also do this by adding a mount for the form URL\n\t\t * to the protocol with type LWSMPRO_CALLBACK, then no need\n\t\t * to trap LWS_CALLBACK_HTTP.\n\t\t */\n\n\t\tif (!strcmp((const char *)in, \"/form1\"))\n\t\t\t/* assertively allow it to exist in the URL space */\n\t\t\treturn 0;\n\n\t\t/* default to 404-ing the URL if not mounted */\n\t\tbreak;\n\n\tcase LWS_CALLBACK_HTTP_BODY:\n\n\t\t/* create the POST argument parser if not already existing */\n\n\t\tif (!pss->spa) {\n\t\t\tpss->spa = lws_spa_create(wsi, param_names,\n\t\t\t\t\tLWS_ARRAY_SIZE(param_names), 1024,\n\t\t\t\t\tNULL, NULL); /* no file upload */\n\t\t\tif (!pss->spa)\n\t\t\t\treturn -1;\n\t\t}\n\n\t\t/* let it parse the POST data */\n\n\t\tif (lws_spa_process(pss->spa, in, (int)len))\n\t\t\treturn -1;\n\t\tbreak;\n\n\tcase LWS_CALLBACK_CLOSED_CLIENT_HTTP:\n\t\tif (pss->spa && lws_spa_destroy(pss->spa))\n\t\t\treturn -1;\n\t\tbreak;\n\n\tcase LWS_CALLBACK_HTTP_BODY_COMPLETION:\n\n\t\t/* inform the spa no more payload data coming */\n\n\t\tlwsl_user(\"LWS_CALLBACK_HTTP_BODY_COMPLETION\\n\");\n\t\tlws_spa_finalize(pss->spa);\n\n\t\t/* we just dump the decoded things to the log */\n\n\t\tif (pss->spa)\n\t\t\tfor (n = 0; n < (int)LWS_ARRAY_SIZE(param_names); n++) {\n\t\t\t\tif (!lws_spa_get_string(pss->spa, n))\n\t\t\t\t\tlwsl_user(\"%s: undefined\\n\", param_names[n]);\n\t\t\t\telse\n\t\t\t\t\tlwsl_user(\"%s: (len %d) '%s'\\n\",\n\t\t\t\t\t    param_names[n],\n\t\t\t\t\t    lws_spa_get_length(pss->spa, n),\n\t\t\t\t\t    lws_spa_get_string(pss->spa, n));\n\t\t\t}\n\n\t\t/*\n\t\t * Our response is to redirect to a static page.  We could\n\t\t * have generated a dynamic html page here instead.\n\t\t */\n\n\t\tif (lws_http_redirect(wsi, use303 ? HTTP_STATUS_SEE_OTHER :\n\t\t\t\t\t   HTTP_STATUS_MOVED_PERMANENTLY,\n\t\t\t\t      (unsigned char *)\"after-form1.html\",\n\t\t\t\t      16, &p, end) < 0)\n\t\t\treturn -1;\n\t\tbreak;\n\n\tcase LWS_CALLBACK_HTTP_DROP_PROTOCOL:\n\t\t/* called when our wsi user_space is going to be destroyed */\n\t\tif (pss->spa) {\n\t\t\tlws_spa_destroy(pss->spa);\n\t\t\tpss->spa = NULL;\n\t\t}\n\t\tbreak;\n\n\tdefault:\n\t\tbreak;\n\t}\n\n\treturn lws_callback_http_dummy(wsi, reason, user, in, len);\n}\n\nstatic struct lws_protocols protocols[] = {\n\t{ \"http\", callback_http, sizeof(struct pss), 0, 0, NULL, 0 },\n\tLWS_PROTOCOL_LIST_TERM\n};\n\n/* default mount serves the URL space from ./mount-origin */\n\nstatic const struct lws_http_mount mount = {\n\t/* .mount_next */\t       NULL,\t\t/* linked-list \"next\" */\n\t/* .mountpoint */\t\t\"/\",\t\t/* mountpoint URL */\n\t/* .origin */\t\t\"./mount-origin\",\t/* serve from dir */\n\t/* .def */\t\t\t\"index.html\",\t/* default filename */\n\t/* .protocol */\t\t\tNULL,\n\t/* .cgienv */\t\t\tNULL,\n\t/* .extra_mimetypes */\t\tNULL,\n\t/* .interpret */\t\tNULL,\n\t/* .cgi_timeout */\t\t0,\n\t/* .cache_max_age */\t\t0,\n\t/* .auth_mask */\t\t0,\n\t/* .cache_reusable */\t\t0,\n\t/* .cache_revalidate */\t\t0,\n\t/* .cache_intermediaries */\t0,\n\t/* .origin_protocol */\t\tLWSMPRO_FILE,\t/* files in a dir */\n\t/* .mountpoint_len */\t\t1,\t\t/* char count */\n\t/* .basic_auth_login_file */\tNULL,\n};\n\nvoid sigint_handler(int sig)\n{\n\tinterrupted = 1;\n}\n\nint main(int argc, const char **argv)\n{\n\tstruct lws_context_creation_info info;\n\tstruct lws_context *context;\n\tconst char *p;\n\tint n = 0, logs = LLL_USER | LLL_ERR | LLL_WARN | LLL_NOTICE\n\t\t\t/* for LLL_ verbosity above NOTICE to be built into lws,\n\t\t\t * lws must have been configured and built with\n\t\t\t * -DCMAKE_BUILD_TYPE=DEBUG instead of =RELEASE */\n\t\t\t/* | LLL_INFO */ /* | LLL_PARSER */ /* | LLL_HEADER */\n\t\t\t/* | LLL_EXT */ /* | LLL_CLIENT */ /* | LLL_LATENCY */\n\t\t\t/* | LLL_DEBUG */;\n\n\tsignal(SIGINT, sigint_handler);\n\n\tif ((p = lws_cmdline_option(argc, argv, \"-d\")))\n\t\tlogs = atoi(p);\n\n\tlws_set_log_level(logs, NULL);\n\tlwsl_user(\"LWS minimal http server POST | visit http://localhost:7681\\n\");\n\n\tmemset(&info, 0, sizeof info); /* otherwise uninitialized garbage */\n\tinfo.port = 7681;\n\tinfo.protocols = protocols;\n\tinfo.mounts = &mount;\n\tinfo.options =\n\t\tLWS_SERVER_OPTION_HTTP_HEADERS_SECURITY_BEST_PRACTICES_ENFORCE;\n#if defined(LWS_WITH_TLS)\n\tif (lws_cmdline_option(argc, argv, \"-s\")) {\n\t\tinfo.options |= LWS_SERVER_OPTION_DO_SSL_GLOBAL_INIT;\n\t\tinfo.ssl_cert_filepath = \"localhost-100y.cert\";\n\t\tinfo.ssl_private_key_filepath = \"localhost-100y.key\";\n\t}\n#endif\n\n\tif ((p = lws_cmdline_option(argc, argv, \"--port\")))\n\t\tinfo.port = atoi(p);\n\n\tif (lws_cmdline_option(argc, argv, \"--303\")) {\n\t\tlwsl_user(\"%s: using 303 redirect\\n\", __func__);\n\t\tuse303 = 1;\n\t}\n\n\tcontext = lws_create_context(&info);\n\tif (!context) {\n\t\tlwsl_err(\"lws init failed\\n\");\n\t\treturn 1;\n\t}\n\n\twhile (n >= 0 && !interrupted)\n\t\tn = lws_service(context, 0);\n\n\tlws_context_destroy(context);\n\n\treturn 0;\n}\n",
			"file": "libwebsockets/minimal-examples/http-server/minimal-http-server-form-post/minimal-http-server-form-post.c",
			"file_size": 5767,
			"file_write_time": 132716304933434818,
			"settings":
			{
				"buffer_size": 5767,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "/home/roman/Projects/plot-cv/test-rpc.js",
			"settings":
			{
				"buffer_size": 7461,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					45,
					1,
					"insert",
					{
						"characters": "\nss"
					},
					"BAAAAOYJAAAAAAAA5wkAAAAAAAAAAAAA5wkAAAAAAADtCQAAAAAAAAAAAADtCQAAAAAAAO4JAAAAAAAAAAAAAO4JAAAAAAAA7wkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5gkAAAAAAADmCQAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "lC"
					},
					"AgAAAO8JAAAAAAAA8AkAAAAAAAAAAAAA8AkAAAAAAADxCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7wkAAAAAAADvCQAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"left_delete",
					null,
					"AQAAAJYKAAAAAAAAlgoAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAlwoAAAAAAACXCgAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAAJYKAAAAAAAAlwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlgoAAAAAAACWCgAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert_snippet",
					{
						"contents": "'${0:$SELECTION}'"
					},
					"AgAAAO0JAAAAAAAA7QkAAAAAAAAEAAAAc3NsQ+0JAAAAAAAA8wkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7QkAAAAAAADxCQAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "ssl-cert"
					},
					"CQAAAO4JAAAAAAAA7wkAAAAAAAAAAAAA7wkAAAAAAADvCQAAAAAAAAQAAABzc2xD7wkAAAAAAADwCQAAAAAAAAAAAADwCQAAAAAAAPEJAAAAAAAAAAAAAPEJAAAAAAAA8gkAAAAAAAAAAAAA8gkAAAAAAADzCQAAAAAAAAAAAADzCQAAAAAAAPQJAAAAAAAAAAAAAPQJAAAAAAAA9QkAAAAAAAAAAAAA9QkAAAAAAAD2CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7gkAAAAAAADyCQAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAPcJAAAAAAAA+AkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9wkAAAAAAAD3CQAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPgJAAAAAAAA+QkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+AkAAAAAAAD4CQAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAPkJAAAAAAAA+wkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QkAAAAAAAD5CQAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": " true,"
					},
					"BgAAAPoJAAAAAAAA+wkAAAAAAAAAAAAA+wkAAAAAAAD8CQAAAAAAAAAAAAD8CQAAAAAAAP0JAAAAAAAAAAAAAP0JAAAAAAAA/gkAAAAAAAAAAAAA/gkAAAAAAAD/CQAAAAAAAAAAAAD/CQAAAAAAAAAKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+gkAAAAAAAD6CQAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": " null"
					},
					"BQAAAAAKAAAAAAAAAQoAAAAAAAAAAAAAAQoAAAAAAAACCgAAAAAAAAAAAAACCgAAAAAAAAMKAAAAAAAAAAAAAAMKAAAAAAAABAoAAAAAAAAAAAAABAoAAAAAAAAFCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAoAAAAAAAAACgAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAYKAAAAAAAABwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgoAAAAAAAAGCgAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAcKAAAAAAAACAoAAAAAAAAAAAAACAoAAAAAAAAOCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwoAAAAAAAAHCgAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAA4KAAAAAAAAEAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADgoAAAAAAAAOCgAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "ssl-key"
					},
					"BwAAAA8KAAAAAAAAEAoAAAAAAAAAAAAAEAoAAAAAAAARCgAAAAAAAAAAAAARCgAAAAAAABIKAAAAAAAAAAAAABIKAAAAAAAAEwoAAAAAAAAAAAAAEwoAAAAAAAAUCgAAAAAAAAAAAAAUCgAAAAAAABUKAAAAAAAAAAAAABUKAAAAAAAAFgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADwoAAAAAAAAPCgAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAABcKAAAAAAAAGAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFwoAAAAAAAAXCgAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABgKAAAAAAAAGQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGAoAAAAAAAAYCgAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAABkKAAAAAAAAGwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGQoAAAAAAAAZCgAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "true,"
					},
					"BQAAABoKAAAAAAAAGwoAAAAAAAAAAAAAGwoAAAAAAAAcCgAAAAAAAAAAAAAcCgAAAAAAAB0KAAAAAAAAAAAAAB0KAAAAAAAAHgoAAAAAAAAAAAAAHgoAAAAAAAAfCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgoAAAAAAAAaCgAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": " nuil"
					},
					"BQAAAB8KAAAAAAAAIAoAAAAAAAAAAAAAIAoAAAAAAAAhCgAAAAAAAAAAAAAhCgAAAAAAACIKAAAAAAAAAAAAACIKAAAAAAAAIwoAAAAAAAAAAAAAIwoAAAAAAAAkCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwoAAAAAAAAfCgAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					2,
					"left_delete",
					null,
					"AgAAACMKAAAAAAAAIwoAAAAAAAABAAAAbCIKAAAAAAAAIgoAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAJAoAAAAAAAAkCgAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "ll"
					},
					"AgAAACIKAAAAAAAAIwoAAAAAAAAAAAAAIwoAAAAAAAAkCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIgoAAAAAAAAiCgAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACUKAAAAAAAAJgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJQoAAAAAAAAlCgAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIAKAAAAAAAAgQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAoAAAAAAACACgAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": " ssl"
					},
					"BAAAAIEKAAAAAAAAggoAAAAAAAAAAAAAggoAAAAAAACDCgAAAAAAAAAAAACDCgAAAAAAAIQKAAAAAAAAAAAAAIQKAAAAAAAAhQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgQoAAAAAAACBCgAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					3,
					"left_delete",
					null,
					"AwAAAIQKAAAAAAAAhAoAAAAAAAABAAAAbIMKAAAAAAAAgwoAAAAAAAABAAAAc4IKAAAAAAAAggoAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAhQoAAAAAAACFCgAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAIIKAAAAAAAAhAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggoAAAAAAACCCgAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "ssl-cert"
					},
					"CAAAAIMKAAAAAAAAhAoAAAAAAAAAAAAAhAoAAAAAAACFCgAAAAAAAAAAAACFCgAAAAAAAIYKAAAAAAAAAAAAAIYKAAAAAAAAhwoAAAAAAAAAAAAAhwoAAAAAAACICgAAAAAAAAAAAACICgAAAAAAAIkKAAAAAAAAAAAAAIkKAAAAAAAAigoAAAAAAAAAAAAAigoAAAAAAACLCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwoAAAAAAACDCgAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAIwKAAAAAAAAjQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAoAAAAAAACMCgAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": " sslCert"
					},
					"CAAAAI0KAAAAAAAAjgoAAAAAAAAAAAAAjgoAAAAAAACPCgAAAAAAAAAAAACPCgAAAAAAAJAKAAAAAAAAAAAAAJAKAAAAAAAAkQoAAAAAAAAAAAAAkQoAAAAAAACSCgAAAAAAAAAAAACSCgAAAAAAAJMKAAAAAAAAAAAAAJMKAAAAAAAAlAoAAAAAAAAAAAAAlAoAAAAAAACVCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQoAAAAAAACNCgAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAJUKAAAAAAAAlgoAAAAAAAAAAAAAlgoAAAAAAACXCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQoAAAAAAACVCgAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJcKAAAAAAAAmAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlwoAAAAAAACXCgAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					3,
					"left_delete",
					null,
					"AwAAAJcKAAAAAAAAlwoAAAAAAAABAAAAIJYKAAAAAAAAlgoAAAAAAAABAAAAPZUKAAAAAAAAlQoAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAmAoAAAAAAACYCgAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJUKAAAAAAAAlgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQoAAAAAAACVCgAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJYKAAAAAAAAlwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlgoAAAAAAACWCgAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAJcKAAAAAAAAmQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlwoAAAAAAACXCgAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": "ssl-key"
					},
					"BwAAAJgKAAAAAAAAmQoAAAAAAAAAAAAAmQoAAAAAAACaCgAAAAAAAAAAAACaCgAAAAAAAJsKAAAAAAAAAAAAAJsKAAAAAAAAnAoAAAAAAAAAAAAAnAoAAAAAAACdCgAAAAAAAAAAAACdCgAAAAAAAJ4KAAAAAAAAAAAAAJ4KAAAAAAAAnwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmAoAAAAAAACYCgAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAKAKAAAAAAAAoQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAoAAAAAAACgCgAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": " sslKey"
					},
					"BwAAAKEKAAAAAAAAogoAAAAAAAAAAAAAogoAAAAAAACjCgAAAAAAAAAAAACjCgAAAAAAAKQKAAAAAAAAAAAAAKQKAAAAAAAApQoAAAAAAAAAAAAApQoAAAAAAACmCgAAAAAAAAAAAACmCgAAAAAAAKcKAAAAAAAAAAAAAKcKAAAAAAAAqAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoQoAAAAAAAChCgAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "'√º"
					},
					"AgAAABMKAAAAAAAAFAoAAAAAAAAAAAAAFAoAAAAAAAAVCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwoAAAAAAAATCgAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"left_delete",
					null,
					"AQAAABQKAAAAAAAAFAoAAAAAAAACAAAAw7w",
					"AQAAAAAAAAABAAAAFQoAAAAAAAAVCgAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAABQKAAAAAAAAFQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAoAAAAAAAAUCgAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					2,
					"left_delete",
					null,
					"AgAAABQKAAAAAAAAFAoAAAAAAAABAAAAcBMKAAAAAAAAEwoAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAFQoAAAAAAAAVCgAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": "private-"
					},
					"CAAAABMKAAAAAAAAFAoAAAAAAAAAAAAAFAoAAAAAAAAVCgAAAAAAAAAAAAAVCgAAAAAAABYKAAAAAAAAAAAAABYKAAAAAAAAFwoAAAAAAAAAAAAAFwoAAAAAAAAYCgAAAAAAAAAAAAAYCgAAAAAAABkKAAAAAAAAAAAAABkKAAAAAAAAGgoAAAAAAAAAAAAAGgoAAAAAAAAbCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwoAAAAAAAATCgAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"paste",
					null,
					"AQAAAKQKAAAAAAAArAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApAoAAAAAAACkCgAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": "P√®r"
					},
					"AwAAALUKAAAAAAAAtgoAAAAAAAAAAAAAtgoAAAAAAAC3CgAAAAAAAAAAAAC3CgAAAAAAALgKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQoAAAAAAAC1CgAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					2,
					"left_delete",
					null,
					"AgAAALcKAAAAAAAAtwoAAAAAAAABAAAAcrYKAAAAAAAAtgoAAAAAAAACAAAAw6g",
					"AQAAAAAAAAABAAAAuAoAAAAAAAC4CgAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": "rivate"
					},
					"BgAAALYKAAAAAAAAtwoAAAAAAAAAAAAAtwoAAAAAAAC4CgAAAAAAAAAAAAC4CgAAAAAAALkKAAAAAAAAAAAAALkKAAAAAAAAugoAAAAAAAAAAAAAugoAAAAAAAC7CgAAAAAAAAAAAAC7CgAAAAAAALwKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtgoAAAAAAAC2CgAAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": "\nsslCert"
					},
					"CgAAABIRAAAAAAAAExEAAAAAAAAAAAAAExEAAAAAAAAXEQAAAAAAAAAAAAAXEQAAAAAAABkRAAAAAAAAAAAAABkRAAAAAAAAGhEAAAAAAAAAAAAAGhEAAAAAAAAbEQAAAAAAAAAAAAAbEQAAAAAAABwRAAAAAAAAAAAAABwRAAAAAAAAHREAAAAAAAAAAAAAHREAAAAAAAAeEQAAAAAAAAAAAAAeEQAAAAAAAB8RAAAAAAAAAAAAAB8RAAAAAAAAIBEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEhEAAAAAAAASEQAAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACARAAAAAAAAIREAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIBEAAAAAAAAgEQAAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": "\nsslP"
					},
					"BgAAACERAAAAAAAAIhEAAAAAAAAAAAAAIhEAAAAAAAAoEQAAAAAAAAAAAAAoEQAAAAAAACkRAAAAAAAAAAAAACkRAAAAAAAAKhEAAAAAAAAAAAAAKhEAAAAAAAArEQAAAAAAAAAAAAArEQAAAAAAACwRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIREAAAAAAAAhEQAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"insert_completion",
					{
						"completion": "sslPrivateKey",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "sslPrivateKey"
					},
					"AgAAACgRAAAAAAAAKBEAAAAAAAAEAAAAc3NsUCgRAAAAAAAANREAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALBEAAAAAAAAsEQAAAAAAAAAAAAAAAPC/"
				],
				[
					135,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADURAAAAAAAANhEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANREAAAAAAAA1EQAAAAAAAAAAAAAAAPC/"
				],
				[
					144,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC4HQAAaW1wb3J0ICogYXMgc3RkIGZyb20gJ3N0ZCc7CmltcG9ydCAqIGFzIG9zIGZyb20gJ29zJzsKaW1wb3J0ICogYXMgZGVlcCBmcm9tICcuL2xpYi9kZWVwLmpzJzsKLy9pbXBvcnQgZnMgZnJvbSAnLi9saWIvZmlsZXN5c3RlbS5qcyc7CmltcG9ydCAqIGFzIHBhdGggZnJvbSAnLi9saWIvcGF0aC5qcyc7CmltcG9ydCBVdGlsIGZyb20gJy4vbGliL3V0aWwuanMnOwppbXBvcnQgeyBDb25zb2xlIH0gZnJvbSAnY29uc29sZSc7CmltcG9ydCBSRVBMIGZyb20gJy4vcXVpY2tqcy9tb2R1bGVzL2xpYi9yZXBsLmpzJzsKaW1wb3J0IGluc3BlY3QgZnJvbSAnLi9saWIvb2JqZWN0SW5zcGVjdC5qcyc7CmltcG9ydCAqIGFzIFRlcm1pbmFsIGZyb20gJy4vdGVybWluYWwuanMnOwppbXBvcnQgKiBhcyBmcyBmcm9tICcuL2xpYi9maWxlc3lzdGVtLmpzJzsKaW1wb3J0IHsgZXh0ZW5kQXJyYXkgfSBmcm9tICcuL2xpYi9taXNjLmpzJzsKaW1wb3J0ICogYXMgbmV0IGZyb20gJ25ldCc7CmltcG9ydCB7IFNvY2tldCwgcmVjdiwgc2VuZCwgZXJybm8gfSBmcm9tICcuL3NvY2tldC5qcyc7CmltcG9ydCB7IEV2ZW50RW1pdHRlciwgRXZlbnRUYXJnZXQsIGV2ZW50aWZ5IH0gZnJvbSAnLi9saWIvZXZlbnRzLmpzJzsKaW1wb3J0IHsgUmVwZWF0ZXIgfSBmcm9tICcuL2xpYi9yZXBlYXRlci9yZXBlYXRlci5qcyc7CmltcG9ydCB7IGZubWF0Y2gsIFBBVEhfRk5NX01VTFRJIH0gZnJvbSAnLi9saWIvZm5tYXRjaC5qcyc7CgppbXBvcnQgcnBjIGZyb20gJy4vcXVpY2tqcy9uZXQvcnBjLmpzJzsKLy9pbXBvcnQgeyBSUENTZXJ2ZXIsIFJQQ0NsaWVudCwgUlBDQXBpLCBSUENTb2NrZXQsUlBDRmFjdG9yeSB9IGZyb20gJy4vcXVpY2tqcy9uZXQvcnBjLmpzJzsKaW1wb3J0ICogYXMgcnBjMiBmcm9tICcuL3F1aWNranMvbmV0L3JwYy5qcyc7CgpleHRlbmRBcnJheSgpOwoKZnVuY3Rpb24gUmVhZEpTT04oZmlsZW5hbWUpIHsKICBsZXQgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhmaWxlbmFtZSwgJ3V0Zi04Jyk7CgogIGlmKGRhdGEpIGNvbnNvbGUubG9nKGBSZWFkSlNPTignJHtmaWxlbmFtZX0nKSAke2RhdGEubGVuZ3RofSBieXRlcyByZWFkYCk7CiAgcmV0dXJuIGRhdGEgPyBKU09OLnBhcnNlKGRhdGEpIDogbnVsbDsKfQoKZnVuY3Rpb24gV3JpdGVGaWxlKG5hbWUsIGRhdGEsIHZlcmJvc2UgPSB0cnVlKSB7CiAgaWYoVXRpbC5pc0dlbmVyYXRvcihkYXRhKSkgewogICAgbGV0IGZkID0gZnMub3BlblN5bmMobmFtZSwgb3MuT19XUk9OTFkgfCBvcy5PX1RSVU5DIHwgb3MuT19DUkVBVCwgMHgxYTQpOwogICAgbGV0IHIgPSAwOwogICAgZm9yKGxldCBpdGVtIG9mIGRhdGEpIHsKICAgICAgciArPSBmcy53cml0ZVN5bmMoZmQsIHRvQXJyYXlCdWZmZXIoaXRlbSArICcnKSk7CiAgICB9CiAgICBmcy5jbG9zZVN5bmMoZmQpOwogICAgbGV0IHN0YXQgPSBmcy5zdGF0U3luYyhuYW1lKTsKICAgIHJldHVybiBzdGF0Py5zaXplOwogIH0KICBpZihVdGlsLmlzSXRlcmF0b3IoZGF0YSkpIGRhdGEgPSBbLi4uZGF0YV07CiAgaWYoVXRpbC5pc0FycmF5KGRhdGEpKSBkYXRhID0gZGF0YS5qb2luKCdcbicpOwoKICBpZih0eXBlb2YgZGF0YSA9PSAnc3RyaW5nJyAmJiAhZGF0YS5lbmRzV2l0aCgnXG4nKSkgZGF0YSArPSAnXG4nOwogIGxldCByZXQgPSBmcy53cml0ZUZpbGVTeW5jKG5hbWUsIGRhdGEpOwoKICBpZih2ZXJib3NlKSBjb25zb2xlLmxvZyhgV3JvdGUgJHtuYW1lfTogJHtyZXR9IGJ5dGVzYCk7Cn0KCmZ1bmN0aW9uIFdyaXRlSlNPTihuYW1lLCBkYXRhKSB7CiAgV3JpdGVGaWxlKG5hbWUsIEpTT04uc3RyaW5naWZ5KGRhdGEsIG51bGwsIDIpKTsKfQoKZnVuY3Rpb24gbWFpbiguLi5hcmdzKSB7CiAgY29uc3QgYmFzZSA9IHBhdGguYmFzZW5hbWUoVXRpbC5nZXRBcmd2KClbMV0sICcuanMnKS5yZXBsYWNlKC9cLlthLXpdKiQvLCAnJyk7CiAgY29uc3QgY29uZmlnID0gUmVhZEpTT04oYC4ke2Jhc2V9LWNvbmZpZ2ApID8/IHt9OwogIGdsb2JhbFRoaXMuY29uc29sZSA9IG5ldyBDb25zb2xlKHsKICAgIGluc3BlY3RPcHRpb25zOiB7CiAgICAgIGNvbG9yczogdHJ1ZSwKICAgICAgZGVwdGg6IEluZmluaXR5LAogICAgICBjb21wYWN0OiAxLAogICAgICBjdXN0b21JbnNwZWN0OiB0cnVlLAogICAgICBnZXR0ZXJzOiBmYWxzZSwKICAgICAgLi4uKGNvbmZpZy5pbnNwZWN0T3B0aW9ucyA/PyB7fSkKICAgIH0KICB9KTsKICBsZXQgcGFyYW1zID0gVXRpbC5nZXRPcHQoCiAgICB7CiAgICAgIHZlcmJvc2U6IFtmYWxzZSwgKGEsIHYpID0+ICh2IHwgMCkgKyAxLCAndiddLAogICAgICBsaXN0ZW46IFtmYWxzZSwgbnVsbCwgJ2wnXSwKICAgICAgY29ubmVjdDogW2ZhbHNlLCBudWxsLCAnYyddLAogICAgICBjbGllbnQ6IFtmYWxzZSwgbnVsbCwgJ0MnXSwKICAgICAgc2VydmVyOiBbZmFsc2UsIG51bGwsICdTJ10sCiAgICAgIGRlYnVnOiBbZmFsc2UsIG51bGwsICd4J10sCiAgICAgIGFkZHJlc3M6IFt0cnVlLCBudWxsLCAnYSddLAogICAgICBwb3J0OiBbdHJ1ZSwgbnVsbCwgJ3AnXSwKICAgICAgJ3NzbC1jZXJ0JzogWyB0cnVlLCBudWxsXSwKICAgICAgJ3NzbC1wcml2YXRlLWtleSc6IFt0cnVlLCBudWxsXSwKICAgICAgJ0AnOiAnYWRkcmVzcyxwb3J0JwogICAgfSwKICAgIGFyZ3MKICApOwogIGNvbnN0IHsgYWRkcmVzcyA9ICcwLjAuMC4wJywgcG9ydCA9IDg5OTksICdzc2wtY2VydCc6IHNzbENlcnQsICdzc2wtcHJpdmF0ZS1rZXknOiBzc2xQcml2YXRlS2V5IH0gPSBwYXJhbXM7CiAgY29uc3QgbGlzdGVuID0gcGFyYW1zLmNvbm5lY3QgJiYgIXBhcmFtcy5saXN0ZW4gPyBmYWxzZSA6IHRydWU7CiAgY29uc3Qgc2VydmVyID0gIXBhcmFtcy5jbGllbnQgfHwgcGFyYW1zLnNlcnZlcjsKICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHsKICAgIEV2ZW50RW1pdHRlciwKICAgIEV2ZW50VGFyZ2V0LAogICAgZXZlbnRpZnksCiAgICBSZXBlYXRlciwKICAgIGZubWF0Y2gsCiAgICBQQVRIX0ZOTV9NVUxUSSwKICAgIC4uLnJwYzIsCiAgICBycGMKICB9KTsKICBsZXQgbmFtZSA9IFV0aWwuZ2V0QXJncygpWzBdOwogIG5hbWUgPSBuYW1lCiAgICAucmVwbGFjZSgvLipcLy8sICcnKQogICAgLnJlcGxhY2UoLy0vZywgJyAnKQogICAgLnJlcGxhY2UoL1wuW15cLy5dKiQvLCAnJyk7CgogIGxldCBbcHJlZml4LCBzdWZmaXhdID0gbmFtZS5zcGxpdCgnICcpOwoKICBsZXQgcmVwbCA9IG5ldyBSRVBMKGBceDFiWzM4OzU7MTY1bSR7cHJlZml4fSBceDFiWzM4OzU7MzltJHtzdWZmaXh9XHgxYlswbWAsIGZzLCBmYWxzZSk7CgogIHJlcGwuaGlzdG9yeUxvYWQobnVsbCwgZmFsc2UpOwoKICByZXBsLmhlbHAgPSAoKSA9PiB7fTsKICBsZXQgeyBsb2cgfSA9IGNvbnNvbGU7CiAgcmVwbC5zaG93ID0gYXJnID0+IHN0ZC5wdXRzKHR5cGVvZiBhcmcgPT0gJ3N0cmluZycgPyBhcmcgOiBpbnNwZWN0KGFyZywgZ2xvYmFsVGhpcy5jb25zb2xlLm9wdGlvbnMpKTsKCiAgcmVwbC5jbGVhbnVwID0gKCkgPT4gewogICAgcmVwbC5yZWFkbGluZVJlbW92ZVByb21wdCgpOwogICAgVGVybWluYWwubW91c2V0cmFja2luZ0Rpc2FibGUoKTsKICAgIGxldCBudW1MaW5lcyA9IHJlcGwuaGlzdG9yeVNhdmUoKTsKCiAgICByZXBsLnByaW50U3RhdHVzKGBFWElUICh3cm90ZSAke251bUxpbmVzfSBoaXN0b3J5IGVudHJpZXMpYCwgZmFsc2UpOwoKICAgIHN0ZC5leGl0KDApOwogIH07CgogIGNvbnNvbGUubG9nID0gcmVwbC5wcmludEZ1bmN0aW9uKGxvZyk7CgogIGxldCBjbGkgPSAoZ2xvYmFsVGhpcy5zb2NrID0gbmV3IHJwYy5Tb2NrZXQoYCR7YWRkcmVzc306JHtwb3J0fWAsIHJwY1tgUlBDJHtzZXJ2ZXIgPyAnU2VydmVyJyA6ICdDbGllbnQnfUNvbm5lY3Rpb25gXSwgK3BhcmFtcy52ZXJib3NlKSk7CgogIGNsaS5yZWdpc3Rlcih7IFNvY2tldCwgV29ya2VyOiBvcy5Xb3JrZXIsIFJlcGVhdGVyLCBSRVBMLCBFdmVudEVtaXR0ZXIgfSk7CgogIGxldCBjb25uZWN0aW9ucyA9IG5ldyBTZXQoKTsKICBjb25zdCBjcmVhdGVXUyA9IChnbG9iYWxUaGlzLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzLCBsaXN0ZW4pID0+IHsKICAgIC8vY29uc29sZS5sb2coJ2NyZWF0ZVdTJywgeyB1cmwsIGNhbGxiYWNrcywgbGlzdGVuIH0pOwoKICAgIG5ldC5zZXRMb2coMCAvKm5ldC5MTExfREVCVUctMSovLCAobGV2ZWwsIC4uLmFyZ3MpID0+IGNvbnNvbGUubG9nKChbJ2VycicsICd3YXJuJywgJ25vdGljZScsICdpbmZvJywgJ2RlYnVnJ11bTWF0aC5sb2cyKGxldmVsKV0gPz8gbGV2ZWwgKyAnJykucGFkRW5kKDgpLnRvVXBwZXJDYXNlKCksIC4uLmFyZ3MpKTsKCiAgICByZXR1cm4gW25ldC5jbGllbnQsIG5ldC5zZXJ2ZXJdWytsaXN0ZW5dKHsKICAgICAgc3NsQ2VydCwKICAgICAgc3NsUHJpdmF0ZUtleSwKICAgICAgbW91bnRzOiBbCiAgICAgICAgZnVuY3Rpb24qIGluZGV4KHJlcSwgcmVzKSB7CiAgICAgICAgICBjb25zb2xlLmxvZyhyZXEucGF0aCwgeyByZXEsIHJlcyB9KTsKICAgICAgICAgIHlpZWxkICc8aHRtbD4nOwogICAgICAgICAgeWllbGQgJzxoZWFkPic7CiAgICAgICAgICB5aWVsZCAnPC9oZWFkPic7CiAgICAgICAgICB5aWVsZCAnPGJvZHk+JzsKICAgICAgICAgIHlpZWxkICc8L2JvZHk+JzsKICAgICAgICAgIHlpZWxkICc8L2h0bWw+JzsKICAgICAgICB9LCAgICBmdW5jdGlvbiogY29uZmlnKHJlcSwgcmVzKSB7CiAgICAgICAgICBjb25zb2xlLmxvZyhyZXEucGF0aCwgeyByZXEsIHJlcyB9KTsKICAgICAgICAgIHlpZWxkICd7fSc7CiAgICAgICAgfSwKICAgICAgICBmdW5jdGlvbiogZmlsZXMocmVxLCByZXNwKSB7CiAgICAgICAvLyAgIHJlc3AudHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uJzsKCiAgICAgICAgICBjb25zb2xlLmxvZygnXHgxYlszODs1OzIxNW0qZmlsZXNceDFiWzBtJywge3JlcSxyZXNwfSk7CiAgICAgICAgICAvLyAgY29uc29sZS5sb2coJ2hlYWRlcnMnLCByZXNwLmhlYWRlcnMpOwoKCiAgICAgICAgICBsZXQgZGlyID0gJ3RtcCc7CiAgICAgICAgICBsZXQgbmFtZXMgPSBmcy5yZWFkZGlyU3luYyhkaXIpOwoKICAgICAgICAgIG5hbWVzID0gbmFtZXMuZmlsdGVyKG5hbWUgPT4gL1wuKGJyZHxzY2h8R1tBLVpdW0EtWl0pJC8udGVzdChuYW1lKSk7CiAgICAgICAgICBuYW1lcyA9IG5hbWVzLm1hcChlbnRyeSA9PiBgJHtkaXJ9LyR7ZW50cnl9YCk7CgogICAgICAgICAgbGV0IGVudHJpZXMgPSBuYW1lcy5tYXAoZmlsZSA9PiBbZmlsZSwgZnMuc3RhdFN5bmMoZmlsZSldKTsKCiAgICAgICAgICB5aWVsZCBKU09OLnN0cmluZ2lmeSgKICAgICAgICAgICAgZW50cmllcwogICAgICAgICAgICAgIC5maWx0ZXIoKFtmaWxlLCBzdF0pID0+IHN0LmlzRmlsZSgpKQogICAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBiWzFdLm10aW1lIC0gYVsxXS5tdGltZSkKICAgICAgICAgICAgICAucmVkdWNlKChhY2MsIFtmaWxlLCBzdF0pID0+IHsKICAgICAgICAgICAgICAgIGxldCBvYmogPSB7CiAgICAgICAgICAgICAgICAgIG5hbWU6IGZpbGUKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgYWNjLnB1c2goCiAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ob2JqLCB7CiAgICAgICAgICAgICAgICAgICAgbXRpbWU6IFV0aWwudG9Vbml4VGltZShzdC5tdGltZSksCiAgICAgICAgICAgICAgICAgICAgdGltZTogVXRpbC50b1VuaXhUaW1lKHN0LmN0aW1lKSwKICAgICAgICAgICAgICAgICAgICBtb2RlOiBgMCR7KHN0Lm1vZGUgJiAweDA5ZmYpLnRvU3RyaW5nKDgpfWAsCiAgICAgICAgICAgICAgICAgICAgc2l6ZTogc3Quc2l6ZQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIHJldHVybiBhY2M7CiAgICAgICAgICAgICAgfSwgW10pLAogICAgICAgICAgICBudWxsLAogICAgICAgICAgICAyCiAgICAgICAgICApOwogICAgICAgIH0sCiAgICAgICAgWycvJywgJy4nLCAnZGVidWdnZXIuaHRtbCddCiAgICAgIF0sCiAgICAgIC4uLnVybCwKICAgICAgb25GZCguLi5hcmdzKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1x4MWJbMzg7NTs4Mm1vb25GZFx4MWJbMG0oJywgLi4uYXJncywgJyknKTsKICAgICAgfSwKICAgICAgb25Db25uZWN0KHMpIHsKICAgICAgICBjb25zb2xlLmxvZygnXHgxYlszODs1OzgybW9vbkNvbm5lY3RceDFiWzBtJywgcyk7CiAgICAgIH0sCiAgICAgIG9uT3BlbihzKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1x4MWJbMzg7NTs4Mm1vb25PcGVuXHgxYlswbScsIHMpOwogICAgICB9LAogICAgICAuLi5jYWxsYmFja3MsCiAgICAgIG9uSHR0cChyZXEsIHJzcCkgewogICAgICAgIGNvbnNvbGUubG9nKCdceDFiWzM4OzU7ODJtb25IdHRwXHgxYlswbSgnLCByZXEsIHJzcCwgJyknKTsKICAgICAgICAvKiAgIHJzcCA9IG5ldyBuZXQuUmVzcG9uc2UocmVxLnVybCwgMzAxLCB0cnVlLCAnYXBwbGljYXRpb24vYmluYXJ5Jyk7CiAgICAgICAgICByc3AuaGVhZGVyKCdCbGFoJywgJ1hYWFgnKTsqLwogICAgICAgIHJldHVybiByc3A7CiAgICAgIH0sCiAgICAgIC4uLih1cmwgJiYgdXJsLmhvc3QgPyB1cmwgOiB7fSkKICAgIH0pOwogIH0pOwoKICBnbG9iYWxUaGlzW1snY29ubmVjdGlvbicsICdsaXN0ZW5lciddWytsaXN0ZW5dXSA9IGNsaTsKCiAgZGVmaW5lKGdsb2JhbFRoaXMsIHsKICAgIGdldCBjb25uZWN0aW9ucygpIHsKICAgICAgcmV0dXJuIFsuLi5jb25uZWN0aW9uc107CiAgICB9CiAgfSk7CgogIE9iamVjdC5hc3NpZ24oZ2xvYmFsVGhpcywgewogICAgcmVwbCwKICAgIFV0aWwsCiAgICAuLi5ycGMsCiAgICBxdWl0LAogICAgZXhpdDogcXVpdCwKICAgIFNvY2tldCwKICAgIHJlY3YsCiAgICBzZW5kLAogICAgZXJybm8sCiAgICBjbGksCiAgICBuZXQsCiAgICBzdGQsCiAgICBvcywKICAgIGRlZXAsCiAgICBmcywKICAgIHBhdGgsCiAgICBSZWFkSlNPTiwKICAgIFdyaXRlRmlsZSwKICAgIFdyaXRlSlNPTgogIH0pOwoKICBkZWZpbmUoZ2xvYmFsVGhpcywgbGlzdGVuID8geyBzZXJ2ZXI6IGNsaSwgY2xpIH0gOiB7IGNsaWVudDogY2xpLCBjbGkgfSk7CiAgZGVsZXRlIGdsb2JhbFRoaXMuREVCVUc7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGdsb2JhbFRoaXMsICdERUJVRycsIHsgZ2V0OiBEZWJ1Z0ZsYWdzIH0pOwoKICBpZihsaXN0ZW4pIGNsaS5saXN0ZW4oY3JlYXRlV1MsIG9zKTsKICBlbHNlIGNsaS5jb25uZWN0KGNyZWF0ZVdTLCBvcyk7CgogIGZ1bmN0aW9uIHF1aXQod2h5KSB7CiAgICBjb25zb2xlLmxvZyhgcXVpdCgnJHt3aHl9JylgKTsKCiAgICBsZXQgY2ZnID0geyBpbnNwZWN0T3B0aW9uczogY29uc29sZS5vcHRpb25zIH07CiAgICBXcml0ZUpTT04oYC4ke2Jhc2V9LWNvbmZpZ2AsIGNmZyk7CiAgICByZXBsLmNsZWFudXAod2h5KTsKICB9CgogIHJlcGwucnVuU3luYygpOwp9Cgp0cnkgewogIG1haW4oLi4uc2NyaXB0QXJncy5zbGljZSgxKSk7Cn0gY2F0Y2goZXJyb3IpIHsKICBjb25zb2xlLmxvZyhgRkFJTDogJHtlcnJvci5tZXNzYWdlfVxuJHtlcnJvci5zdGFja31gKTsKICBzdGQuZXhpdCgxKTsKfSBmaW5hbGx5IHsKICAvL2NvbnNvbGUubG9nKCdTVUNDRVNTJyk7Cn0KAAAAAAAAAAAgHgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUhIAAAAAAABSEgAAAAAAAAAAAAAAAPC/"
				],
				[
					205,
					1,
					"cut",
					null,
					"AQAAABkEAAAAAAAAGQQAAAAAAAANAAAAJyR7ZmlsZW5hbWV9Jw",
					"AQAAAAAAAAABAAAAGQQAAAAAAAAmBAAAAAAAAAAAAAAAAPC/"
				],
				[
					208,
					1,
					"insert",
					{
						"characters": " from"
					},
					"BQAAADQEAAAAAAAANQQAAAAAAAAAAAAANQQAAAAAAAA2BAAAAAAAAAAAAAA2BAAAAAAAADcEAAAAAAAAAAAAADcEAAAAAAAAOAQAAAAAAAAAAAAAOAQAAAAAAAA5BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAQAAAAAAAA0BAAAAAAAAAAAAAAAAPC/"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADkEAAAAAAAAOgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQQAAAAAAAA5BAAAAAAAAAAAAAAAAPC/"
				],
				[
					210,
					1,
					"paste",
					null,
					"AQAAADoEAAAAAAAARwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOgQAAAAAAAA6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					213,
					1,
					"left_delete",
					null,
					"AQAAABAEAAAAAAAAEAQAAAAAAAALAAAAUmVhZEpTT04oKSA",
					"AQAAAAAAAAABAAAAEAQAAAAAAAAbBAAAAAAAAAAAAAAAAPC/"
				],
				[
					216,
					3,
					"left_delete",
					null,
					"AwAAAA0EAAAAAAAADQQAAAAAAAABAAAAZwwEAAAAAAAADAQAAAAAAAABAAAAbwsEAAAAAAAACwQAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAADgQAAAAAAAAOBAAAAAAAAAAAAAAAAPC/"
				],
				[
					217,
					1,
					"insert",
					{
						"characters": "debug"
					},
					"BQAAAAsEAAAAAAAADAQAAAAAAAAAAAAADAQAAAAAAAANBAAAAAAAAAAAAAANBAAAAAAAAA4EAAAAAAAAAAAAAA4EAAAAAAAADwQAAAAAAAAAAAAADwQAAAAAAAAQBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACwQAAAAAAAALBAAAAAAAAAAAAAAAAPC/"
				],
				[
					265,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAABIQAAAAAAAAExAAAAAAAAAAAAAAExAAAAAAAAATEAAAAAAAAAYAAAAgICAgLy8",
					"AQAAAAAAAAABAAAAGBAAAAAAAAASEAAAAAAAAAAAAAAAAPC/"
				],
				[
					268,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAOsXAAAAAAAA7BcAAAAAAAAAAAAA7BcAAAAAAADsFwAAAAAAAAYBAAAgICBvbkZkKC4uLmFyZ3MpIHsKICAgICAgICBjb25zb2xlLmxvZygnXHgxYlszODs1OzgybW9vbkZkXHgxYlswbSgnLCAuLi5hcmdzLCAnKScpOwogICAgICB9LAogICAgICBvbkNvbm5lY3QocykgewogICAgICAgIGNvbnNvbGUubG9nKCdceDFiWzM4OzU7ODJtb29uQ29ubmVjdFx4MWJbMG0nLCBzKTsKICAgICAgfSwKICAgICAgb25PcGVuKHMpIHsKICAgICAgICBjb25zb2xlLmxvZygnXHgxYlszODs1OzgybW9vbk9wZW5ceDFiWzBtJywgcyk7CiAgICAgIH0s",
					"AQAAAAAAAAABAAAA6xcAAAAAAADxGAAAAAAAAAAAAAAAAPC/"
				],
				[
					312,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAEoYAAAAAAAASxgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAShgAAAAAAABKGAAAAAAAAAAAAAAAAPC/"
				],
				[
					313,
					1,
					"left_delete",
					null,
					"AQAAAEoYAAAAAAAAShgAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAASxgAAAAAAABLGAAAAAAAAAAAAAAAAPC/"
				],
				[
					314,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAEoYAAAAAAAASxgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAShgAAAAAAABKGAAAAAAAAAAAAAAAAPC/"
				],
				[
					315,
					1,
					"left_delete",
					null,
					"AQAAAEoYAAAAAAAAShgAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAASxgAAAAAAABLGAAAAAAAAAAAAAAAAPC/"
				],
				[
					316,
					1,
					"insert",
					{
						"characters": "\\n\\t"
					},
					"BAAAAEoYAAAAAAAASxgAAAAAAAAAAAAASxgAAAAAAABMGAAAAAAAAAAAAABMGAAAAAAAAE0YAAAAAAAAAAAAAE0YAAAAAAAAThgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAShgAAAAAAABKGAAAAAAAAAAAAAAAAPC/"
				],
				[
					318,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAFYYAAAAAAAAVxgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVhgAAAAAAABWGAAAAAAAAAAAAAAAAPC/"
				],
				[
					319,
					1,
					"left_delete",
					null,
					"AQAAAFYYAAAAAAAAVhgAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAVxgAAAAAAABXGAAAAAAAAAAAAAAAAPC/"
				],
				[
					320,
					1,
					"insert",
					{
						"characters": "',\\nt"
					},
					"BQAAAFYYAAAAAAAAVxgAAAAAAAAAAAAAVxgAAAAAAABYGAAAAAAAAAAAAABYGAAAAAAAAFkYAAAAAAAAAAAAAFkYAAAAAAAAWhgAAAAAAAAAAAAAWhgAAAAAAABbGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVhgAAAAAAABWGAAAAAAAAAAAAAAAAPC/"
				],
				[
					321,
					1,
					"left_delete",
					null,
					"AQAAAFoYAAAAAAAAWhgAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAWxgAAAAAAABbGAAAAAAAAAAAAAAAAPC/"
				],
				[
					322,
					1,
					"insert",
					{
						"characters": "\\t',"
					},
					"BAAAAFoYAAAAAAAAWxgAAAAAAAAAAAAAWxgAAAAAAABcGAAAAAAAAAAAAABcGAAAAAAAAF0YAAAAAAAAAAAAAF0YAAAAAAAAXhgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWhgAAAAAAABaGAAAAAAAAAAAAAAAAPC/"
				],
				[
					323,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF4YAAAAAAAAXxgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXhgAAAAAAABeGAAAAAAAAAAAAAAAAPC/"
				],
				[
					325,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAAGUYAAAAAAAAZhgAAAAAAAAAAAAAZhgAAAAAAABnGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZRgAAAAAAABlGAAAAAAAAAAAAAAAAPC/"
				],
				[
					332,
					1,
					"cut",
					null,
					"AQAAAKsXAAAAAAAAqxcAAAAAAAAlAAAALAogICAgICAgIFsnLycsICcuJywgJ2RlYnVnZ2VyLmh0bWwnXQ",
					"AQAAAAAAAAABAAAAqxcAAAAAAADQFwAAAAAAAAAAAAAAAPC/"
				],
				[
					335,
					1,
					"paste",
					null,
					"AQAAAJwRAAAAAAAAwREAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnBEAAAAAAACcEQAAAAAAAAAAAAAAAPC/"
				],
				[
					336,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAMERAAAAAAAAwhEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwREAAAAAAADBEQAAAAAAAAAAAAAAAPC/"
				],
				[
					338,
					1,
					"left_delete",
					null,
					"AQAAAJwRAAAAAAAAnBEAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAnREAAAAAAACdEQAAAAAAAAAAAAAAQHRA"
				],
				[
					341,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAL4SAAAAAAAAwBIAAAAAAAAAAAAAxxEAAAAAAADJEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxxEAAAAAAAC+EgAAAAAAAAAAAAAAAPC/"
				],
				[
					350,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAGUTAAAAAAAAZhMAAAAAAAAAAAAAZhMAAAAAAABmEwAAAAAAAAQAAAAgIC8v",
					"AQAAAAAAAAABAAAAaRMAAAAAAABlEwAAAAAAAAAAAAAAAPC/"
				],
				[
					351,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAGYTAAAAAAAAZxMAAAAAAAAAAAAAZxMAAAAAAABoEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZhMAAAAAAABmEwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "minnet-response.c",
			"settings":
			{
				"buffer_size": 9607,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/roman/Projects/plot-cv/ws-worker.js",
			"settings":
			{
				"buffer_size": 3643,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAvDgAAaW1wb3J0IHsgY2xpZW50LCBzZXJ2ZXIsIGZldGNoLCBzZXRMb2cgfSBmcm9tICduZXQnOwppbXBvcnQgKiBhcyBzdGQgZnJvbSAnc3RkJzsKaW1wb3J0ICogYXMgb3MgZnJvbSAnb3MnOwppbXBvcnQgeyBDb25zb2xlIH0gZnJvbSAnY29uc29sZSc7Cgp2YXIgcGFyZW50ID0gb3MuV29ya2VyLnBhcmVudDsKCmNvbnN0IGxvZyA9ICguLi5hcmdzKSA9PiBjb25zb2xlLmxvZygnV09SS0VSJywgLi4uYXJncyk7CgpmdW5jdGlvbiBXb3JrZXJNYWluKCkgewogIGdsb2JhbFRoaXMuY29uc29sZSA9IG5ldyBDb25zb2xlKHsKICAgIGNvbG9yczogdHJ1ZSwKICAgIGNvbXBhY3Q6IDEsCiAgICBwcmVmaXg6ICdceDFiWzM4OzU7MTI4bVdPUktFUlx4MWJbMG0nCiAgfSk7CgogIGxvZygnV29ya2VyTWFpbi5wYXJlbnQnLCBwYXJlbnQpOwogIHBhcmVudC5vbm1lc3NhZ2UgPSBlID0+IEhhbmRsZU1lc3NhZ2UuY2FsbChwYXJlbnQsIGUpOwogIG9zLnNsZWVwKDUwMCk7CiAgLy9DcmVhdGVTZXJ2ZXIoKTsKfQoKY29uc3QgY2xpZW50cyA9IG5ldyBNYXAoKTsKCmNsYXNzIFdTQ2xpZW50IHsKICBzdGF0aWMgZ2V0KGZkKSB7CiAgICByZXR1cm4gY2xpZW50cy5nZXQoZmQpOwogIH0KCiAgY29uc3RydWN0b3Ioc29ja2V0KSB7CiAgICB0aGlzLnNvY2tldCA9IHNvY2tldDsKICAgIHRoaXMuaWQgPSBXU0NsaWVudC5pZCA9IChXU0NsaWVudC5pZCA/PyAwKSArIDE7CgogICAgY2xpZW50cy5zZXQoc29ja2V0LmZkLCB0aGlzKTsKICB9Cn0KCmZ1bmN0aW9uIENyZWF0ZVNlcnZlcih7IGhvc3QgPSAnMTI3LjAuMC4xJywgcG9ydCA9IDk5MDAsIHNzbENlcnQgPSAnL2hvbWUvcm9tYW4vLmFjbWUuc2gvc2Vubi5nb3RkbnMuY2gvc2Vubi5nb3RkbnMuY2guY2VyJywgc3NsUHJpdmF0ZUtleSA9ICcvaG9tZS9yb21hbi8uYWNtZS5zaC9zZW5uLmdvdGRucy5jaC9zZW5uLmdvdGRucy5jaC5rZXknLCBpbmRleCA9ICdpbmRleC5odG1sJywgLi4ub3B0aW9ucyB9KSB7CiAgcHJpbnQoYExpc3RlbmluZyBvbiBodHRwOi8vJHtob3N0fToke3BvcnR9YCk7CiAgaWYoc3NsQ2VydCkgcHJpbnQoYFNTTCBjZXJ0aWZpY2F0ZSBmaWxlOiAke3NzbENlcnR9YCk7CiAgaWYoc3NsUHJpdmF0ZUtleSkgcHJpbnQoYFNTTCBjZXJ0aWZpY2F0ZSBmaWxlOiAke3NzbFByaXZhdGVLZXl9YCk7CiAgc2VydmVyKHsKICAgIGhvc3QsCiAgICBwb3J0LAogICAgc3NsQ2VydCwKICAgIHNzbFByaXZhdGVLZXksCiAgICBtb3VudHM6IFtbJy8nLCAnLicsIGluZGV4ID8/ICdkZWJ1Z2dlci5odG1sJ11dLAogICAgb25Db25uZWN0KHdzKSB7CiAgICAgIGxldCBjbGllbnQgPSBuZXcgV1NDbGllbnQod3MpOwogICAgICBsb2coYFNlcnZlci5vbkNvbm5lY3QgY2xpZW50IyR7Y2xpZW50LmlkfSAoJHt3cy5mZH0pYCk7CiAgICB9LAogICAgb25NZXNzYWdlKHdzLCBtc2cpIHsKICAgICAgbGV0IGNsaWVudCA9IFdTQ2xpZW50LmdldCh3cy5mZCk7CiAgICAgIGxvZyhgU2VydmVyLm9uTWVzc2FnZSBjbGllbnQjJHtjbGllbnQuaWR9ICgke3dzLmZkfSlgKTsKCiAgICAgIGlmKHR5cGVvZiBtc2cgPT0gJ3N0cmluZycpIHsKICAgICAgICBjb25zdCBtZXNzYWdlID0geyBpZDogY2xpZW50LmlkLCB0eXBlOiAnbWVzc2FnZScsIG1lc3NhZ2U6IEpTT04ucGFyc2UobXNnKSB9OwogICAgICAgIGxvZygnUmVjZWl2ZWQnLCBtZXNzYWdlKTsKICAgICAgICBwYXJlbnQucG9zdE1lc3NhZ2UobWVzc2FnZSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICB9LAogICAgb25DbG9zZSh3cywgd2h5KSB7CiAgICAgIGxldCBjbGllbnQgPSBXU0NsaWVudC5nZXQod3MuZmQpOwogICAgICBvcy5zZXRSZWFkSGFuZGxlcihmZCwgbnVsbCk7CiAgICAgIG9zLnNldFdyaXRlSGFuZGxlcihmZCwgbnVsbCk7CiAgICAgIGxvZyhgU2VydmVyLm9uQ2xvc2UgY2xpZW50IyR7Y2xpZW50LmlkfSAoJHt3cy5mZH0pYCArICh3aHkgPyAnIFJlYXNvbjogJyArIHdoeSA6ICcnKSk7CiAgICB9LAogICAgb25Qb25nKHdzLCBkYXRhKSB7CiAgICAgIGxldCBjbGllbnQgPSBXU0NsaWVudC5nZXQod3MuZmQpOwogICAgICBsb2coYFNlcnZlci5vblBvbmcgY2xpZW50IyR7Y2xpZW50LmlkfSAoJHt3cy5mZH0pYCArIChkYXRhID8gJyBEYXRhOiAnICsgZGF0YSA6ICcnKSk7CiAgICB9LAogICAgb25IdHRwKHdzLCBkYXRhKSB7CiAgICAgIGxvZyhgU2VydmVyLm9uSHR0cCB3c2AsIHdzLCBkYXRhID8gJyBEYXRhOiAnICsgZGF0YSA6ICcnKTsKICAgIH0sCiAgICBvbkJvZHkod3MpIHsKICAgICAgbG9nKGBTZXJ2ZXIub25Cb2R5IHdzYCwgd3MpOwogICAgfSwKICAgIG9uRmQoZmQsIHJlYWRhYmxlLCB3cml0YWJsZSkgewogICAgICBvcy5zZXRSZWFkSGFuZGxlcihmZCwgcmVhZGFibGUpOwogICAgICBvcy5zZXRXcml0ZUhhbmRsZXIoZmQsIHdyaXRhYmxlKTsKCiAgICAgIC8vbG9nKGBTZXJ2ZXIub25GZCAke2ZkfWAsIHJlYWRhYmxlICYmIDEgfCByZWFkYWJsZSwgd3JpdGFibGUgJiYgMSB8IHdyaXRhYmxlKTsKICAgIH0sCiAgICAuLi5vcHRpb25zCiAgfSk7Cn0KCmZ1bmN0aW9uIEhhbmRsZU1lc3NhZ2UoZSkgewogIHZhciBldiA9IGUuZGF0YTsKICBsb2coJ0hhbmRsZU1lc3NhZ2UnLCBldik7CgogIHN3aXRjaCAoZXYudHlwZSkgewogICAgY2FzZSAnc2VuZCc6IHsKICAgICAgY29uc3QgeyBpZCwgYm9keSB9ID0gZXY7CiAgICAgIGxldCBjbGllbnQ7CiAgICAgIGNvbnN0IGpzb24gPSB0eXBlb2YgYm9keSAhPSAnc3RyaW5nJyA/IEpTT04uc3RyaW5naWZ5KGJvZHkpIDogYm9keTsKCiAgICAgIGlmKChjbGllbnQgPSBbLi4uY2xpZW50cy52YWx1ZXMoKV0uZmluZChjbCA9PiBjbC5pZCA9PSBpZCkpKSBjbGllbnQuc29ja2V0LnNlbmQoanNvbik7CgogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgJ2h0dHBkJzogewogICAgICBzZXRMb2coKG1vZHVsZSwgbXNnKSA9PiB7CiAgICAgICAgaWYoL0VSUk9SLy50ZXN0KG1zZykpIHRocm93IG5ldyBFcnJvcihtc2cpOwogICAgICAgIGNvbnNvbGUubG9nKGAke21vZHVsZX0ubG9nOiAke21zZ31gKTsKICAgICAgfSk7CiAgICAgIENyZWF0ZVNlcnZlcihldik7CgogICAgICBzZXRMb2cobnVsbCk7CiAgICAgIHRoaXMucG9zdE1lc3NhZ2UoeyB0eXBlOiAnZG9uZScgfSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSAnYWJvcnQnOiB7CiAgICAgIHRoaXMucG9zdE1lc3NhZ2UoeyB0eXBlOiAnZG9uZScgfSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSAnc2FiJzoKICAgICAgLyogbW9kaWZ5IHRoZSBTaGFyZWRBcnJheUJ1ZmZlciAqLwogICAgICBldi5idWZbMl0gPSAxMDsKICAgICAgZXYuYnVmWzNdID0gOTsKICAgICAgZXYuYnVmWzRdID0gODsKICAgICAgZXYuYnVmWzVdID0gNzsKICAgICAgZXYuYnVmWzZdID0gNjsKICAgICAgdGhpcy5wb3N0TWVzc2FnZSh7IHR5cGU6ICdzYWJfZG9uZScsIGJ1ZjogZXYuYnVmIH0pOwogICAgICBicmVhazsKICB9Cn0KCnRyeSB7CiAgV29ya2VyTWFpbigpOwp9IGNhdGNoKGVycm9yKSB7CiAgY29uc29sZS5sb2coYEZBSUw6ICR7ZXJyb3I/Lm1lc3NhZ2V9XG4ke2Vycm9yPy5zdGFja31gKTsKICBzdGQuZXhpdCgxKTsKfSBmaW5hbGx5IHsKICBjb25zb2xlLmxvZygnU1VDQ0VTUycpOwp9CgAAAAAAAAAAOw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAugQAAAAAAADHBAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "minnet-server.h",
			"settings":
			{
				"buffer_size": 1134,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					14,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAI2lmbmRlZiBNSU5ORVRfU0VSVkVSX0gKI2RlZmluZSBNSU5ORVRfU0VSVkVSX0gKCiNpbmNsdWRlIDxxdWlja2pzLmg+CiNpbmNsdWRlICJtaW5uZXQuaCIKI2luY2x1ZGUgIm1pbm5ldC1yZXNwb25zZS5oIgojaW5jbHVkZSAibWlubmV0LXJlcXVlc3QuaCIKCnR5cGVkZWYgc3RydWN0IGh0dHBfbW91bnQgewogIHVuaW9uIHsKICAgIHN0cnVjdCB7CiAgICAgIHN0cnVjdCBodHRwX21vdW50KiBuZXh0OwogICAgICBjb25zdCBjaGFyICptbnQsICpvcmcsICpkZWYsICpwcm87CiAgICB9OwogICAgc3RydWN0IGx3c19odHRwX21vdW50IGx3czsKICB9OwogIE1pbm5ldENhbGxiYWNrIGNhbGxiYWNrOwp9IE1pbm5ldEh0dHBNb3VudDsKCnR5cGVkZWYgc3RydWN0IGh0dHBfc2VydmVyIHsKICBzdHJ1Y3QgbHdzX2NvbnRleHQqIGNvbnRleHQ7CiAgc3RydWN0IGx3c19jb250ZXh0X2NyZWF0aW9uX2luZm8gaW5mbzsKICBKU0NvbnRleHQqIGN0eDsKICBNaW5uZXRDYWxsYmFjayBjYl9tZXNzYWdlLCBjYl9jb25uZWN0LCBjYl9jbG9zZSwgY2JfcG9uZywgY2JfZmQsIGNiX2h0dHAsIGNiX2JvZHk7Cn0gTWlubmV0SHR0cFNlcnZlcjsKCnR5cGVkZWYgc3RydWN0IGh0dHBfc2Vzc2lvbiB7CiAgc3RydWN0IHNvY2tldCogd3M7CiAgc3RydWN0IGh0dHBfcmVxdWVzdCogcmVxOwogIHN0cnVjdCBodHRwX3Jlc3BvbnNlKiByZXNwOwp9IE1pbm5ldEh0dHBTZXNzaW9uOwoKdHlwZWRlZiBzdHJ1Y3Qgc2VydmVyX2NvbnRleHQgewogIEpTVmFsdWUgd3Nfb2JqOwogIHVuaW9uIHsKICAgIHN0cnVjdCB7CiAgICAgIEpTVmFsdWUgcmVxX29iajsKICAgICAgSlNWYWx1ZSByZXNwX29iajsKICAgIH07CiAgICBKU1ZhbHVlIGFyZ3NbMl07CiAgfTsKICBzdHJ1Y3QgaHR0cF9tb3VudCogbW91bnQ7CiAgdWludDMyX3Qgc2VyaWFsOwogIEpTVmFsdWUgZ2VuZXJhdG9yOwoKfSBNaW5uZXRTZXJ2ZXJDb250ZXh0OwoKSlNWYWx1ZSBtaW5uZXRfd3Nfc2VydmVyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QqIGFyZ3YpOwoKZXh0ZXJuIE1pbm5ldEh0dHBTZXJ2ZXIgbWlubmV0X3NlcnZlcjsKCiNlbmRpZiAvKiBNSU5ORVRfU0VSVkVSX0ggKi8KAAAAAAAAAABmBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwIAAAAAAABHAgAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"left_delete",
					null,
					"AQAAACoCAAAAAAAAKgIAAAAAAAAJAAAALCBjYl9ib2R5",
					"AQAAAAAAAAABAAAAKgIAAAAAAAAzAgAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJ8DAAAAAAAAoAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwMAAAAAAACfAwAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " int"
					},
					"BAAAAKADAAAAAAAAoQMAAAAAAAAAAAAAoQMAAAAAAACiAwAAAAAAAAAAAACiAwAAAAAAAKMDAAAAAAAAAAAAAKMDAAAAAAAApAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAMAAAAAAACgAwAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " closed:1;"
					},
					"CgAAAKQDAAAAAAAApQMAAAAAAAAAAAAApQMAAAAAAACmAwAAAAAAAAAAAACmAwAAAAAAAKcDAAAAAAAAAAAAAKcDAAAAAAAAqAMAAAAAAAAAAAAAqAMAAAAAAACpAwAAAAAAAAAAAACpAwAAAAAAAKoDAAAAAAAAAAAAAKoDAAAAAAAAqwMAAAAAAAAAAAAAqwMAAAAAAACsAwAAAAAAAAAAAACsAwAAAAAAAK0DAAAAAAAAAAAAAK0DAAAAAAAArgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApAMAAAAAAACkAwAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABsBAAAI2lmbmRlZiBNSU5ORVRfU0VSVkVSX0gKI2RlZmluZSBNSU5ORVRfU0VSVkVSX0gKCiNpbmNsdWRlIDxxdWlja2pzLmg+CiNpbmNsdWRlICJtaW5uZXQuaCIKI2luY2x1ZGUgIm1pbm5ldC1yZXNwb25zZS5oIgojaW5jbHVkZSAibWlubmV0LXJlcXVlc3QuaCIKCnR5cGVkZWYgc3RydWN0IGh0dHBfbW91bnQgewogIHVuaW9uIHsKICAgIHN0cnVjdCB7CiAgICAgIHN0cnVjdCBodHRwX21vdW50KiBuZXh0OwogICAgICBjb25zdCBjaGFyICptbnQsICpvcmcsICpkZWYsICpwcm87CiAgICB9OwogICAgc3RydWN0IGx3c19odHRwX21vdW50IGx3czsKICB9OwogIE1pbm5ldENhbGxiYWNrIGNhbGxiYWNrOwp9IE1pbm5ldEh0dHBNb3VudDsKCnR5cGVkZWYgc3RydWN0IGh0dHBfc2VydmVyIHsKICBzdHJ1Y3QgbHdzX2NvbnRleHQqIGNvbnRleHQ7CiAgc3RydWN0IGx3c19jb250ZXh0X2NyZWF0aW9uX2luZm8gaW5mbzsKICBKU0NvbnRleHQqIGN0eDsKICBNaW5uZXRDYWxsYmFjayBjYl9tZXNzYWdlLCBjYl9jb25uZWN0LCBjYl9jbG9zZSwgY2JfcG9uZywgY2JfZmQsIGNiX2h0dHA7Cn0gTWlubmV0SHR0cFNlcnZlcjsKCnR5cGVkZWYgc3RydWN0IGh0dHBfc2Vzc2lvbiB7CiAgc3RydWN0IHNvY2tldCogd3M7CiAgc3RydWN0IGh0dHBfcmVxdWVzdCogcmVxOwogIHN0cnVjdCBodHRwX3Jlc3BvbnNlKiByZXNwOwp9IE1pbm5ldEh0dHBTZXNzaW9uOwoKdHlwZWRlZiBzdHJ1Y3Qgc2VydmVyX2NvbnRleHQgewogIEpTVmFsdWUgd3Nfb2JqOwogIHVuaW9uIHsKICAgIHN0cnVjdCB7CiAgICAgIEpTVmFsdWUgcmVxX29iajsKICAgICAgSlNWYWx1ZSByZXNwX29iajsKICAgIH07CiAgICBKU1ZhbHVlIGFyZ3NbMl07CiAgfTsKICBzdHJ1Y3QgaHR0cF9tb3VudCogbW91bnQ7CiAgc2l6ZV90IHNlcmlhbDsKICBKU1ZhbHVlIGdlbmVyYXRvcjsKICBpbnQgY2xvc2VkOjE7Cn0gTWlubmV0U2VydmVyQ29udGV4dDsKCkpTVmFsdWUgbWlubmV0X3dzX3NlcnZlcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2KTsKCmV4dGVybiBNaW5uZXRIdHRwU2VydmVyIG1pbm5ldF9zZXJ2ZXI7CgojZW5kaWYgLyogTUlOTkVUX1NFUlZFUl9IICovCgAAAAAAAAAAbgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArgMAAAAAAACuAwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "CMakeLists.txt",
			"settings":
			{
				"buffer_size": 13896,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					29,
					1,
					"paste",
					null,
					"AQAAANcQAAAAAAAA8xAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1xAAAAAAAADXEAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAPMQAAAAAAAA9BAAAAAAAAAAAAAA9BAAAAAAAAD1EAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8xAAAAAAAADzEAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"paste",
					null,
					"AQAAAPQQAAAAAAAAVRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9BAAAAAAAAD0EAAAAAAAAAAAAAAAAAAA"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAACIRAAAAAAAAIxEAAAAAAAAAAAAAIxEAAAAAAAAjEQAAAAAAADIAAAAgIGNoZWNrX2N4eF9jb21waWxlcl9mbGFnKCItTzAiIE9QVF9DWFhfT1BUX05PTkUpCg",
					"AQAAAAAAAAABAAAAIhEAAAAAAABUEQAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAB0SAAAAAAAAHhIAAAAAAAAAAAAAHhIAAAAAAAAeEgAAAAAAAAgBAAAgIGlmKE9QVF9DWFhfT1BUX05PTkUpCiAgICBpZihOT1QgIiR7Q01BS0VfQ1hYX0ZMQUdTX0RFQlVHfSIgTUFUQ0hFUyAiLU8wIikKICAgICAgc2V0KENNQUtFX0NYWF9GTEFHU19ERUJVRyAiJHtDTUFLRV9DWFhfRkxBR1NfREVCVUd9IC1PMCIgQ0FDSEUgU1RSSU5HICJDKysgY29tcGlsZXIgb3B0aW9ucyIgRk9SQ0UpCiAgICBlbmRpZihOT1QgIiR7Q01BS0VfQ1hYX0ZMQUdTX0RFQlVHfSIgTUFUQ0hFUyAiLU8wIikKICBlbmRpZihPUFRfQ1hYX09QVF9OT05FKQo",
					"AQAAAAAAAAABAAAAHRIAAAAAAAAlEwAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"paste",
					null,
					"AQAAAB4SAAAAAAAAfBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHhIAAAAAAAAeEgAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAEsSAAAAAAAATBIAAAAAAAAAAAAATBIAAAAAAABMEgAAAAAAADAAAAAgY2hlY2tfY3h4X2NvbXBpbGVyX2ZsYWcoIi1nZ2RiIiBPUFRfQ1hYX0dfR0RCKQo",
					"AQAAAAAAAAABAAAASxIAAAAAAAB7EgAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAEYTAAAAAAAARxMAAAAAAAAAAAAARxMAAAAAAABHEwAAAAAAAAcBAAAgIGlmKE9QVF9DWFhfR19HREIpCiAgICBpZihOT1QgIiR7Q01BS0VfQ1hYX0ZMQUdTX0RFQlVHfSIgTUFUQ0hFUyAiLWdnZGIiKQogICAgICBzZXQoQ01BS0VfQ1hYX0ZMQUdTX0RFQlVHICIke0NNQUtFX0NYWF9GTEFHU19ERUJVR30gLWdnZGIiIENBQ0hFIFNUUklORyAiQysrIGNvbXBpbGVyIG9wdGlvbnMiIEZPUkNFKQogICAgZW5kaWYoTk9UICIke0NNQUtFX0NYWF9GTEFHU19ERUJVR30iIE1BVENIRVMgIi1nZ2RiIikKICBlbmRpZihPUFRfQ1hYX0dfR0RCKQ",
					"AQAAAAAAAAABAAAARhMAAAAAAABNFAAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAARxMAAAAAAABHEwAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "OFF"
					},
					"BAAAAGUlAAAAAAAAZiUAAAAAAAAAAAAAZiUAAAAAAABmJQAAAAAAAAIAAABPTmYlAAAAAAAAZyUAAAAAAAAAAAAAZyUAAAAAAABoJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZSUAAAAAAABnJQAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAO0mAAAAAAAA7iYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7SYAAAAAAADtJgAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": "\n-D"
					},
					"BAAAAEEoAAAAAAAAQigAAAAAAAAAAAAAQigAAAAAAABIKAAAAAAAAAAAAABIKAAAAAAAAEkoAAAAAAAAAAAAAEkoAAAAAAAASigAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQSgAAAAAAABBKAAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"paste",
					null,
					"AQAAAEooAAAAAAAAXigAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASigAAAAAAABKKAAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": ":BOOL="
					},
					"BgAAAF4oAAAAAAAAXygAAAAAAAAAAAAAXygAAAAAAABgKAAAAAAAAAAAAABgKAAAAAAAAGEoAAAAAAAAAAAAAGEoAAAAAAAAYigAAAAAAAAAAAAAYigAAAAAAABjKAAAAAAAAAAAAABjKAAAAAAAAGQoAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXigAAAAAAABeKAAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": "ON"
					},
					"AgAAAGQoAAAAAAAAZSgAAAAAAAAAAAAAZSgAAAAAAABmKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZCgAAAAAAABkKAAAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": "I"
					},
					"AgAAAGUlAAAAAAAAZiUAAAAAAAAAAAAAZiUAAAAAAABmJQAAAAAAAAMAAABPRkY",
					"AQAAAAAAAAABAAAAZSUAAAAAAABoJQAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					2,
					"left_delete",
					null,
					"AgAAAGUlAAAAAAAAZSUAAAAAAAABAAAASWQlAAAAAAAAZCUAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAZiUAAAAAAABmJQAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": "=ON"
					},
					"AwAAAGQlAAAAAAAAZSUAAAAAAAAAAAAAZSUAAAAAAABmJQAAAAAAAAAAAABmJQAAAAAAAGclAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZCUAAAAAAABkJQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "minnet-websocket.c",
			"settings":
			{
				"buffer_size": 16214,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					67,
					1,
					"insert",
					{
						"characters": "+1"
					},
					"AgAAABkNAAAAAAAAGg0AAAAAAAAAAAAAGg0AAAAAAAAbDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGQ0AAAAAAAAZDQAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAABsNAAAAAAAAHA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGw0AAAAAAAAbDQAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"left_delete",
					null,
					"AQAAABsNAAAAAAAAGw0AAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAHA0AAAAAAAAcDQAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAGw0AAAAAAAAbDQAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					1,
					"insert",
					{
						"characters": "\nws->ref_count"
					},
					"DwAAAOkIAAAAAAAA6ggAAAAAAAAAAAAA6ggAAAAAAADsCAAAAAAAAAAAAADsCAAAAAAAAO0IAAAAAAAAAAAAAO0IAAAAAAAA7ggAAAAAAAAAAAAA7ggAAAAAAADvCAAAAAAAAAAAAADvCAAAAAAAAPAIAAAAAAAAAAAAAPAIAAAAAAAA8QgAAAAAAAAAAAAA8QgAAAAAAADyCAAAAAAAAAAAAADyCAAAAAAAAPMIAAAAAAAAAAAAAPMIAAAAAAAA9AgAAAAAAAAAAAAA9AgAAAAAAAD1CAAAAAAAAAAAAAD1CAAAAAAAAPYIAAAAAAAAAAAAAPYIAAAAAAAA9wgAAAAAAAAAAAAA9wgAAAAAAAD4CAAAAAAAAAAAAAD4CAAAAAAAAPkIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6QgAAAAAAADpCAAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAPkIAAAAAAAA+ggAAAAAAAAAAAAA+ggAAAAAAAD7CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QgAAAAAAAD5CAAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": " 1;"
					},
					"AwAAAPsIAAAAAAAA/AgAAAAAAAAAAAAA/AgAAAAAAAD9CAAAAAAAAAAAAAD9CAAAAAAAAP4IAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+wgAAAAAAAD7CAAAAAAAAAAAAAAAAPC/"
				],
				[
					269,
					1,
					"left_delete",
					null,
					"AQAAANUDAAAAAAAA1QMAAAAAAAAFAAAAICAvLyA",
					"AQAAAAAAAAABAAAA2gMAAAAAAADVAwAAAAAAAAAAAAAAAPC/"
				],
				[
					279,
					1,
					"insert",
					{
						"characters": "\nretuzrn"
					},
					"CwAAANwEAAAAAAAA3QQAAAAAAAAAAAAA3QQAAAAAAADfBAAAAAAAAAAAAADdBAAAAAAAAN0EAAAAAAAAAgAAACAg3QQAAAAAAADhBAAAAAAAAAAAAADhBAAAAAAAAOIEAAAAAAAAAAAAAOIEAAAAAAAA4wQAAAAAAAAAAAAA4wQAAAAAAADkBAAAAAAAAAAAAADkBAAAAAAAAOUEAAAAAAAAAAAAAOUEAAAAAAAA5gQAAAAAAAAAAAAA5gQAAAAAAADnBAAAAAAAAAAAAADnBAAAAAAAAOgEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AQAAAAAAADcBAAAAAAAAAAAAAAAAPC/"
				],
				[
					280,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOgEAAAAAAAA6QQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6AQAAAAAAADoBAAAAAAAAAAAAAAAAPC/"
				],
				[
					281,
					4,
					"left_delete",
					null,
					"BAAAAOgEAAAAAAAA6AQAAAAAAAABAAAAIOcEAAAAAAAA5wQAAAAAAAABAAAAbuYEAAAAAAAA5gQAAAAAAAABAAAAcuUEAAAAAAAA5QQAAAAAAAABAAAAeg",
					"AQAAAAAAAAABAAAA6QQAAAAAAADpBAAAAAAAAAAAAAAAAPC/"
				],
				[
					282,
					1,
					"insert",
					{
						"characters": "rn"
					},
					"AgAAAOUEAAAAAAAA5gQAAAAAAAAAAAAA5gQAAAAAAADnBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5QQAAAAAAADlBAAAAAAAAAAAAAAAAPC/"
				],
				[
					283,
					1,
					"insert",
					{
						"characters": " opaque->wsd"
					},
					"DAAAAOcEAAAAAAAA6AQAAAAAAAAAAAAA6AQAAAAAAADpBAAAAAAAAAAAAADpBAAAAAAAAOoEAAAAAAAAAAAAAOoEAAAAAAAA6wQAAAAAAAAAAAAA6wQAAAAAAADsBAAAAAAAAAAAAADsBAAAAAAAAO0EAAAAAAAAAAAAAO0EAAAAAAAA7gQAAAAAAAAAAAAA7gQAAAAAAADvBAAAAAAAAAAAAADvBAAAAAAAAPAEAAAAAAAAAAAAAPAEAAAAAAAA8QQAAAAAAAAAAAAA8QQAAAAAAADyBAAAAAAAAAAAAADyBAAAAAAAAPMEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5wQAAAAAAADnBAAAAAAAAAAAAAAAAPC/"
				],
				[
					284,
					1,
					"left_delete",
					null,
					"AQAAAPIEAAAAAAAA8gQAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAA8wQAAAAAAADzBAAAAAAAAAAAAAAAAPC/"
				],
				[
					285,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAPIEAAAAAAAA8wQAAAAAAAAAAAAA8wQAAAAAAAD0BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8gQAAAAAAADyBAAAAAAAAAAAAAAAAPC/"
				],
				[
					286,
					1,
					"insert",
					{
						"characters": " o√ºa"
					},
					"BAAAAPQEAAAAAAAA9QQAAAAAAAAAAAAA9QQAAAAAAAD2BAAAAAAAAAAAAAD2BAAAAAAAAPcEAAAAAAAAAAAAAPcEAAAAAAAA+AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9AQAAAAAAAD0BAAAAAAAAAAAAAAAAPC/"
				],
				[
					287,
					2,
					"left_delete",
					null,
					"AgAAAPcEAAAAAAAA9wQAAAAAAAABAAAAYfYEAAAAAAAA9gQAAAAAAAACAAAAw7w",
					"AQAAAAAAAAABAAAA+AQAAAAAAAD4BAAAAAAAAAAAAAAAAPC/"
				],
				[
					288,
					1,
					"insert",
					{
						"characters": "paque->wds"
					},
					"CgAAAPYEAAAAAAAA9wQAAAAAAAAAAAAA9wQAAAAAAAD4BAAAAAAAAAAAAAD4BAAAAAAAAPkEAAAAAAAAAAAAAPkEAAAAAAAA+gQAAAAAAAAAAAAA+gQAAAAAAAD7BAAAAAAAAAAAAAD7BAAAAAAAAPwEAAAAAAAAAAAAAPwEAAAAAAAA/QQAAAAAAAAAAAAA/QQAAAAAAAD+BAAAAAAAAAAAAAD+BAAAAAAAAP8EAAAAAAAAAAAAAP8EAAAAAAAAAAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9gQAAAAAAAD2BAAAAAAAAAAAAAAAAPC/"
				],
				[
					289,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAAFAAAAAAAAAQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAUAAAAAAAAABQAAAAAAAAAAAAAAAPC/"
				],
				[
					290,
					3,
					"left_delete",
					null,
					"AwAAAAAFAAAAAAAAAAUAAAAAAAABAAAAIP8EAAAAAAAA/wQAAAAAAAABAAAAc/4EAAAAAAAA/gQAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAAAQUAAAAAAAABBQAAAAAAAAAAAAAAAPC/"
				],
				[
					291,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAP4EAAAAAAAA/wQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gQAAAAAAAD+BAAAAAAAAAAAAAAAAPC/"
				],
				[
					292,
					1,
					"insert",
					{
						"characters": " :;"
					},
					"AwAAAP8EAAAAAAAAAAUAAAAAAAAAAAAAAAUAAAAAAAABBQAAAAAAAAAAAAABBQAAAAAAAAIFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wQAAAAAAAD/BAAAAAAAAAAAAAAAAPC/"
				],
				[
					293,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAIFAAAAAAAAAwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgUAAAAAAAACBQAAAAAAAAAAAAAAAPC/"
				],
				[
					294,
					2,
					"left_delete",
					null,
					"AgAAAAIFAAAAAAAAAgUAAAAAAAABAAAAIAEFAAAAAAAAAQUAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAAwUAAAAAAAADBQAAAAAAAAAAAAAAAPC/"
				],
				[
					295,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAEFAAAAAAAAAgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQUAAAAAAAABBQAAAAAAAAAAAAAAAPC/"
				],
				[
					299,
					1,
					"left_delete",
					null,
					"AQAAAAIFAAAAAAAAAgUAAAAAAAALAAAACiAgICByZXR1cm4",
					"AQAAAAAAAAABAAAAAgUAAAAAAAANBQAAAAAAAAAAAAAAAPC/"
				],
				[
					306,
					1,
					"insert",
					{
						"characters": "z"
					},
					"AQAAAG0DAAAAAAAAbgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQMAAAAAAABtAwAAAAAAAAAAAAAAAPC/"
				],
				[
					429,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAACwYAAAAAAAAbBgAAAAAAAAAAAAAAAPC/"
				],
				[
					437,
					1,
					"insert",
					{
						"characters": "ws"
					},
					"AwAAAG8BAAAAAAAAcAEAAAAAAAAAAAAAcAEAAAAAAABwAQAAAAAAAAQAAABzb2NrcAEAAAAAAABxAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwEAAAAAAABzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					443,
					1,
					"insert",
					{
						"characters": "ws"
					},
					"AwAAAN4DAAAAAAAA3wMAAAAAAAAAAAAA3wMAAAAAAADfAwAAAAAAAAQAAABzb2Nr3wMAAAAAAADgAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3gMAAAAAAADiAwAAAAAAAAAAAAAAAPC/"
				],
				[
					495,
					1,
					"paste",
					null,
					"AQAAAMsgAAAAAAAAOCEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyyAAAAAAAADLIAAAAAAAAAAAAAAAAPC/"
				],
				[
					496,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAADghAAAAAAAAOSEAAAAAAAAAAAAAOSEAAAAAAAA/IQAAAAAAAAAAAAA/IQAAAAAAAEAhAAAAAAAAAAAAAEAhAAAAAAAARiEAAAAAAAAAAAAAOSEAAAAAAAA5IQAAAAAAAAYAAAAgICAgICA",
					"AQAAAAAAAAABAAAAOCEAAAAAAAA4IQAAAAAAAAAAAAAAAPC/"
				],
				[
					511,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAADkhAAAAAAAAOiEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOSEAAAAAAAA5IQAAAAAAAAAAAAAAAEBA"
				],
				[
					512,
					1,
					"paste",
					null,
					"AQAAADohAAAAAAAAfyEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOiEAAAAAAAA6IQAAAAAAAAAAAAAAAPC/"
				],
				[
					515,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAAAMiAAAAAAAABCIAAAAAAAAAAAAABCIAAAAAAAAKIgAAAAAAAAAAAAAKIgAAAAAAAAsiAAAAAAAAAAAAAAQiAAAAAAAABCIAAAAAAAAGAAAAICAgICAgBCIAAAAAAAAIIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAyIAAAAAAAADIgAAAAAAAP///////+9/"
				],
				[
					517,
					1,
					"indent",
					null,
					"BAAAAIAhAAAAAAAAgiEAAAAAAAAAAAAAniEAAAAAAACgIQAAAAAAAAAAAADgIQAAAAAAAOIhAAAAAAAAAAAAAAoiAAAAAAAADCIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACSIAAAAAAACFIQAAAAAAAAAAAAAAAERA"
				],
				[
					519,
					1,
					"left_delete",
					null,
					"AQAAAH4hAAAAAAAAfiEAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAfyEAAAAAAAB/IQAAAAAAAAAAAAAAAPC/"
				],
				[
					522,
					1,
					"unindent",
					null,
					"AQAAAH8hAAAAAAAAfyEAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAAiSEAAAAAAACJIQAAAAAAAAAAAAAAAFRA"
				],
				[
					529,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAjSMAAAAAAACRIwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "minnet-server.c",
			"settings":
			{
				"buffer_size": 26473,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5878,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAAskAAAAAAAADCQAAAAAAAAAAAAADCQAAAAAAAAMJAAAAAAAADUAAAAgICAgICAvLyAgIE1pbm5ldFdlYnNvY2tldCogcmVzID0gbHdzX3dzaV91c2VyKHdzaSk7Cg",
					"AQAAAAAAAAABAAAACyQAAAAAAABAJAAAAAAAAAAAAAAAAPC/"
				],
				[
					5884,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAADQkAAAAAAAANSQAAAAAAAAAAAAANSQAAAAAAAA1JAAAAAAAAEUAAAAgICAgICAgIC8vIHdzX29iaiA9IG1pbm5ldF93c193cmFwKG1pbm5ldF9zZXJ2ZXIuY2JfY2xvc2UuY3R4LCB3c2kpOwo",
					"AQAAAAAAAAABAAAANCQAAAAAAAB5JAAAAAAAAAAAAAAAAPC/"
				],
				[
					5920,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMEjAAAAAAAAwiMAAAAAAAAAAAAAwiMAAAAAAADHIwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwSMAAAAAAADBIwAAAAAAAAAAAAAAAPC/"
				],
				[
					5922,
					1,
					"paste",
					null,
					"AQAAAMEjAAAAAAAARSQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwSMAAAAAAADBIwAAAAAAAAAAAAAAAERA"
				],
				[
					5923,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEUkAAAAAAAARiQAAAAAAAAAAAAARiQAAAAAAABMJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARSQAAAAAAABFJAAAAAAAAAAAAAAAAPC/"
				],
				[
					5931,
					1,
					"paste",
					null,
					"AQAAAGMkAAAAAAAAfyQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYyQAAAAAAABjJAAAAAAAAAAAAAAAAPC/"
				],
				[
					5939,
					1,
					"paste",
					null,
					"AgAAALUkAAAAAAAAziQAAAAAAAAAAAAAziQAAAAAAADOJAAAAAAAAAIAAAApOw",
					"AQAAAAAAAAABAAAAtSQAAAAAAAC3JAAAAAAAAAAAAAAAAPC/"
				],
				[
					5942,
					1,
					"insert",
					{
						"characters": "."
					},
					"AgAAALUkAAAAAAAAtiQAAAAAAAAAAAAARiQAAAAAAABGJAAAAAAAAAYAAAAgICAgICA",
					"AQAAAAAAAAABAAAAtSQAAAAAAAC1JAAAAAAAAAAAAAAAAPC/"
				],
				[
					5943,
					1,
					"left_delete",
					null,
					"AQAAAK8kAAAAAAAAryQAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAsCQAAAAAAACwJAAAAAAAAAAAAAAAAPC/"
				],
				[
					5944,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAK8kAAAAAAAAsCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAryQAAAAAAACvJAAAAAAAAAAAAAAAAPC/"
				],
				[
					5978,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAMIjAAAAAAAAwyMAAAAAAAAAAAAAwyMAAAAAAADDIwAAAAAAAIQAAAAgdWludDhfdCogY29kZXAgPSBpbjsKICAgICAgdWludDE2X3QgY29kZSA9IChjb2RlcFswXSA8PCA4KSArIGNvZGVwWzFdOwogICAgICBjb25zdCBjaGFyKiB3aHkgPSBpbiArIDI7CiAgICAgIGludCB3aHlsZW4gPSBsZW4gLSAyOwo",
					"AQAAAAAAAAABAAAAwiMAAAAAAABGJAAAAAAAAAAAAAAAAPC/"
				],
				[
					5983,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAACwkAAAAAAAALSQAAAAAAAAAAAAALSQAAAAAAAAtJAAAAAAAABgAAAAsIGNvZGUsIGxlbiwgd2h5bGVuLCB3aHk",
					"AQAAAAAAAAABAAAALCQAAAAAAABEJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6025,
					1,
					"left_delete",
					null,
					"AQAAANojAAAAAAAA2iMAAAAAAAAcAAAAIGNvZGU9JXUgbGVuPSV6dSByZWFzb249JS4qcw",
					"AQAAAAAAAAABAAAA2iMAAAAAAAD2IwAAAAAAAAAAAAAAAPC/"
				],
				[
					6123,
					1,
					"paste",
					null,
					"AQAAAJ4jAAAAAAAAzyMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAniMAAAAAAACeIwAAAAAAAAAAAAAAAPC/"
				],
				[
					6126,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAMwjAAAAAAAAzSMAAAAAAAAAAAAAzSMAAAAAAADNIwAAAAAAAAIAAAAgew",
					"AQAAAAAAAAABAAAAzCMAAAAAAADOIwAAAAAAAAAAAAAAAPC/"
				],
				[
					6130,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAHAjAAAAAAAAciMAAAAAAAAAAAAAISIAAAAAAAAjIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAISIAAAAAAABwIwAAAAAAAAAAAAAAAPC/"
				],
				[
					6147,
					1,
					"insert",
					{
						"characters": "\n\nif"
					},
					"CAAAAO8jAAAAAAAA8CMAAAAAAAAAAAAA8CMAAAAAAADyIwAAAAAAAAAAAADyIwAAAAAAAPQjAAAAAAAAAAAAAPQjAAAAAAAA9SMAAAAAAAAAAAAA9SMAAAAAAAD5IwAAAAAAAAAAAADwIwAAAAAAAPAjAAAAAAAABAAAACAgICD1IwAAAAAAAPYjAAAAAAAAAAAAAPYjAAAAAAAA9yMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7yMAAAAAAADvIwAAAAAAAAAAAAAAAPC/"
				],
				[
					6148,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPcjAAAAAAAA+SMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9yMAAAAAAAD3IwAAAAAAAAAAAAAAAPC/"
				],
				[
					6149,
					1,
					"insert",
					{
						"characters": "in"
					},
					"AgAAAPgjAAAAAAAA+SMAAAAAAAAAAAAA+SMAAAAAAAD6IwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+CMAAAAAAAD4IwAAAAAAAAAAAAAAAPC/"
				],
				[
					6151,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPsjAAAAAAAA/CMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+yMAAAAAAAD7IwAAAAAAAAAAAAAAAPC/"
				],
				[
					6152,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAPwjAAAAAAAA/iMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/CMAAAAAAAD8IwAAAAAAAAAAAAAAAPC/"
				],
				[
					6153,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAP0jAAAAAAAA/iMAAAAAAAAAAAAA/iMAAAAAAAACJAAAAAAAAAAAAAACJAAAAAAAAAMkAAAAAAAAAAAAAAMkAAAAAAAAByQAAAAAAAAAAAAA/iMAAAAAAAD+IwAAAAAAAAQAAAAgICAg/iMAAAAAAAAEJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/SMAAAAAAAD9IwAAAAAAAAAAAAAAAPC/"
				],
				[
					6158,
					1,
					"insert",
					{
						"characters": "JSVV"
					},
					"BQAAAPAjAAAAAAAA8SMAAAAAAAAAAAAA/yMAAAAAAAD/IwAAAAAAAAYAAAAgICAgICDxIwAAAAAAAPIjAAAAAAAAAAAAAPIjAAAAAAAA8yMAAAAAAAAAAAAA8yMAAAAAAAD0IwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8CMAAAAAAADwIwAAAAAAAAAAAAAAAPC/"
				],
				[
					6159,
					1,
					"left_delete",
					null,
					"AQAAAPMjAAAAAAAA8yMAAAAAAAABAAAAVg",
					"AQAAAAAAAAABAAAA9CMAAAAAAAD0IwAAAAAAAAAAAAAAAPC/"
				],
				[
					6160,
					1,
					"insert",
					{
						"characters": "alue"
					},
					"BAAAAPMjAAAAAAAA9CMAAAAAAAAAAAAA9CMAAAAAAAD1IwAAAAAAAAAAAAD1IwAAAAAAAPYjAAAAAAAAAAAAAPYjAAAAAAAA9yMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8yMAAAAAAADzIwAAAAAAAAAAAAAAAPC/"
				],
				[
					6161,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAPcjAAAAAAAA+CMAAAAAAAAAAAAA+CMAAAAAAAD5IwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9yMAAAAAAAD3IwAAAAAAAAAAAAAAAPC/"
				],
				[
					6162,
					1,
					"left_delete",
					null,
					"AQAAAPgjAAAAAAAA+CMAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA+SMAAAAAAAD5IwAAAAAAAAAAAAAAAPC/"
				],
				[
					6163,
					1,
					"insert",
					{
						"characters": "why"
					},
					"AwAAAPgjAAAAAAAA+SMAAAAAAAAAAAAA+SMAAAAAAAD6IwAAAAAAAAAAAAD6IwAAAAAAAPsjAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+CMAAAAAAAD4IwAAAAAAAAAAAAAAAPC/"
				],
				[
					6164,
					3,
					"left_delete",
					null,
					"AwAAAPojAAAAAAAA+iMAAAAAAAABAAAAefkjAAAAAAAA+SMAAAAAAAABAAAAaPgjAAAAAAAA+CMAAAAAAAABAAAAdw",
					"AQAAAAAAAAABAAAA+yMAAAAAAAD7IwAAAAAAAAAAAAAAAPC/"
				],
				[
					6165,
					1,
					"insert",
					{
						"characters": "why;:"
					},
					"BQAAAPgjAAAAAAAA+SMAAAAAAAAAAAAA+SMAAAAAAAD6IwAAAAAAAAAAAAD6IwAAAAAAAPsjAAAAAAAAAAAAAPsjAAAAAAAA/CMAAAAAAAAAAAAA/CMAAAAAAAD9IwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+CMAAAAAAAD4IwAAAAAAAAAAAAAAAPC/"
				],
				[
					6166,
					2,
					"left_delete",
					null,
					"AgAAAPwjAAAAAAAA/CMAAAAAAAABAAAAOvsjAAAAAAAA+yMAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAA/SMAAAAAAAD9IwAAAAAAAAAAAAAAAPC/"
				],
				[
					6167,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAPsjAAAAAAAA/CMAAAAAAAAAAAAA/CMAAAAAAAD9IwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+yMAAAAAAAD7IwAAAAAAAAAAAAAAAPC/"
				],
				[
					6168,
					1,
					"insert",
					{
						"characters": " JS_UNDEFI"
					},
					"CgAAAP0jAAAAAAAA/iMAAAAAAAAAAAAA/iMAAAAAAAD/IwAAAAAAAAAAAAD/IwAAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAASQAAAAAAAAAAAAAASQAAAAAAAACJAAAAAAAAAAAAAACJAAAAAAAAAMkAAAAAAAAAAAAAAMkAAAAAAAABCQAAAAAAAAAAAAABCQAAAAAAAAFJAAAAAAAAAAAAAAFJAAAAAAAAAYkAAAAAAAAAAAAAAYkAAAAAAAAByQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/SMAAAAAAAD9IwAAAAAAAAAAAAAAAPC/"
				],
				[
					6169,
					1,
					"insert",
					{
						"characters": "NED;"
					},
					"BAAAAAckAAAAAAAACCQAAAAAAAAAAAAACCQAAAAAAAAJJAAAAAAAAAAAAAAJJAAAAAAAAAokAAAAAAAAAAAAAAokAAAAAAAACyQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAByQAAAAAAAAHJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6170,
					1,
					"insert",
					{
						"characters": "\nu"
					},
					"AgAAAAskAAAAAAAADCQAAAAAAAAAAAAADCQAAAAAAAANJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACyQAAAAAAAALJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6171,
					1,
					"insert",
					{
						"characters": "int16_t"
					},
					"BwAAAA0kAAAAAAAADiQAAAAAAAAAAAAADiQAAAAAAAAPJAAAAAAAAAAAAAAPJAAAAAAAABAkAAAAAAAAAAAAABAkAAAAAAAAESQAAAAAAAAAAAAAESQAAAAAAAASJAAAAAAAAAAAAAASJAAAAAAAABMkAAAAAAAAAAAAABMkAAAAAAAAFCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADSQAAAAAAAANJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6172,
					1,
					"insert",
					{
						"characters": " code;"
					},
					"BgAAABQkAAAAAAAAFSQAAAAAAAAAAAAAFSQAAAAAAAAWJAAAAAAAAAAAAAAWJAAAAAAAABckAAAAAAAAAAAAABckAAAAAAAAGCQAAAAAAAAAAAAAGCQAAAAAAAAZJAAAAAAAAAAAAAAZJAAAAAAAABokAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFCQAAAAAAAAUJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6175,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AgAAAAwkAAAAAAAADSQAAAAAAAAAAAAADSQAAAAAAAANJAAAAAAAAAgAAAB1aW50MTZfdA",
					"AQAAAAAAAAABAAAADCQAAAAAAAAUJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6176,
					1,
					"left_delete",
					null,
					"AQAAAAwkAAAAAAAADCQAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAADSQAAAAAAAANJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6177,
					1,
					"insert",
					{
						"characters": "int"
					},
					"AwAAAAwkAAAAAAAADSQAAAAAAAAAAAAADSQAAAAAAAAOJAAAAAAAAAAAAAAOJAAAAAAAAA8kAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADCQAAAAAAAAMJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6179,
					1,
					"left_delete",
					null,
					"AQAAABQkAAAAAAAAFCQAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAFSQAAAAAAAAVJAAAAAAAAP///////+9/"
				],
				[
					6180,
					1,
					"insert",
					{
						"characters": "=-1;M"
					},
					"BQAAABQkAAAAAAAAFSQAAAAAAAAAAAAAFSQAAAAAAAAWJAAAAAAAAAAAAAAWJAAAAAAAABckAAAAAAAAAAAAABckAAAAAAAAGCQAAAAAAAAAAAAAGCQAAAAAAAAZJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFCQAAAAAAAAUJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6181,
					1,
					"left_delete",
					null,
					"AQAAABgkAAAAAAAAGCQAAAAAAAABAAAATQ",
					"AQAAAAAAAAABAAAAGSQAAAAAAAAZJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6182,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABgkAAAAAAAAGSQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGCQAAAAAAAAYJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6190,
					1,
					"paste",
					null,
					"AQAAACckAAAAAAAAqiQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJyQAAAAAAAAnJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6203,
					1,
					"insert",
					{
						"characters": "\nwhy"
					},
					"BQAAAG4kAAAAAAAAbyQAAAAAAAAAAAAAbyQAAAAAAAB1JAAAAAAAAAAAAAB1JAAAAAAAAHYkAAAAAAAAAAAAAHYkAAAAAAAAdyQAAAAAAAAAAAAAdyQAAAAAAAB4JAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbiQAAAAAAABuJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6204,
					1,
					"insert",
					{
						"characters": " =JS_New"
					},
					"CAAAAHgkAAAAAAAAeSQAAAAAAAAAAAAAeSQAAAAAAAB6JAAAAAAAAAAAAAB6JAAAAAAAAHskAAAAAAAAAAAAAHskAAAAAAAAfCQAAAAAAAAAAAAAfCQAAAAAAAB9JAAAAAAAAAAAAAB9JAAAAAAAAH4kAAAAAAAAAAAAAH4kAAAAAAAAfyQAAAAAAAAAAAAAfyQAAAAAAACAJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeCQAAAAAAAB4JAAAAAAAAAAAAAAAAPC/"
				],
				[
					6205,
					1,
					"insert",
					{
						"characters": "C"
					},
					"AQAAAIAkAAAAAAAAgSQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgCQAAAAAAACAJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6206,
					1,
					"left_delete",
					null,
					"AQAAAIAkAAAAAAAAgCQAAAAAAAABAAAAQw",
					"AQAAAAAAAAABAAAAgSQAAAAAAACBJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6207,
					1,
					"insert",
					{
						"characters": "StringLen"
					},
					"CQAAAIAkAAAAAAAAgSQAAAAAAAAAAAAAgSQAAAAAAACCJAAAAAAAAAAAAACCJAAAAAAAAIMkAAAAAAAAAAAAAIMkAAAAAAAAhCQAAAAAAAAAAAAAhCQAAAAAAACFJAAAAAAAAAAAAACFJAAAAAAAAIYkAAAAAAAAAAAAAIYkAAAAAAAAhyQAAAAAAAAAAAAAhyQAAAAAAACIJAAAAAAAAAAAAACIJAAAAAAAAIkkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgCQAAAAAAACAJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6208,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIkkAAAAAAAAiyQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiSQAAAAAAACJJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6209,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAIokAAAAAAAAiyQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiiQAAAAAAACKJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6210,
					1,
					"left_delete",
					null,
					"AQAAAIokAAAAAAAAiiQAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAiyQAAAAAAACLJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6211,
					1,
					"insert",
					{
						"characters": "server"
					},
					"BgAAAIokAAAAAAAAiyQAAAAAAAAAAAAAiyQAAAAAAACMJAAAAAAAAAAAAACMJAAAAAAAAI0kAAAAAAAAAAAAAI0kAAAAAAAAjiQAAAAAAAAAAAAAjiQAAAAAAACPJAAAAAAAAAAAAACPJAAAAAAAAJAkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiiQAAAAAAACKJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6212,
					6,
					"left_delete",
					null,
					"BgAAAI8kAAAAAAAAjyQAAAAAAAABAAAAco4kAAAAAAAAjiQAAAAAAAABAAAAZY0kAAAAAAAAjSQAAAAAAAABAAAAdowkAAAAAAAAjCQAAAAAAAABAAAAcoskAAAAAAAAiyQAAAAAAAABAAAAZYokAAAAAAAAiiQAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAkCQAAAAAAACQJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6213,
					1,
					"insert",
					{
						"characters": "min"
					},
					"AwAAAIokAAAAAAAAiyQAAAAAAAAAAAAAiyQAAAAAAACMJAAAAAAAAAAAAACMJAAAAAAAAI0kAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiiQAAAAAAACKJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6214,
					1,
					"insert_completion",
					{
						"completion": "minnet_server",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "minnet_server"
					},
					"AgAAAIokAAAAAAAAiiQAAAAAAAADAAAAbWluiiQAAAAAAACXJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjSQAAAAAAACNJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6215,
					1,
					"insert",
					{
						"characters": ".ctx,"
					},
					"BQAAAJckAAAAAAAAmCQAAAAAAAAAAAAAmCQAAAAAAACZJAAAAAAAAAAAAACZJAAAAAAAAJokAAAAAAAAAAAAAJokAAAAAAAAmyQAAAAAAAAAAAAAmyQAAAAAAACcJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlyQAAAAAAACXJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6216,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJwkAAAAAAAAnSQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnCQAAAAAAACcJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6217,
					1,
					"insert",
					{
						"characters": "wh"
					},
					"AgAAAJ0kAAAAAAAAniQAAAAAAAAAAAAAniQAAAAAAACfJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnSQAAAAAAACdJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6218,
					2,
					"left_delete",
					null,
					"AgAAAJ4kAAAAAAAAniQAAAAAAAABAAAAaJ0kAAAAAAAAnSQAAAAAAAABAAAAdw",
					"AQAAAAAAAAABAAAAnyQAAAAAAACfJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6219,
					1,
					"insert",
					{
						"characters": "in+1"
					},
					"BAAAAJ0kAAAAAAAAniQAAAAAAAAAAAAAniQAAAAAAACfJAAAAAAAAAAAAACfJAAAAAAAAKAkAAAAAAAAAAAAAKAkAAAAAAAAoSQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnSQAAAAAAACdJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6220,
					1,
					"left_delete",
					null,
					"AQAAAKAkAAAAAAAAoCQAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAoSQAAAAAAAChJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6221,
					1,
					"insert",
					{
						"characters": "2,"
					},
					"AgAAAKAkAAAAAAAAoSQAAAAAAAAAAAAAoSQAAAAAAACiJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoCQAAAAAAACgJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6222,
					1,
					"insert",
					{
						"characters": " len-2"
					},
					"BgAAAKIkAAAAAAAAoyQAAAAAAAAAAAAAoyQAAAAAAACkJAAAAAAAAAAAAACkJAAAAAAAAKUkAAAAAAAAAAAAAKUkAAAAAAAApiQAAAAAAAAAAAAApiQAAAAAAACnJAAAAAAAAAAAAACnJAAAAAAAAKgkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoiQAAAAAAACiJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6224,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKkkAAAAAAAAqiQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqSQAAAAAAACpJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6227,
					1,
					"insert",
					{
						"characters": " if"
					},
					"AwAAAHokAAAAAAAAeyQAAAAAAAAAAAAAeyQAAAAAAAB8JAAAAAAAAAAAAAB8JAAAAAAAAH0kAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeiQAAAAAAAB6JAAAAAAAAAAAAAAAAPC/"
				],
				[
					6228,
					2,
					"left_delete",
					null,
					"AgAAAHwkAAAAAAAAfCQAAAAAAAABAAAAZnskAAAAAAAAeyQAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAfSQAAAAAAAB9JAAAAAAAAAAAAAAAAPC/"
				],
				[
					6229,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAHskAAAAAAAAfCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeyQAAAAAAAB7JAAAAAAAAAAAAAAAAPC/"
				],
				[
					6230,
					1,
					"left_delete",
					null,
					"AQAAAHskAAAAAAAAeyQAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAAfCQAAAAAAAB8JAAAAAAAAAAAAAAAAPC/"
				],
				[
					6233,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BAAAAG4kAAAAAAAAbyQAAAAAAAAAAAAAbyQAAAAAAAB1JAAAAAAAAAAAAAB1JAAAAAAAAHYkAAAAAAAAAAAAAHYkAAAAAAAAdyQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbiQAAAAAAABuJAAAAAAAAP///////+9/"
				],
				[
					6234,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHckAAAAAAAAeSQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdyQAAAAAAAB3JAAAAAAAAAAAAAAAAPC/"
				],
				[
					6235,
					1,
					"insert",
					{
						"characters": "len"
					},
					"AwAAAHgkAAAAAAAAeSQAAAAAAAAAAAAAeSQAAAAAAAB6JAAAAAAAAAAAAAB6JAAAAAAAAHskAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeCQAAAAAAAB4JAAAAAAAAAAAAAAAAPC/"
				],
				[
					6236,
					1,
					"insert",
					{
						"characters": " -"
					},
					"AgAAAHskAAAAAAAAfCQAAAAAAAAAAAAAfCQAAAAAAAB9JAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeyQAAAAAAAB7JAAAAAAAAAAAAAAAAPC/"
				],
				[
					6237,
					1,
					"insert",
					{
						"characters": " 2"
					},
					"AgAAAH0kAAAAAAAAfiQAAAAAAAAAAAAAfiQAAAAAAAB/JAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfSQAAAAAAAB9JAAAAAAAAAAAAAAAAPC/"
				],
				[
					6238,
					1,
					"left_delete",
					null,
					"AQAAAH4kAAAAAAAAfiQAAAAAAAABAAAAMg",
					"AQAAAAAAAAABAAAAfyQAAAAAAAB/JAAAAAAAAAAAAAAAAPC/"
				],
				[
					6239,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH4kAAAAAAAAfyQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfiQAAAAAAAB+JAAAAAAAAAAAAAAAAPC/"
				],
				[
					6240,
					1,
					"left_delete",
					null,
					"AQAAAH4kAAAAAAAAfiQAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAfyQAAAAAAAB/JAAAAAAAAAAAAAAAAPC/"
				],
				[
					6241,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAH4kAAAAAAAAfyQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfiQAAAAAAAB+JAAAAAAAAAAAAAAAAPC/"
				],
				[
					6242,
					1,
					"insert",
					{
						"characters": "  0"
					},
					"AwAAAH8kAAAAAAAAgCQAAAAAAAAAAAAAgCQAAAAAAACBJAAAAAAAAAAAAACBJAAAAAAAAIIkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfyQAAAAAAAB/JAAAAAAAAAAAAAAAAPC/"
				],
				[
					6243,
					2,
					"left_delete",
					null,
					"AgAAAIEkAAAAAAAAgSQAAAAAAAABAAAAMIAkAAAAAAAAgCQAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAgiQAAAAAAACCJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6244,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAIAkAAAAAAAAgSQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgCQAAAAAAACAJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6245,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAIEkAAAAAAAAgiQAAAAAAAAAAAAAgiQAAAAAAACDJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgSQAAAAAAACBJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6247,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIQkAAAAAAAAhiQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhCQAAAAAAACEJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6248,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAIQkAAAAAAAAhCQAAAAAAAABAAAAKIQkAAAAAAAAhCQAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAhSQAAAAAAACFJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6252,
					1,
					"left_delete",
					null,
					"AQAAAMIkAAAAAAAAwiQAAAAAAAA8AAAAICAgICAgY29uc3QgY2hhciogd2h5ID0gaW4gKyAyOwogICAgICBpbnQgd2h5bGVuID0gbGVuIC0gMjsK",
					"AQAAAAAAAAABAAAAwiQAAAAAAAD+JAAAAAAAAAAAAAAAAAAA"
				],
				[
					6278,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAEMkAAAAAAAARCQAAAAAAAAAAAAARCQAAAAAAABEJAAAAAAAAAgAAAB1aW50MTZfdA",
					"AQAAAAAAAAABAAAAQyQAAAAAAABLJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6322,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AgAAAFslAAAAAAAAXCUAAAAAAAAAAAAAXCUAAAAAAABcJQAAAAAAAAEAAAAy",
					"AQAAAAAAAAABAAAAWyUAAAAAAABcJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6325,
					1,
					"insert",
					{
						"characters": " c"
					},
					"AgAAAJclAAAAAAAAmCUAAAAAAAAAAAAAmCUAAAAAAACZJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlyUAAAAAAACXJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6326,
					1,
					"insert",
					{
						"characters": "ode"
					},
					"AwAAAJklAAAAAAAAmiUAAAAAAAAAAAAAmiUAAAAAAACbJQAAAAAAAAAAAACbJQAAAAAAAJwlAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmSUAAAAAAACZJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6327,
					1,
					"insert",
					{
						"characters": " !¬£="
					},
					"BAAAAJwlAAAAAAAAnSUAAAAAAAAAAAAAnSUAAAAAAACeJQAAAAAAAAAAAACeJQAAAAAAAJ8lAAAAAAAAAAAAAJ8lAAAAAAAAoCUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnCUAAAAAAACcJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6328,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKAlAAAAAAAAoSUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoCUAAAAAAACgJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6329,
					3,
					"left_delete",
					null,
					"AwAAAKAlAAAAAAAAoCUAAAAAAAABAAAAIJ8lAAAAAAAAnyUAAAAAAAABAAAAPZ4lAAAAAAAAniUAAAAAAAACAAAAwqM",
					"AQAAAAAAAAABAAAAoSUAAAAAAAChJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6330,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAJ4lAAAAAAAAnyUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAniUAAAAAAACeJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6331,
					1,
					"insert",
					{
						"characters": " -1"
					},
					"AwAAAJ8lAAAAAAAAoCUAAAAAAAAAAAAAoCUAAAAAAAChJQAAAAAAAAAAAAChJQAAAAAAAKIlAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnyUAAAAAAACfJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6332,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAKIlAAAAAAAAoyUAAAAAAAAAAAAAoyUAAAAAAACkJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoiUAAAAAAACiJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6333,
					1,
					"insert",
					{
						"characters": " JS_NewInt32"
					},
					"DAAAAKQlAAAAAAAApSUAAAAAAAAAAAAApSUAAAAAAACmJQAAAAAAAAAAAACmJQAAAAAAAKclAAAAAAAAAAAAAKclAAAAAAAAqCUAAAAAAAAAAAAAqCUAAAAAAACpJQAAAAAAAAAAAACpJQAAAAAAAKolAAAAAAAAAAAAAKolAAAAAAAAqyUAAAAAAAAAAAAAqyUAAAAAAACsJQAAAAAAAAAAAACsJQAAAAAAAK0lAAAAAAAAAAAAAK0lAAAAAAAAriUAAAAAAAAAAAAAriUAAAAAAACvJQAAAAAAAAAAAACvJQAAAAAAALAlAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApCUAAAAAAACkJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6334,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALAlAAAAAAAAsiUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsCUAAAAAAACwJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6335,
					1,
					"insert",
					{
						"characters": "ctx"
					},
					"AwAAALElAAAAAAAAsiUAAAAAAAAAAAAAsiUAAAAAAACzJQAAAAAAAAAAAACzJQAAAAAAALQlAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsSUAAAAAAACxJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6336,
					3,
					"left_delete",
					null,
					"AwAAALMlAAAAAAAAsyUAAAAAAAABAAAAeLIlAAAAAAAAsiUAAAAAAAABAAAAdLElAAAAAAAAsSUAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAtCUAAAAAAAC0JQAAAAAAAAAAAAAAAPC/"
				],
				[
					6345,
					1,
					"paste",
					null,
					"AgAAAKUlAAAAAAAAvyUAAAAAAAAAAAAAvyUAAAAAAAC/JQAAAAAAAAsAAABKU19OZXdJbnQzMg",
					"AQAAAAAAAAABAAAApSUAAAAAAACwJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6346,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAL8lAAAAAAAAwCUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvyUAAAAAAAC/JQAAAAAAAAAAAAAAAPC/"
				],
				[
					6351,
					1,
					"insert",
					{
						"characters": "KJ"
					},
					"AgAAAKUlAAAAAAAApiUAAAAAAAAAAAAApiUAAAAAAACnJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApSUAAAAAAAClJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6352,
					2,
					"left_delete",
					null,
					"AgAAAKYlAAAAAAAApiUAAAAAAAABAAAASqUlAAAAAAAApSUAAAAAAAABAAAASw",
					"AQAAAAAAAAABAAAApyUAAAAAAACnJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6353,
					1,
					"insert",
					{
						"characters": "JS_NewInt32("
					},
					"DAAAAKUlAAAAAAAApiUAAAAAAAAAAAAApiUAAAAAAACnJQAAAAAAAAAAAACnJQAAAAAAAKglAAAAAAAAAAAAAKglAAAAAAAAqSUAAAAAAAAAAAAAqSUAAAAAAACqJQAAAAAAAAAAAACqJQAAAAAAAKslAAAAAAAAAAAAAKslAAAAAAAArCUAAAAAAAAAAAAArCUAAAAAAACtJQAAAAAAAAAAAACtJQAAAAAAAK4lAAAAAAAAAAAAAK4lAAAAAAAAryUAAAAAAAAAAAAAryUAAAAAAACwJQAAAAAAAAAAAACwJQAAAAAAALElAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApSUAAAAAAAClJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6356,
					1,
					"insert",
					{
						"characters": ",code)"
					},
					"BgAAAMslAAAAAAAAzCUAAAAAAAAAAAAAzCUAAAAAAADNJQAAAAAAAAAAAADNJQAAAAAAAM4lAAAAAAAAAAAAAM4lAAAAAAAAzyUAAAAAAAAAAAAAzyUAAAAAAADQJQAAAAAAAAAAAADQJQAAAAAAANElAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyyUAAAAAAADLJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6357,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAANElAAAAAAAA0iUAAAAAAAAAAAAA0iUAAAAAAADTJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0SUAAAAAAADRJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6358,
					1,
					"insert",
					{
						"characters": " JS_UNDEFINE"
					},
					"DAAAANMlAAAAAAAA1CUAAAAAAAAAAAAA1CUAAAAAAADVJQAAAAAAAAAAAADVJQAAAAAAANYlAAAAAAAAAAAAANYlAAAAAAAA1yUAAAAAAAAAAAAA1yUAAAAAAADYJQAAAAAAAAAAAADYJQAAAAAAANklAAAAAAAAAAAAANklAAAAAAAA2iUAAAAAAAAAAAAA2iUAAAAAAADbJQAAAAAAAAAAAADbJQAAAAAAANwlAAAAAAAAAAAAANwlAAAAAAAA3SUAAAAAAAAAAAAA3SUAAAAAAADeJQAAAAAAAAAAAADeJQAAAAAAAN8lAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0yUAAAAAAADTJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6359,
					1,
					"insert",
					{
						"characters": "D"
					},
					"AQAAAN8lAAAAAAAA4CUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3yUAAAAAAADfJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6360,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOAlAAAAAAAA4SUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4CUAAAAAAADgJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6361,
					1,
					"left_delete",
					null,
					"AQAAAOAlAAAAAAAA4CUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA4SUAAAAAAADhJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6362,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOAlAAAAAAAA4SUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4CUAAAAAAADgJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6363,
					1,
					"insert",
					{
						"characters": "  why"
					},
					"BQAAAOElAAAAAAAA4iUAAAAAAAAAAAAA4iUAAAAAAADjJQAAAAAAAAAAAADjJQAAAAAAAOQlAAAAAAAAAAAAAOQlAAAAAAAA5SUAAAAAAAAAAAAA5SUAAAAAAADmJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4SUAAAAAAADhJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6364,
					1,
					"insert",
					{
						"characters": "};"
					},
					"AgAAAOYlAAAAAAAA5yUAAAAAAAAAAAAA5yUAAAAAAADoJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5iUAAAAAAADmJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6366,
					1,
					"left_delete",
					null,
					"AQAAAOglAAAAAAAA6CUAAAAAAABQAAAAICgpIGluID8gSlNfTmV3U3RyaW5nTGVuKG1pbm5ldF9zZXJ2ZXIuY2JfY29ubmVjdC5jdHgsIGluLCBsZW4pIDogSlNfVU5ERUZJTkVEfTs",
					"AQAAAAAAAAABAAAA6CUAAAAAAAA4JgAAAAAAAAAAAAAAgHpA"
				],
				[
					6394,
					1,
					"insert",
					{
						"characters": "code"
					},
					"BQAAABYmAAAAAAAAFyYAAAAAAAAAAAAAFyYAAAAAAAAXJgAAAAAAAAIAAABpbhcmAAAAAAAAGCYAAAAAAAAAAAAAGCYAAAAAAAAZJgAAAAAAAAAAAAAZJgAAAAAAABomAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFiYAAAAAAAAYJgAAAAAAAAAAAAAAAPC/"
				],
				[
					6395,
					1,
					"insert",
					{
						"characters": " !="
					},
					"AwAAABomAAAAAAAAGyYAAAAAAAAAAAAAGyYAAAAAAAAcJgAAAAAAAAAAAAAcJgAAAAAAAB0mAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGiYAAAAAAAAaJgAAAAAAAAAAAAAAAPC/"
				],
				[
					6396,
					1,
					"insert",
					{
						"characters": " -1"
					},
					"AwAAAB0mAAAAAAAAHiYAAAAAAAAAAAAAHiYAAAAAAAAfJgAAAAAAAAAAAAAfJgAAAAAAACAmAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHSYAAAAAAAAdJgAAAAAAAAAAAAAAAPC/"
				],
				[
					6398,
					1,
					"left_delete",
					null,
					"AQAAACMmAAAAAAAAIyYAAAAAAAABAAAAMg",
					"AQAAAAAAAAABAAAAJCYAAAAAAAAkJgAAAAAAAAAAAAAAAPC/"
				],
				[
					6399,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAACMmAAAAAAAAJCYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIyYAAAAAAAAjJgAAAAAAAAAAAAAAAPC/"
				],
				[
					6420,
					1,
					"cut",
					null,
					"AQAAALgmAAAAAAAAuCYAAAAAAAA1AAAAICAgICAgSlNfRnJlZVZhbHVlKG1pbm5ldF9zZXJ2ZXIuY3R4LCBzZXJ2LT53c19vYmopOwo",
					"AQAAAAAAAAABAAAAuCYAAAAAAADtJgAAAAAAAAAAAAAAAPC/"
				],
				[
					6421,
					2,
					"paste",
					null,
					"AgAAALgmAAAAAAAA7SYAAAAAAAAAAAAA7SYAAAAAAAAiJwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuCYAAAAAAAC4JgAAAAAAAAAAAAAAAPC/"
				],
				[
					6424,
					1,
					"insert",
					{
						"characters": "why"
					},
					"BAAAAN4mAAAAAAAA3yYAAAAAAAAAAAAA3yYAAAAAAADfJgAAAAAAAAwAAABzZXJ2LT53c19vYmrfJgAAAAAAAOAmAAAAAAAAAAAAAOAmAAAAAAAA4SYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3iYAAAAAAADqJgAAAAAAAAAAAAAAAPC/"
				],
				[
					6427,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA4SYAAAAAAADhJgAAAAAAAAAAAAAAAPC/"
				],
				[
					6448,
					1,
					"insert",
					{
						"characters": "\nserv->closed"
					},
					"DgAAAFwnAAAAAAAAXScAAAAAAAAAAAAAXScAAAAAAABjJwAAAAAAAAAAAABjJwAAAAAAAGQnAAAAAAAAAAAAAGQnAAAAAAAAZScAAAAAAAAAAAAAZScAAAAAAABmJwAAAAAAAAAAAABmJwAAAAAAAGcnAAAAAAAAAAAAAGcnAAAAAAAAaCcAAAAAAAAAAAAAaCcAAAAAAABpJwAAAAAAAAAAAABpJwAAAAAAAGonAAAAAAAAAAAAAGonAAAAAAAAaycAAAAAAAAAAAAAaycAAAAAAABsJwAAAAAAAAAAAABsJwAAAAAAAG0nAAAAAAAAAAAAAG0nAAAAAAAAbicAAAAAAAAAAAAAbicAAAAAAABvJwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXCcAAAAAAABcJwAAAAAAAAAAAAAAAPC/"
				],
				[
					6449,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAG8nAAAAAAAAcCcAAAAAAAAAAAAAcCcAAAAAAABxJwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbycAAAAAAABvJwAAAAAAAAAAAAAAAPC/"
				],
				[
					6450,
					1,
					"insert",
					{
						"characters": " 1;"
					},
					"AwAAAHEnAAAAAAAAcicAAAAAAAAAAAAAcicAAAAAAABzJwAAAAAAAAAAAABzJwAAAAAAAHQnAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcScAAAAAAABxJwAAAAAAAAAAAAAAAPC/"
				],
				[
					6466,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BQAAAPwjAAAAAAAA/SMAAAAAAAAAAAAA/SMAAAAAAAABJAAAAAAAAAAAAAABJAAAAAAAAAMkAAAAAAAAAAAAAAMkAAAAAAAABCQAAAAAAAAAAAAABCQAAAAAAAAFJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/CMAAAAAAAD8IwAAAAAAAAAAAAAAAPC/"
				],
				[
					6467,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAUkAAAAAAAAByQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABSQAAAAAAAAFJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6468,
					1,
					"insert",
					{
						"characters": "serv->co"
					},
					"CAAAAAYkAAAAAAAAByQAAAAAAAAAAAAAByQAAAAAAAAIJAAAAAAAAAAAAAAIJAAAAAAAAAkkAAAAAAAAAAAAAAkkAAAAAAAACiQAAAAAAAAAAAAACiQAAAAAAAALJAAAAAAAAAAAAAALJAAAAAAAAAwkAAAAAAAAAAAAAAwkAAAAAAAADSQAAAAAAAAAAAAADSQAAAAAAAAOJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABiQAAAAAAAAGJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6469,
					1,
					"left_delete",
					null,
					"AQAAAA0kAAAAAAAADSQAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAADiQAAAAAAAAOJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6470,
					1,
					"insert",
					{
						"characters": "losed"
					},
					"BQAAAA0kAAAAAAAADiQAAAAAAAAAAAAADiQAAAAAAAAPJAAAAAAAAAAAAAAPJAAAAAAAABAkAAAAAAAAAAAAABAkAAAAAAAAESQAAAAAAAAAAAAAESQAAAAAAAASJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADSQAAAAAAAANJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6471,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABIkAAAAAAAAEyQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEiQAAAAAAAASJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6472,
					1,
					"left_delete",
					null,
					"AQAAABIkAAAAAAAAEiQAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAEyQAAAAAAAATJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6476,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAAAYkAAAAAAAAByQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABiQAAAAAAAAGJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6478,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABQkAAAAAAAAFSQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFCQAAAAAAAAUJAAAAAAAAP///////+9/"
				],
				[
					6479,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAABUkAAAAAAAAFyQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFSQAAAAAAAAVJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6480,
					1,
					"right_delete",
					null,
					"AQAAABYkAAAAAAAAFiQAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAFiQAAAAAAAAWJAAAAAAAAAAAAAAAAPC/"
				],
				[
					6487,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAAI4nAAAAAAAAjycAAAAAAAAAAAAAjycAAAAAAACVJwAAAAAAAAAAAACVJwAAAAAAAJYnAAAAAAAAAAAAAI8nAAAAAAAAjycAAAAAAAAGAAAAICAgICAgjycAAAAAAACTJwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjicAAAAAAACOJwAAAAAAAAAAAAAAAPC/"
				],
				[
					6490,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAlCcAAAAAAACUJwAAAAAAAAAAAAAAAPC/"
				],
				[
					6494,
					1,
					"insert",
					{
						"characters": "(("
					},
					"AgAAACQlAAAAAAAAJSUAAAAAAAAAAAAAJSUAAAAAAAAmJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJCUAAAAAAAAkJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6495,
					2,
					"left_delete",
					null,
					"AgAAACUlAAAAAAAAJSUAAAAAAAABAAAAKCQlAAAAAAAAJCUAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAAJiUAAAAAAAAmJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6496,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAACQlAAAAAAAAJSUAAAAAAAAAAAAAJSUAAAAAAAAmJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJCUAAAAAAAAkJQAAAAAAAAAAAAAAAPC/"
				],
				[
					6509,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAACIiAAAAAAAAIyIAAAAAAAAAAAAAIyIAAAAAAAAjIgAAAAAAAIsBAAAgLypjYXNlIExXU19DQUxMQkFDS19XU19QRUVSX0lOSVRJQVRFRF9DTE9TRTogewogICAgICAgIHVpbnQ4X3QqIGNvZGVwID0gaW47CiAgICAgICAgdWludDE2X3QgY29kZSA9IChjb2RlcFswXSA8PCA4KSArIGNvZGVwWzFdOwogICAgICAgIGNvbnN0IGNoYXIqIHdoeSA9IGluICsgMjsKICAgICAgICBpbnQgd2h5bGVuID0gbGVuIC0gMjsKCiAgICAgICAgcHJpbnRmKCIlcyBmZD0lZCBjb2RlPSV1IGxlbj0lenUgcmVhc29uPSUuKnNcbiIsIGx3c19jYWxsYmFja19uYW1lKHJlYXNvbiksIGx3c19nZXRfc29ja2V0X2ZkKHdzaSksIGNvZGUsIGxlbiwgd2h5bGVuLCB3aHkpOwogICAgICAgIHJldHVybiAwOwogICAgICB9Ki8KCiAgICAvLyBjYXNlIExXU19DQUxMQkFDS19DTElFTlRfQ0xPU0VEOg",
					"AQAAAAAAAAABAAAAIiIAAAAAAACtIwAAAAAAAAAAAAAAAPC/"
				],
				[
					6514,
					2,
					"delete_blank_lines",
					{
						"surplus": false
					},
					"AgAAAJsgAAAAAAAAAyIAAAAAAABrAQAAICAgIEpTVmFsdWUgYXJnc1syXTsKICAgICAgICBsd3Nfc2V0X29wYXF1ZV91c2VyX2RhdGEod3NpLCAwKTsKCiAgICAgICAgd3Nfb2JqID0gbWlubmV0X3dzX3dyYXAobWlubmV0X3NlcnZlci5jYl9jb25uZWN0LmN0eCwgd3NpKTsKICAgICAgICBhcmdzWzBdID0gd3Nfb2JqOwoKICAgICAgICBtaW5uZXRfZW1pdF90aGlzKCZtaW5uZXRfc2VydmVyLmNiX2Nvbm5lY3QsIHdzX29iaiwgMSwgYXJncyk7CgogICAgICAgIGlmKHNlcnYpCiAgICAgICAgICBzZXJ2LT53c19vYmogPSB3c19vYmo7CiAgICAgICAgZWxzZQogICAgICAgICAgSlNfRnJlZVZhbHVlKG1pbm5ldF9zZXJ2ZXIuY2JfY29ubmVjdC5jdHgsIGFyZ3NbMF0pOwogICAgICB9myAAAAAAAAADIgAAAAAAAGgBAAAgICAgSlNWYWx1ZSBhcmdzWzJdOwogICAgICAgIGx3c19zZXRfb3BhcXVlX3VzZXJfZGF0YSh3c2ksIDApOwogICAgICAgIHdzX29iaiA9IG1pbm5ldF93c193cmFwKG1pbm5ldF9zZXJ2ZXIuY2JfY29ubmVjdC5jdHgsIHdzaSk7CiAgICAgICAgYXJnc1swXSA9IHdzX29iajsKICAgICAgICBtaW5uZXRfZW1pdF90aGlzKCZtaW5uZXRfc2VydmVyLmNiX2Nvbm5lY3QsIHdzX29iaiwgMSwgYXJncyk7CiAgICAgICAgaWYoc2VydikKICAgICAgICAgIHNlcnYtPndzX29iaiA9IHdzX29iajsKICAgICAgICBlbHNlCiAgICAgICAgICBKU19GcmVlVmFsdWUobWlubmV0X3NlcnZlci5jYl9jb25uZWN0LmN0eCwgYXJnc1swXSk7CiAgICAgIH0",
					"AQAAAAAAAAABAAAAmyAAAAAAAAAGIgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "minnet-websocket.h",
			"settings":
			{
				"buffer_size": 1170,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					19,
					1,
					"left_delete",
					null,
					"AQAAAMgAAAAAAAAAyAAAAAAAAAAiAAAAICAvKiBKU1ZhbHVlIHJlcXVlc3QsIHJlc3BvbnNlOyovCg",
					"AQAAAAAAAAABAAAAyAAAAAAAAADqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"cut",
					null,
					"AQAAAMgAAAAAAAAAyAAAAAAAAAAUAAAAICBzaXplX3QgcmVmX2NvdW50Owo",
					"AQAAAAAAAAABAAAAyAAAAAAAAADcAAAAAAAAAAAAAAAAAAAA"
				],
				[
					23,
					1,
					"paste",
					null,
					"AQAAALQAAAAAAAAAyAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAAAAAAAAAC0AAAAAAAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"contents": "/*\n * libwebsockets - small server side websockets and web server implementation\n *\n * Copyright (C) 2010 - 2019 Andy Green <andy@warmcat.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\n#include \"private-lib-core.h\"\n\n/*\n * bitmap of control messages that are valid to receive for each http2 state\n */\n\nstatic const uint16_t http2_rx_validity[] = {\n\t/* LWS_H2S_IDLE */\n\t\t(1 << LWS_H2_FRAME_TYPE_SETTINGS) |\n\t\t(1 << LWS_H2_FRAME_TYPE_PRIORITY) |\n//\t\t(1 << LWS_H2_FRAME_TYPE_WINDOW_UPDATE)| /* ignore */\n\t\t(1 << LWS_H2_FRAME_TYPE_HEADERS) |\n\t\t(1 << LWS_H2_FRAME_TYPE_CONTINUATION),\n\t/* LWS_H2S_RESERVED_LOCAL */\n\t\t(1 << LWS_H2_FRAME_TYPE_SETTINGS) |\n\t\t(1 << LWS_H2_FRAME_TYPE_RST_STREAM) |\n\t\t(1 << LWS_H2_FRAME_TYPE_PRIORITY) |\n\t\t(1 << LWS_H2_FRAME_TYPE_WINDOW_UPDATE),\n\t/* LWS_H2S_RESERVED_REMOTE */\n\t\t(1 << LWS_H2_FRAME_TYPE_SETTINGS) |\n\t\t(1 << LWS_H2_FRAME_TYPE_HEADERS) |\n\t\t(1 << LWS_H2_FRAME_TYPE_CONTINUATION) |\n\t\t(1 << LWS_H2_FRAME_TYPE_RST_STREAM) |\n\t\t(1 << LWS_H2_FRAME_TYPE_PRIORITY),\n\t/* LWS_H2S_OPEN */\n\t\t(1 << LWS_H2_FRAME_TYPE_DATA) |\n\t\t(1 << LWS_H2_FRAME_TYPE_HEADERS) |\n\t\t(1 << LWS_H2_FRAME_TYPE_PRIORITY) |\n\t\t(1 << LWS_H2_FRAME_TYPE_RST_STREAM) |\n\t\t(1 << LWS_H2_FRAME_TYPE_SETTINGS) |\n\t\t(1 << LWS_H2_FRAME_TYPE_PUSH_PROMISE) |\n\t\t(1 << LWS_H2_FRAME_TYPE_PING) |\n\t\t(1 << LWS_H2_FRAME_TYPE_GOAWAY) |\n\t\t(1 << LWS_H2_FRAME_TYPE_WINDOW_UPDATE) |\n\t\t(1 << LWS_H2_FRAME_TYPE_CONTINUATION),\n\t/* LWS_H2S_HALF_CLOSED_REMOTE */\n\t\t(1 << LWS_H2_FRAME_TYPE_SETTINGS) |\n\t\t(1 << LWS_H2_FRAME_TYPE_WINDOW_UPDATE) |\n\t\t(1 << LWS_H2_FRAME_TYPE_PRIORITY) |\n\t\t(1 << LWS_H2_FRAME_TYPE_RST_STREAM),\n\t/* LWS_H2S_HALF_CLOSED_LOCAL */\n\t\t(1 << LWS_H2_FRAME_TYPE_DATA) |\n\t\t(1 << LWS_H2_FRAME_TYPE_HEADERS) |\n\t\t(1 << LWS_H2_FRAME_TYPE_PRIORITY) |\n\t\t(1 << LWS_H2_FRAME_TYPE_RST_STREAM) |\n\t\t(1 << LWS_H2_FRAME_TYPE_SETTINGS) |\n\t\t(1 << LWS_H2_FRAME_TYPE_PUSH_PROMISE) |\n\t\t(1 << LWS_H2_FRAME_TYPE_PING) |\n\t\t(1 << LWS_H2_FRAME_TYPE_GOAWAY) |\n\t\t(1 << LWS_H2_FRAME_TYPE_WINDOW_UPDATE) |\n\t\t(1 << LWS_H2_FRAME_TYPE_CONTINUATION),\n\t/* LWS_H2S_CLOSED */\n\t\t(1 << LWS_H2_FRAME_TYPE_SETTINGS) |\n\t\t(1 << LWS_H2_FRAME_TYPE_PRIORITY) |\n\t\t(1 << LWS_H2_FRAME_TYPE_WINDOW_UPDATE) |\n\t\t(1 << LWS_H2_FRAME_TYPE_RST_STREAM),\n};\n\nstatic const char *preface = \"PRI * HTTP/2.0\\x0d\\x0a\\x0d\\x0aSM\\x0d\\x0a\\x0d\\x0a\";\n\nstatic const char * const h2_state_names[] = {\n\t\"LWS_H2S_IDLE\",\n\t\"LWS_H2S_RESERVED_LOCAL\",\n\t\"LWS_H2S_RESERVED_REMOTE\",\n\t\"LWS_H2S_OPEN\",\n\t\"LWS_H2S_HALF_CLOSED_REMOTE\",\n\t\"LWS_H2S_HALF_CLOSED_LOCAL\",\n\t\"LWS_H2S_CLOSED\",\n};\n\n#if 0\nstatic const char * const h2_setting_names[] = {\n\t\"\",\n\t\"H2SET_HEADER_TABLE_SIZE\",\n\t\"H2SET_ENABLE_PUSH\",\n\t\"H2SET_MAX_CONCURRENT_STREAMS\",\n\t\"H2SET_INITIAL_WINDOW_SIZE\",\n\t\"H2SET_MAX_FRAME_SIZE\",\n\t\"H2SET_MAX_HEADER_LIST_SIZE\",\n\t\"reserved\",\n\t\"H2SET_ENABLE_CONNECT_PROTOCOL\"\n};\n\nvoid\nlws_h2_dump_settings(struct http2_settings *set)\n{\n\tint n;\n\n\tfor (n = 1; n < H2SET_COUNT; n++)\n\t\tlwsl_notice(\"   %30s: %10d\\n\", h2_setting_names[n], set->s[n]);\n}\n#else\nvoid\nlws_h2_dump_settings(struct http2_settings *set)\n{\n}\n#endif\n\nstruct lws_h2_protocol_send *\nlws_h2_new_pps(enum lws_h2_protocol_send_type type)\n{\n\tstruct lws_h2_protocol_send *pps = lws_malloc(sizeof(*pps), \"pps\");\n\n\tif (pps)\n\t\tpps->type = type;\n\n\treturn pps;\n}\n\nvoid lws_h2_init(struct lws *wsi)\n{\n\twsi->h2.h2n->our_set = wsi->a.vhost->h2.set;\n\twsi->h2.h2n->peer_set = lws_h2_defaults;\n}\n\nvoid\nlws_h2_state(struct lws *wsi, enum lws_h2_states s)\n{\n\tif (!wsi)\n\t\treturn;\n\tlwsl_info(\"%s: %s: state %s -> %s\\n\", __func__, lws_wsi_tag(wsi),\n\t\t\th2_state_names[wsi->h2.h2_state],\n\t\t\th2_state_names[s]);\n\t\t\n\t(void)h2_state_names;\n\twsi->h2.h2_state = (uint8_t)s;\n}\n\nint\nlws_h2_update_peer_txcredit(struct lws *wsi, unsigned int sid, int bump)\n{\n\tstruct lws *nwsi = lws_get_network_wsi(wsi);\n\tstruct lws_h2_protocol_send *pps;\n\n\tassert(wsi);\n\n\tif (!bump)\n\t\treturn 0;\n\n\tif (sid == (unsigned int)-1)\n\t\tsid = wsi->mux.my_sid;\n\n\tlwsl_info(\"%s: sid %d: bump %d -> %d\\n\", __func__, sid, bump,\n\t\t\t(int)wsi->txc.peer_tx_cr_est + bump);\n\n\tpps = lws_h2_new_pps(LWS_H2_PPS_UPDATE_WINDOW);\n\tif (!pps)\n\t\treturn 1;\n\n\tpps->u.update_window.sid = (unsigned int)sid;\n\tpps->u.update_window.credit = (unsigned int)bump;\n\twsi->txc.peer_tx_cr_est += bump;\n\n\tlws_wsi_txc_describe(&wsi->txc, __func__, wsi->mux.my_sid);\n\n\tlws_pps_schedule(wsi, pps);\n\n\tpps = lws_h2_new_pps(LWS_H2_PPS_UPDATE_WINDOW);\n\tif (!pps)\n\t\treturn 1;\n\n\tpps->u.update_window.sid = 0;\n\tpps->u.update_window.credit = (unsigned int)bump;\n\tnwsi->txc.peer_tx_cr_est += bump;\n\n\tlws_wsi_txc_describe(&nwsi->txc, __func__, nwsi->mux.my_sid);\n\n\tlws_pps_schedule(nwsi, pps);\n\n\treturn 0;\n}\n\nint\nlws_h2_get_peer_txcredit_estimate(struct lws *wsi)\n{\n\tlws_wsi_txc_describe(&wsi->txc, __func__, wsi->mux.my_sid);\n\treturn (int)wsi->txc.peer_tx_cr_est;\n}\n\nstatic int\nlws_h2_update_peer_txcredit_thresh(struct lws *wsi, unsigned int sid, int threshold, int bump)\n{\n\tif (wsi->txc.peer_tx_cr_est > threshold)\n\t\treturn 0;\n\n\treturn lws_h2_update_peer_txcredit(wsi, sid, bump);\n}\n\n/* cx + vh lock */\n\nstatic struct lws *\n__lws_wsi_server_new(struct lws_vhost *vh, struct lws *parent_wsi,\n\t\t     unsigned int sid)\n{\n\tstruct lws *nwsi = lws_get_network_wsi(parent_wsi);\n\tstruct lws_h2_netconn *h2n = nwsi->h2.h2n;\n\tchar tmp[50], tmp1[50];\n\tunsigned int n, b = 0;\n\tstruct lws *wsi;\n\tconst char *p;\n\n\tlws_context_assert_lock_held(vh->context);\n\tlws_vhost_assert_lock_held(vh);\n\n\t/*\n\t * The identifier of a newly established stream MUST be numerically\n   \t * greater than all streams that the initiating endpoint has opened or\n   \t * reserved.  This governs streams that are opened using a HEADERS frame\n   \t * and streams that are reserved using PUSH_PROMISE.  An endpoint that\n   \t * receives an unexpected stream identifier MUST respond with a\n   \t * connection error (Section 5.4.1) of type PROTOCOL_ERROR.\n\t */\n\tif (sid <= h2n->highest_sid_opened) {\n\t\tlwsl_info(\"%s: tried to open lower sid %d (%d)\\n\", __func__,\n\t\t\t\tsid, (int)h2n->highest_sid_opened);\n\t\tlws_h2_goaway(nwsi, H2_ERR_PROTOCOL_ERROR, \"Bad sid\");\n\t\treturn NULL;\n\t}\n\n\t/* no more children allowed by parent */\n\tif (parent_wsi->mux.child_count + 1 >\n\t    parent_wsi->h2.h2n->our_set.s[H2SET_MAX_CONCURRENT_STREAMS]) {\n\t\tlwsl_notice(\"reached concurrent stream limit\\n\");\n\t\treturn NULL;\n\t}\n\n\tn = 0;\n\tp = &parent_wsi->lc.gutag[1];\n\tdo {\n\t\tif (*p == '|') {\n\t\t\tb++;\n\t\t\tif (b == 3)\n\t\t\t\tcontinue;\n\t\t}\n\t\ttmp1[n++] = *p++;\n\t} while (b < 3 && n < sizeof(tmp1) - 2);\n\ttmp1[n] = '\\0';\n\tlws_snprintf(tmp, sizeof(tmp), \"h2_sid%u_(%s)\", sid, tmp1);\n\twsi = lws_create_new_server_wsi(vh, parent_wsi->tsi, tmp);\n\tif (!wsi) {\n\t\tlwsl_notice(\"new server wsi failed (%s)\\n\", lws_vh_tag(vh));\n\t\treturn NULL;\n\t}\n\n#if defined(LWS_WITH_SERVER)\n\tif (lwsi_role_server(parent_wsi)) {\n\t\tlws_metrics_caliper_bind(wsi->cal_conn, wsi->a.context->mth_srv);\n\t}\n#endif\n\n\th2n->highest_sid_opened = sid;\n\n\tlws_wsi_mux_insert(wsi, parent_wsi, sid);\n\tif (sid >= h2n->highest_sid)\n\t\th2n->highest_sid = sid + 2;\n\n\twsi->mux_substream = 1;\n\twsi->seen_nonpseudoheader = 0;\n\n\twsi->txc.tx_cr = (int32_t)nwsi->h2.h2n->peer_set.s[H2SET_INITIAL_WINDOW_SIZE];\n\twsi->txc.peer_tx_cr_est =\n\t\t\t(int32_t)nwsi->h2.h2n->our_set.s[H2SET_INITIAL_WINDOW_SIZE];\n\n\tlwsi_set_state(wsi, LRS_ESTABLISHED);\n\tlwsi_set_role(wsi, lwsi_role(parent_wsi));\n\n\twsi->a.protocol = &vh->protocols[0];\n\tif (lws_ensure_user_space(wsi))\n\t\tgoto bail1;\n\n#if defined(LWS_WITH_SERVER) && defined(LWS_WITH_SECURE_STREAMS)\n\tif (lws_adopt_ss_server_accept(wsi))\n\t\tgoto bail1;\n#endif\n\n\t/* get the ball rolling */\n\tlws_validity_confirmed(wsi);\n\n\tlwsl_info(\"%s: %s new ch %s, sid %d, usersp=%p\\n\", __func__,\n\t\t  lws_wsi_tag(parent_wsi), lws_wsi_tag(wsi), sid, wsi->user_space);\n\n\tlws_wsi_txc_describe(&wsi->txc, __func__, wsi->mux.my_sid);\n\tlws_wsi_txc_describe(&nwsi->txc, __func__, 0);\n\n\treturn wsi;\n\nbail1:\n\t/* undo the insert */\n\tparent_wsi->mux.child_list = wsi->mux.sibling_list;\n\tparent_wsi->mux.child_count--;\n\n\tif (wsi->user_space)\n\t\tlws_free_set_NULL(wsi->user_space);\n\tvh->protocols[0].callback(wsi, LWS_CALLBACK_WSI_DESTROY, NULL, NULL, 0);\n\t__lws_vhost_unbind_wsi(wsi);\n\tlws_free(wsi);\n\n\treturn NULL;\n}\n\nstruct lws *\nlws_wsi_h2_adopt(struct lws *parent_wsi, struct lws *wsi)\n{\n\tstruct lws *nwsi = lws_get_network_wsi(parent_wsi);\n\n\t/* no more children allowed by parent */\n\tif (parent_wsi->mux.child_count + 1 >\n\t    parent_wsi->h2.h2n->our_set.s[H2SET_MAX_CONCURRENT_STREAMS]) {\n\t\tlwsl_notice(\"reached concurrent stream limit\\n\");\n\t\treturn NULL;\n\t}\n\n\t/* sid is set just before issuing the headers, ensuring monoticity */\n\n\twsi->seen_nonpseudoheader = 0;\n#if defined(LWS_WITH_CLIENT)\n\twsi->client_mux_substream = 1;\n#endif\n\twsi->h2.initialized = 1;\n\n#if 0\n\t/* only assign sid at header send time when we know it */\n\tif (!wsi->mux.my_sid) {\n\t\twsi->mux.my_sid = nwsi->h2.h2n->highest_sid;\n\t\tnwsi->h2.h2n->highest_sid += 2;\n\t}\n#endif\n\n\tlwsl_info(\"%s: binding wsi %s to sid %d (next %d)\\n\", __func__,\n\t\tlws_wsi_tag(wsi), (int)wsi->mux.my_sid, (int)nwsi->h2.h2n->highest_sid);\n\n\tlws_wsi_mux_insert(wsi, parent_wsi, wsi->mux.my_sid);\n\n\twsi->txc.tx_cr = (int32_t)nwsi->h2.h2n->peer_set.s[H2SET_INITIAL_WINDOW_SIZE];\n\twsi->txc.peer_tx_cr_est = (int32_t)\n\t\t\tnwsi->h2.h2n->our_set.s[H2SET_INITIAL_WINDOW_SIZE];\n\n\tlws_wsi_txc_describe(&wsi->txc, __func__, wsi->mux.my_sid);\n\n\tif (lws_ensure_user_space(wsi))\n\t\tgoto bail1;\n\n\tlws_role_transition(wsi, LWSIFR_CLIENT, LRS_H2_WAITING_TO_SEND_HEADERS,\n\t\t\t    &role_ops_h2);\n\n\tlws_callback_on_writable(wsi);\n\n\treturn wsi;\n\nbail1:\n\t/* undo the insert */\n\tparent_wsi->mux.child_list = wsi->mux.sibling_list;\n\tparent_wsi->mux.child_count--;\n\n\tif (wsi->user_space)\n\t\tlws_free_set_NULL(wsi->user_space);\n\twsi->a.protocol->callback(wsi, LWS_CALLBACK_WSI_DESTROY, NULL, NULL, 0);\n\tlws_free(wsi);\n\n\treturn NULL;\n}\n\n\nint\nlws_h2_issue_preface(struct lws *wsi)\n{\n\tstruct lws_h2_netconn *h2n = wsi->h2.h2n;\n\tstruct lws_h2_protocol_send *pps;\n\n\tif (!h2n) {\n\t\tlwsl_warn(\"%s: no valid h2n\\n\", __func__);\n\t\treturn 1;\n\t}\n\n\tif (h2n->sent_preface)\n\t\treturn 1;\n\n\tlwsl_debug(\"%s: %s: fd %d\\n\", __func__, lws_wsi_tag(wsi), (int)wsi->desc.sockfd);\n\n\tif (lws_issue_raw(wsi, (uint8_t *)preface, strlen(preface)) !=\n\t\t(int)strlen(preface))\n\t\treturn 1;\n\n\th2n->sent_preface = 1;\n\n\tlws_role_transition(wsi, LWSIFR_CLIENT, LRS_H2_WAITING_TO_SEND_HEADERS,\n\t\t\t    &role_ops_h2);\n\n\th2n->count = 0;\n\twsi->txc.tx_cr = 65535;\n\n\t/*\n\t * we must send a settings frame\n\t */\n\tpps = lws_h2_new_pps(LWS_H2_PPS_MY_SETTINGS);\n\tif (!pps)\n\t\treturn 1;\n\tlws_pps_schedule(wsi, pps);\n\tlwsl_info(\"%s: h2 client sending settings\\n\", __func__);\n\n\treturn 0;\n}\n\nvoid\nlws_pps_schedule(struct lws *wsi, struct lws_h2_protocol_send *pps)\n{\n\tstruct lws *nwsi = lws_get_network_wsi(wsi);\n\tstruct lws_h2_netconn *h2n = nwsi->h2.h2n;\n\n\tpps->next = h2n->pps;\n\th2n->pps = pps;\n\tlws_rx_flow_control(wsi, LWS_RXFLOW_REASON_APPLIES_DISABLE |\n\t\t\t\t LWS_RXFLOW_REASON_H2_PPS_PENDING);\n\tlws_callback_on_writable(wsi);\n}\n\nint\nlws_h2_goaway(struct lws *wsi, uint32_t err, const char *reason)\n{\n\tstruct lws_h2_netconn *h2n = wsi->h2.h2n;\n\tstruct lws_h2_protocol_send *pps;\n\n\tif (h2n->type == LWS_H2_FRAME_TYPE_COUNT)\n\t\treturn 0;\n\n\tpps = lws_h2_new_pps(LWS_H2_PPS_GOAWAY);\n\tif (!pps)\n\t\treturn 1;\n\n\tlwsl_info(\"%s: %s: ERR 0x%x, '%s'\\n\", __func__, lws_wsi_tag(wsi), (int)err, reason);\n\n\tpps->u.ga.err = err;\n\tpps->u.ga.highest_sid = h2n->highest_sid;\n\tlws_strncpy(pps->u.ga.str, reason, sizeof(pps->u.ga.str));\n\tlws_pps_schedule(wsi, pps);\n\n\th2n->type = LWS_H2_FRAME_TYPE_COUNT; /* ie, IGNORE */\n\n\treturn 0;\n}\n\nint\nlws_h2_rst_stream(struct lws *wsi, uint32_t err, const char *reason)\n{\n\tstruct lws *nwsi = lws_get_network_wsi(wsi);\n\tstruct lws_h2_netconn *h2n = nwsi->h2.h2n;\n\tstruct lws_h2_protocol_send *pps;\n\n\tif (!h2n)\n\t\treturn 0;\n\n\tif (!wsi->h2_stream_carries_ws && h2n->type == LWS_H2_FRAME_TYPE_COUNT)\n\t\treturn 0;\n\n\tpps = lws_h2_new_pps(LWS_H2_PPS_RST_STREAM);\n\tif (!pps)\n\t\treturn 1;\n\n\tlwsl_info(\"%s: RST_STREAM 0x%x, sid %d, REASON '%s'\\n\", __func__,\n\t\t  (int)err, wsi->mux.my_sid, reason);\n\n\tpps->u.rs.sid = wsi->mux.my_sid;\n\tpps->u.rs.err = err;\n\n\tlws_pps_schedule(wsi, pps);\n\n\th2n->type = LWS_H2_FRAME_TYPE_COUNT; /* ie, IGNORE */\n\tlws_h2_state(wsi, LWS_H2_STATE_CLOSED);\n\n\treturn 0;\n}\n\nint\nlws_h2_settings(struct lws *wsi, struct http2_settings *settings,\n\t\tunsigned char *buf, int len)\n{\n\tstruct lws *nwsi = lws_get_network_wsi(wsi);\n\tunsigned int a, b;\n\n\tif (!len)\n\t\treturn 0;\n\n\tif (len < LWS_H2_SETTINGS_LEN)\n\t\treturn 1;\n\n\twhile (len >= LWS_H2_SETTINGS_LEN) {\n\t\ta = (unsigned int)((buf[0] << 8) | buf[1]);\n\t\tif (!a || a >= H2SET_COUNT)\n\t\t\tgoto skip;\n\t\tb = (unsigned int)(buf[2] << 24 | buf[3] << 16 | buf[4] << 8 | buf[5]);\n\n\t\tswitch (a) {\n\t\tcase H2SET_HEADER_TABLE_SIZE:\n\t\t\tbreak;\n\t\tcase H2SET_ENABLE_PUSH:\n\t\t\tif (b > 1) {\n\t\t\t\tlws_h2_goaway(nwsi, H2_ERR_PROTOCOL_ERROR,\n\t\t\t\t\t      \"ENABLE_PUSH invalid arg\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase H2SET_MAX_CONCURRENT_STREAMS:\n\t\t\tbreak;\n\t\tcase H2SET_INITIAL_WINDOW_SIZE:\n\t\t\tif (b > 0x7fffffff) {\n\t\t\t\tlws_h2_goaway(nwsi, H2_ERR_FLOW_CONTROL_ERROR,\n\t\t\t\t\t      \"Inital Window beyond max\");\n\t\t\t\treturn 1;\n\t\t\t}\n\n#if defined(LWS_WITH_CLIENT)\n#if defined(LWS_AMAZON_RTOS) || defined(LWS_AMAZON_LINUX)\n\t\t\tif (\n#else\n\t\t\tif (wsi->flags & LCCSCF_H2_QUIRK_OVERFLOWS_TXCR &&\n#endif\n\t\t\t    b == 0x7fffffff) {\n\t\t\t\tb >>= 4;\n\n\t\t\t\tbreak;\n\t\t\t}\n#endif\n\n\t\t\t/*\n\t\t\t * In addition to changing the flow-control window for\n\t\t\t * streams that are not yet active, a SETTINGS frame\n\t\t\t * can alter the initial flow-control window size for\n\t\t\t * streams with active flow-control windows (that is,\n\t\t\t * streams in the \"open\" or \"half-closed (remote)\"\n\t\t\t * state).  When the value of\n\t\t\t * SETTINGS_INITIAL_WINDOW_SIZE changes, a receiver\n\t\t\t * MUST adjust the size of all stream flow-control\n\t\t\t * windows that it maintains by the difference between\n\t\t\t * the new value and the old value.\n\t\t\t */\n\n\t\t\tlws_start_foreach_ll(struct lws *, w,\n\t\t\t\t\t     nwsi->mux.child_list) {\n\t\t\t\tlwsl_info(\"%s: adi child tc cr %d +%d -> %d\",\n\t\t\t\t\t  __func__, (int)w->txc.tx_cr,\n\t\t\t\t\t  b - (unsigned int)settings->s[a],\n\t\t\t\t\t  (int)(w->txc.tx_cr + (int)b -\n\t\t\t\t\t\t  (int)settings->s[a]));\n\t\t\t\tw->txc.tx_cr += (int)b - (int)settings->s[a];\n\t\t\t\tif (w->txc.tx_cr > 0 &&\n\t\t\t\t    w->txc.tx_cr <=\n\t\t\t\t\t\t  (int32_t)(b - settings->s[a]))\n\n\t\t\t\t\tlws_callback_on_writable(w);\n\t\t\t} lws_end_foreach_ll(w, mux.sibling_list);\n\n\t\t\tbreak;\n\t\tcase H2SET_MAX_FRAME_SIZE:\n\t\t\tif (b < wsi->a.vhost->h2.set.s[H2SET_MAX_FRAME_SIZE]) {\n\t\t\t\tlws_h2_goaway(nwsi, H2_ERR_PROTOCOL_ERROR,\n\t\t\t\t\t      \"Frame size < initial\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif (b > 0x00ffffff) {\n\t\t\t\tlws_h2_goaway(nwsi, H2_ERR_PROTOCOL_ERROR,\n\t\t\t\t\t      \"Settings Frame size above max\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase H2SET_MAX_HEADER_LIST_SIZE:\n\t\t\tbreak;\n\t\t}\n\t\tsettings->s[a] = b;\n\t\tlwsl_info(\"http2 settings %d <- 0x%x\\n\", a, b);\nskip:\n\t\tlen -= LWS_H2_SETTINGS_LEN;\n\t\tbuf += LWS_H2_SETTINGS_LEN;\n\t}\n\n\tif (len)\n\t\treturn 1;\n\n\tlws_h2_dump_settings(settings);\n\n\treturn 0;\n}\n\n/* RFC7640 Sect 6.9\n *\n * The WINDOW_UPDATE frame can be specific to a stream or to the entire\n * connection.  In the former case, the frame's stream identifier\n * indicates the affected stream; in the latter, the value \"0\" indicates\n * that the entire connection is the subject of the frame.\n *\n * ...\n *\n * Two flow-control windows are applicable: the stream flow-control\n * window and the connection flow-control window.  The sender MUST NOT\n * send a flow-controlled frame with a length that exceeds the space\n * available in either of the flow-control windows advertised by the\n * receiver.  Frames with zero length with the END_STREAM flag set (that\n * is, an empty DATA frame) MAY be sent if there is no available space\n * in either flow-control window.\n */\n\nint\nlws_h2_tx_cr_get(struct lws *wsi)\n{\n\tint c = wsi->txc.tx_cr;\n\tstruct lws *nwsi = lws_get_network_wsi(wsi);\n\n\tif (!wsi->mux_substream && !nwsi->upgraded_to_http2)\n\t\treturn ~0x80000000;\n\n\tlwsl_info (\"%s: %s: own tx credit %d: nwsi credit %d\\n\",\n\t\t     __func__, lws_wsi_tag(wsi), c, (int)nwsi->txc.tx_cr);\n\n\tif (nwsi->txc.tx_cr < c)\n\t\tc = nwsi->txc.tx_cr;\n\n\tif (c < 0)\n\t\treturn 0;\n\n\treturn c;\n}\n\nvoid\nlws_h2_tx_cr_consume(struct lws *wsi, int consumed)\n{\n\tstruct lws *nwsi = lws_get_network_wsi(wsi);\n\n\twsi->txc.tx_cr -= consumed;\n\n\tif (nwsi != wsi)\n\t\tnwsi->txc.tx_cr -= consumed;\n}\n\nint lws_h2_frame_write(struct lws *wsi, int type, int flags,\n\t\t       unsigned int sid, unsigned int len, unsigned char *buf)\n{\n\tstruct lws *nwsi = lws_get_network_wsi(wsi);\n\tunsigned char *p = &buf[-LWS_H2_FRAME_HEADER_LENGTH];\n\tint n;\n\n\t//if (wsi->h2_stream_carries_ws)\n\t// lwsl_hexdump_level(LLL_NOTICE, buf, len);\n\n\t*p++ = (uint8_t)(len >> 16);\n\t*p++ = (uint8_t)(len >> 8);\n\t*p++ = (uint8_t)len;\n\t*p++ = (uint8_t)type;\n\t*p++ = (uint8_t)flags;\n\t*p++ = (uint8_t)(sid >> 24);\n\t*p++ = (uint8_t)(sid >> 16);\n\t*p++ = (uint8_t)(sid >> 8);\n\t*p++ = (uint8_t)sid;\n\n\tlwsl_debug(\"%s: %s (eff %s). typ %d, fl 0x%x, sid=%d, len=%d, \"\n\t\t   \"txcr=%d, nwsi->txcr=%d\\n\", __func__, lws_wsi_tag(wsi),\n\t\t   lws_wsi_tag(nwsi), type, flags,\n\t\t   sid, len, (int)wsi->txc.tx_cr, (int)nwsi->txc.tx_cr);\n\n\tif (type == LWS_H2_FRAME_TYPE_DATA) {\n\t\tif (wsi->txc.tx_cr < (int)len)\n\n\t\t\tlwsl_info(\"%s: %s: sending payload len %d\"\n\t\t\t\t \" but tx_cr only %d!\\n\", __func__,\n\t\t\t\t lws_wsi_tag(wsi), len, (int)wsi->txc.tx_cr);\n\t\t\t\tlws_h2_tx_cr_consume(wsi, (int)len);\n\t}\n\n\tn = lws_issue_raw(nwsi, &buf[-LWS_H2_FRAME_HEADER_LENGTH],\n\t\t\t  len + LWS_H2_FRAME_HEADER_LENGTH);\n\tif (n < 0)\n\t\treturn n;\n\n\tif (n >= LWS_H2_FRAME_HEADER_LENGTH)\n\t\treturn n - LWS_H2_FRAME_HEADER_LENGTH;\n\n\treturn n;\n}\n\nstatic void lws_h2_set_bin(struct lws *wsi, int n, unsigned char *buf)\n{\n\t*buf++ = (uint8_t)(n >> 8);\n\t*buf++ = (uint8_t)n;\n\t*buf++ = (uint8_t)(wsi->h2.h2n->our_set.s[n] >> 24);\n\t*buf++ = (uint8_t)(wsi->h2.h2n->our_set.s[n] >> 16);\n\t*buf++ = (uint8_t)(wsi->h2.h2n->our_set.s[n] >> 8);\n\t*buf = (uint8_t)wsi->h2.h2n->our_set.s[n];\n}\n\n/* we get called on the network connection */\n\nint lws_h2_do_pps_send(struct lws *wsi)\n{\n\tstruct lws_h2_netconn *h2n = wsi->h2.h2n;\n\tstruct lws_h2_protocol_send *pps = NULL;\n\tstruct lws *cwsi;\n\tuint8_t set[LWS_PRE + 64], *p = &set[LWS_PRE], *q;\n\tint n, m = 0, flags = 0;\n\n\tif (!h2n)\n\t\treturn 1;\n\n\t/* get the oldest pps */\n\n\tlws_start_foreach_llp(struct lws_h2_protocol_send **, pps1, h2n->pps) {\n\t\tif ((*pps1)->next == NULL) { /* we are the oldest in the list */\n\t\t\tpps = *pps1; /* remove us from the list */\n\t\t\t*pps1 = NULL;\n\t\t\tcontinue;\n\t\t}\n\t} lws_end_foreach_llp(pps1, next);\n\n\tif (!pps)\n\t\treturn 1;\n\n\tlwsl_info(\"%s: %s: %d\\n\", __func__, lws_wsi_tag(wsi), pps->type);\n\n\tswitch (pps->type) {\n\n\tcase LWS_H2_PPS_MY_SETTINGS:\n\n\t\t/*\n\t\t * if any of our settings varies from h2 \"default defaults\"\n\t\t * then we must inform the peer\n\t\t */\n\t\tfor (n = 1; n < H2SET_COUNT; n++)\n\t\t\tif (h2n->our_set.s[n] != lws_h2_defaults.s[n]) {\n\t\t\t\tlwsl_debug(\"sending SETTING %d 0x%x\\n\", n,\n\t\t\t\t\t   (unsigned int)\n\t\t\t\t\t\t   wsi->h2.h2n->our_set.s[n]);\n\n\t\t\t\tlws_h2_set_bin(wsi, n, &set[LWS_PRE + m]);\n\t\t\t\tm += (int)sizeof(h2n->one_setting);\n\t\t\t}\n\t\tn = lws_h2_frame_write(wsi, LWS_H2_FRAME_TYPE_SETTINGS,\n\t\t\t\t       flags, LWS_H2_STREAM_ID_MASTER, (unsigned int)m,\n\t\t     \t\t       &set[LWS_PRE]);\n\t\tif (n != m) {\n\t\t\tlwsl_info(\"send %d %d\\n\", n, m);\n\t\t\tgoto bail;\n\t\t}\n\t\tbreak;\n\n\tcase LWS_H2_PPS_SETTINGS_INITIAL_UPDATE_WINDOW:\n\t\tq = &set[LWS_PRE];\n\t\t*q++ = (uint8_t)(H2SET_INITIAL_WINDOW_SIZE >> 8);\n\t\t*q++ = (uint8_t)(H2SET_INITIAL_WINDOW_SIZE);\n\t\t*q++ = (uint8_t)(pps->u.update_window.credit >> 24);\n\t\t*q++ = (uint8_t)(pps->u.update_window.credit >> 16);\n\t\t*q++ = (uint8_t)(pps->u.update_window.credit >> 8);\n\t\t*q = (uint8_t)(pps->u.update_window.credit);\n\n\t\tlwsl_debug(\"%s: resetting initial window to %d\\n\", __func__,\n\t\t\t\t(int)pps->u.update_window.credit);\n\n\t\tn = lws_h2_frame_write(wsi, LWS_H2_FRAME_TYPE_SETTINGS,\n\t\t\t\t       flags, LWS_H2_STREAM_ID_MASTER, 6,\n\t\t     \t\t       &set[LWS_PRE]);\n\t\tif (n != 6) {\n\t\t\tlwsl_info(\"send %d %d\\n\", n, m);\n\t\t\tgoto bail;\n\t\t}\n\t\tbreak;\n\n\tcase LWS_H2_PPS_ACK_SETTINGS:\n\t\t/* send ack ... always empty */\n\t\tn = lws_h2_frame_write(wsi, LWS_H2_FRAME_TYPE_SETTINGS, 1,\n\t\t\t\t       LWS_H2_STREAM_ID_MASTER, 0,\n\t\t\t\t       &set[LWS_PRE]);\n\t\tif (n) {\n\t\t\tlwsl_err(\"%s: writing settings ack frame failed %d\\n\", __func__, n);\n\t\t\tgoto bail;\n\t\t}\n\t\twsi->h2_acked_settings = 0;\n\t\t/* this is the end of the preface dance then? */\n\t\tif (lwsi_state(wsi) == LRS_H2_AWAIT_SETTINGS) {\n\t\t\tlwsi_set_state(wsi, LRS_ESTABLISHED);\n#if defined(LWS_WITH_FILE_OPS)\n\t\t\twsi->http.fop_fd = NULL;\n#endif\n\t\t\tif (lws_is_ssl(lws_get_network_wsi(wsi)))\n\t\t\t\tbreak;\n\n\t\t\tif (wsi->a.vhost->options &\n\t\t\t\tLWS_SERVER_OPTION_H2_PRIOR_KNOWLEDGE)\n\t\t\t\tbreak;\n\n\t\t\t/*\n\t\t\t * we need to treat the headers from the upgrade as the\n\t\t\t * first job.  So these need to get shifted to sid 1.\n\t\t\t */\n\n\t\t\tlws_context_lock(wsi->a.context, \"h2 mig\");\n\t\t\tlws_vhost_lock(wsi->a.vhost);\n\n\t\t\th2n->swsi = __lws_wsi_server_new(wsi->a.vhost, wsi, 1);\n\n\t\t\tlws_vhost_unlock(wsi->a.vhost);\n\t\t\tlws_context_unlock(wsi->a.context);\n\n\t\t\tif (!h2n->swsi)\n\t\t\t\tgoto bail;\n\n\t\t\t/* pass on the initial headers to SID 1 */\n\t\t\th2n->swsi->http.ah = wsi->http.ah;\n\t\t\twsi->http.ah = NULL;\n\n\t\t\tlwsl_info(\"%s: inherited headers %p\\n\", __func__,\n\t\t\t\t  h2n->swsi->http.ah);\n\t\t\th2n->swsi->txc.tx_cr = (int32_t)\n\t\t\t\th2n->our_set.s[H2SET_INITIAL_WINDOW_SIZE];\n\t\t\tlwsl_info(\"initial tx credit on %s: %d\\n\",\n\t\t\t\t  lws_wsi_tag(h2n->swsi),\n\t\t\t\t  (int)h2n->swsi->txc.tx_cr);\n\t\t\th2n->swsi->h2.initialized = 1;\n\t\t\t/* demanded by HTTP2 */\n\t\t\th2n->swsi->h2.END_STREAM = 1;\n\t\t\tlwsl_info(\"servicing initial http request\\n\");\n\n#if defined(LWS_WITH_SERVER)\n\t\t\tif (lws_http_action(h2n->swsi))\n\t\t\t\tgoto bail;\n#endif\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\n\t/*\n\t * h2 only has PING... ACK = 0 = ping, ACK = 1 = pong\n\t */\n\n\tcase LWS_H2_PPS_PING:\n\tcase LWS_H2_PPS_PONG:\n\t\tif (pps->type == LWS_H2_PPS_PING)\n\t\t\tlwsl_info(\"sending PING\\n\");\n\t\telse {\n\t\t\tlwsl_info(\"sending PONG\\n\");\n\t\t\tflags = LWS_H2_FLAG_SETTINGS_ACK;\n\t\t}\n\n\t\tmemcpy(&set[LWS_PRE], pps->u.ping.ping_payload, 8);\n\t\tn = lws_h2_frame_write(wsi, LWS_H2_FRAME_TYPE_PING, flags,\n\t\t\t\t       LWS_H2_STREAM_ID_MASTER, 8,\n\t\t\t\t       &set[LWS_PRE]);\n\t\tif (n != 8)\n\t\t\tgoto bail;\n\n\t\tbreak;\n\n\tcase LWS_H2_PPS_GOAWAY:\n\t\tlwsl_info(\"LWS_H2_PPS_GOAWAY\\n\");\n\t\t*p++ = (uint8_t)(pps->u.ga.highest_sid >> 24);\n\t\t*p++ = (uint8_t)(pps->u.ga.highest_sid >> 16);\n\t\t*p++ = (uint8_t)(pps->u.ga.highest_sid >> 8);\n\t\t*p++ = (uint8_t)(pps->u.ga.highest_sid);\n\t\t*p++ = (uint8_t)(pps->u.ga.err >> 24);\n\t\t*p++ = (uint8_t)(pps->u.ga.err >> 16);\n\t\t*p++ = (uint8_t)(pps->u.ga.err >> 8);\n\t\t*p++ = (uint8_t)(pps->u.ga.err);\n\t\tq = (unsigned char *)pps->u.ga.str;\n\t\tn = 0;\n\t\twhile (*q && n++ < (int)sizeof(pps->u.ga.str))\n\t\t\t*p++ = *q++;\n\t\th2n->we_told_goaway = 1;\n\t\tn = lws_h2_frame_write(wsi, LWS_H2_FRAME_TYPE_GOAWAY, 0,\n\t\t\t\t       LWS_H2_STREAM_ID_MASTER,\n\t\t\t\t       (unsigned int)lws_ptr_diff(p, &set[LWS_PRE]),\n\t\t\t\t       &set[LWS_PRE]);\n\t\tif (n != 4) {\n\t\t\tlwsl_info(\"send %d %d\\n\", n, m);\n\t\t\tgoto bail;\n\t\t}\n\t\tgoto bail;\n\n\tcase LWS_H2_PPS_RST_STREAM:\n\t\tlwsl_info(\"LWS_H2_PPS_RST_STREAM\\n\");\n\t\t*p++ = (uint8_t)(pps->u.rs.err >> 24);\n\t\t*p++ = (uint8_t)(pps->u.rs.err >> 16);\n\t\t*p++ = (uint8_t)(pps->u.rs.err >> 8);\n\t\t*p++ = (uint8_t)(pps->u.rs.err);\n\t\tn = lws_h2_frame_write(wsi, LWS_H2_FRAME_TYPE_RST_STREAM,\n\t\t\t\t       0, pps->u.rs.sid, 4, &set[LWS_PRE]);\n\t\tif (n != 4) {\n\t\t\tlwsl_info(\"send %d %d\\n\", n, m);\n\t\t\tgoto bail;\n\t\t}\n\t\tcwsi = lws_wsi_mux_from_id(wsi, pps->u.rs.sid);\n\t\tif (cwsi) {\n\t\t\tlwsl_debug(\"%s: closing cwsi %s %s %s (wsi %s)\\n\",\n\t\t\t\t   __func__, lws_wsi_tag(cwsi),\n\t\t\t\t   cwsi->role_ops->name,\n\t\t\t\t   cwsi->a.protocol->name, lws_wsi_tag(wsi));\n\t\t\tlws_close_free_wsi(cwsi, 0, \"reset stream\");\n\t\t}\n\t\tbreak;\n\n\tcase LWS_H2_PPS_UPDATE_WINDOW:\n\t\tlwsl_info(\"Issuing LWS_H2_PPS_UPDATE_WINDOW: sid %d: add %d\\n\",\n\t\t\t    (int)pps->u.update_window.sid,\n\t\t\t    (int)pps->u.update_window.credit);\n\t\t*p++ = (uint8_t)((pps->u.update_window.credit >> 24) & 0x7f); /* 31b */\n\t\t*p++ = (uint8_t)(pps->u.update_window.credit >> 16);\n\t\t*p++ = (uint8_t)(pps->u.update_window.credit >> 8);\n\t\t*p++ = (uint8_t)(pps->u.update_window.credit);\n\t\tn = lws_h2_frame_write(wsi, LWS_H2_FRAME_TYPE_WINDOW_UPDATE,\n\t\t\t\t       0, pps->u.update_window.sid, 4,\n\t\t\t\t       &set[LWS_PRE]);\n\t\tif (n != 4) {\n\t\t\tlwsl_info(\"send %d %d\\n\", n, m);\n\t\t\tgoto bail;\n\t\t}\n\t\tbreak;\n\n\tdefault:\n\t\tbreak;\n\t}\n\n\tlws_free(pps);\n\n\treturn 0;\n\nbail:\n\tlws_free(pps);\n\n\treturn 1;\n}\n\nstatic int\nlws_h2_parse_end_of_frame(struct lws *wsi);\n\n/*\n * The frame header part has just completely arrived.\n * Perform actions for header completion.\n */\nstatic int\nlws_h2_parse_frame_header(struct lws *wsi)\n{\n\tstruct lws_h2_netconn *h2n = wsi->h2.h2n;\n\tstruct lws_h2_protocol_send *pps;\n\tint n;\n\n\t/*\n\t * We just got the frame header\n\t */\n\th2n->count = 0;\n\th2n->swsi = wsi;\n\t/* b31 is a reserved bit */\n\th2n->sid = h2n->sid & 0x7fffffff;\n\n\tif (h2n->sid && !(h2n->sid & 1)) {\n\t\tchar pes[32];\n\t\tlws_snprintf(pes, sizeof(pes), \"Even Stream ID 0x%x\", (unsigned int)h2n->sid);\n\t\tlws_h2_goaway(wsi, H2_ERR_PROTOCOL_ERROR, pes);\n\n\t\treturn 0;\n\t}\n\n\t/* let the network wsi live a bit longer if subs are active */\n\n\tif (!wsi->immortal_substream_count)\n\t\tlws_set_timeout(wsi, PENDING_TIMEOUT_HTTP_KEEPALIVE_IDLE,\n\t\t\t\twsi->a.vhost->keepalive_timeout ?\n\t\t\t\t\twsi->a.vhost->keepalive_timeout : 31);\n\n\tif (h2n->sid)\n\t\th2n->swsi = lws_wsi_mux_from_id(wsi, h2n->sid);\n\n\tlwsl_debug(\"%s (%s): fr hdr: typ 0x%x, fla 0x%x, sid 0x%x, len 0x%x\\n\",\n\t\t  lws_wsi_tag(wsi), lws_wsi_tag(h2n->swsi), h2n->type,\n\t\t  h2n->flags, (unsigned int)h2n->sid, (unsigned int)h2n->length);\n\n\tif (h2n->we_told_goaway && h2n->sid > h2n->highest_sid)\n\t\th2n->type = LWS_H2_FRAME_TYPE_COUNT; /* ie, IGNORE */\n\n\tif (h2n->type >= LWS_H2_FRAME_TYPE_COUNT) {\n\t\tlwsl_info(\"%s: ignoring unknown frame type %d (len %d)\\n\", __func__, h2n->type, (unsigned int)h2n->length);\n\t\t/* we MUST ignore frames we don't understand */\n\t\th2n->type = LWS_H2_FRAME_TYPE_COUNT;\n\t}\n\n\t/*\n\t * Even if we have decided to logically ignore this frame, we must\n\t * consume the correct \"frame length\" amount of data to retain sync\n\t */\n\n\tif (h2n->length > h2n->our_set.s[H2SET_MAX_FRAME_SIZE]) {\n\t\t/*\n\t\t * peer sent us something bigger than we told\n\t\t * it we would allow\n\t\t */\n\t\tlwsl_info(\"%s: received oversize frame %d\\n\", __func__,\n\t\t\t  (unsigned int)h2n->length);\n\t\tlws_h2_goaway(wsi, H2_ERR_FRAME_SIZE_ERROR,\n\t\t\t      \"Peer ignored our frame size setting\");\n\t\treturn 1;\n\t}\n\n\tif (h2n->swsi)\n\t\tlwsl_info(\"%s: %s, State: %s, received cmd %d\\n\",\n\t\t  __func__, lws_wsi_tag(h2n->swsi),\n\t\t  h2_state_names[h2n->swsi->h2.h2_state], h2n->type);\n\telse {\n\t\t/* if it's data, either way no swsi means CLOSED state */\n\t\tif (h2n->type == LWS_H2_FRAME_TYPE_DATA) {\n\t\t\tif (h2n->sid <= h2n->highest_sid_opened\n#if defined(LWS_WITH_CLIENT)\n\t\t\t\t\t&& wsi->client_h2_alpn\n#endif\n\t\t\t) {\n\t\t\t\tlwsl_notice(\"ignoring straggling data fl 0x%x\\n\",\n\t\t\t\t\t\th2n->flags);\n\t\t\t\t/* ie, IGNORE */\n\t\t\t\th2n->type = LWS_H2_FRAME_TYPE_COUNT;\n\t\t\t} else {\n\t\t\t\tlwsl_info(\"%s: received %d bytes data for unknown sid %d, highest known %d\\n\",\n\t\t\t\t\t\t__func__, (int)h2n->length, (int)h2n->sid, (int)h2n->highest_sid_opened);\n\n//\t\t\t\tif (h2n->sid > h2n->highest_sid_opened) {\n\t\t\t\tlws_h2_goaway(wsi, H2_ERR_STREAM_CLOSED,\n\t\t\t\t      \"Data for nonexistent sid\");\n\t\t\t\treturn 0;\n//\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/* if the sid is credible, treat as wsi for it closed */\n\t\tif (h2n->sid > h2n->highest_sid_opened &&\n\t\t    h2n->type != LWS_H2_FRAME_TYPE_HEADERS &&\n\t\t    h2n->type != LWS_H2_FRAME_TYPE_PRIORITY) {\n\t\t\t/* if not credible, reject it */\n\t\t\tlwsl_info(\"%s: %s, No child for sid %d, rxcmd %d\\n\",\n\t\t\t  __func__, lws_wsi_tag(h2n->swsi), (unsigned int)h2n->sid, h2n->type);\n\t\t\tlws_h2_goaway(wsi, H2_ERR_STREAM_CLOSED,\n\t\t\t\t     \"Data for nonexistent sid\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tif (h2n->swsi && h2n->sid && h2n->type != LWS_H2_FRAME_TYPE_COUNT &&\n\t    !(http2_rx_validity[h2n->swsi->h2.h2_state] & (1 << h2n->type))) {\n\t\tlwsl_info(\"%s: %s, State: %s, ILLEGAL cmdrx %d (OK 0x%x)\\n\",\n\t\t\t  __func__, lws_wsi_tag(h2n->swsi),\n\t\t\t  h2_state_names[h2n->swsi->h2.h2_state], h2n->type,\n\t\t\t  http2_rx_validity[h2n->swsi->h2.h2_state]);\n\n\t\tif (h2n->swsi->h2.h2_state == LWS_H2_STATE_CLOSED ||\n\t\t    h2n->swsi->h2.h2_state == LWS_H2_STATE_HALF_CLOSED_REMOTE)\n\t\t\tn = H2_ERR_STREAM_CLOSED;\n\t\telse\n\t\t\tn = H2_ERR_PROTOCOL_ERROR;\n\t\tlws_h2_goaway(wsi, (unsigned int)n, \"invalid rx for state\");\n\n\t\treturn 0;\n\t}\n\n\tif (h2n->cont_exp && h2n->type != LWS_H2_FRAME_TYPE_COUNT &&\n\t    (h2n->cont_exp_sid != h2n->sid ||\n\t\t\t      h2n->type != LWS_H2_FRAME_TYPE_CONTINUATION)) {\n\t\tlwsl_info(\"%s: expected cont on sid %u (got %d on sid %u)\\n\",\n\t\t\t  __func__, (unsigned int)h2n->cont_exp_sid, h2n->type,\n\t\t\t  (unsigned int)h2n->sid);\n\t\th2n->cont_exp = 0;\n\t\tif (h2n->cont_exp_headers)\n\t\t\tn = H2_ERR_COMPRESSION_ERROR;\n\t\telse\n\t\t\tn = H2_ERR_PROTOCOL_ERROR;\n\t\tlws_h2_goaway(wsi, (unsigned int)n, \"Continuation hdrs State\");\n\n\t\treturn 0;\n\t}\n\n\tswitch (h2n->type) {\n\tcase LWS_H2_FRAME_TYPE_DATA:\n\t\tlwsl_info(\"seen incoming LWS_H2_FRAME_TYPE_DATA start\\n\");\n\t\tif (!h2n->sid) {\n\t\t\tlwsl_info(\"DATA: 0 sid\\n\");\n\t\t\tlws_h2_goaway(wsi, H2_ERR_PROTOCOL_ERROR, \"DATA 0 sid\");\n\t\t\tbreak;\n\t\t}\n\t\tlwsl_info(\"Frame header DATA: sid %u, flags 0x%x, len %u\\n\",\n\t\t\t\t(unsigned int)h2n->sid, h2n->flags,\n\t\t\t\t(unsigned int)h2n->length);\n\n\t\tif (!h2n->swsi) {\n\t\t\tlwsl_notice(\"DATA: NULL swsi\\n\");\n\t\t\tbreak;\n\t\t}\n\n\t\tlwsl_info(\"DATA rx on state %d\\n\", h2n->swsi->h2.h2_state);\n\n\t\tif (\n\t\t    h2n->swsi->h2.h2_state == LWS_H2_STATE_HALF_CLOSED_REMOTE ||\n\t\t    h2n->swsi->h2.h2_state == LWS_H2_STATE_CLOSED) {\n\t\t\tlws_h2_goaway(wsi, H2_ERR_STREAM_CLOSED, \"conn closed\");\n\t\t\tbreak;\n\t\t}\n\n\t\tif (h2n->length == 0)\n\t\t\tlws_h2_parse_end_of_frame(wsi);\n\n\t\tbreak;\n\n\tcase LWS_H2_FRAME_TYPE_PRIORITY:\n\t\tlwsl_info(\"LWS_H2_FRAME_TYPE_PRIORITY complete frame\\n\");\n\t\tif (!h2n->sid) {\n\t\t\tlws_h2_goaway(wsi, H2_ERR_PROTOCOL_ERROR,\n\t\t\t\t      \"Priority has 0 sid\");\n\t\t\tbreak;\n\t\t}\n\t\tif (h2n->length != 5) {\n\t\t\tlws_h2_goaway(wsi, H2_ERR_FRAME_SIZE_ERROR,\n\t\t\t\t      \"Priority has length other than 5\");\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase LWS_H2_FRAME_TYPE_PUSH_PROMISE:\n\t\tlwsl_info(\"LWS_H2_FRAME_TYPE_PUSH_PROMISE complete frame\\n\");\n\t\tlws_h2_goaway(wsi, H2_ERR_PROTOCOL_ERROR, \"Server only\");\n\t\tbreak;\n\n\tcase LWS_H2_FRAME_TYPE_GOAWAY:\n\t\tlwsl_debug(\"LWS_H2_FRAME_TYPE_GOAWAY received\\n\");\n\t\tbreak;\n\n\tcase LWS_H2_FRAME_TYPE_RST_STREAM:\n\t\tif (!h2n->sid)\n\t\t\treturn 1;\n\t\tif (!h2n->swsi) {\n\t\t\tif (h2n->sid <= h2n->highest_sid_opened)\n\t\t\t\tbreak;\n\t\t\tlws_h2_goaway(wsi, H2_ERR_PROTOCOL_ERROR,\n\t\t\t\t      \"crazy sid on RST_STREAM\");\n\t\t\treturn 1;\n\t\t}\n\t\tif (h2n->length != 4) {\n\t\t\tlws_h2_goaway(wsi, H2_ERR_FRAME_SIZE_ERROR,\n\t\t\t\t      \"RST_STREAM can only be length 4\");\n\t\t\tbreak;\n\t\t}\n\t\tlws_h2_state(h2n->swsi, LWS_H2_STATE_CLOSED);\n\t\tbreak;\n\n\tcase LWS_H2_FRAME_TYPE_SETTINGS:\n\t\tlwsl_info(\"LWS_H2_FRAME_TYPE_SETTINGS complete frame\\n\");\n\t\t/* nonzero sid on settings is illegal */\n\t\tif (h2n->sid) {\n\t\t\tlws_h2_goaway(wsi, H2_ERR_PROTOCOL_ERROR,\n\t\t\t\t\t \"Settings has nonzero sid\");\n\t\t\tbreak;\n\t\t}\n\n\t\tif (!(h2n->flags & LWS_H2_FLAG_SETTINGS_ACK)) {\n\t\t\tif (h2n->length % 6) {\n\t\t\t\tlws_h2_goaway(wsi, H2_ERR_FRAME_SIZE_ERROR,\n\t\t\t\t\t\t \"Settings length error\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (h2n->type == LWS_H2_FRAME_TYPE_COUNT)\n\t\t\t\treturn 0;\n\n\t\t\tif (wsi->upgraded_to_http2 &&\n#if defined(LWS_WITH_CLIENT)\n\t\t\t    (!(wsi->flags & LCCSCF_H2_QUIRK_NGHTTP2_END_STREAM) ||\n#else\n\t\t\t    (\n#endif\n\t\t\t\t\t    !wsi->h2_acked_settings)) {\n\n\t\t\t\tpps = lws_h2_new_pps(LWS_H2_PPS_ACK_SETTINGS);\n\t\t\t\tif (!pps)\n\t\t\t\t\treturn 1;\n\t\t\t\tlws_pps_schedule(wsi, pps);\n\t\t\t\twsi->h2_acked_settings = 1;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\t/* came to us with ACK set... not allowed to have payload */\n\n\t\tif (h2n->length) {\n\t\t\tlws_h2_goaway(wsi, H2_ERR_FRAME_SIZE_ERROR,\n\t\t\t\t      \"Settings with ACK not allowed payload\");\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase LWS_H2_FRAME_TYPE_PING:\n\t\tif (h2n->sid) {\n\t\t\tlws_h2_goaway(wsi, H2_ERR_PROTOCOL_ERROR,\n\t\t\t\t      \"Ping has nonzero sid\");\n\t\t\tbreak;\n\t\t}\n\t\tif (h2n->length != 8) {\n\t\t\tlws_h2_goaway(wsi, H2_ERR_FRAME_SIZE_ERROR,\n\t\t\t\t      \"Ping payload can only be 8\");\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase LWS_H2_FRAME_TYPE_CONTINUATION:\n\t\tlwsl_info(\"LWS_H2_FRAME_TYPE_CONTINUATION: sid = %u %d %d\\n\",\n\t\t\t  (unsigned int)h2n->sid, (int)h2n->cont_exp,\n\t\t\t  (int)h2n->cont_exp_sid);\n\n\t\tif (!h2n->cont_exp ||\n\t\t     h2n->cont_exp_sid != h2n->sid ||\n\t\t     !h2n->sid ||\n\t\t     !h2n->swsi) {\n\t\t\tlws_h2_goaway(wsi, H2_ERR_PROTOCOL_ERROR,\n\t\t\t\t      \"unexpected CONTINUATION\");\n\t\t\tbreak;\n\t\t}\n\n\t\tif (h2n->swsi->h2.END_HEADERS) {\n\t\t\tlws_h2_goaway(wsi, H2_ERR_PROTOCOL_ERROR,\n\t\t\t\t      \"END_HEADERS already seen\");\n\t\t\tbreak;\n\t\t}\n\t\t/* END_STREAM is in HEADERS, skip resetting it */\n\t\tgoto update_end_headers;\n\n\tcase LWS_H2_FRAME_TYPE_HEADERS:\n\t\tlwsl_info(\"HEADERS: frame header: sid = %u\\n\",\n\t\t\t\t(unsigned int)h2n->sid);\n\t\tif (!h2n->sid) {\n\t\t\tlws_h2_goaway(wsi, H2_ERR_PROTOCOL_ERROR, \"sid 0\");\n\t\t\treturn 1;\n\t\t}\n\n\t\tif (h2n->swsi && !h2n->swsi->h2.END_STREAM &&\n\t\t    h2n->swsi->h2.END_HEADERS &&\n\t\t    !(h2n->flags & LWS_H2_FLAG_END_STREAM)) {\n\t\t\tlws_h2_goaway(wsi, H2_ERR_PROTOCOL_ERROR,\n\t\t\t\t      \"extra HEADERS together\");\n\t\t\treturn 1;\n\t\t}\n\n#if defined(LWS_WITH_CLIENT)\n\t\tif (wsi->client_h2_alpn) {\n\t\t\tif (h2n->sid) {\n\t\t\t\th2n->swsi = lws_wsi_mux_from_id(wsi, h2n->sid);\n\t\t\t\tlwsl_info(\"HEADERS: nwsi %s: sid %u mapped \"\n\t\t\t\t\t  \"to wsi %s\\n\", lws_wsi_tag(wsi),\n\t\t\t\t\t  (unsigned int)h2n->sid,\n\t\t\t\t\t  lws_wsi_tag(h2n->swsi));\n\t\t\t\tif (!h2n->swsi)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tgoto update_end_headers;\n\t\t}\n#endif\n\n\t\tif (!h2n->swsi) {\n\t\t\t/* no more children allowed by parent */\n\t\t\tif (wsi->mux.child_count + 1 >\n\t\t\t    wsi->h2.h2n->our_set.s[H2SET_MAX_CONCURRENT_STREAMS]) {\n\t\t\t\tlws_h2_goaway(wsi, H2_ERR_PROTOCOL_ERROR,\n\t\t\t\t\"Another stream not allowed\");\n\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * The peer has sent us a HEADERS implying the creation\n\t\t\t * of a new stream\n\t\t\t */\n\n\t\t\tlws_context_lock(wsi->a.context, \"h2 new str\");\n\t\t\tlws_vhost_lock(wsi->a.vhost);\n\n\t\t\th2n->swsi = __lws_wsi_server_new(wsi->a.vhost, wsi,\n\t\t\t\t\t\t         h2n->sid);\n\n\t\t\tlws_vhost_unlock(wsi->a.vhost);\n\t\t\tlws_context_unlock(wsi->a.context);\n\n\t\t\tif (!h2n->swsi) {\n\t\t\t\tlws_h2_goaway(wsi, H2_ERR_PROTOCOL_ERROR,\n\t\t\t\t\t      \"OOM\");\n\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif (h2n->sid >= h2n->highest_sid)\n\t\t\t\th2n->highest_sid = h2n->sid + 2;\n\n\t\t\th2n->swsi->h2.initialized = 1;\n\n\t\t\tif (lws_h2_update_peer_txcredit(h2n->swsi,\n\t\t\t\t\th2n->swsi->mux.my_sid, 4 * 65536))\n\t\t\t\tgoto cleanup_wsi;\n\t\t}\n\n\t\t/*\n\t\t * ah needs attaching to child wsi, even though\n\t\t * we only fill it from network wsi\n\t\t */\n\t\tif (!h2n->swsi->http.ah)\n\t\t\tif (lws_header_table_attach(h2n->swsi, 0)) {\n\t\t\t\tlwsl_err(\"%s: Failed to get ah\\n\", __func__);\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t/*\n\t\t * The first use of a new stream identifier implicitly closes\n\t\t * all streams in the \"idle\" state that might have been\n\t\t * initiated by that peer with a lower-valued stream identifier.\n\t\t *\n\t\t * For example, if a client sends a HEADERS frame on stream 7\n\t\t * without ever sending a frame on stream 5, then stream 5\n\t\t * transitions to the \"closed\" state when the first frame for\n\t\t * stream 7 is sent or received.\n\t\t */\n\t\tlws_start_foreach_ll(struct lws *, w, wsi->mux.child_list) {\n\t\t\tif (w->mux.my_sid < h2n->sid &&\n\t\t\t    w->h2.h2_state == LWS_H2_STATE_IDLE)\n\t\t\t\tlws_close_free_wsi(w, 0, \"h2 sid close\");\n\t\t\tassert(w->mux.sibling_list != w);\n\t\t} lws_end_foreach_ll(w, mux.sibling_list);\n\n\t\th2n->cont_exp = !(h2n->flags & LWS_H2_FLAG_END_HEADERS);\n\t\th2n->cont_exp_sid = h2n->sid;\n\t\th2n->cont_exp_headers = 1;\n\t//\tlws_header_table_reset(h2n->swsi, 0);\n\nupdate_end_headers:\n\t\tif (lws_check_opt(h2n->swsi->a.vhost->options,\n\t\t\t       LWS_SERVER_OPTION_VH_H2_HALF_CLOSED_LONG_POLL)) {\n\n\t\t\t/*\n\t\t\t * We don't directly timeout streams that enter the\n\t\t\t * half-closed remote state, allowing immortal long\n\t\t\t * poll\n\t\t\t */\n\t\t\tlws_mux_mark_immortal(h2n->swsi);\n\t\t\tlwsl_info(\"%s: %s: h2 stream entering long poll\\n\",\n\t\t\t\t\t__func__, lws_wsi_tag(h2n->swsi));\n\n\t\t} else {\n\t\t\th2n->swsi->h2.END_STREAM =\n\t\t\t\t\t!!(h2n->flags & LWS_H2_FLAG_END_STREAM);\n\t\t\tlwsl_debug(\"%s: hdr END_STREAM = %d\\n\",__func__,\n\t\t\t  h2n->swsi->h2.END_STREAM);\n\t\t}\n\n\t\t/* no END_HEADERS means CONTINUATION must come */\n\t\th2n->swsi->h2.END_HEADERS =\n\t\t\t\t!!(h2n->flags & LWS_H2_FLAG_END_HEADERS);\n\t\tlwsl_info(\"%s: %s: END_HEADERS %d\\n\", __func__, lws_wsi_tag(h2n->swsi),\n\t\t\t  h2n->swsi->h2.END_HEADERS);\n\t\tif (h2n->swsi->h2.END_HEADERS)\n\t\t\th2n->cont_exp = 0;\n\t\tlwsl_debug(\"END_HEADERS %d\\n\", h2n->swsi->h2.END_HEADERS);\n\t\tbreak;\n\ncleanup_wsi:\n\n\t\treturn 1;\n\n\tcase LWS_H2_FRAME_TYPE_WINDOW_UPDATE:\n\t\tif (h2n->length != 4) {\n\t\t\tlws_h2_goaway(wsi, H2_ERR_FRAME_SIZE_ERROR,\n\t\t\t\t      \"window update frame not 4\");\n\t\t\tbreak;\n\t\t}\n\t\tlwsl_info(\"LWS_H2_FRAME_TYPE_WINDOW_UPDATE\\n\");\n\t\tbreak;\n\tcase LWS_H2_FRAME_TYPE_COUNT:\n\t\tif (h2n->length == 0)\n\t\t\tlws_h2_parse_end_of_frame(wsi);\n\t\telse\n\t\t\tlwsl_debug(\"%s: going on to deal with unknown frame remaining len %d\\n\", __func__, (unsigned int)h2n->length);\n\t\tbreak;\n\tdefault:\n\t\tlwsl_info(\"%s: ILLEGAL FRAME TYPE %d\\n\", __func__, h2n->type);\n\t\th2n->type = LWS_H2_FRAME_TYPE_COUNT; /* ie, IGNORE */\n\t\tbreak;\n\t}\n\tif (h2n->length == 0)\n\t\th2n->frame_state = 0;\n\n\treturn 0;\n}\n\nstatic const char * const method_names[] = {\n\t\"GET\", \"POST\",\n#if defined(LWS_WITH_HTTP_UNCOMMON_HEADERS)\n\t\"OPTIONS\", \"PUT\", \"PATCH\", \"DELETE\",\n#endif\n\t\"CONNECT\", \"HEAD\"\n};\nstatic unsigned char method_index[] = {\n\tWSI_TOKEN_GET_URI,\n\tWSI_TOKEN_POST_URI,\n#if defined(LWS_WITH_HTTP_UNCOMMON_HEADERS)\n\tWSI_TOKEN_OPTIONS_URI,\n\tWSI_TOKEN_PUT_URI,\n\tWSI_TOKEN_PATCH_URI,\n\tWSI_TOKEN_DELETE_URI,\n#endif\n\tWSI_TOKEN_CONNECT,\n\tWSI_TOKEN_HEAD_URI,\n};\n\n/*\n * The last byte of the whole frame has been handled.\n * Perform actions for frame completion.\n *\n * This is the crunch time for parsing that may have occured on a network\n * wsi with a pending partial send... we may call lws_http_action() to send\n * a response, conflicting with the partial.\n *\n * So in that case we change the wsi state and do the lws_http_action() in the\n * WRITABLE handler as a priority.\n */\nstatic int\nlws_h2_parse_end_of_frame(struct lws *wsi)\n{\n\tstruct lws_h2_netconn *h2n = wsi->h2.h2n;\n\tstruct lws *eff_wsi = wsi;\n\tconst char *p;\n\tint n;\n\n\th2n->frame_state = 0;\n\th2n->count = 0;\n\n\tif (h2n->sid)\n\t\th2n->swsi = lws_wsi_mux_from_id(wsi, h2n->sid);\n\n\tif (h2n->sid > h2n->highest_sid)\n\t\th2n->highest_sid = h2n->sid;\n\n\tif (h2n->collected_priority && (h2n->dep & ~(1u << 31)) == h2n->sid) {\n\t\tlws_h2_goaway(wsi, H2_ERR_PROTOCOL_ERROR, \"depends on own sid\");\n\t\treturn 0;\n\t}\n\n\tswitch (h2n->type) {\n\n\tcase LWS_H2_FRAME_TYPE_SETTINGS:\n\n#if defined(LWS_WITH_CLIENT)\n\t\tif (wsi->client_h2_alpn && !wsi->client_mux_migrated &&\n\t\t    !(h2n->flags & LWS_H2_FLAG_SETTINGS_ACK)) {\n\t\t\tstruct lws_h2_protocol_send *pps;\n\n\t\t\t/* migrate original client ask on to substream 1 */\n#if defined(LWS_WITH_FILE_OPS)\n\t\t\twsi->http.fop_fd = NULL;\n#endif\n\t\t\tlwsl_info(\"%s: migrating\\n\", __func__);\n\t\t\twsi->client_mux_migrated = 1;\n\t\t\t/*\n\t\t\t * we need to treat the headers from the upgrade as the\n\t\t\t * first job.  So these need to get shifted to sid 1.\n\t\t\t */\n\t\t\tlws_context_lock(wsi->a.context, \"h2 mig\");\n\t\t\tlws_vhost_lock(wsi->a.vhost);\n\n\t\t\th2n->swsi = __lws_wsi_server_new(wsi->a.vhost, wsi, 1);\n\n\t\t\tlws_vhost_unlock(wsi->a.vhost);\n\t\t\tlws_context_unlock(wsi->a.context);\n\n\t\t\tif (!h2n->swsi)\n\t\t\t\treturn 1;\n\t\t\th2n->sid = 1;\n\n\t\t\tassert(lws_wsi_mux_from_id(wsi, 1) == h2n->swsi);\n\n\t\t//\tlws_role_transition(wsi, LWSIFR_CLIENT,\n\t\t//\t\t\t    LRS_H2_WAITING_TO_SEND_HEADERS,\n\t\t//\t\t\t    &role_ops_h2);\n\n\t\t\tlws_role_transition(h2n->swsi, LWSIFR_CLIENT,\n\t\t\t\t\t    LRS_H2_WAITING_TO_SEND_HEADERS,\n\t\t\t\t\t    &role_ops_h2);\n\n\t\t\t/* pass on the initial headers to SID 1 */\n\t\t\th2n->swsi->http.ah = wsi->http.ah;\n#if defined(LWS_WITH_SYS_FAULT_INJECTION)\n\t\t\tlws_fi_import(&h2n->swsi->fic, &wsi->fic);\n#endif\n\t\t\th2n->swsi->client_mux_substream = 1;\n\t\t\th2n->swsi->client_h2_alpn = 1;\n#if defined(LWS_WITH_CLIENT)\n\t\t\th2n->swsi->flags = wsi->flags;\n#if defined(LWS_WITH_CONMON)\n\t\t\t/* sid1 needs to represent the connection experience\n\t\t\t * ... we take over responsibility for the DNS list\n\t\t\t * copy as well\n\t\t\t */\n\t\t\th2n->swsi->conmon = wsi->conmon;\n\t\t\th2n->swsi->conmon_datum = wsi->conmon_datum;\n\t\t\th2n->swsi->sa46_peer = wsi->sa46_peer;\n\t\t\twsi->conmon.dns_results_copy = NULL;\n#endif\n#endif /* CLIENT */\n\n#if defined(LWS_WITH_SECURE_STREAMS)\n\t\t\tif (wsi->for_ss) {\n\t\t\t\tlws_ss_handle_t *h = (lws_ss_handle_t *)lws_get_opaque_user_data(wsi);\n\n\t\t\t\th2n->swsi->for_ss = 1;\n\t\t\t\twsi->for_ss = 0;\n\n\t\t\t\tif (h->wsi == wsi)\n\t\t\t\t\th->wsi = h2n->swsi;\n\t\t\t}\n#endif\n\n\t\t\th2n->swsi->a.protocol = wsi->a.protocol;\n\t\t\tif (h2n->swsi->user_space &&\n\t\t\t    !h2n->swsi->user_space_externally_allocated)\n\t\t\t\tlws_free(h2n->swsi->user_space);\n\t\t\th2n->swsi->user_space = wsi->user_space;\n\t\t\th2n->swsi->user_space_externally_allocated =\n\t\t\t\t\twsi->user_space_externally_allocated;\n\t\t\th2n->swsi->a.opaque_user_data = wsi->a.opaque_user_data;\n\t\t\twsi->a.opaque_user_data = NULL;\n\t\t\th2n->swsi->txc.manual_initial_tx_credit =\n\t\t\t\t\twsi->txc.manual_initial_tx_credit;\n\n#if defined(LWS_WITH_TLS)\n\t\t\tlws_strncpy(h2n->swsi->alpn, wsi->alpn,\n\t\t\t\t\tsizeof(wsi->alpn));\n#endif\n\n\t\t\twsi->user_space = NULL;\n\n\t\t\tif (h2n->swsi->http.ah)\n\t\t\t\th2n->swsi->http.ah->wsi = h2n->swsi;\n\t\t\twsi->http.ah = NULL;\n\n\t\t\tlwsl_info(\"%s: MIGRATING nwsi %s -> swsi %s\\n\", __func__,\n\t\t\t\t  lws_wsi_tag(wsi), lws_wsi_tag(h2n->swsi));\n\t\t\th2n->swsi->txc.tx_cr = (int32_t)\n\t\t\t\th2n->peer_set.s[H2SET_INITIAL_WINDOW_SIZE];\n\t\t\tlwsl_info(\"%s: initial tx credit on %s: %d\\n\",\n\t\t\t\t  __func__, lws_wsi_tag(h2n->swsi),\n\t\t\t\t  (int)h2n->swsi->txc.tx_cr);\n\t\t\th2n->swsi->h2.initialized = 1;\n\n\t\t\t/* set our initial window size */\n\t\t\tif (!wsi->h2.initialized) {\n\t\t\t\twsi->txc.tx_cr = (int32_t)\n\t\t\t\t     h2n->peer_set.s[H2SET_INITIAL_WINDOW_SIZE];\n\n\t\t\t\tlwsl_info(\"%s: initial tx credit for us to \"\n\t\t\t\t\t  \"write on nwsi %s: %d\\n\", __func__,\n\t\t\t\t\t  lws_wsi_tag(wsi), (int)wsi->txc.tx_cr);\n\t\t\t\twsi->h2.initialized = 1;\n\t\t\t}\n\n\t\t\tlws_callback_on_writable(h2n->swsi);\n\n\t\t\tif (!wsi->h2_acked_settings ||\n\t\t\t    !(wsi->flags & LCCSCF_H2_QUIRK_NGHTTP2_END_STREAM)\n\t\t\t) {\n\t\t\t\tpps = lws_h2_new_pps(LWS_H2_PPS_ACK_SETTINGS);\n\t\t\t\tif (!pps)\n\t\t\t\t\treturn 1;\n\t\t\t\tlws_pps_schedule(wsi, pps);\n\t\t\t\tlwsl_info(\"%s: SETTINGS ack PPS\\n\", __func__);\n\t\t\t\twsi->h2_acked_settings = 1;\n\t\t\t}\n\n\t\t\t/* also attach any queued guys */\n\n\t\t\tlws_wsi_mux_apply_queue(wsi);\n\t\t}\n#endif\n\t\tbreak;\n\n\tcase LWS_H2_FRAME_TYPE_CONTINUATION:\n\tcase LWS_H2_FRAME_TYPE_HEADERS:\n\n\t\tif (!h2n->swsi)\n\t\t\tbreak;\n\n\t\t/* service the http request itself */\n\n\t\tif (h2n->last_action_dyntable_resize) {\n\t\t\tlws_h2_goaway(wsi, H2_ERR_COMPRESSION_ERROR,\n\t\t\t\t\"dyntable resize last in headers\");\n\t\t\tbreak;\n\t\t}\n\n\t\tif (!h2n->swsi->h2.END_HEADERS) {\n\t\t\t/* we are not finished yet */\n\t\t\tlwsl_info(\"witholding http action for continuation\\n\");\n\t\t\th2n->cont_exp_sid = h2n->sid;\n\t\t\th2n->cont_exp = 1;\n\t\t\tbreak;\n\t\t}\n\n\t\t/* confirm the hpack stream state is reasonable for finishing */\n\n\t\tif (h2n->hpack != HPKS_TYPE) {\n\t\t\t/* hpack incomplete */\n\t\t\tlwsl_info(\"hpack incomplete %d (type %d, len %u)\\n\",\n\t\t\t\t  h2n->hpack, h2n->type,\n\t\t\t\t  (unsigned int)h2n->hpack_len);\n\t\t\tlws_h2_goaway(wsi, H2_ERR_COMPRESSION_ERROR,\n\t\t\t\t      \"hpack incomplete\");\n\t\t\tbreak;\n\t\t}\n\n\t\t/* this is the last part of HEADERS */\n\t\tswitch (h2n->swsi->h2.h2_state) {\n\t\tcase LWS_H2_STATE_IDLE:\n\t\t\tlws_h2_state(h2n->swsi, LWS_H2_STATE_OPEN);\n\t\t\tbreak;\n\t\tcase LWS_H2_STATE_RESERVED_REMOTE:\n\t\t\tlws_h2_state(h2n->swsi, LWS_H2_STATE_HALF_CLOSED_LOCAL);\n\t\t\tbreak;\n\t\t}\n\n\t\tlwsl_info(\"http req, %s, h2n->swsi=%s\\n\", lws_wsi_tag(wsi),\n\t\t\t\tlws_wsi_tag(h2n->swsi));\n\t\th2n->swsi->hdr_parsing_completed = 1;\n\n#if defined(LWS_WITH_CLIENT)\n\t\tif (h2n->swsi->client_mux_substream &&\n\t\t    lws_client_interpret_server_handshake(h2n->swsi)) {\n\t\t\t/*\n\t\t\t * This is more complicated than it looks, one exit from\n\t\t\t * interpret_server_handshake() is to do a close that\n\t\t\t * turns into a redirect.\n\t\t\t *\n\t\t\t * In that case, the wsi survives having being reset\n\t\t\t * and detached from any h2 identity.  We need to get\n\t\t\t * our parents out from touching it any more\n\t\t\t */\n\t\t\tlwsl_info(\"%s: cli int serv hs closed, or redir\\n\", __func__);\n\t\t\treturn 2;\n\t\t}\n#endif\n\n\t\tif (lws_hdr_extant(h2n->swsi, WSI_TOKEN_HTTP_CONTENT_LENGTH)) {\n\t\t\tconst char *simp = lws_hdr_simple_ptr(h2n->swsi,\n\t\t\t\t\t      WSI_TOKEN_HTTP_CONTENT_LENGTH);\n\n\t\t\tif (!simp) /* coverity */\n\t\t\t\treturn 1;\n\t\t\th2n->swsi->http.rx_content_length = (unsigned long long)atoll(simp);\n\t\t\th2n->swsi->http.rx_content_remain =\n\t\t\t\t\th2n->swsi->http.rx_content_length;\n\t\t\th2n->swsi->http.content_length_given = 1;\n\t\t\tlwsl_info(\"setting rx_content_length %lld\\n\",\n\t\t\t\t  (long long)h2n->swsi->http.rx_content_length);\n\t\t}\n\n\t\t{\n\t\t\tint n = 0, len;\n\t\t\tchar buf[256];\n\t\t\tconst unsigned char *c;\n\n\t\t\tdo {\n\t\t\t\tc = lws_token_to_string((enum lws_token_indexes)n);\n\t\t\t\tif (!c) {\n\t\t\t\t\tn++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlen = lws_hdr_total_length(h2n->swsi, (enum lws_token_indexes)n);\n\t\t\t\tif (!len || len > (int)sizeof(buf) - 1) {\n\t\t\t\t\tn++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (lws_hdr_copy(h2n->swsi, buf, sizeof buf,\n\t\t\t\t\t\t(enum lws_token_indexes)n) < 0) {\n\t\t\t\t\tlwsl_info(\"    %s !oversize!\\n\",\n\t\t\t\t\t\t  (char *)c);\n\t\t\t\t} else {\n\t\t\t\t\tbuf[sizeof(buf) - 1] = '\\0';\n\n\t\t\t\t\tlwsl_info(\"    %s = %s\\n\",\n\t\t\t\t\t\t  (char *)c, buf);\n\t\t\t\t}\n\t\t\t\tn++;\n\t\t\t} while (c);\n\t\t}\n\n\t\tif (h2n->swsi->h2.h2_state == LWS_H2_STATE_HALF_CLOSED_REMOTE ||\n\t\t    h2n->swsi->h2.h2_state == LWS_H2_STATE_CLOSED) {\n\t\t\tlws_h2_goaway(wsi, H2_ERR_STREAM_CLOSED,\n\t\t\t\t      \"Banning service on CLOSED_REMOTE\");\n\t\t\tbreak;\n\t\t}\n\n\t\tswitch (h2n->swsi->h2.h2_state) {\n\t\tcase LWS_H2_STATE_IDLE:\n\t\t\tlws_h2_state(h2n->swsi, LWS_H2_STATE_OPEN);\n\t\t\tbreak;\n\t\tcase LWS_H2_STATE_OPEN:\n\t\t\tif (h2n->swsi->h2.END_STREAM)\n\t\t\t\tlws_h2_state(h2n->swsi,\n\t\t\t\t\t     LWS_H2_STATE_HALF_CLOSED_REMOTE);\n\t\t\tbreak;\n\t\tcase LWS_H2_STATE_HALF_CLOSED_LOCAL:\n\t\t\tif (h2n->swsi->h2.END_STREAM)\n\t\t\t\t/*\n\t\t\t\t * action the END_STREAM\n\t\t\t\t */\n\t\t\t\tlws_h2_state(h2n->swsi, LWS_H2_STATE_CLOSED);\n\t\t\tbreak;\n\t\t}\n\n#if defined(LWS_WITH_CLIENT)\n\n\t\t/*\n\t\t * If we already had the END_STREAM along with the END_HEADERS,\n\t\t * we have already transitioned to STATE_CLOSED and we are not\n\t\t * going to be doing anything further on this stream.\n\t\t *\n\t\t * In that case handle the transaction completion and\n\t\t * finalize the stream for the peer\n\t\t */\n\n\t\tif (h2n->swsi->h2.h2_state == LWS_H2_STATE_CLOSED &&\n\t\t\th2n->swsi->client_mux_substream) {\n\n\t\t\tlws_h2_rst_stream(h2n->swsi, H2_ERR_NO_ERROR,\n\t\t\t\t\"client done\");\n\n\t\t\tif (lws_http_transaction_completed_client(h2n->swsi))\n\t\t\t\tlwsl_debug(\"tx completed returned close\\n\");\n\t\t\tbreak;\n\t\t}\n\n\t\tif (h2n->swsi->client_mux_substream) {\n\t\t\tlwsl_info(\"%s: %s: headers: client path (h2 state %s)\\n\",\n\t\t\t\t  __func__, lws_wsi_tag(wsi),\n\t\t\t\t  h2_state_names[h2n->swsi->h2.h2_state]);\n\t\t\tbreak;\n\t\t}\n#endif\n\n\t\tif (!lws_hdr_total_length(h2n->swsi, WSI_TOKEN_HTTP_COLON_PATH) ||\n\t\t    !lws_hdr_total_length(h2n->swsi, WSI_TOKEN_HTTP_COLON_METHOD) ||\n\t\t    !lws_hdr_total_length(h2n->swsi, WSI_TOKEN_HTTP_COLON_SCHEME) ||\n\t\t     lws_hdr_total_length(h2n->swsi, WSI_TOKEN_HTTP_COLON_STATUS) ||\n\t\t     lws_hdr_extant(h2n->swsi, WSI_TOKEN_CONNECTION)) {\n\t\t\tlws_h2_goaway(wsi, H2_ERR_PROTOCOL_ERROR,\n\t\t\t\t      \"Pseudoheader checks\");\n\t\t\tbreak;\n\t\t}\n\n\t\tif (lws_hdr_extant(h2n->swsi, WSI_TOKEN_TE)) {\n\t\t\tn = lws_hdr_total_length(h2n->swsi, WSI_TOKEN_TE);\n\n\t\t\tif (n != 8 ||\n\t\t\t    !lws_hdr_simple_ptr(h2n->swsi, WSI_TOKEN_TE) ||\n\t\t\t    strncmp(lws_hdr_simple_ptr(h2n->swsi, WSI_TOKEN_TE),\n\t\t\t\t  \"trailers\", (unsigned int)n)) {\n\t\t\t\tlws_h2_goaway(wsi, H2_ERR_PROTOCOL_ERROR,\n\t\t\t\t\t      \"Illegal transfer-encoding\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n#if defined(LWS_WITH_HTTP_STREAM_COMPRESSION)\n\t\tlws_http_compression_validate(h2n->swsi);\n#endif\n\n\t\tp = lws_hdr_simple_ptr(h2n->swsi, WSI_TOKEN_HTTP_COLON_METHOD);\n\t\t/*\n\t\t * duplicate :path into the individual method uri header\n\t\t * index, so that it looks the same as h1 in the ah\n\t\t */\n\t\tfor (n = 0; n < (int)LWS_ARRAY_SIZE(method_names); n++)\n\t\t\tif (p && !strcasecmp(p, method_names[n])) {\n\t\t\t\th2n->swsi->http.ah->frag_index[method_index[n]] =\n\t\t\t\t\t\th2n->swsi->http.ah->frag_index[\n\t\t\t\t                     WSI_TOKEN_HTTP_COLON_PATH];\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t{\n\t\t\tlwsl_debug(\"%s: setting DEF_ACT from 0x%x\\n\", __func__,\n\t\t\t\t   (unsigned int)h2n->swsi->wsistate);\n\t\t\tlwsi_set_state(h2n->swsi, LRS_DEFERRING_ACTION);\n\t\t\tlws_callback_on_writable(h2n->swsi);\n\t\t}\n\t\tbreak;\n\n\tcase LWS_H2_FRAME_TYPE_DATA:\n\t\tlwsl_info(\"%s: DATA flags 0x%x\\n\", __func__, h2n->flags);\n\t\tif (!h2n->swsi)\n\t\t\tbreak;\n\n\t\tif (lws_hdr_total_length(h2n->swsi,\n\t\t\t\t\t WSI_TOKEN_HTTP_CONTENT_LENGTH) &&\n\t\t    h2n->swsi->h2.END_STREAM &&\n\t\t    h2n->swsi->http.rx_content_length &&\n\t\t    h2n->swsi->http.rx_content_remain) {\n\t\t\tlws_h2_rst_stream(h2n->swsi, H2_ERR_PROTOCOL_ERROR,\n\t\t\t\t\t  \"Not enough rx content\");\n\t\t\tbreak;\n\t\t}\n\n\t\tif (h2n->swsi->h2.END_STREAM &&\n\t\t    h2n->swsi->h2.h2_state == LWS_H2_STATE_OPEN)\n\t\t\tlws_h2_state(h2n->swsi,\n\t\t\t\t     LWS_H2_STATE_HALF_CLOSED_REMOTE);\n\n\t\tif (h2n->swsi->h2.END_STREAM &&\n\t\t    h2n->swsi->h2.h2_state == LWS_H2_STATE_HALF_CLOSED_LOCAL)\n\t\t\tlws_h2_state(h2n->swsi, LWS_H2_STATE_CLOSED);\n\n#if defined(LWS_WITH_CLIENT)\n\t\t/*\n\t\t * client... remote END_STREAM implies we weren't going to\n\t\t * send anything else anyway.\n\t\t */\n\n\t\tif (h2n->swsi->client_mux_substream &&\n\t\t    (h2n->flags & LWS_H2_FLAG_END_STREAM)) {\n\t\t\tlwsl_info(\"%s: %s: DATA: end stream\\n\",\n\t\t\t\t  __func__, lws_wsi_tag(h2n->swsi));\n\n\t\t\tif (h2n->swsi->h2.h2_state == LWS_H2_STATE_OPEN) {\n\t\t\t\tlws_h2_state(h2n->swsi,\n\t\t\t\t\t     LWS_H2_STATE_HALF_CLOSED_REMOTE);\n\t\t//\t\tlws_h2_rst_stream(h2n->swsi, H2_ERR_NO_ERROR,\n\t\t//\t\t\t\t  \"client done\");\n\n\t\t//\t\tif (lws_http_transaction_completed_client(h2n->swsi))\n\t\t//\t\t\tlwsl_debug(\"tx completed returned close\\n\");\n\t\t\t}\n\n\t\t\t//if (h2n->swsi->h2.h2_state == LWS_H2_STATE_HALF_CLOSED_LOCAL)\n\t\t\t{\n\t\t\t\tlws_h2_state(h2n->swsi, LWS_H2_STATE_CLOSED);\n\n\t\t\t\tlws_h2_rst_stream(h2n->swsi, H2_ERR_NO_ERROR,\n\t\t\t\t\t\t  \"client done\");\n\n\t\t\t\tif (lws_http_transaction_completed_client(h2n->swsi))\n\t\t\t\t\tlwsl_debug(\"tx completed returned close\\n\");\n\t\t\t}\n\t\t}\n#endif\n\t\tbreak;\n\n\tcase LWS_H2_FRAME_TYPE_PING:\n\t\tif (h2n->flags & LWS_H2_FLAG_SETTINGS_ACK)\n\t\t\tlws_validity_confirmed(wsi);\n\t\telse {\n\t\t\t/* they're sending us a ping request */\n\t\t\tstruct lws_h2_protocol_send *pps =\n\t\t\t\t\tlws_h2_new_pps(LWS_H2_PPS_PONG);\n\t\t\tif (!pps)\n\t\t\t\treturn 1;\n\n\t\t\tlwsl_info(\"rx ping, preparing pong\\n\");\n\n\t\t\tmemcpy(pps->u.ping.ping_payload, h2n->ping_payload, 8);\n\t\t\tlws_pps_schedule(wsi, pps);\n\t\t}\n\n\t\tbreak;\n\n\tcase LWS_H2_FRAME_TYPE_WINDOW_UPDATE:\n\t\t/*\n\t\t * We only have an unsigned 31-bit (positive) increment possible\n\t\t */\n\t\th2n->hpack_e_dep &= ~(1u << 31);\n\t\tlwsl_info(\"WINDOW_UPDATE: sid %u %u (0x%x)\\n\",\n\t\t\t  (unsigned int)h2n->sid,\n\t\t\t  (unsigned int)h2n->hpack_e_dep,\n\t\t\t  (unsigned int)h2n->hpack_e_dep);\n\n\t\tif (h2n->sid)\n\t\t\teff_wsi = h2n->swsi;\n\n\t\tif (!eff_wsi) {\n\t\t\tif (h2n->sid > h2n->highest_sid_opened)\n\t\t\t\tlws_h2_goaway(wsi, H2_ERR_PROTOCOL_ERROR,\n\t\t\t\t\t      \"alien sid\");\n\t\t\tbreak; /* ignore */\n\t\t}\n\n\t\tif (eff_wsi->a.vhost->options &\n\t\t        LWS_SERVER_OPTION_H2_JUST_FIX_WINDOW_UPDATE_OVERFLOW &&\n\t\t    (uint64_t)eff_wsi->txc.tx_cr + (uint64_t)h2n->hpack_e_dep >\n\t\t    (uint64_t)0x7fffffff)\n\t\t\th2n->hpack_e_dep = (uint32_t)(0x7fffffff - eff_wsi->txc.tx_cr);\n\n\t\tif ((uint64_t)eff_wsi->txc.tx_cr + (uint64_t)h2n->hpack_e_dep >\n\t\t    (uint64_t)0x7fffffff) {\n\t\t\tlwsl_warn(\"%s: WINDOW_UPDATE 0x%llx + 0x%llx = 0x%llx, too high\\n\",\n\t\t\t\t\t__func__, (unsigned long long)eff_wsi->txc.tx_cr,\n\t\t\t\t\t(unsigned long long)h2n->hpack_e_dep,\n\t\t\t\t\t(unsigned long long)eff_wsi->txc.tx_cr + (unsigned long long)h2n->hpack_e_dep);\n\t\t\tif (h2n->sid)\n\t\t\t\tlws_h2_rst_stream(h2n->swsi,\n\t\t\t\t\t\t  H2_ERR_FLOW_CONTROL_ERROR,\n\t\t\t\t\t\t  \"Flow control exceeded max\");\n\t\t\telse\n\t\t\t\tlws_h2_goaway(wsi, H2_ERR_FLOW_CONTROL_ERROR,\n\t\t\t\t\t      \"Flow control exceeded max\");\n\t\t\tbreak;\n\t\t}\n\n\t\tif (!h2n->hpack_e_dep) {\n\t\t\tlws_h2_goaway(wsi, H2_ERR_PROTOCOL_ERROR,\n\t\t\t\t      \"Zero length window update\");\n\t\t\tbreak;\n\t\t}\n\t\tn = eff_wsi->txc.tx_cr;\n\t\teff_wsi->txc.tx_cr += (int32_t)h2n->hpack_e_dep;\n\n\t\tlws_wsi_txc_report_manual_txcr_in(eff_wsi,\n\t\t\t\t\t\t  (int32_t)h2n->hpack_e_dep);\n\n\t\tlws_wsi_txc_describe(&eff_wsi->txc, \"WINDOW_UPDATE in\",\n\t\t\t\t     eff_wsi->mux.my_sid);\n\n\t\tif (n <= 0 && eff_wsi->txc.tx_cr <= 0)\n\t\t\t/* it helps, but won't change sendability for anyone */\n\t\t\tbreak;\n\n\t\t/*\n\t\t * It may have changed sendability (depends on SID 0 tx credit\n\t\t * too)... for us and any children waiting on us... reassess\n\t\t * blockage for all children first\n\t\t */\n\t\tlws_start_foreach_ll(struct lws *, w, wsi->mux.child_list) {\n\t\t\tlws_callback_on_writable(w);\n\t\t} lws_end_foreach_ll(w, mux.sibling_list);\n\n\t\tif (eff_wsi->txc.skint &&\n\t\t    !lws_wsi_txc_check_skint(&eff_wsi->txc,\n\t\t\t\t\t     lws_h2_tx_cr_get(eff_wsi)))\n\t\t\t/*\n\t\t\t * This one became un-skint, schedule a writeable\n\t\t\t * callback\n\t\t\t */\n\t\t\tlws_callback_on_writable(eff_wsi);\n\n\t\tbreak;\n\n\tcase LWS_H2_FRAME_TYPE_GOAWAY:\n\t\tlwsl_notice(\"GOAWAY: last sid %u, error 0x%08X, string '%s'\\n\",\n\t\t\t  (unsigned int)h2n->goaway_last_sid,\n\t\t\t  (unsigned int)h2n->goaway_err, h2n->goaway_str);\n\n\t\treturn 1;\n\n\tcase LWS_H2_FRAME_TYPE_RST_STREAM:\n\t\tlwsl_info(\"LWS_H2_FRAME_TYPE_RST_STREAM: sid %u: reason 0x%x\\n\",\n\t\t\t  (unsigned int)h2n->sid,\n\t\t\t  (unsigned int)h2n->hpack_e_dep);\n\t\tbreak;\n\n\tcase LWS_H2_FRAME_TYPE_COUNT: /* IGNORING FRAME */\n\t\tbreak;\n\t}\n\n\treturn 0;\n}\n\n/*\n * This may want to send something on the network wsi, which may be in the\n * middle of a partial send.  PPS sends are OK because they are queued to\n * go through the WRITABLE handler already.\n *\n * The read parser for the network wsi has no choice but to parse its stream\n * anyway, because otherwise it will not be able to get tx credit window\n * messages.\n *\n * Therefore if we will send non-PPS, ie, lws_http_action() for a stream\n * wsi, we must change its state and handle it as a priority in the\n * POLLOUT handler instead of writing it here.\n *\n * About closing... for the main network wsi, it should return nonzero to\n * close it all.  If it needs to close an swsi, it can do it here.\n */\nint\nlws_h2_parser(struct lws *wsi, unsigned char *in, lws_filepos_t _inlen,\n\t      lws_filepos_t *inused)\n{\n\tstruct lws_h2_netconn *h2n = wsi->h2.h2n;\n\tstruct lws_h2_protocol_send *pps;\n\tunsigned char c, *oldin = in, *iend = in + (size_t)_inlen;\n\tint n, m;\n\n\tif (!h2n)\n\t\tgoto fail;\n\n\twhile (in < iend) {\n\n\t\tc = *in++;\n\n\t\tswitch (lwsi_state(wsi)) {\n\t\tcase LRS_H2_AWAIT_PREFACE:\n\t\t\tif (preface[h2n->count++] != c)\n\t\t\t\tgoto fail;\n\n\t\t\tif (preface[h2n->count])\n\t\t\t\tbreak;\n\n\t\t\tlwsl_info(\"http2: %s: established\\n\", lws_wsi_tag(wsi));\n\t\t\tlwsi_set_state(wsi, LRS_H2_AWAIT_SETTINGS);\n\t\t\tlws_validity_confirmed(wsi);\n\t\t\th2n->count = 0;\n\t\t\twsi->txc.tx_cr = 65535;\n\n\t\t\t/*\n\t\t\t * we must send a settings frame -- empty one is OK...\n\t\t\t * that must be the first thing sent by server\n\t\t\t * and the peer must send a SETTINGS with ACK flag...\n\t\t\t */\n\t\t\tpps = lws_h2_new_pps(LWS_H2_PPS_MY_SETTINGS);\n\t\t\tif (!pps)\n\t\t\t\tgoto fail;\n\t\t\tlws_pps_schedule(wsi, pps);\n\t\t\tbreak;\n\n\t\tcase LRS_H2_WAITING_TO_SEND_HEADERS:\n\t\tcase LRS_ESTABLISHED:\n\t\tcase LRS_H2_AWAIT_SETTINGS:\n\n\t\t\tif (h2n->frame_state != LWS_H2_FRAME_HEADER_LENGTH)\n\t\t\t\tgoto try_frame_start;\n\n\t\t\t/*\n\t\t\t * post-header, preamble / payload / padding part\n\t\t\t */\n\t\t\th2n->count++;\n\n\t\t\tif (h2n->type == LWS_H2_FRAME_TYPE_COUNT) { /* IGNORING FRAME */\n\t\t\t\t//lwsl_debug(\"%s: consuming for ignored %u %u\\n\", __func__, (unsigned int)h2n->count, (unsigned int)h2n->length);\n\t\t\t\tgoto frame_end;\n\t\t\t}\n\n\n\t\t\tif (h2n->flags & LWS_H2_FLAG_PADDED &&\n\t\t\t    !h2n->pad_length) {\n\t\t\t\t/*\n\t\t\t\t * Get the padding count... actual padding is\n\t\t\t\t * at the end of the frame.\n\t\t\t\t */\n\t\t\t\th2n->padding = c;\n\t\t\t\th2n->pad_length = 1;\n\t\t\t\th2n->preamble++;\n\n\t\t\t\tif (h2n->padding > h2n->length - 1)\n\t\t\t\t\tlws_h2_goaway(wsi,\n\t\t\t\t\t\t      H2_ERR_PROTOCOL_ERROR,\n\t\t\t\t\t\t      \"execssive padding\");\n\t\t\t\tbreak; /* we consumed this */\n\t\t\t}\n\n\t\t\tif (h2n->flags & LWS_H2_FLAG_PRIORITY &&\n\t\t\t    !h2n->collected_priority) {\n\t\t\t\t/* going to be 5 preamble bytes */\n\n\t\t\t\tlwsl_debug(\"PRIORITY FLAG:  0x%x\\n\", c);\n\n\t\t\t\tif (h2n->preamble++ - h2n->pad_length < 4) {\n\t\t\t\t\th2n->dep = ((h2n->dep) << 8) | c;\n\t\t\t\t\tbreak; /* we consumed this */\n\t\t\t\t}\n\t\t\t\th2n->weight_temp = c;\n\t\t\t\th2n->collected_priority = 1;\n\t\t\t\tlwsl_debug(\"PRI FL: dep 0x%x, weight 0x%02X\\n\",\n\t\t\t\t\t   (unsigned int)h2n->dep,\n\t\t\t\t\t   h2n->weight_temp);\n\t\t\t\tbreak; /* we consumed this */\n\t\t\t}\n\t\t\tif (h2n->padding && h2n->count >\n\t\t\t    (h2n->length - h2n->padding)) {\n\t\t\t\tif (c) {\n\t\t\t\t\tlws_h2_goaway(wsi, H2_ERR_PROTOCOL_ERROR,\n\t\t\t\t\t\t      \"nonzero padding\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tgoto frame_end;\n\t\t\t}\n\n\t\t\t/* applies to wsi->h2.swsi which may be wsi */\n\t\t\tswitch(h2n->type) {\n\n\t\t\tcase LWS_H2_FRAME_TYPE_SETTINGS:\n\t\t\t\tn = (int)(h2n->count - 1u - h2n->preamble) %\n\t\t\t\t     LWS_H2_SETTINGS_LEN;\n\t\t\t\th2n->one_setting[n] = c;\n\t\t\t\tif (n != LWS_H2_SETTINGS_LEN - 1)\n\t\t\t\t\tbreak;\n\t\t\t\tlws_h2_settings(wsi, &h2n->peer_set,\n\t\t\t\t\t\th2n->one_setting,\n\t\t\t\t\t\tLWS_H2_SETTINGS_LEN);\n\t\t\t\tbreak;\n\n\t\t\tcase LWS_H2_FRAME_TYPE_CONTINUATION:\n\t\t\tcase LWS_H2_FRAME_TYPE_HEADERS:\n\t\t\t\tif (!h2n->swsi)\n\t\t\t\t\tbreak;\n\t\t\t\tif (lws_hpack_interpret(h2n->swsi, c)) {\n\t\t\t\t\tlwsl_info(\"%s: hpack failed\\n\",\n\t\t\t\t\t\t  __func__);\n\t\t\t\t\tgoto fail;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase LWS_H2_FRAME_TYPE_GOAWAY:\n\t\t\t\tswitch (h2n->inside++) {\n\t\t\t\tcase 0:\n\t\t\t\tcase 1:\n\t\t\t\tcase 2:\n\t\t\t\tcase 3:\n\t\t\t\t\th2n->goaway_last_sid <<= 8;\n\t\t\t\t\th2n->goaway_last_sid |= c;\n\t\t\t\t\th2n->goaway_str[0] = '\\0';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 4:\n\t\t\t\tcase 5:\n\t\t\t\tcase 6:\n\t\t\t\tcase 7:\n\t\t\t\t\th2n->goaway_err <<= 8;\n\t\t\t\t\th2n->goaway_err |= c;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tif (h2n->inside - 9 <\n\t\t\t\t\t    sizeof(h2n->goaway_str) - 1)\n\t\t\t\t\t\th2n->goaway_str[\n\t\t\t\t\t\t           h2n->inside - 9] = (char)c;\n\t\t\t\t\th2n->goaway_str[\n\t\t\t\t\t    sizeof(h2n->goaway_str) - 1] = '\\0';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase LWS_H2_FRAME_TYPE_DATA:\n\n\t\t\t//\tlwsl_info(\"%s: LWS_H2_FRAME_TYPE_DATA: fl 0x%x\\n\",\n\t\t\t//\t\t  __func__, h2n->flags);\n\n\t\t\t\t/*\n\t\t\t\t * let the network wsi live a bit longer if\n\t\t\t\t * subs are active... our frame may take a long\n\t\t\t\t * time to chew through\n\t\t\t\t */\n\t\t\t\tif (!wsi->immortal_substream_count)\n\t\t\t\t\tlws_set_timeout(wsi,\n\t\t\t\t\tPENDING_TIMEOUT_HTTP_KEEPALIVE_IDLE,\n\t\t\t\t\t\twsi->a.vhost->keepalive_timeout ?\n\t\t\t\t\t    wsi->a.vhost->keepalive_timeout : 31);\n\n\t\t\t\tif (!h2n->swsi)\n\t\t\t\t\tbreak;\n\n\t\t\t\tif (lws_buflist_next_segment_len(\n\t\t\t\t\t\t&h2n->swsi->buflist, NULL))\n\t\t\t\t\tlwsl_info(\"%s: substream has pending\\n\",\n\t\t\t\t\t\t  __func__);\n\n\t\t\t\tif (lwsi_role_http(h2n->swsi) &&\n\t\t\t\t    lwsi_state(h2n->swsi) == LRS_ESTABLISHED) {\n\t\t\t\t\tlwsi_set_state(h2n->swsi, LRS_BODY);\n\t\t\t\t\tlwsl_info(\"%s: %s to LRS_BODY\\n\",\n\t\t\t\t\t\t\t__func__, lws_wsi_tag(h2n->swsi));\n\t\t\t\t}\n\n\t\t\t\tif (lws_hdr_total_length(h2n->swsi,\n\t\t\t\t\t     WSI_TOKEN_HTTP_CONTENT_LENGTH) &&\n\t\t\t\t    h2n->swsi->http.rx_content_length &&\n\t\t\t\t    h2n->swsi->http.rx_content_remain <\n\t\t\t\t\t\t    lws_ptr_diff_size_t(iend, in) + 1 - 9 && /* last */\n\t\t\t\t    h2n->inside < h2n->length) {\n\n\t\t\t\t\tlwsl_warn(\"%s: %lu %lu %lu %lu\\n\", __func__,\n\t\t\t\t\t\t  (unsigned long)h2n->swsi->http.rx_content_remain,\n\t\t\t\t\t\t(unsigned long)(lws_ptr_diff_size_t(iend, in) + 1 - 9),\n\t\t\t\t\t\t(unsigned long)h2n->inside, (unsigned long)h2n->length);\n\n\t\t\t\t\t/* unread data in frame */\n\t\t\t\t\tlws_h2_goaway(wsi,\n\t\t\t\t\t\t      H2_ERR_PROTOCOL_ERROR,\n\t\t\t\t\t    \"More rx than content_length told\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * We operate on a frame.  The RX we have at\n\t\t\t\t * hand may exceed the current frame.\n\t\t\t\t */\n\n\t\t\t\tn = (int)lws_ptr_diff_size_t(iend, in)  + 1;\n\t\t\t\tif (n > (int)(h2n->length - h2n->count + 1)) {\n\t\t\t\t\tif (h2n->count > h2n->length)\n\t\t\t\t\t\tgoto close_swsi_and_return;\n\t\t\t\t\tn = (int)(h2n->length - h2n->count) + 1;\n\t\t\t\t\tlwsl_debug(\"---- restricting len to %d \"\n\t\t\t\t\t\t   \"\\n\", n);\n\t\t\t\t}\n#if defined(LWS_WITH_CLIENT)\n\t\t\t\tif (h2n->swsi->client_mux_substream) {\n\t\t\t\t\tif (!h2n->swsi->a.protocol) {\n\t\t\t\t\t\tlwsl_err(\"%s: %p doesn't have protocol\\n\",\n\t\t\t\t\t\t\t __func__, lws_wsi_tag(h2n->swsi));\n\t\t\t\t\t\tm = 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\th2n->swsi->txc.peer_tx_cr_est -= n;\n\t\t\t\t\t\twsi->txc.peer_tx_cr_est -= n;\n\t\t\t\t\t\tlws_wsi_txc_describe(&h2n->swsi->txc,\n\t\t\t\t\t\t\t__func__,\n\t\t\t\t\t\t\th2n->swsi->mux.my_sid);\n\t\t\t\t\tm = user_callback_handle_rxflow(\n\t\t\t\t\t\th2n->swsi->a.protocol->callback,\n\t\t\t\t\t\th2n->swsi,\n\t\t\t\t\t  LWS_CALLBACK_RECEIVE_CLIENT_HTTP_READ,\n\t\t\t\t\t\th2n->swsi->user_space,\n\t\t\t\t\t\tin - 1, (unsigned int)n);\n\t\t\t\t\t}\n\n\t\t\t\t\tin += n - 1;\n\t\t\t\t\th2n->inside += (unsigned int)n;\n\t\t\t\t\th2n->count += (unsigned int)n - 1;\n\n\t\t\t\t\tif (m) {\n\t\t\t\t\t\tlwsl_info(\"RECEIVE_CLIENT_HTTP \"\n\t\t\t\t\t\t\t  \"closed it\\n\");\n\t\t\t\t\t\tgoto close_swsi_and_return;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n#endif\n\n\t\t\t\tif (lwsi_state(h2n->swsi) == LRS_DEFERRING_ACTION) {\n\t\t\t\t\tm = lws_buflist_append_segment(\n\t\t\t\t\t\t&h2n->swsi->buflist, in - 1, (unsigned int)n);\n\t\t\t\t\tif (m < 0)\n\t\t\t\t\t\treturn -1;\n\n\t\t\t\t\t/*\n\t\t\t\t\t * Since we're in an open-ended\n\t\t\t\t\t * DEFERRING_ACTION, don't add this swsi\n\t\t\t\t\t * to the pt list of wsi holding buflist\n\t\t\t\t\t * content yet, we are not in a position\n\t\t\t\t\t * to consume it until we get out of\n\t\t\t\t\t * DEFERRING_ACTION.\n\t\t\t\t\t */\n\n\t\t\t\t\tin += n - 1;\n\t\t\t\t\th2n->inside += (unsigned int)n;\n\t\t\t\t\th2n->count += (unsigned int)n - 1;\n\n\t\t\t\t\tlwsl_debug(\"%s: deferred %d\\n\", __func__, n);\n\t\t\t\t\tgoto do_windows;\n\t\t\t\t}\n\n\t\t\t\th2n->swsi->outer_will_close = 1;\n\t\t\t\t/*\n\t\t\t\t * choose the length for this go so that we end at\n\t\t\t\t * the frame boundary, in the case there is already\n\t\t\t\t * more waiting leave it for next time around\n\t\t\t\t */\n\n\t\t\t\tn = lws_read_h1(h2n->swsi, in - 1, (unsigned int)n);\n\t\t\t\t// lwsl_notice(\"%s: lws_read_h1 %d\\n\", __func__, n);\n\t\t\t\th2n->swsi->outer_will_close = 0;\n\t\t\t\t/*\n\t\t\t\t * can return 0 in POST body with\n\t\t\t\t * content len exhausted somehow.\n\t\t\t\t */\n\t\t\t\tif (n < 0 ||\n\t\t\t\t    (!n && h2n->swsi->http.content_length_given && !lws_buflist_next_segment_len(\n\t\t\t\t\t\t    &wsi->buflist, NULL))) {\n\t\t\t\t\tlwsl_info(\"%s: lws_read_h1 told %d %u / %u\\n\",\n\t\t\t\t\t\t__func__, n,\n\t\t\t\t\t\t(unsigned int)h2n->count,\n\t\t\t\t\t\t(unsigned int)h2n->length);\n\t\t\t\t\tin += h2n->length - h2n->count;\n\t\t\t\t\th2n->inside = h2n->length;\n\t\t\t\t\th2n->count = h2n->length - 1;\n\n\t\t\t\t\t//if (n < 0)\n\t\t\t\t\t//\tgoto already_closed_swsi;\n\t\t\t\t\tgoto close_swsi_and_return;\n\t\t\t\t}\n\n\t\t\t\tlwsl_info(\"%s: lws_read_h1 telling %d %u / %u\\n\",\n\t\t\t\t\t\t__func__, n,\n\t\t\t\t\t\t(unsigned int)h2n->count,\n\t\t\t\t\t\t(unsigned int)h2n->length);\n\n\t\t\t\tin += (unsigned int)n - 1;\n\t\t\t\th2n->inside += (unsigned int)n;\n\t\t\t\th2n->count += (unsigned int)n - 1;\n\n\t\t\t\th2n->swsi->txc.peer_tx_cr_est -= n;\n\t\t\t\twsi->txc.peer_tx_cr_est -= n;\n\ndo_windows:\n\n#if defined(LWS_WITH_CLIENT)\n\t\t\t\tif (!(h2n->swsi->flags & LCCSCF_H2_MANUAL_RXFLOW))\n#endif\n\t\t\t\t{\n\t\t\t\t\t/*\n\t\t\t\t\t * The default behaviour is we just keep\n\t\t\t\t\t * cranking the other side's tx credit\n\t\t\t\t\t * back up, for simple bulk transfer as\n\t\t\t\t\t * fast as we can take it\n\t\t\t\t\t */\n\n\t\t\t\t\tm = n; //(2 * h2n->length) + 65536;\n\n\t\t\t\t\t/* update both the stream and nwsi */\n\n\t\t\t\t\tlws_h2_update_peer_txcredit_thresh(h2n->swsi,\n\t\t\t\t\t\t\t\t    h2n->sid, m, m);\n\t\t\t\t}\n#if defined(LWS_WITH_CLIENT)\n\t\t\t\telse {\n\t\t\t\t\t/*\n\t\t\t\t\t * If he's handling it himself, only\n\t\t\t\t\t * repair the nwsi credit but allow the\n\t\t\t\t\t * stream credit to run down until the\n\t\t\t\t\t * user code deals with it\n\t\t\t\t\t */\n\t\t\t\t\tlws_h2_update_peer_txcredit(wsi, 0, n);\n\t\t\t\t\th2n->swsi->txc.manual = 1;\n\t\t\t\t}\n#endif\n\t\t\t\tbreak;\n\n\t\t\tcase LWS_H2_FRAME_TYPE_PRIORITY:\n\t\t\t\tif (h2n->count <= 4) {\n\t\t\t\t\th2n->dep <<= 8;\n\t\t\t\t\th2n->dep |= c;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\th2n->weight_temp = c;\n\t\t\t\tlwsl_info(\"PRIORITY: dep 0x%x, weight 0x%02X\\n\",\n\t\t\t\t\t  (unsigned int)h2n->dep, h2n->weight_temp);\n\n\t\t\t\tif ((h2n->dep & ~(1u << 31)) == h2n->sid) {\n\t\t\t\t\tlws_h2_goaway(wsi, H2_ERR_PROTOCOL_ERROR,\n\t\t\t\t\t\t      \"cant depend on own sid\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase LWS_H2_FRAME_TYPE_RST_STREAM:\n\t\t\t\th2n->hpack_e_dep <<= 8;\n\t\t\t\th2n->hpack_e_dep |= c;\n\t\t\t\tbreak;\n\n\t\t\tcase LWS_H2_FRAME_TYPE_PUSH_PROMISE:\n\t\t\t\tbreak;\n\n\t\t\tcase LWS_H2_FRAME_TYPE_PING:\n\t\t\t\tif (h2n->flags & LWS_H2_FLAG_SETTINGS_ACK) { // ack\n\t\t\t\t} else { /* they're sending us a ping request */\n\t\t\t\t\tif (h2n->count > 8)\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\th2n->ping_payload[h2n->count - 1] = c;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase LWS_H2_FRAME_TYPE_WINDOW_UPDATE:\n\t\t\t\th2n->hpack_e_dep <<= 8;\n\t\t\t\th2n->hpack_e_dep |= c;\n\t\t\t\tbreak;\n\n\t\t\tcase LWS_H2_FRAME_TYPE_COUNT: /* IGNORING FRAME */\n\t\t\t\t//lwsl_debug(\"%s: consuming for ignored %u %u\\n\", __func__, (unsigned int)h2n->count, (unsigned int)h2n->length);\n\t\t\t\th2n->count++;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tlwsl_notice(\"%s: unhandled frame type %d\\n\",\n\t\t\t\t\t    __func__, h2n->type);\n\n\t\t\t\tgoto fail;\n\t\t\t}\n\nframe_end:\n\t\t\tif (h2n->count > h2n->length) {\n\t\t\t\tlwsl_notice(\"%s: count > length %u %u (type %d)\\n\",\n\t\t\t\t\t    __func__, (unsigned int)h2n->count,\n\t\t\t\t\t    (unsigned int)h2n->length, h2n->type);\n\n\t\t\t} else\n\t\t\t\tif (h2n->count != h2n->length)\n\t\t\t\t\tbreak;\n\n\t\t\t/*\n\t\t\t * end of frame just happened\n\t\t\t */\n\t\t\tn = lws_h2_parse_end_of_frame(wsi);\n\t\t\tif (n == 2) {\n\t\t\t\t*inused = (lws_filepos_t)lws_ptr_diff_size_t(in, oldin);\n\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t\tif (n)\n\t\t\t\tgoto fail;\n\n\t\t\tbreak;\n\ntry_frame_start:\n\t\t\tif (h2n->frame_state <= 8) {\n\n\t\t\t\tswitch (h2n->frame_state++) {\n\t\t\t\tcase 0:\n\t\t\t\t\th2n->pad_length = 0;\n\t\t\t\t\th2n->collected_priority = 0;\n\t\t\t\t\th2n->padding = 0;\n\t\t\t\t\th2n->preamble = 0;\n\t\t\t\t\th2n->length = c;\n\t\t\t\t\th2n->inside = 0;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\tcase 2:\n\t\t\t\t\th2n->length <<= 8;\n\t\t\t\t\th2n->length |= c;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\th2n->type = c;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\th2n->flags = c;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 5:\n\t\t\t\tcase 6:\n\t\t\t\tcase 7:\n\t\t\t\tcase 8:\n\t\t\t\t\th2n->sid <<= 8;\n\t\t\t\t\th2n->sid |= c;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (h2n->frame_state == LWS_H2_FRAME_HEADER_LENGTH &&\n\t\t\t    lws_h2_parse_frame_header(wsi))\n\t\t\t\tgoto fail;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tif (h2n->type == LWS_H2_FRAME_TYPE_COUNT) { /* IGNORING FRAME */\n\t\t\t\t//lwsl_debug(\"%s: consuming for ignored %u %u\\n\", __func__, (unsigned int)h2n->count, (unsigned int)h2n->length);\n\t\t\t\th2n->count++;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t*inused = (lws_filepos_t)lws_ptr_diff_size_t(in, oldin);\n\n\treturn 0;\n\nclose_swsi_and_return:\n\n\tlws_close_free_wsi(h2n->swsi, 0, \"close_swsi_and_return\");\n\th2n->swsi = NULL;\n\th2n->frame_state = 0;\n\th2n->count = 0;\n\n// already_closed_swsi:\n\t*inused = (lws_filepos_t)lws_ptr_diff_size_t(in, oldin);\n\n\treturn 2;\n\nfail:\n\t*inused = (lws_filepos_t)lws_ptr_diff_size_t(in, oldin);\n\n\treturn 1;\n}\n\n#if defined(LWS_WITH_CLIENT)\nint\nlws_h2_client_handshake(struct lws *wsi)\n{\n\tstruct lws_context_per_thread *pt = &wsi->a.context->pt[(int)wsi->tsi];\n\tuint8_t *buf, *start, *p, *p1, *end;\n\tchar *meth = lws_hdr_simple_ptr(wsi, _WSI_TOKEN_CLIENT_METHOD),\n\t     *uri = lws_hdr_simple_ptr(wsi, _WSI_TOKEN_CLIENT_URI), *simp;\n\tstruct lws *nwsi = lws_get_network_wsi(wsi);\n\tconst char *path = \"/\";\n\tint n, m;\n\t/*\n\t * The identifier of a newly established stream MUST be numerically\n\t * greater than all streams that the initiating endpoint has opened or\n\t * reserved.  This governs streams that are opened using a HEADERS frame\n\t * and streams that are reserved using PUSH_PROMISE.  An endpoint that\n\t * receives an unexpected stream identifier MUST respond with a\n\t * connection error (Section 5.4.1) of type PROTOCOL_ERROR.\n\t */\n\tunsigned int sid = nwsi->h2.h2n->highest_sid_opened + 2;\n\n\tlwsl_debug(\"%s\\n\", __func__);\n\n\t/*\n\t * We MUST allocate our sid here at the point we're about to send the\n\t * stream open.  It's because we don't know the order in which multiple\n\t * open streams will send their headers... in h2, sending the headers\n\t * is the point the stream is opened.  The peer requires that we only\n\t * open streams in ascending sid order\n\t */\n\n\twsi->mux.my_sid = nwsi->h2.h2n->highest_sid_opened = sid;\n\tlwsl_info(\"%s: %s: assigning SID %d at header send\\n\", __func__,\n\t\t\tlws_wsi_tag(wsi), sid);\n\n\n\tlwsl_info(\"%s: CLIENT_WAITING_TO_SEND_HEADERS: pollout (sid %d)\\n\",\n\t\t\t__func__, wsi->mux.my_sid);\n\n\tp = start = buf = pt->serv_buf + LWS_PRE;\n\tend = start + (wsi->a.context->pt_serv_buf_size / 2) - LWS_PRE - 1;\n\n\t/* it's time for us to send our client stream headers */\n\n\tif (!meth)\n\t\tmeth = \"GET\";\n\n\t/* h2 pseudoheaders must be in a bunch at the start */\n\n\tif (lws_add_http_header_by_token(wsi,\n\t\t\t\tWSI_TOKEN_HTTP_COLON_METHOD,\n\t\t\t\t(unsigned char *)meth,\n\t\t\t\t(int)strlen(meth), &p, end))\n\t\tgoto fail_length;\n\n\tif (lws_add_http_header_by_token(wsi,\n\t\t\t\tWSI_TOKEN_HTTP_COLON_SCHEME,\n\t\t\t\t(unsigned char *)\"https\", 5,\n\t\t\t\t&p, end))\n\t\tgoto fail_length;\n\n\n\tn = lws_hdr_total_length(wsi, _WSI_TOKEN_CLIENT_URI);\n\tif (n)\n\t\tpath = uri;\n\telse\n\t\tif (wsi->stash && wsi->stash->cis[CIS_PATH]) {\n\t\t\tpath = wsi->stash->cis[CIS_PATH];\n\t\t\tn = (int)strlen(path);\n\t\t} else\n\t\t\tn = 1;\n\n\tif (n > 1 && path[0] == '/' && path[1] == '/') {\n\t\tpath++;\n\t\tn--;\n\t}\n\n\tif (n && lws_add_http_header_by_token(wsi,\n\t\t\t\tWSI_TOKEN_HTTP_COLON_PATH,\n\t\t\t\t(unsigned char *)path, n, &p, end))\n\t\tgoto fail_length;\n\n\tn = lws_hdr_total_length(wsi, _WSI_TOKEN_CLIENT_HOST);\n\tsimp = lws_hdr_simple_ptr(wsi, _WSI_TOKEN_CLIENT_HOST);\n\tif (!n && wsi->stash && wsi->stash->cis[CIS_ADDRESS]) {\n\t\tn = (int)strlen(wsi->stash->cis[CIS_ADDRESS]);\n\t\tsimp = wsi->stash->cis[CIS_ADDRESS];\n\t}\n\n//\tn = lws_hdr_total_length(wsi, _WSI_TOKEN_CLIENT_ORIGIN);\n//\tsimp = lws_hdr_simple_ptr(wsi, _WSI_TOKEN_CLIENT_ORIGIN);\n#if 0\n\tif (n && simp && lws_add_http_header_by_token(wsi,\n\t\t\t\tWSI_TOKEN_HTTP_COLON_AUTHORITY,\n\t\t\t\t(unsigned char *)simp, n, &p, end))\n\t\tgoto fail_length;\n#endif\n\n\n\tif (/*!wsi->client_h2_alpn && */n && simp &&\n\t    lws_add_http_header_by_token(wsi, WSI_TOKEN_HOST,\n\t\t\t\t(unsigned char *)simp, n, &p, end))\n\t\tgoto fail_length;\n\n\n\tif (wsi->flags & LCCSCF_HTTP_MULTIPART_MIME) {\n\t\tp1 = lws_http_multipart_headers(wsi, p);\n\t\tif (!p1)\n\t\t\tgoto fail_length;\n\t\tp = p1;\n\t}\n\n\tif (wsi->flags & LCCSCF_HTTP_X_WWW_FORM_URLENCODED) {\n\t\tif (lws_add_http_header_by_token(wsi, WSI_TOKEN_HTTP_CONTENT_TYPE,\n\t\t\t   (unsigned char *)\"application/x-www-form-urlencoded\",\n\t\t\t   33, &p, end))\n\t\t\tgoto fail_length;\n\t\tlws_client_http_body_pending(wsi, 1);\n\t}\n\n\t/* give userland a chance to append, eg, cookies */\n\n#if defined(LWS_WITH_CACHE_NSCOOKIEJAR) && defined(LWS_WITH_CLIENT)\n\tif (wsi->flags & LCCSCF_CACHE_COOKIES)\n\t\tlws_cookie_send_cookies(wsi, (char **)&p, (char *)end);\n#endif\n\n\tif (wsi->a.protocol->callback(wsi,\n\t\t\t\tLWS_CALLBACK_CLIENT_APPEND_HANDSHAKE_HEADER,\n\t\t\t\twsi->user_space, &p, lws_ptr_diff_size_t(end, p) - 12))\n\t\tgoto fail_length;\n\n\tif (lws_finalize_http_header(wsi, &p, end))\n\t\tgoto fail_length;\n\n\tm = LWS_WRITE_HTTP_HEADERS;\n#if defined(LWS_WITH_CLIENT)\n\t/* below is not needed in spec, indeed it destroys the long poll\n\t * feature, but required by nghttp2 */\n\tif ((wsi->flags & LCCSCF_H2_QUIRK_NGHTTP2_END_STREAM) &&\n\t    !(wsi->client_http_body_pending  || lws_has_buffered_out(wsi)))\n\t\tm |= LWS_WRITE_H2_STREAM_END;\n#endif\n\n\t// lwsl_hexdump_notice(start, p - start);\n\n\tn = lws_write(wsi, start, lws_ptr_diff_size_t(p, start), (enum lws_write_protocol)m);\n\n\tif (n != lws_ptr_diff(p, start)) {\n\t\tlwsl_err(\"_write returned %d from %ld\\n\", n,\n\t\t\t (long)(p - start));\n\t\treturn -1;\n\t}\n\n\t/*\n\t * Normally let's charge up the peer tx credit a bit.  But if\n\t * MANUAL_REFLOW is set, just set it to the initial credit given in\n\t * the client create info\n\t */\n\n\tn = 4 * 65536;\n\tif (wsi->flags & LCCSCF_H2_MANUAL_RXFLOW) {\n\t\tn = wsi->txc.manual_initial_tx_credit;\n\t\twsi->txc.manual = 1;\n\t}\n\n\tif (lws_h2_update_peer_txcredit(wsi, wsi->mux.my_sid, n))\n\t\treturn 1;\n\n\tlws_h2_state(wsi, LWS_H2_STATE_OPEN);\n\tlwsi_set_state(wsi, LRS_ESTABLISHED);\n\n\tif (wsi->flags & LCCSCF_HTTP_MULTIPART_MIME)\n\t\tlws_callback_on_writable(wsi);\n\n\treturn 0;\n\nfail_length:\n\tlwsl_err(\"Client hdrs too long: incr context info.pt_serv_buf_size\\n\");\n\n\treturn -1;\n}\n#endif\n\n#if defined(LWS_ROLE_WS) && defined(LWS_WITH_SERVER)\nint\nlws_h2_ws_handshake(struct lws *wsi)\n{\n\tuint8_t buf[LWS_PRE + 2048], *p = buf + LWS_PRE, *start = p,\n\t\t*end = &buf[sizeof(buf) - 1];\n\tconst struct lws_http_mount *hit;\n\tconst char * uri_ptr;\n\tsize_t m;\n\tint n;\n\n\tif (lws_add_http_header_status(wsi, HTTP_STATUS_OK, &p, end))\n\t\treturn -1;\n\n\tif (lws_hdr_total_length(wsi, WSI_TOKEN_PROTOCOL) > 64)\n\t\treturn -1;\n\n\tif (wsi->proxied_ws_parent && wsi->child_list) {\n\t\tif (lws_hdr_simple_ptr(wsi, WSI_TOKEN_PROTOCOL)) {\n\t\t\tif (lws_add_http_header_by_token(wsi, WSI_TOKEN_PROTOCOL,\n\t\t\t\t(uint8_t *)lws_hdr_simple_ptr(wsi,\n\t\t\t\t\t\t\t   WSI_TOKEN_PROTOCOL),\n\t\t\t\t(int)strlen(lws_hdr_simple_ptr(wsi,\n\t\t\t\t\t\t\t   WSI_TOKEN_PROTOCOL)),\n\t\t\t\t\t\t &p, end))\n\t\t\treturn -1;\n\t\t}\n\t} else {\n\n\t\t/* we can only return the protocol header if:\n\t\t *  - one came in, and ... */\n\t\tif (lws_hdr_total_length(wsi, WSI_TOKEN_PROTOCOL) &&\n\t\t    /*  - it is not an empty string */\n\t\t    wsi->a.protocol->name && wsi->a.protocol->name[0]) {\n\n#if defined(LWS_WITH_SECURE_STREAMS) && defined(LWS_WITH_SERVER)\n\n\t\t/*\n\t\t * This is the h2 version of server-ws.c understanding that it\n\t\t * did the ws upgrade on a ss server object, therefore it needs\n\t\t * to pass back to the peer the policy ws-protocol name, not\n\t\t * the generic ss-ws.c protocol name\n\t\t */\n\n\t\tif (wsi->a.vhost && wsi->a.vhost->ss_handle &&\n\t\t    wsi->a.vhost->ss_handle->policy->u.http.u.ws.subprotocol) {\n\t\t\tlws_ss_handle_t *h =\n\t\t\t\t(lws_ss_handle_t *)wsi->a.opaque_user_data;\n\n\t\t\tlwsl_notice(\"%s: Server SS %s .wsi %s switching to ws protocol\\n\",\n\t\t\t\t\t__func__, lws_ss_tag(h), lws_wsi_tag(h->wsi));\n\n\t\t\twsi->a.protocol = &protocol_secstream_ws;\n\n\t\t\t/*\n\t\t\t * inform the SS user code that this has done a one-way\n\t\t\t * upgrade to some other protocol... it will likely\n\t\t\t * want to treat subsequent payloads differently\n\t\t\t */\n\n\t\t\tlws_ss_event_helper(h, LWSSSCS_SERVER_UPGRADE);\n\n\t\t\tlws_mux_mark_immortal(wsi);\n\n\t\t\tif (lws_add_http_header_by_token(wsi, WSI_TOKEN_PROTOCOL,\n\t\t\t\t(unsigned char *)wsi->a.vhost->ss_handle->policy->\n\t\t\t\t\t\tu.http.u.ws.subprotocol,\n\t\t\t\t(int)strlen(wsi->a.vhost->ss_handle->policy->\n\t\t\t\t\t\tu.http.u.ws.subprotocol), &p, end))\n\t\t\t\t\treturn -1;\n\t\t} else\n#endif\n\n\t\t\tif (lws_add_http_header_by_token(wsi, WSI_TOKEN_PROTOCOL,\n\t\t\t\t(unsigned char *)wsi->a.protocol->name,\n\t\t\t\t(int)strlen(wsi->a.protocol->name), &p, end))\n\t\t\t\t\treturn -1;\n\t\t}\n\t}\n\n\tif (lws_finalize_http_header(wsi, &p, end))\n\t\treturn -1;\n\n\tm = lws_ptr_diff_size_t(p, start);\n\t// lwsl_hexdump_notice(start, m);\n\tn = lws_write(wsi, start, m, LWS_WRITE_HTTP_HEADERS);\n\tif (n != (int)m) {\n\t\tlwsl_err(\"_write returned %d from %d\\n\", n, (int)m);\n\n\t\treturn -1;\n\t}\n\n\t/*\n\t * alright clean up, set our state to generic ws established, the\n\t * mode / state of the nwsi will get the h2 processing done.\n\t */\n\n\tlwsi_set_state(wsi, LRS_ESTABLISHED);\n\twsi->lws_rx_parse_state = 0; // ==LWS_RXPS_NEW;\n\n\turi_ptr = lws_hdr_simple_ptr(wsi, WSI_TOKEN_HTTP_COLON_PATH);\n\tn = lws_hdr_total_length(wsi, WSI_TOKEN_HTTP_COLON_PATH);\n\thit = lws_find_mount(wsi, uri_ptr, n);\n\n\tif (hit && hit->cgienv &&\n\t    wsi->a.protocol->callback(wsi, LWS_CALLBACK_HTTP_PMO, wsi->user_space,\n\t\t\t\t    (void *)hit->cgienv, 0))\n\t\treturn 1;\n\n\tlws_validity_confirmed(wsi);\n\n\treturn 0;\n}\n#endif\n\nint\nlws_read_h2(struct lws *wsi, unsigned char *buf, lws_filepos_t len)\n{\n\tunsigned char *oldbuf = buf;\n\tlws_filepos_t body_chunk_len;\n\n\t// lwsl_notice(\"%s: h2 path: wsistate 0x%x len %d\\n\", __func__,\n\t//\t\twsi->wsistate, (int)len);\n\n\t/*\n\t * wsi here is always the network connection wsi, not a stream\n\t * wsi.  Once we unpicked the framing we will find the right\n\t * swsi and make it the target of the frame.\n\t *\n\t * If it's ws over h2, the nwsi will get us here to do the h2\n\t * processing, and that will call us back with the swsi +\n\t * ESTABLISHED state for the inner payload, handled in a later\n\t * case.\n\t */\n\twhile (len) {\n\t\tint m;\n\n\t\t/*\n\t\t * we were accepting input but now we stopped doing so\n\t\t */\n\t\tif (lws_is_flowcontrolled(wsi)) {\n\t\t\tlws_rxflow_cache(wsi, buf, 0, (size_t)len);\n\t\t\tbuf += len;\n\t\t\tbreak;\n\t\t}\n\n\t\t/*\n\t\t * lws_h2_parser() may send something; when it gets the\n\t\t * whole frame, it will want to perform some action\n\t\t * involving a reply.  But we may be in a partial send\n\t\t * situation on the network wsi...\n\t\t *\n\t\t * Even though we may be in a partial send and unable to\n\t\t * send anything new, we still have to parse the network\n\t\t * wsi in order to gain tx credit to send, which is\n\t\t * potentially necessary to clear the old partial send.\n\t\t *\n\t\t * ALL network wsi-specific frames are sent by PPS\n\t\t * already, these are sent as a priority on the writable\n\t\t * handler, and so respect partial sends.  The only\n\t\t * problem is when a stream wsi wants to send an, eg,\n\t\t * reply headers frame in response to the parsing\n\t\t * we will do now... the *stream wsi* must stall in a\n\t\t * different state until it is able to do so from a\n\t\t * priority on the WRITABLE callback, same way that\n\t\t * file transfers operate.\n\t\t */\n\n\t\tm = lws_h2_parser(wsi, buf, len, &body_chunk_len);\n\t\tif (m && m != 2) {\n\t\t\tlwsl_debug(\"%s: http2_parser bail: %d\\n\", __func__, m);\n\t\t\tlws_close_free_wsi(wsi, LWS_CLOSE_STATUS_NOSTATUS,\n\t\t\t\t\t   \"lws_read_h2 bail\");\n\n\t\t\treturn -1;\n\t\t}\n\t\tif (m == 2) {\n\t\t\t/* swsi has been closed */\n\t\t\tbuf += body_chunk_len;\n\t\t\tbreak;\n\t\t}\n\n\t\tbuf += body_chunk_len;\n\t\tlen -= body_chunk_len;\n\t}\n\n\treturn lws_ptr_diff(buf, oldbuf);\n}\n\nint\nlws_h2_client_stream_long_poll_rxonly(struct lws *wsi)\n{\n\n\tif (!wsi->mux_substream)\n\t\treturn 1;\n\n\t/*\n\t * Elect to send an empty DATA with END_STREAM, to force the stream\n\t * into HALF_CLOSED LOCAL\n\t */\n\twsi->h2.long_poll = 1;\n\twsi->h2.send_END_STREAM = 1;\n\n\t// lws_header_table_detach(wsi, 0);\n\n\tlws_callback_on_writable(wsi);\n\n\treturn 0;\n}\n",
			"file": "libwebsockets/lib/roles/h2/http2.c",
			"file_size": 77939,
			"file_write_time": 132716304932954818,
			"settings":
			{
				"buffer_size": 77939,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"contents": "Searching 859 files for \"LWS_CALLBACK_HTTP_BODY\" (regex, case sensitive)\n\n/home/roman/Projects/minnet-quickjs/minnet-server.c:\n  388  \n  389      case LWS_CALLBACK_HTTP:\n  390:     case LWS_CALLBACK_HTTP_BODY:\n  391:     case LWS_CALLBACK_HTTP_BODY_COMPLETION:\n  392      case LWS_CALLBACK_HTTP_BIND_PROTOCOL:\n  393      case LWS_CALLBACK_HTTP_CONFIRM_UPGRADE:\n  ...\n  608      }\n  609  \n  610:     case LWS_CALLBACK_HTTP_BODY_COMPLETION: {\n  611        MinnetRequest* req = minnet_request_data(ctx, serv->req_obj);\n  612  \n  613:       printf(\"LWS_CALLBACK_HTTP_BODY_COMPLETION\\tis_h2=%i len: %zu, size: %zu, in: \", is_h2(wsi), len, buffer_OFFSET(&req->body));\n  614  \n  615        MinnetCallback* cb = /*minnet_server.cb_http.ctx ? &minnet_server.cb_http :*/ serv->mount ? &serv->mount->callback : 0;\n  ...\n  635      }\n  636  \n  637:     case LWS_CALLBACK_HTTP_BODY: {\n  638        MinnetRequest* req = minnet_request_data(ctx, serv->req_obj);\n  639  \n  640:       printf(\"LWS_CALLBACK_HTTP_BODY\\tis_h2=%i len: %zu, size: %zu, in: \", is_h2(wsi), len, buffer_OFFSET(&req->body));\n  641  \n  642        if(len) {\n\n/home/roman/Projects/minnet-quickjs/minnet.c:\n  524        \"LWS_CALLBACK_SERVER_WRITEABLE\",\n  525        \"LWS_CALLBACK_HTTP\",\n  526:       \"LWS_CALLBACK_HTTP_BODY\",\n  527:       \"LWS_CALLBACK_HTTP_BODY_COMPLETION\",\n  528        \"LWS_CALLBACK_HTTP_FILE_COMPLETION\",\n  529        \"LWS_CALLBACK_HTTP_WRITEABLE\",\n\n/home/roman/Projects/minnet-quickjs/libwebsockets/include/libwebsockets/lws-callbacks.h:\n  239  \t * return 1; to close and free up the connection. */\n  240  \n  241: \tLWS_CALLBACK_HTTP_BODY\t\t\t\t\t= 13,\n  242  \t/**< the next len bytes data from the http\n  243  \t * request body HTTP connection is now available in in. */\n  244  \n  245: \tLWS_CALLBACK_HTTP_BODY_COMPLETION\t\t\t= 14,\n  246  \t/**< the expected amount of http request body has been delivered */\n  247  \n\n/home/roman/Projects/minnet-quickjs/libwebsockets/lib/core-net/dummy-callback.c:\n  292  \t\tbreak;\n  293  #if defined(LWS_WITH_SERVER)\n  294: \tcase LWS_CALLBACK_HTTP_BODY_COMPLETION:\n  295  #if defined(LWS_WITH_HTTP_PROXY)\n  296  \t\tif (wsi->child_list) {\n  ...\n  312  \n  313  #if defined(LWS_WITH_HTTP_PROXY)\n  314: \tcase LWS_CALLBACK_HTTP_BODY:\n  315  \t\tif (wsi->child_list) {\n  316  \t\t\tlwsl_wsi_info(wsi, \"HTTP_BODY: stashing %d\", (int)len);\n\n/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/h1/ops-h1.c:\n  166  \t\t\t\t\tlwsl_info(\"%s: HTTP_BODY %d\\n\", __func__, (int)body_chunk_len);\n  167  \t\t\t\t\tn = (unsigned int)wsi->a.protocol->callback(wsi,\n  168: \t\t\t\t\t\tLWS_CALLBACK_HTTP_BODY, wsi->user_space,\n  169  \t\t\t\t\t\tbuf, (size_t)body_chunk_len);\n  170  \t\t\t\t\tif (n)\n  ...\n  237  \n  238  \t\t\t\tn = (unsigned int)wsi->a.protocol->callback(wsi,\n  239: \t\t\t\t\tLWS_CALLBACK_HTTP_BODY_COMPLETION,\n  240  \t\t\t\t\twsi->user_space, NULL, 0);\n  241  \t\t\t\tif (n) {\n\n/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/h2/ops-h2.c:\n  875  \t\t\tblen = (size_t)wsi->http.rx_content_length;\n  876  \n  877: \t\tif (wsi->a.protocol->callback(wsi, LWS_CALLBACK_HTTP_BODY,\n  878  \t\t\t\twsi->user_space, buffered, blen))\n  879  \t\t\treturn 1;\n  ...\n  894  \t\treturn 0;\n  895  \n  896: \tif (wsi->a.protocol->callback(wsi, LWS_CALLBACK_HTTP_BODY_COMPLETION,\n  897  \t\t\t\t      wsi->user_space, NULL, 0))\n  898  \t\treturn 1;\n\n/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/server/server.c:\n 1966  \t\t * complete processing.\n 1967  \t\t */\n 1968: \t\tif (wsi->a.protocol->callback(wsi, LWS_CALLBACK_HTTP_BODY,\n 1969  \t\t\t\t\t    wsi->user_space, NULL, 0))\n 1970  \t\t\treturn 1;\n 1971: \t\tif (wsi->a.protocol->callback(wsi, LWS_CALLBACK_HTTP_BODY_COMPLETION,\n 1972  \t\t\t\t\t    wsi->user_space, NULL, 0))\n 1973  \t\t\treturn 1;\n\n/home/roman/Projects/minnet-quickjs/libwebsockets/lib/secure-streams/protocols/ss-h1.c:\n  799  \n  800  \t/* chunks of chunked content, with header removed */\n  801: \tcase LWS_CALLBACK_HTTP_BODY:\n  802  \tcase LWS_CALLBACK_RECEIVE_CLIENT_HTTP_READ:\n  803  \t\tlwsl_debug(\"%s: RECEIVE_CLIENT_HTTP_READ: read %d\\n\",\n\n/home/roman/Projects/minnet-quickjs/libwebsockets/minimal-examples/http-server/minimal-http-server-form-post/minimal-http-server-form-post.c:\n   64  \t\tbreak;\n   65  \n   66: \tcase LWS_CALLBACK_HTTP_BODY:\n   67  \n   68  \t\t/* create the POST argument parser if not already existing */\n   ..\n   87  \t\tbreak;\n   88  \n   89: \tcase LWS_CALLBACK_HTTP_BODY_COMPLETION:\n   90  \n   91  \t\t/* inform the spa no more payload data coming */\n   92  \n   93: \t\tlwsl_user(\"LWS_CALLBACK_HTTP_BODY_COMPLETION\\n\");\n   94  \t\tlws_spa_finalize(pss->spa);\n   95  \n\n/home/roman/Projects/minnet-quickjs/libwebsockets/minimal-examples/http-server/minimal-http-server-form-post-file/minimal-http-server-form-post-file.c:\n  125  \t\tbreak;\n  126  \n  127: \tcase LWS_CALLBACK_HTTP_BODY:\n  128  \n  129  \t\t/* create the POST argument parser if not already existing */\n  ...\n  143  \t\tbreak;\n  144  \n  145: \tcase LWS_CALLBACK_HTTP_BODY_COMPLETION:\n  146  \n  147  \t\t/* inform the spa no more payload data coming */\n\n/home/roman/Projects/minnet-quickjs/libwebsockets/minimal-examples/http-server/minimal-http-server-form-post-lwsac/minimal-http-server-form-post.c:\n   65  \t\tbreak;\n   66  \n   67: \tcase LWS_CALLBACK_HTTP_BODY:\n   68  \n   69  \t\t/* create the POST argument parser if not already existing */\n   ..\n   89  \t\tbreak;\n   90  \n   91: \tcase LWS_CALLBACK_HTTP_BODY_COMPLETION:\n   92  \n   93  \t\t/* inform the spa no more payload data coming */\n   94  \n   95: \t\tlwsl_user(\"LWS_CALLBACK_HTTP_BODY_COMPLETION\\n\");\n   96  \t\tlws_spa_finalize(pss->spa);\n   97  \n\n/home/roman/Projects/minnet-quickjs/libwebsockets/plugins/protocol_post_demo.c:\n  183  \n  184  \tswitch (reason) {\n  185: \tcase LWS_CALLBACK_HTTP_BODY:\n  186  \t\t/* create the POST argument parser if not already existing */\n  187  \t\tif (!pss->spa) {\n  ...\n  201  \t\tbreak;\n  202  \n  203: \tcase LWS_CALLBACK_HTTP_BODY_COMPLETION:\n  204: \t\tlwsl_debug(\"LWS_CALLBACK_HTTP_BODY_COMPLETION: %s\\n\", lws_wsi_tag(wsi));\n  205  \t\t/* call to inform no more payload data coming */\n  206  \t\tlws_spa_finalize(pss->spa);\n\n/home/roman/Projects/minnet-quickjs/libwebsockets/plugins/deaddrop/protocol_lws_deaddrop.c:\n  564  \t/* POST-related */\n  565  \n  566: \tcase LWS_CALLBACK_HTTP_BODY:\n  567  \n  568  \t\t/* create the POST argument parser if not already existing */\n  ...\n  600  \t\tbreak;\n  601  \n  602: \tcase LWS_CALLBACK_HTTP_BODY_COMPLETION:\n  603  \t\t/* call to inform no more payload data coming */\n  604  \t\tlws_spa_finalize(pss->spa);\n\n32 matches across 13 files\n",
			"settings":
			{
				"buffer_size": 6458,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"contents": "/*\n * libwebsockets - small server side websockets and web server implementation\n *\n * Copyright (C) 2010 - 2019 Andy Green <andy@warmcat.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\n#include <private-lib-core.h>\n\n/*\n * These are the standardized defaults.\n * Override what actually goes in the vhost settings in platform or user code.\n * Leave these alone because they are used to determine \"what is different\n * from the protocol defaults\".\n */\nconst struct http2_settings lws_h2_defaults = { {\n\t1,\n\t/* H2SET_HEADER_TABLE_SIZE */\t\t\t4096,\n\t/* *** This controls how many entries in the dynamic table ***\n\t * Allows the sender to inform the remote endpoint of the maximum\n\t * size of the header compression table used to decode header\n\t * blocks, in octets.  The encoder can select any size equal to or\n\t * less than this value by using signaling specific to the header\n\t * compression format inside a header block (see [COMPRESSION]).\n\t * The initial value is 4,096 octets.\n\t */\n\t/* H2SET_ENABLE_PUSH */\t\t\t\t   1,\n\t/* H2SET_MAX_CONCURRENT_STREAMS */\t  0x7fffffff,\n\t/* H2SET_INITIAL_WINDOW_SIZE */\t\t       65535,\n\t/* H2SET_MAX_FRAME_SIZE */\t\t       16384,\n\t/* H2SET_MAX_HEADER_LIST_SIZE */\t  0x7fffffff,\n\t/*< This advisory setting informs a peer of the maximum size of\n\t * header list that the sender is prepared to accept, in octets.\n\t * The value is based on the uncompressed size of header fields,\n\t * including the length of the name and value in octets plus an\n\t * overhead of 32 octets for each header field.\n\t */\n\t/* H2SET_RESERVED7 */\t\t\t\t   0,\n\t/* H2SET_ENABLE_CONNECT_PROTOCOL */\t\t   0,\n}};\n\n/* these are the \"lws defaults\"... they can be overridden in plat */\n\nconst struct http2_settings lws_h2_stock_settings = { {\n\t1,\n\t/* H2SET_HEADER_TABLE_SIZE */\t\t\t65536, /* ffox */\n\t/* *** This controls how many entries in the dynamic table ***\n\t * Allows the sender to inform the remote endpoint of the maximum\n\t * size of the header compression table used to decode header\n\t * blocks, in octets.  The encoder can select any size equal to or\n\t * less than this value by using signaling specific to the header\n\t * compression format inside a header block (see [COMPRESSION]).\n\t * The initial value is 4,096 octets.\n\t *\n\t * Can't pass h2spec with less than 4096 here...\n\t */\n\t/* H2SET_ENABLE_PUSH */\t\t\t\t   0,\n\t/* H2SET_MAX_CONCURRENT_STREAMS */\t\t  24,\n\t/* H2SET_INITIAL_WINDOW_SIZE */\t\t           0,\n\t/*< This is managed by explicit WINDOW_UPDATE.  Because otherwise no\n\t * way to precisely control it when we do want to.\n\t */\n\t/* H2SET_MAX_FRAME_SIZE */\t\t       16384,\n\t/* H2SET_MAX_HEADER_LIST_SIZE */\t        4096,\n\t/*< This advisory setting informs a peer of the maximum size of\n\t * header list that the sender is prepared to accept, in octets.\n\t * The value is based on the uncompressed size of header fields,\n\t * including the length of the name and value in octets plus an\n\t * overhead of 32 octets for each header field.\n\t */\n\t/* H2SET_RESERVED7 */\t\t\t\t   0,\n\t/* H2SET_ENABLE_CONNECT_PROTOCOL */\t\t   1,\n}};\n\n/*\n * The wsi at this level is normally the network wsi... we can get called on\n * another path via lws_service_do_ripe_rxflow() on mux children too tho...\n */\n\nstatic int\nrops_handle_POLLIN_h2(struct lws_context_per_thread *pt, struct lws *wsi,\n\t\t       struct lws_pollfd *pollfd)\n{\n\tstruct lws_tokens ebuf;\n\tunsigned int pending = 0;\n\tchar buffered = 0;\n\tstruct lws *wsi1;\n\tint n, m;\n\n#ifdef LWS_WITH_CGI\n\tif (wsi->http.cgi && (pollfd->revents & LWS_POLLOUT)) {\n\t\tif (lws_handle_POLLOUT_event(wsi, pollfd))\n\t\t\treturn LWS_HPI_RET_PLEASE_CLOSE_ME;\n\n\t\treturn LWS_HPI_RET_HANDLED;\n\t}\n#endif\n\n\t lwsl_info(\"%s: %s wsistate 0x%x, events %d, revents %d, pollout %d\\n\", __func__,\n\t\t   wsi->lc.gutag, (unsigned int)wsi->wsistate,\n\t\t   pollfd->events, pollfd->revents,\n\t\t   pollfd->revents & LWS_POLLOUT);\n\n\t /* !!! */\n\t if (wsi->wsistate == 0x10000013) {\n\t\t wsi->bugcatcher++;\n\t\t if (wsi->bugcatcher == 250) {\n\t\t\t lwsl_err(\"%s: BUGCATCHER\\n\", __func__);\n\t\t\t return LWS_HPI_RET_PLEASE_CLOSE_ME;\n\t\t }\n\t } else\n\t\t wsi->bugcatcher = 0;\n\n\t/*\n\t * something went wrong with parsing the handshake, and\n\t * we ended up back in the event loop without completing it\n\t */\n\tif (lwsi_state(wsi) == LRS_PRE_WS_SERVING_ACCEPT) {\n\t\twsi->socket_is_permanently_unusable = 1;\n\t\treturn LWS_HPI_RET_PLEASE_CLOSE_ME;\n\t}\n\n\tif (lwsi_state(wsi) == LRS_WAITING_CONNECT) {\n#if defined(LWS_WITH_CLIENT)\n\t\tif ((pollfd->revents & LWS_POLLOUT) &&\n\t\t    lws_handle_POLLOUT_event(wsi, pollfd)) {\n\t\t\tlwsl_debug(\"POLLOUT event closed it\\n\");\n\t\t\treturn LWS_HPI_RET_PLEASE_CLOSE_ME;\n\t\t}\n\n\t\tn = lws_http_client_socket_service(wsi, pollfd);\n\t\tif (n)\n\t\t\treturn LWS_HPI_RET_WSI_ALREADY_DIED;\n#endif\n\t\treturn LWS_HPI_RET_HANDLED;\n\t}\n\n\t/* 1: something requested a callback when it was OK to write */\n\n\tif ((pollfd->revents & LWS_POLLOUT) &&\n\t    lwsi_state_can_handle_POLLOUT(wsi) &&\n\t    lws_handle_POLLOUT_event(wsi, pollfd)) {\n\t\tif (lwsi_state(wsi) == LRS_RETURNED_CLOSE)\n\t\t\tlwsi_set_state(wsi, LRS_FLUSHING_BEFORE_CLOSE);\n\t\t/* the write failed... it's had it */\n\t\twsi->socket_is_permanently_unusable = 1;\n\n\t\treturn LWS_HPI_RET_PLEASE_CLOSE_ME;\n\t}\n\n\tif (lwsi_state(wsi) == LRS_RETURNED_CLOSE ||\n\t    lwsi_state(wsi) == LRS_WAITING_TO_SEND_CLOSE ||\n\t    lwsi_state(wsi) == LRS_AWAITING_CLOSE_ACK) {\n\t\t/*\n\t\t * we stopped caring about anything except control\n\t\t * packets.  Force flow control off, defeat tx\n\t\t * draining.\n\t\t */\n\t\tlws_rx_flow_control(wsi, 1);\n#if defined(LWS_ROLE_WS) && !defined(LWS_WITHOUT_EXTENSIONS)\n\t\tif (wsi->ws)\n\t\t\twsi->ws->tx_draining_ext = 0;\n#endif\n\t}\n\n\tif (wsi->mux_substream || wsi->upgraded_to_http2) {\n\t\twsi1 = lws_get_network_wsi(wsi);\n\t\tif (wsi1 && lws_has_buffered_out(wsi1)) {\n\n\t\t\tlwsl_info(\"%s: has buffered out\\n\", __func__);\n\t\t\t/*\n\t\t\t * We cannot deal with any kind of new RX\n\t\t\t * because we are dealing with a partial send\n\t\t\t * (new RX may trigger new http_action() that\n\t\t\t * expect to be able to send)\n\t\t\t */\n\t\t\treturn LWS_HPI_RET_HANDLED;\n\t\t}\n\t}\n\nread:\n\t/* 3: network wsi buflist needs to be drained */\n\n\t// lws_buflist_describe(&wsi->buflist, wsi, __func__);\n\n\tebuf.len = (int)lws_buflist_next_segment_len(&wsi->buflist,\n\t\t\t\t\t\t&ebuf.token);\n\tif (ebuf.len) {\n\t\tlwsl_info(\"draining buflist (len %d)\\n\", ebuf.len);\n\t\tbuffered = 1;\n\t\tgoto drain;\n\t} else {\n\n\t\tif (wsi->mux_substream) {\n\t\t\tlwsl_warn(\"%s: uh... %s mux child with nothing to drain\\n\", __func__, lws_wsi_tag(wsi));\n\t\t\t// assert(0);\n\t\t\tlws_dll2_remove(&wsi->dll_buflist);\n\t\t\treturn LWS_HPI_RET_HANDLED;\n\t\t}\n\t}\n\n\tif (!lws_ssl_pending(wsi) &&\n\t    !(pollfd->revents & pollfd->events & LWS_POLLIN))\n\t\treturn LWS_HPI_RET_HANDLED;\n\n\t/* We have something to read... */\n\n\tif (!(lwsi_role_client(wsi) &&\n\t      (lwsi_state(wsi) != LRS_ESTABLISHED &&\n\t       // lwsi_state(wsi) != LRS_H1C_ISSUE_HANDSHAKE2 &&\n\t       lwsi_state(wsi) != LRS_H2_WAITING_TO_SEND_HEADERS))) {\n\n\t\tebuf.token = pt->serv_buf;\n\t\tebuf.len = lws_ssl_capable_read(wsi,\n\t\t\t\t\tebuf.token,\n\t\t\t\t\twsi->a.context->pt_serv_buf_size);\n\t\tswitch (ebuf.len) {\n\t\tcase 0:\n\t\t\tlwsl_info(\"%s: zero length read\\n\", __func__);\n\t\t\treturn LWS_HPI_RET_PLEASE_CLOSE_ME;\n\t\tcase LWS_SSL_CAPABLE_MORE_SERVICE:\n\t\t\tlwsl_info(\"SSL Capable more service\\n\");\n\t\t\treturn LWS_HPI_RET_HANDLED;\n\t\tcase LWS_SSL_CAPABLE_ERROR:\n\t\t\tlwsl_info(\"%s: LWS_SSL_CAPABLE_ERROR\\n\", __func__);\n\t\t\treturn LWS_HPI_RET_PLEASE_CLOSE_ME;\n\t\t}\n\n\t\t// lwsl_notice(\"%s: Actual RX %d\\n\", __func__, ebuf.len);\n\t\t// if (ebuf.len > 0)\n\t\t//\tlwsl_hexdump_notice(ebuf.token, ebuf.len);\n\t} else\n\t\tlwsl_info(\"%s: skipped read\\n\", __func__);\n\n\tif (ebuf.len < 0)\n\t\treturn LWS_HPI_RET_PLEASE_CLOSE_ME;\n\ndrain:\n#if defined(LWS_WITH_CLIENT)\n\tif (lwsi_role_http(wsi) && lwsi_role_client(wsi) &&\n\t    wsi->hdr_parsing_completed && !wsi->told_user_closed) {\n\n\t\t/*\n\t\t * In SSL mode we get POLLIN notification about\n\t\t * encrypted data in.\n\t\t *\n\t\t * But that is not necessarily related to decrypted\n\t\t * data out becoming available; in may need to perform\n\t\t * other in or out before that happens.\n\t\t *\n\t\t * simply mark ourselves as having readable data\n\t\t * and turn off our POLLIN\n\t\t */\n\t\twsi->client_rx_avail = 1;\n\t\tif (lws_change_pollfd(wsi, LWS_POLLIN, 0))\n\t\t\treturn LWS_HPI_RET_PLEASE_CLOSE_ME;\n\n\t\t/* let user code know, he'll usually ask for writeable\n\t\t * callback and drain / re-enable it there\n\t\t */\n\t\tif (user_callback_handle_rxflow(\n\t\t\t\twsi->a.protocol->callback,\n\t\t\t\twsi, LWS_CALLBACK_RECEIVE_CLIENT_HTTP,\n\t\t\t\twsi->user_space, NULL, 0)) {\n\t\t\tlwsl_info(\"RECEIVE_CLIENT_HTTP closed it\\n\");\n\t\t\treturn LWS_HPI_RET_PLEASE_CLOSE_ME;\n\t\t}\n\n\t\treturn LWS_HPI_RET_HANDLED;\n\t}\n#endif\n\n\t/* service incoming data */\n\n\tif (ebuf.len) {\n\t\tn = 0;\n\t\tif (lwsi_role_h2(wsi) && lwsi_state(wsi) != LRS_BODY &&\n\t\t    lwsi_state(wsi) != LRS_DISCARD_BODY)\n\t\t\tn = lws_read_h2(wsi, ebuf.token, (unsigned int)ebuf.len);\n\t\telse\n\t\t\tn = lws_read_h1(wsi, ebuf.token, (unsigned int)ebuf.len);\n\n\t\tif (n < 0) {\n\t\t\t/* we closed wsi */\n\t\t\treturn LWS_HPI_RET_WSI_ALREADY_DIED;\n\t\t}\n\n\t\tif (n && buffered) {\n\t\t\t// lwsl_notice(\"%s: h2 use %d\\n\", __func__, n);\n\t\t\tm = (int)lws_buflist_use_segment(&wsi->buflist, (size_t)n);\n\t\t\tlwsl_info(\"%s: draining rxflow: used %d, next %d\\n\",\n\t\t\t\t    __func__, n, m);\n\t\t\tif (!m) {\n\t\t\t\tlwsl_notice(\"%s: removed %s from dll_buflist\\n\",\n\t\t\t\t\t    __func__, lws_wsi_tag(wsi));\n\t\t\t\tlws_dll2_remove(&wsi->dll_buflist);\n\t\t\t}\n\t\t} else\n\t\t\tif (n && n < ebuf.len && ebuf.len > 0) {\n\t\t\t\t// lwsl_notice(\"%s: h2 append seg %d\\n\", __func__, ebuf.len - n);\n\t\t\t\tm = lws_buflist_append_segment(&wsi->buflist,\n\t\t\t\t\t\tebuf.token + n,\n\t\t\t\t\t\t(unsigned int)(ebuf.len - n));\n\t\t\t\tif (m < 0)\n\t\t\t\t\treturn LWS_HPI_RET_PLEASE_CLOSE_ME;\n\t\t\t\tif (m) {\n\t\t\t\t\tlwsl_debug(\"%s: added %s to rxflow list\\n\",\n\t\t\t\t\t\t   __func__, lws_wsi_tag(wsi));\n\t\t\t\t\tif (lws_dll2_is_detached(&wsi->dll_buflist))\n\t\t\t\t\t\tlws_dll2_add_head(&wsi->dll_buflist,\n\t\t\t\t\t\t\t &pt->dll_buflist_owner);\n\t\t\t\t}\n\t\t\t}\n\t}\n\n\t// lws_buflist_describe(&wsi->buflist, wsi, __func__);\n\n#if 0\n\n\t/*\n\t * This seems to be too aggressive... we don't want the ah stuck\n\t * there but eg, WINDOW_UPDATE may come and detach it if we leave\n\t * it like that... it will get detached at stream close\n\t */\n\n\tif (wsi->http.ah\n#if defined(LWS_WITH_CLIENT)\n\t\t\t&& !wsi->client_h2_alpn\n#endif\n\t\t\t) {\n\t\tlwsl_err(\"xxx\\n\");\n\n\t\tlws_header_table_detach(wsi, 0);\n\t}\n#endif\n\n\tpending = (unsigned int)lws_ssl_pending(wsi);\n\tif (pending) {\n\t\t// lwsl_info(\"going around\\n\");\n\t\tgoto read;\n\t}\n\n\treturn LWS_HPI_RET_HANDLED;\n}\n\nint rops_handle_POLLOUT_h2(struct lws *wsi)\n{\n\t// lwsl_notice(\"%s\\n\", __func__);\n\n\tif (lwsi_state(wsi) == LRS_ISSUE_HTTP_BODY)\n\t\treturn LWS_HP_RET_USER_SERVICE;\n\n\t/*\n\t * Priority 1: H2 protocol packets\n\t */\n\tif ((wsi->upgraded_to_http2\n#if defined(LWS_WITH_CLIENT)\n\t\t\t|| wsi->client_h2_alpn\n#endif\n\t\t\t) && wsi->h2.h2n->pps) {\n\t\tlwsl_info(\"servicing pps\\n\");\n\t\t/*\n\t\t * this is called on the network connection, but may close\n\t\t * substreams... that may affect callers\n\t\t */\n\t\tif (lws_h2_do_pps_send(wsi)) {\n\t\t\twsi->socket_is_permanently_unusable = 1;\n\t\t\treturn LWS_HP_RET_BAIL_DIE;\n\t\t}\n\t\tif (wsi->h2.h2n->pps)\n\t\t\treturn LWS_HP_RET_BAIL_OK;\n\n\t\t/* we can resume whatever we were doing */\n\t\tlws_rx_flow_control(wsi, LWS_RXFLOW_REASON_APPLIES_ENABLE |\n\t\t\t\t\t LWS_RXFLOW_REASON_H2_PPS_PENDING);\n\n\t\treturn LWS_HP_RET_BAIL_OK; /* leave POLLOUT active */\n\t}\n\n\t/* Priority 2: if we are closing, not allowed to send more data frags\n\t *\t       which means user callback or tx ext flush banned now\n\t */\n\tif (lwsi_state(wsi) == LRS_RETURNED_CLOSE)\n\t\treturn LWS_HP_RET_USER_SERVICE;\n\n\treturn LWS_HP_RET_USER_SERVICE;\n}\n\nstatic int\nrops_write_role_protocol_h2(struct lws *wsi, unsigned char *buf, size_t len,\n\t\t\t    enum lws_write_protocol *wp)\n{\n\tunsigned char flags = 0, base = (*wp) & 0x1f;\n\tsize_t olen = len;\n\tint n;\n#if defined(LWS_WITH_HTTP_STREAM_COMPRESSION)\n\tunsigned char mtubuf[4096 + LWS_PRE];\n#endif\n\n\t/* if not in a state to send stuff, then just send nothing */\n\n\tif (!lwsi_role_ws(wsi) && !wsi->mux_stream_immortal &&\n\t    base != LWS_WRITE_HTTP &&\n\t    base != LWS_WRITE_HTTP_FINAL &&\n\t    base != LWS_WRITE_HTTP_HEADERS_CONTINUATION &&\n\t    base != LWS_WRITE_HTTP_HEADERS && lwsi_state(wsi) != LRS_BODY &&\n\t    ((lwsi_state(wsi) != LRS_RETURNED_CLOSE &&\n\t      lwsi_state(wsi) != LRS_WAITING_TO_SEND_CLOSE &&\n\t      lwsi_state(wsi) != LRS_ESTABLISHED &&\n\t      lwsi_state(wsi) != LRS_AWAITING_CLOSE_ACK)\n#if defined(LWS_ROLE_WS)\n\t   || base != LWS_WRITE_CLOSE\n#endif\n\t)) {\n\t\t//assert(0);\n\t\tlwsl_notice(\"%s: binning wsistate 0x%x %d: %s\\n\", __func__,\n\t\t\t\t(unsigned int)wsi->wsistate, *wp, wsi->a.protocol ?\n\t\t\t\t\twsi->a.protocol->name : \"no protocol\");\n\n\t\treturn 0;\n\t}\n\n\t/* compression transform... */\n\n#if defined(LWS_WITH_HTTP_STREAM_COMPRESSION)\n\tif (wsi->http.lcs) {\n\t\tunsigned char *out = mtubuf + LWS_PRE;\n\t\tsize_t o = sizeof(mtubuf) - LWS_PRE;\n\n\t\tn = lws_http_compression_transform(wsi, buf, len, wp, &out, &o);\n\t\tif (n)\n\t\t\treturn n;\n\n\t\tlwsl_info(\"%s: %s: transformed %d bytes to %d \"\n\t\t\t   \"(wp 0x%x, more %d)\\n\", __func__,\n\t\t\t   lws_wsi_tag(wsi), (int)len, (int)o, (int)*wp,\n\t\t\t   wsi->http.comp_ctx.may_have_more);\n\n\t\tbuf = out;\n\t\tlen = o;\n\t\tbase = (*wp) & 0x1f;\n\n\t\tif (!len)\n\t\t\treturn (int)olen;\n\t}\n#endif\n\n\t/*\n\t * ws-over-h2 also ends up here after the ws framing applied\n\t */\n\n\tn = LWS_H2_FRAME_TYPE_DATA;\n\tif (base == LWS_WRITE_HTTP_HEADERS) {\n\t\tn = LWS_H2_FRAME_TYPE_HEADERS;\n\t\tif (!((*wp) & LWS_WRITE_NO_FIN))\n\t\t\tflags = LWS_H2_FLAG_END_HEADERS;\n\t\tif (wsi->h2.send_END_STREAM ||\n\t\t    ((*wp) & LWS_WRITE_H2_STREAM_END)) {\n\t\t\tflags |= LWS_H2_FLAG_END_STREAM;\n\t\t\twsi->h2.send_END_STREAM = 1;\n\t\t}\n\t}\n\n\tif (base == LWS_WRITE_HTTP_HEADERS_CONTINUATION) {\n\t\tn = LWS_H2_FRAME_TYPE_CONTINUATION;\n\t\tif (!((*wp) & LWS_WRITE_NO_FIN))\n\t\t\tflags = LWS_H2_FLAG_END_HEADERS;\n\t\tif (wsi->h2.send_END_STREAM ||\n\t\t    ((*wp) & LWS_WRITE_H2_STREAM_END)) {\n\t\t\tflags |= LWS_H2_FLAG_END_STREAM;\n\t\t\twsi->h2.send_END_STREAM = 1;\n\t\t}\n\t}\n\n\tif ((base == LWS_WRITE_HTTP ||\n\t     base == LWS_WRITE_HTTP_FINAL) &&\n\t     wsi->http.tx_content_length) {\n\t\twsi->http.tx_content_remain -= len;\n\t\tlwsl_info(\"%s: %s: tx_content_rem = %llu\\n\", __func__,\n\t\t\t  lws_wsi_tag(wsi),\n\t\t\t  (unsigned long long)wsi->http.tx_content_remain);\n\t\tif (!wsi->http.tx_content_remain) {\n\t\t\tlwsl_info(\"%s: selecting final write mode\\n\", __func__);\n\t\t\tbase = *wp = LWS_WRITE_HTTP_FINAL;\n\t\t}\n\t}\n\n\tif (base == LWS_WRITE_HTTP_FINAL || ((*wp) & LWS_WRITE_H2_STREAM_END)) {\n\t\tflags |= LWS_H2_FLAG_END_STREAM;\n\t\tlwsl_info(\"%s: %s: setting END_STREAM, 0x%x\\n\", __func__,\n\t\t\t\tlws_wsi_tag(wsi), flags);\n\t\twsi->h2.send_END_STREAM = 1;\n\t}\n\n\tn = lws_h2_frame_write(wsi, n, flags, wsi->mux.my_sid, (unsigned int)len, buf);\n\tif (n < 0)\n\t\treturn n;\n\n\t/* hide it may have been compressed... */\n\n\treturn (int)olen;\n}\n\n#if defined(LWS_WITH_SERVER)\nstatic int\nrops_check_upgrades_h2(struct lws *wsi)\n{\n#if defined(LWS_ROLE_WS)\n\tchar *p;\n\n\t/*\n\t * with H2 there's also a way to upgrade a stream to something\n\t * else... :method is CONNECT and :protocol says the name of\n\t * the new protocol we want to carry.  We have to have sent a\n\t * SETTINGS saying that we support it though.\n\t */\n\tp = lws_hdr_simple_ptr(wsi, WSI_TOKEN_HTTP_COLON_METHOD);\n\tif (!wsi->a.vhost->h2.set.s[H2SET_ENABLE_CONNECT_PROTOCOL] ||\n\t    !wsi->mux_substream || !p || strcmp(p, \"CONNECT\"))\n\t\treturn LWS_UPG_RET_CONTINUE;\n\n\tp = lws_hdr_simple_ptr(wsi, WSI_TOKEN_COLON_PROTOCOL);\n\tif (!p || strcmp(p, \"websocket\"))\n\t\treturn LWS_UPG_RET_CONTINUE;\n\n\tlwsl_info(\"Upgrade h2 to ws\\n\");\n\tlws_mux_mark_immortal(wsi);\n\twsi->h2_stream_carries_ws = 1;\n\n\tlws_metrics_tag_wsi_add(wsi, \"upg\", \"ws_over_h2\");\n\n\tif (lws_process_ws_upgrade(wsi))\n\t\treturn LWS_UPG_RET_BAIL;\n\n\tlwsl_info(\"Upgraded h2 to ws OK\\n\");\n\n\treturn LWS_UPG_RET_DONE;\n#else\n\treturn LWS_UPG_RET_CONTINUE;\n#endif\n}\n#endif\n\nstatic int\nrops_init_vhost_h2(struct lws_vhost *vh,\n\t\t   const struct lws_context_creation_info *info)\n{\n\tvh->h2.set = vh->context->set;\n\tif (info->http2_settings[0]) {\n\t\tint n;\n\n\t\tfor (n = 1; n < LWS_H2_SETTINGS_LEN; n++)\n\t\t\tvh->h2.set.s[n] = info->http2_settings[n];\n\t}\n\n\treturn 0;\n}\n\nint\nrops_pt_init_destroy_h2(struct lws_context *context,\n\t\t    const struct lws_context_creation_info *info,\n\t\t    struct lws_context_per_thread *pt, int destroy)\n{\n\tcontext->set = lws_h2_stock_settings;\n\n\t/*\n\t * We only want to do this once... we will do it if we are built\n\t * otherwise h1 ops will do it (or nobody if no http at all)\n\t */\n#if !defined(LWS_ROLE_H2) && defined(LWS_WITH_SERVER)\n\tif (!destroy) {\n\n\t\tpt->sul_ah_lifecheck.cb = lws_sul_http_ah_lifecheck;\n\n\t\t__lws_sul_insert_us(&pt->pt_sul_owner[LWSSULLI_MISS_IF_SUSPENDED],\n\t\t\t\t &pt->sul_ah_lifecheck, 30 * LWS_US_PER_SEC);\n\t} else\n\t\tlws_dll2_remove(&pt->sul_ah_lifecheck.list);\n#endif\n\n\treturn 0;\n}\n\n\nstatic int\nrops_tx_credit_h2(struct lws *wsi, char peer_to_us, int add)\n{\n\tstruct lws *nwsi = lws_get_network_wsi(wsi);\n\tint n;\n\n\tif (add) {\n\t\tif (peer_to_us == LWSTXCR_PEER_TO_US) {\n\t\t\t/*\n\t\t\t * We want to tell the peer they can write an additional\n\t\t\t * \"add\" bytes to us\n\t\t\t */\n\t\t\treturn lws_h2_update_peer_txcredit(wsi, (unsigned int)-1, add);\n\t\t}\n\n\t\t/*\n\t\t * We're being told we can write an additional \"add\" bytes\n\t\t * to the peer\n\t\t */\n\n\t\twsi->txc.tx_cr += add;\n\t\tnwsi->txc.tx_cr += add;\n\n\t\treturn 0;\n\t}\n\n\tif (peer_to_us == LWSTXCR_US_TO_PEER)\n\t\treturn lws_h2_tx_cr_get(wsi);\n\n\tn = wsi->txc.peer_tx_cr_est;\n\tif (n > nwsi->txc.peer_tx_cr_est)\n\t\tn = nwsi->txc.peer_tx_cr_est;\n\n\treturn n;\n}\n\nstatic int\nrops_destroy_role_h2(struct lws *wsi)\n{\n\tstruct lws_context_per_thread *pt = &wsi->a.context->pt[(int)wsi->tsi];\n\tstruct allocated_headers *ah;\n\n\t/* we may not have an ah, but may be on the waiting list... */\n\tlwsl_info(\"%s: %s: ah det due to close\\n\", __func__, lws_wsi_tag(wsi));\n\t__lws_header_table_detach(wsi, 0);\n\n\tah = pt->http.ah_list;\n\n\twhile (ah) {\n\t\tif (ah->in_use && ah->wsi == wsi) {\n\t\t\tlwsl_err(\"%s: ah leak: %s\\n\", __func__, lws_wsi_tag(wsi));\n\t\t\tah->in_use = 0;\n\t\t\tah->wsi = NULL;\n\t\t\tpt->http.ah_count_in_use--;\n\t\t\tbreak;\n\t\t}\n\t\tah = ah->next;\n\t}\n\n#if defined(LWS_WITH_HTTP_STREAM_COMPRESSION)\n\tlws_http_compression_destroy(wsi);\n#endif\n\n\tif (wsi->upgraded_to_http2 || wsi->mux_substream) {\n\t\tlws_hpack_destroy_dynamic_header(wsi);\n\n\t\tif (wsi->h2.h2n)\n\t\t\tlws_free_set_NULL(wsi->h2.h2n);\n\t}\n\n\treturn 0;\n}\n\nstatic int\nrops_close_kill_connection_h2(struct lws *wsi, enum lws_close_status reason)\n{\n\n#if defined(LWS_WITH_HTTP_PROXY)\n\tif (wsi->http.proxy_clientside) {\n\n\t\twsi->http.proxy_clientside = 0;\n\n\t\tif (user_callback_handle_rxflow(wsi->a.protocol->callback,\n\t\t\t\t\t\twsi,\n\t\t\t\t\t    LWS_CALLBACK_COMPLETED_CLIENT_HTTP,\n\t\t\t\t\t\twsi->user_space, NULL, 0))\n\t\t\twsi->http.proxy_clientside = 0;\n\t}\n#endif\n\n\tif (wsi->mux_substream && wsi->h2_stream_carries_ws)\n\t\tlws_h2_rst_stream(wsi, 0, \"none\");\n/*\telse\n\t\tif (wsi->mux_substream)\n\t\t\tlws_h2_rst_stream(wsi, H2_ERR_STREAM_CLOSED, \"swsi got closed\");\n*/\n\n\tlwsl_info(\" %s, his parent %s: siblings:\\n\", lws_wsi_tag(wsi), lws_wsi_tag(wsi->mux.parent_wsi));\n\tlws_wsi_mux_dump_children(wsi);\n\n\tif (wsi->upgraded_to_http2 || wsi->mux_substream\n#if defined(LWS_WITH_CLIENT)\n\t\t\t|| wsi->client_mux_substream\n#endif\n\t) {\n\t\tlwsl_info(\"closing %s: parent %s\\n\", lws_wsi_tag(wsi),\n\t\t\t\tlws_wsi_tag(wsi->mux.parent_wsi));\n\n\t\tif (wsi->mux.child_list && lwsl_visible(LLL_INFO)) {\n\t\t\tlwsl_info(\" parent %s: closing children: list:\\n\", lws_wsi_tag(wsi));\n\t\t\tlws_wsi_mux_dump_children(wsi);\n\t\t}\n\t\tlws_wsi_mux_close_children(wsi, (int)reason);\n\t}\n\n\tif (wsi->upgraded_to_http2) {\n\t\t/* remove pps */\n\t\tstruct lws_h2_protocol_send *w = wsi->h2.h2n->pps, *w1;\n\n\t\twhile (w) {\n\t\t\tw1 = w->next;\n\t\t\tfree(w);\n\t\t\tw = w1;\n\t\t}\n\t\twsi->h2.h2n->pps = NULL;\n\t}\n\n\tif ((\n#if defined(LWS_WITH_CLIENT)\n\t\t\twsi->client_mux_substream ||\n#endif\n\t\t\twsi->mux_substream) &&\n\t     wsi->mux.parent_wsi) {\n\t\tlws_wsi_mux_sibling_disconnect(wsi);\n\t\tif (wsi->h2.pending_status_body)\n\t\t\tlws_free_set_NULL(wsi->h2.pending_status_body);\n\t}\n\n\treturn 0;\n}\n\nstatic int\nrops_callback_on_writable_h2(struct lws *wsi)\n{\n#if defined(LWS_WITH_CLIENT)\n\tstruct lws *network_wsi;\n#endif\n\tint already;\n\n//\tif (!lwsi_role_h2(wsi) && !lwsi_role_h2_ENCAPSULATION(wsi))\n//\t\treturn 0;\n\n\tif (wsi->mux.requested_POLLOUT\n#if defined(LWS_WITH_CLIENT)\n\t\t\t&& !wsi->client_h2_alpn\n#endif\n\t) {\n\t\tlwsl_debug(\"already pending writable\\n\");\n\t\t// return 1;\n\t}\n\n\t/* is this for DATA or for control messages? */\n\n\tif (wsi->upgraded_to_http2 && !wsi->h2.h2n->pps &&\n\t    lws_wsi_txc_check_skint(&wsi->txc, lws_h2_tx_cr_get(wsi))) {\n\t\t/*\n\t\t * refuse his efforts to get WRITABLE if we have no credit and\n\t\t * no non-DATA pps to send\n\t\t */\n\t\tlwsl_err(\"%s: skint\\n\", __func__);\n\t\treturn 0;\n\t}\n\n#if defined(LWS_WITH_CLIENT)\n\tnetwork_wsi = lws_get_network_wsi(wsi);\n#endif\n\talready = lws_wsi_mux_mark_parents_needing_writeable(wsi);\n\n\t/* for network action, act only on the network wsi */\n\n\tif (already\n#if defined(LWS_WITH_CLIENT)\n\t\t\t&& !network_wsi->client_h2_alpn\n\t\t\t&& !network_wsi->client_mux_substream\n#endif\n\t\t\t)\n\t\treturn 1;\n\n\treturn 0;\n}\n\n#if defined(LWS_WITH_SERVER)\nstatic int\nlws_h2_bind_for_post_before_action(struct lws *wsi)\n{\n\tconst struct lws_http_mount *hit;\n\tchar *uri_ptr = NULL;\n\tuint8_t *buffered;\n\tint uri_len = 0;\n\tconst char *p;\n\tsize_t blen;\n\n\tp = lws_hdr_simple_ptr(wsi, WSI_TOKEN_HTTP_COLON_METHOD);\n\tif (!p || strcmp(p, \"POST\"))\n\t\treturn 0;\n\n\n\tif (!lws_hdr_total_length(wsi, WSI_TOKEN_HTTP_COLON_PATH) ||\n\t    !lws_hdr_simple_ptr(wsi, WSI_TOKEN_HTTP_COLON_PATH))\n\t\t/*\n\t\t * There must be a path.  Actually this is checked at\n\t\t * http2.c along with the other required header\n\t\t * presence before we can get here.\n\t\t *\n\t\t * But Coverity insists to see us check it.\n\t\t */\n\t\treturn 1;\n\n\thit = lws_find_mount(wsi,\n\t\t  lws_hdr_simple_ptr(wsi, WSI_TOKEN_HTTP_COLON_PATH),\n\t\t  lws_hdr_total_length(wsi, WSI_TOKEN_HTTP_COLON_PATH));\n\n\tlwsl_debug(\"%s: %s: hit %p: %s\\n\", __func__,\n\t\t    lws_hdr_simple_ptr(wsi, WSI_TOKEN_HTTP_COLON_PATH),\n\t\t    hit, hit ? hit->origin : \"null\");\n\tif (hit) {\n\t\tconst struct lws_protocols *pp;\n\t\tconst char *name = hit->origin;\n\n\t\tif (hit->origin_protocol == LWSMPRO_CGI ||\n\t\t    hit->origin_protocol == LWSMPRO_HTTP ||\n\t\t    hit->origin_protocol == LWSMPRO_HTTPS)\n\t\t\treturn 0;\n\n\t\tif (hit->protocol)\n\t\t\tname = hit->protocol;\n\n\t\tpp = lws_vhost_name_to_protocol(wsi->a.vhost, name);\n\t\tif (!pp) {\n\t\t\tlwsl_info(\"Unable to find protocol '%s'\\n\", name);\n\t\t\treturn 1;\n\t\t}\n\n\t\tif (lws_bind_protocol(wsi, pp, __func__))\n\t\t\treturn 1;\n\t}\n\tif (lws_http_get_uri_and_method(wsi, &uri_ptr, &uri_len) >= 0)\n\t\tif (wsi->a.protocol->callback(wsi, LWS_CALLBACK_HTTP,\n\t\t\t\t\t      wsi->user_space,\n\t\t\t\t\t      hit ? uri_ptr +\n\t\t\t\t\t\t  hit->mountpoint_len : uri_ptr,\n\t\t\t\t\t      (size_t)(hit ? uri_len -\n\t\t\t\t\t\t\t  hit->mountpoint_len :\n\t\t\t\t\t\t\t  uri_len)))\n\t\t\treturn 1;\n\n\tlwsl_info(\"%s: setting LRS_BODY from 0x%x (%s)\\n\", __func__,\n\t\t    (int)wsi->wsistate, wsi->a.protocol->name);\n\n\tlwsi_set_state(wsi, LRS_BODY);\n\n\tif (wsi->http.content_length_explicitly_zero)\n\t\treturn 0;\n\n\t/*\n\t * Dump any stashed body\n\t */\n\n\twhile (((!wsi->http.content_length_given) ||\n\t\t  wsi->http.rx_content_length) &&\n\t       (blen = lws_buflist_next_segment_len(&wsi->buflist, &buffered))) {\n\n\t\tif ((size_t)wsi->http.rx_content_length < blen)\n\t\t\tblen = (size_t)wsi->http.rx_content_length;\n\n\t\tif (wsi->a.protocol->callback(wsi, LWS_CALLBACK_HTTP_BODY,\n\t\t\t\twsi->user_space, buffered, blen))\n\t\t\treturn 1;\n\t\tlws_buflist_use_segment(&wsi->buflist, blen);\n\n\t\twsi->http.rx_content_length -= blen;\n\t}\n\n\tif (!wsi->buflist)\n\t\t/* Take us off the pt's \"wsi holding input buflist\" list */\n\t\tlws_dll2_remove(&wsi->dll_buflist);\n\n\tif (wsi->http.content_length_given && wsi->http.rx_content_length)\n\t\t/* still a-ways to go */\n\t\treturn 0;\n\n\tif (!wsi->http.content_length_given && !wsi->h2.END_STREAM)\n\t\treturn 0;\n\n\tif (wsi->a.protocol->callback(wsi, LWS_CALLBACK_HTTP_BODY_COMPLETION,\n\t\t\t\t      wsi->user_space, NULL, 0))\n\t\treturn 1;\n\n\treturn 0;\n}\n#endif\n\n/*\n * we are the 'network wsi' for potentially many muxed child wsi with\n * no network connection of their own, who have to use us for all their\n * network actions.  So we use a round-robin scheme to share out the\n * POLLOUT notifications to our children.\n *\n * But because any child could exhaust the socket's ability to take\n * writes, we can only let one child get notified each time.\n *\n * In addition children may be closed / deleted / added between POLLOUT\n * notifications, so we can't hold pointers\n */\n\nstatic int\nrops_perform_user_POLLOUT_h2(struct lws *wsi)\n{\n\tstruct lws **wsi2;\n#if defined(LWS_ROLE_WS)\n\tint write_type = LWS_WRITE_PONG;\n#endif\n\tint n;\n\n\twsi = lws_get_network_wsi(wsi);\n\n\twsi->mux.requested_POLLOUT = 0;\n//\tif (!wsi->h2.initialized) {\n//\t\tlwsl_info(\"pollout on uninitialized http2 conn\\n\");\n//\t\treturn 0;\n//\t}\n\n\tlws_wsi_mux_dump_waiting_children(wsi);\n\n\twsi2 = &wsi->mux.child_list;\n\tif (!*wsi2)\n\t\treturn 0;\n\n\tdo {\n\t\tstruct lws *w, **wa;\n\n\t\twa = &(*wsi2)->mux.sibling_list;\n\t\tif (!(*wsi2)->mux.requested_POLLOUT)\n\t\t\tgoto next_child;\n\n\t\t/*\n\t\t * we're going to do writable callback for this child.\n\t\t * move him to be the last child\n\t\t */\n\n\t\tlwsl_debug(\"servicing child %s\\n\", lws_wsi_tag(*wsi2));\n\n\t\tw = lws_wsi_mux_move_child_to_tail(wsi2);\n\n\t\tif (!w) {\n\t\t\twa = &wsi->mux.child_list;\n\t\t\tgoto next_child;\n\t\t}\n\n\t\tlwsl_info(\"%s: child %s, sid %d, (wsistate 0x%x)\\n\",\n\t\t\t  __func__, lws_wsi_tag(w), w->mux.my_sid,\n\t\t\t  (unsigned int)w->wsistate);\n\n\t\t/* priority 1: post compression-transform buffered output */\n\n\t\tif (lws_has_buffered_out(w)) {\n\t\t\tlwsl_debug(\"%s: completing partial\\n\", __func__);\n\t\t\tif (lws_issue_raw(w, NULL, 0) < 0) {\n\t\t\t\tlwsl_info(\"%s signalling to close\\n\", __func__);\n\t\t\t\tlws_close_free_wsi(w, LWS_CLOSE_STATUS_NOSTATUS,\n\t\t\t\t\t\t   \"h2 end stream 1\");\n\t\t\t\twa = &wsi->mux.child_list;\n\t\t\t\tgoto next_child;\n\t\t\t}\n\t\t\tlws_callback_on_writable(w);\n\t\t\twa = &wsi->mux.child_list;\n\t\t\tgoto next_child;\n\t\t}\n\n\t\t/* priority 2: pre compression-transform buffered output */\n\n#if defined(LWS_WITH_HTTP_STREAM_COMPRESSION)\n\t\tif (w->http.comp_ctx.buflist_comp ||\n\t\t    w->http.comp_ctx.may_have_more) {\n\t\t\tenum lws_write_protocol wp = LWS_WRITE_HTTP;\n\n\t\t\tlwsl_info(\"%s: completing comp partial\"\n\t\t\t\t   \"(buflist_comp %p, may %d)\\n\",\n\t\t\t\t   __func__, w->http.comp_ctx.buflist_comp,\n\t\t\t\t    w->http.comp_ctx.may_have_more);\n\n\t\t\tif (rops_write_role_protocol_h2(w, NULL, 0, &wp) < 0) {\n\t\t\t\tlwsl_info(\"%s signalling to close\\n\", __func__);\n\t\t\t\tlws_close_free_wsi(w, LWS_CLOSE_STATUS_NOSTATUS,\n\t\t\t\t\t\t   \"comp write fail\");\n\t\t\t}\n\t\t\tlws_callback_on_writable(w);\n\t\t\twa = &wsi->mux.child_list;\n\t\t\tgoto next_child;\n\t\t}\n#endif\n\n\t\t/* priority 3: if no buffered out and waiting for that... */\n\n\t\tif (lwsi_state(w) == LRS_FLUSHING_BEFORE_CLOSE) {\n\t\t\tw->socket_is_permanently_unusable = 1;\n\t\t\tlws_close_free_wsi(w, LWS_CLOSE_STATUS_NOSTATUS,\n\t\t\t\t\t   \"h2 end stream 1\");\n\t\t\twa = &wsi->mux.child_list;\n\t\t\tgoto next_child;\n\t\t}\n\n\t\t/* if we arrived here, even by looping, we checked choked */\n\t\tw->could_have_pending = 0;\n\t\twsi->could_have_pending = 0;\n\n\t\tif (w->h2.pending_status_body) {\n\t\t\tw->h2.send_END_STREAM = 1;\n\t\t\tn = lws_write(w, (uint8_t *)w->h2.pending_status_body +\n\t\t\t\t\t LWS_PRE,\n\t\t\t\t         strlen(w->h2.pending_status_body +\n\t\t\t\t\t        LWS_PRE), LWS_WRITE_HTTP_FINAL);\n\t\t\tlws_free_set_NULL(w->h2.pending_status_body);\n\t\t\tlws_close_free_wsi(w, LWS_CLOSE_STATUS_NOSTATUS,\n\t\t\t\t\t   \"h2 end stream 1\");\n\t\t\twa = &wsi->mux.child_list;\n\t\t\tgoto next_child;\n\t\t}\n\n#if defined(LWS_WITH_CLIENT)\n\t\tif (lwsi_state(w) == LRS_H2_WAITING_TO_SEND_HEADERS) {\n\t\t\tif (lws_h2_client_handshake(w))\n\t\t\t\treturn -1;\n\n\t\t\tgoto next_child;\n\t\t}\n#endif\n\n#if defined(LWS_WITH_SERVER)\n\t\tif (lwsi_state(w) == LRS_DEFERRING_ACTION) {\n\n\t\t\t/*\n\t\t\t * we had to defer the http_action to the POLLOUT\n\t\t\t * handler, because we know it will send something and\n\t\t\t * only in the POLLOUT handler do we know for sure\n\t\t\t * that there is no partial pending on the network wsi.\n\t\t\t */\n\n\t\t\tlwsi_set_state(w, LRS_ESTABLISHED);\n\n\t\t\tif (w->buflist) {\n\t\t\t\tstruct lws_context_per_thread *pt;\n\n\t\t\t\tpt = &w->a.context->pt[(int)w->tsi];\n\t\t\t\tlwsl_debug(\"%s: added %s to rxflow list\\n\",\n\t\t\t\t\t   __func__, lws_wsi_tag(w));\n\t\t\t\tlws_dll2_add_head(\n\t\t\t\t\t&w->dll_buflist,\n\t\t\t\t\t&pt->dll_buflist_owner);\n\t\t\t}\n\n\t\t\tif (lws_h2_bind_for_post_before_action(w))\n\t\t\t\treturn -1;\n\n\t\t\t/*\n\t\t\t * Well, we could be getting a POST from the client, it\n\t\t\t * may not have any content-length.  In that case, we\n\t\t\t * will be in LRS_BODY state, we can't actually start\n\t\t\t * the action until we had the body and the stream is\n\t\t\t * half-closed, indicating that we can reply\n\t\t\t */\n\n\t\t\tif (lwsi_state(w) == LRS_BODY &&\n\t\t\t    w->h2.h2_state != LWS_H2_STATE_HALF_CLOSED_REMOTE)\n\t\t\t\tgoto next_child;\n\n\t\t\tlwsl_info(\"  h2 action start...\\n\");\n\t\t\tn = lws_http_action(w);\n\t\t\tif (n < 0)\n\t\t\t\tlwsl_info (\"   h2 action result %d\\n\", n);\n\t\t\telse\n\t\t\tlwsl_info(\"  h2 action result %d \"\n\t\t\t\t  \"(wsi->http.rx_content_remain %lld)\\n\",\n\t\t\t\t  n, w->http.rx_content_remain);\n\n\t\t\t/*\n\t\t\t * Commonly we only managed to start a larger transfer\n\t\t\t * that will complete asynchronously under its own wsi\n\t\t\t * states.  In those cases we will hear about\n\t\t\t * END_STREAM going out in the POLLOUT handler.\n\t\t\t */\n\t\t\tif (n >= 0 && !w->h2.pending_status_body &&\n\t\t\t    (n || w->h2.send_END_STREAM)) {\n\t\t\t\tlwsl_info(\"closing stream after h2 action\\n\");\n\t\t\t\tlws_close_free_wsi(w, LWS_CLOSE_STATUS_NOSTATUS,\n\t\t\t\t\t\t   \"h2 end stream\");\n\t\t\t\twa = &wsi->mux.child_list;\n\t\t\t}\n\n\t\t\tif (n < 0)\n\t\t\t\twa = &wsi->mux.child_list;\n\n\t\t\tgoto next_child;\n\t\t}\n\n#if defined(LWS_WITH_FILE_OPS)\n\n\t\tif (lwsi_state(w) == LRS_ISSUING_FILE) {\n\n\t\t\tif (lws_wsi_txc_check_skint(&w->txc,\n\t\t\t\t\t\t    lws_h2_tx_cr_get(w))) {\n\t\t\t\twa = &wsi->mux.child_list;\n\t\t\t\tgoto next_child;\n\t\t\t}\n\n\t\t\t((volatile struct lws *)w)->leave_pollout_active = 0;\n\n\t\t\t/* >0 == completion, <0 == error\n\t\t\t *\n\t\t\t * We'll get a LWS_CALLBACK_HTTP_FILE_COMPLETION\n\t\t\t * callback when it's done.  That's the case even if we\n\t\t\t * just completed the send, so wait for that.\n\t\t\t */\n\t\t\tn = lws_serve_http_file_fragment(w);\n\t\t\tlwsl_debug(\"lws_serve_http_file_fragment says %d\\n\", n);\n\n\t\t\t/*\n\t\t\t * We will often hear about out having sent the final\n\t\t\t * DATA here... if so close the actual wsi\n\t\t\t */\n\t\t\tif (n < 0 || w->h2.send_END_STREAM) {\n\t\t\t\tlwsl_debug(\"Closing POLLOUT child %s\\n\",\n\t\t\t\t\t\tlws_wsi_tag(w));\n\t\t\t\tlws_close_free_wsi(w, LWS_CLOSE_STATUS_NOSTATUS,\n\t\t\t\t\t\t   \"h2 end stream file\");\n\t\t\t\twa = &wsi->mux.child_list;\n\t\t\t\tgoto next_child;\n\t\t\t}\n\t\t\tif (n > 0)\n\t\t\t\tif (lws_http_transaction_completed(w))\n\t\t\t\t\treturn -1;\n\t\t\tif (!n) {\n\t\t\t\tlws_callback_on_writable(w);\n\t\t\t\t(w)->mux.requested_POLLOUT = 1;\n\t\t\t}\n\n\t\t\tgoto next_child;\n\t\t}\n#endif\n#endif\n\n#if defined(LWS_ROLE_WS)\n\n\t\t/* Notify peer that we decided to close */\n\n\t\tif (lwsi_role_ws(w) &&\n\t\t    lwsi_state(w) == LRS_WAITING_TO_SEND_CLOSE) {\n\t\t\tlwsl_debug(\"sending close packet\\n\");\n\t\t\tw->waiting_to_send_close_frame = 0;\n\t\t\tn = lws_write(w, &w->ws->ping_payload_buf[LWS_PRE],\n\t\t\t\t      w->ws->close_in_ping_buffer_len,\n\t\t\t\t      LWS_WRITE_CLOSE);\n\t\t\tif (n >= 0) {\n\t\t\t\tlwsi_set_state(w, LRS_AWAITING_CLOSE_ACK);\n\t\t\t\tlws_set_timeout(w, PENDING_TIMEOUT_CLOSE_ACK, 5);\n\t\t\t\tlwsl_debug(\"sent close frame, awaiting ack\\n\");\n\t\t\t}\n\n\t\t\tgoto next_child;\n\t\t}\n\n\t\t/*\n\t\t * Acknowledge receipt of peer's notification he closed,\n\t\t * then logically close ourself\n\t\t */\n\n\t\tif ((lwsi_role_ws(w) && w->ws->ping_pending_flag) ||\n\t\t    (lwsi_state(w) == LRS_RETURNED_CLOSE &&\n\t\t     w->ws->payload_is_close)) {\n\n\t\t\tif (w->ws->payload_is_close)\n\t\t\t\twrite_type = LWS_WRITE_CLOSE |\n\t\t\t\t\t     LWS_WRITE_H2_STREAM_END;\n\n\t\t\tn = lws_write(w, &w->ws->ping_payload_buf[LWS_PRE],\n\t\t\t\t      w->ws->ping_payload_len, (enum lws_write_protocol)write_type);\n\t\t\tif (n < 0)\n\t\t\t\treturn -1;\n\n\t\t\t/* well he is sent, mark him done */\n\t\t\tw->ws->ping_pending_flag = 0;\n\t\t\tif (w->ws->payload_is_close) {\n\t\t\t\t/* oh... a close frame... then we are done */\n\t\t\t\tlwsl_debug(\"Ack'd peer's close packet\\n\");\n\t\t\t\tw->ws->payload_is_close = 0;\n\t\t\t\tlwsi_set_state(w, LRS_RETURNED_CLOSE);\n\t\t\t\tlws_close_free_wsi(w, LWS_CLOSE_STATUS_NOSTATUS,\n\t\t\t\t\t\t   \"returned close packet\");\n\t\t\t\twa = &wsi->mux.child_list;\n\t\t\t\tgoto next_child;\n\t\t\t}\n\n\t\t\tlws_callback_on_writable(w);\n\t\t\t(w)->mux.requested_POLLOUT = 1;\n\n\t\t\t/* otherwise for PING, leave POLLOUT active both ways */\n\t\t\tgoto next_child;\n\t\t}\n#endif\n\n\t\t/*\n\t\t * set client wsi to immortal long-poll mode; send END_STREAM\n\t\t * flag on headers to indicate to a server, that allows\n\t\t * it, that you want them to leave the stream in a long poll\n\t\t * ro immortal state.  We have to send headers so the client\n\t\t * understands the http connection is ongoing.\n\t\t */\n\n\t\tif (w->h2.send_END_STREAM && w->h2.long_poll) {\n\t\t\tuint8_t buf[LWS_PRE + 1];\n\t\t\tenum lws_write_protocol wp = 0;\n\n\t\t\tif (!rops_write_role_protocol_h2(w, buf + LWS_PRE, 0,\n\t\t\t\t\t\t\t &wp)) {\n\t\t\t\tlwsl_info(\"%s: %s: entering ro long poll\\n\",\n\t\t\t\t\t  __func__, lws_wsi_tag(w));\n\t\t\t\tlws_mux_mark_immortal(w);\n\t\t\t} else\n\t\t\t\tlwsl_err(\"%s: %s: failed to set long poll\\n\",\n\t\t\t\t\t\t__func__, lws_wsi_tag(w));\n\t\t\tgoto next_child;\n\t\t}\n\n\t\tif (lws_callback_as_writeable(w)) {\n\t\t\tlwsl_info(\"Closing POLLOUT child (end stream %d)\\n\",\n\t\t\t\t  w->h2.send_END_STREAM);\n\t\t\tlws_close_free_wsi(w, LWS_CLOSE_STATUS_NOSTATUS,\n\t\t\t\t\t   \"h2 pollout handle\");\n\t\t\twa = &wsi->mux.child_list;\n\t\t} else\n\t\t\t if (w->h2.send_END_STREAM)\n\t\t\t\tlws_h2_state(w, LWS_H2_STATE_HALF_CLOSED_LOCAL);\n\nnext_child:\n\t\twsi2 = wa;\n\t} while (wsi2 && *wsi2 && !lws_send_pipe_choked(wsi));\n\n\t// lws_wsi_mux_dump_waiting_children(wsi);\n\n\tif (lws_wsi_mux_action_pending_writeable_reqs(wsi))\n\t\treturn -1;\n\n\treturn 0;\n}\n\nstatic struct lws *\nrops_encapsulation_parent_h2(struct lws *wsi)\n{\n\tif (wsi->mux.parent_wsi)\n\t\treturn wsi->mux.parent_wsi;\n\n\treturn NULL;\n}\n\nstatic int\nrops_alpn_negotiated_h2(struct lws *wsi, const char *alpn)\n{\n\tstruct allocated_headers *ah;\n\n\tlwsl_debug(\"%s: client %d\\n\", __func__, lwsi_role_client(wsi));\n#if defined(LWS_WITH_CLIENT)\n\tif (lwsi_role_client(wsi)) {\n\t\tlwsl_info(\"%s: upgraded to H2\\n\", __func__);\n\t\twsi->client_h2_alpn = 1;\n\t}\n#endif\n\n\twsi->upgraded_to_http2 = 1;\n\n\t/* adopt the header info */\n\n\tah = wsi->http.ah;\n\n\tlws_role_transition(wsi, lwsi_role_client(wsi) ? LWSIFR_CLIENT : LWSIFR_SERVER, LRS_H2_AWAIT_PREFACE,\n\t\t\t    &role_ops_h2);\n\n\t/* http2 union member has http union struct at start */\n\twsi->http.ah = ah;\n\n\tif (!wsi->h2.h2n)\n\t\twsi->h2.h2n = lws_zalloc(sizeof(*wsi->h2.h2n), \"h2n\");\n\tif (!wsi->h2.h2n)\n\t\treturn 1;\n\n\tlws_h2_init(wsi);\n\n\t/* HTTP2 union */\n\n\tif (lws_hpack_dynamic_size(wsi,\n\t\t\t   (int)wsi->h2.h2n->our_set.s[H2SET_HEADER_TABLE_SIZE]))\n\t\treturn 1;\n\twsi->txc.tx_cr = 65535;\n\n\tlwsl_info(\"%s: %s: configured for h2\\n\", __func__, lws_wsi_tag(wsi));\n\n\treturn 0;\n}\n\nstatic int\nrops_issue_keepalive_h2(struct lws *wsi, int isvalid)\n{\n\tstruct lws *nwsi = lws_get_network_wsi(wsi);\n\tstruct lws_h2_protocol_send *pps;\n\tuint64_t us = (uint64_t)lws_now_usecs();\n\n\tif (isvalid) {\n\t\t_lws_validity_confirmed_role(nwsi);\n\n\t\treturn 0;\n\t}\n\n\t/*\n\t * We can only send these frames on the network connection itself...\n\t * we shouldn't be tracking validity on anything else\n\t */\n\n\tassert(wsi == nwsi);\n\n\tpps = lws_h2_new_pps(LWS_H2_PPS_PING);\n\tif (!pps)\n\t\treturn 1;\n\n\t/*\n\t * The peer is defined to copy us back the unchanged payload in another\n\t * PING frame this time with ACK set.  So by sending that out with the\n\t * current time, it's an interesting opportunity to learn the effective\n\t * RTT on the link when the PONG comes in, plus or minus the time to\n\t * schedule the PPS.\n\t */\n\n\tmemcpy(pps->u.ping.ping_payload, &us, 8);\n\tlws_pps_schedule(nwsi, pps);\n\n\treturn 0;\n}\n\nstatic const lws_rops_t rops_table_h2[] = {\n#if defined(LWS_WITH_SERVER)\n\t/*  1 */ { .check_upgrades\t  = rops_check_upgrades_h2 },\n#else\n\t/*  1 */ { .check_upgrades\t  = NULL },\n#endif\n\t/*  2 */ { .pt_init_destroy\t  = rops_pt_init_destroy_h2 },\n\t/*  3 */ { .init_vhost\t\t  = rops_init_vhost_h2 },\n\t/*  4 */ { .handle_POLLIN\t  = rops_handle_POLLIN_h2 },\n\t/*  5 */ { .handle_POLLOUT\t  = rops_handle_POLLOUT_h2 },\n\t/*  6 */ { .perform_user_POLLOUT  = rops_perform_user_POLLOUT_h2 },\n\t/*  7 */ { .callback_on_writable  = rops_callback_on_writable_h2 },\n\t/*  8 */ { .tx_credit\t\t  = rops_tx_credit_h2 },\n\t/*  9 */ { .write_role_protocol\t  = rops_write_role_protocol_h2 },\n\t/* 10 */ { .encapsulation_parent  = rops_encapsulation_parent_h2 },\n\t/* 11 */ { .alpn_negotiated\t  = rops_alpn_negotiated_h2 },\n\t/* 12 */ { .close_kill_connection = rops_close_kill_connection_h2 },\n\t/* 13 */ { .destroy_role\t  = rops_destroy_role_h2 },\n\t/* 14 */ { .issue_keepalive\t  = rops_issue_keepalive_h2 },\n};\n\n\nconst struct lws_role_ops role_ops_h2 = {\n\t/* role name */\t\t\t\"h2\",\n\t/* alpn id */\t\t\t\"h2\",\n\n\t/* rops_table */\t\trops_table_h2,\n\t/* rops_idx */\t\t\t{\n\t  /* LWS_ROPS_check_upgrades */\n#if defined(LWS_WITH_SERVER)\n\t  /* LWS_ROPS_pt_init_destroy */\t\t0x12,\n#else\n\t  /* LWS_ROPS_pt_init_destroy */\t\t0x02,\n#endif\n\t  /* LWS_ROPS_init_vhost */\n\t  /* LWS_ROPS_destroy_vhost */\t\t\t0x30,\n\t  /* LWS_ROPS_service_flag_pending */\n\t  /* LWS_ROPS_handle_POLLIN */\t\t\t0x04,\n\t  /* LWS_ROPS_handle_POLLOUT */\n\t  /* LWS_ROPS_perform_user_POLLOUT */\t\t0x56,\n\t  /* LWS_ROPS_callback_on_writable */\n\t  /* LWS_ROPS_tx_credit */\t\t\t0x78,\n\t  /* LWS_ROPS_write_role_protocol */\n\t  /* LWS_ROPS_encapsulation_parent */\t\t0x9a,\n\t  /* LWS_ROPS_alpn_negotiated */\n\t  /* LWS_ROPS_close_via_role_protocol */\t0xb0,\n\t  /* LWS_ROPS_close_role */\n\t  /* LWS_ROPS_close_kill_connection */\t\t0x0c,\n\t  /* LWS_ROPS_destroy_role */\n\t  /* LWS_ROPS_adoption_bind */\t\t\t0xd0,\n\t  /* LWS_ROPS_client_bind */\n\t  /* LWS_ROPS_issue_keepalive */\t\t0x0e,\n\t\t\t\t\t},\n\t/* adoption_cb clnt, srv */\t{ LWS_CALLBACK_SERVER_NEW_CLIENT_INSTANTIATED,\n\t\t\t\t\t  LWS_CALLBACK_SERVER_NEW_CLIENT_INSTANTIATED },\n\t/* rx cb clnt, srv */\t\t{ LWS_CALLBACK_RECEIVE_CLIENT_HTTP,\n\t\t\t\t\t  0 /* may be POST, etc */ },\n\t/* writeable cb clnt, srv */\t{ LWS_CALLBACK_CLIENT_HTTP_WRITEABLE,\n\t\t\t\t\t  LWS_CALLBACK_HTTP_WRITEABLE },\n\t/* close cb clnt, srv */\t{ LWS_CALLBACK_CLOSED_CLIENT_HTTP,\n\t\t\t\t\t  LWS_CALLBACK_CLOSED_HTTP },\n\t/* protocol_bind cb c, srv */\t{ LWS_CALLBACK_CLIENT_HTTP_BIND_PROTOCOL,\n\t\t\t\t\t  LWS_CALLBACK_HTTP_BIND_PROTOCOL },\n\t/* protocol_unbind cb c, srv */\t{ LWS_CALLBACK_CLIENT_HTTP_DROP_PROTOCOL,\n\t\t\t\t\t  LWS_CALLBACK_HTTP_DROP_PROTOCOL },\n\t/* file_handle */\t\t0,\n};\n",
			"file": "libwebsockets/lib/roles/h2/ops-h2.c",
			"file_size": 39005,
			"file_write_time": 132716304932994818,
			"settings":
			{
				"buffer_size": 39005,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"contents": "/*\n * libwebsockets - small server side websockets and web server implementation\n *\n * Copyright (C) 2010 - 2019 Andy Green <andy@warmcat.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\nextern const struct lws_role_ops role_ops_h2;\n#define lwsi_role_h2(wsi) (wsi->role_ops == &role_ops_h2)\n\nstruct http2_settings {\n\tuint32_t s[H2SET_COUNT];\n};\n\nstruct lws_vhost_role_h2 {\n\tstruct http2_settings set;\n};\n\nenum lws_h2_wellknown_frame_types {\n\tLWS_H2_FRAME_TYPE_DATA,\n\tLWS_H2_FRAME_TYPE_HEADERS,\n\tLWS_H2_FRAME_TYPE_PRIORITY,\n\tLWS_H2_FRAME_TYPE_RST_STREAM,\n\tLWS_H2_FRAME_TYPE_SETTINGS,\n\tLWS_H2_FRAME_TYPE_PUSH_PROMISE,\n\tLWS_H2_FRAME_TYPE_PING,\n\tLWS_H2_FRAME_TYPE_GOAWAY,\n\tLWS_H2_FRAME_TYPE_WINDOW_UPDATE,\n\tLWS_H2_FRAME_TYPE_CONTINUATION,\n\n\tLWS_H2_FRAME_TYPE_COUNT /* always last */\n};\n\nenum lws_h2_flags {\n\tLWS_H2_FLAG_END_STREAM = 1,\n\tLWS_H2_FLAG_END_HEADERS = 4,\n\tLWS_H2_FLAG_PADDED = 8,\n\tLWS_H2_FLAG_PRIORITY = 0x20,\n\n\tLWS_H2_FLAG_SETTINGS_ACK = 1,\n};\n\nenum lws_h2_errors {\n\tH2_ERR_NO_ERROR,\t\t   /* Graceful shutdown */\n\tH2_ERR_PROTOCOL_ERROR,\t   /* Protocol error detected */\n\tH2_ERR_INTERNAL_ERROR,\t   /* Implementation fault */\n\tH2_ERR_FLOW_CONTROL_ERROR,  /* Flow-control limits exceeded */\n\tH2_ERR_SETTINGS_TIMEOUT,\t   /* Settings not acknowledged */\n\tH2_ERR_STREAM_CLOSED,\t   /* Frame received for closed stream */\n\tH2_ERR_FRAME_SIZE_ERROR,\t   /* Frame size incorrect */\n\tH2_ERR_REFUSED_STREAM,\t   /* Stream not processed */\n\tH2_ERR_CANCEL,\t\t   /* Stream cancelled */\n\tH2_ERR_COMPRESSION_ERROR,   /* Compression state not updated */\n\tH2_ERR_CONNECT_ERROR,\t   /* TCP connection error for CONNECT method */\n\tH2_ERR_ENHANCE_YOUR_CALM,   /* Processing capacity exceeded */\n\tH2_ERR_INADEQUATE_SECURITY, /* Negotiated TLS parameters not acceptable */\n\tH2_ERR_HTTP_1_1_REQUIRED,   /* Use HTTP/1.1 for the request */\n};\n\nenum lws_h2_states {\n\tLWS_H2_STATE_IDLE,\n\t/*\n\t * Send PUSH_PROMISE    -> LWS_H2_STATE_RESERVED_LOCAL\n\t * Recv PUSH_PROMISE    -> LWS_H2_STATE_RESERVED_REMOTE\n\t * Send HEADERS         -> LWS_H2_STATE_OPEN\n\t * Recv HEADERS         -> LWS_H2_STATE_OPEN\n\t *\n\t *  - Only PUSH_PROMISE + HEADERS valid to send\n\t *  - Only HEADERS or PRIORITY valid to receive\n\t */\n\tLWS_H2_STATE_RESERVED_LOCAL,\n\t/*\n\t * Send RST_STREAM      -> LWS_H2_STATE_CLOSED\n\t * Recv RST_STREAM      -> LWS_H2_STATE_CLOSED\n\t * Send HEADERS         -> LWS_H2_STATE_HALF_CLOSED_REMOTE\n\t *\n\t * - Only HEADERS, RST_STREAM, or PRIORITY valid to send\n\t * - Only RST_STREAM, PRIORITY, or WINDOW_UPDATE valid to receive\n\t */\n\tLWS_H2_STATE_RESERVED_REMOTE,\n\t/*\n\t * Send RST_STREAM      -> LWS_H2_STATE_CLOSED\n\t * Recv RST_STREAM      -> LWS_H2_STATE_CLOSED\n\t * Recv HEADERS         -> LWS_H2_STATE_HALF_CLOSED_LOCAL\n\t *\n\t *  - Only RST_STREAM, WINDOW_UPDATE, or PRIORITY valid to send\n\t *  - Only HEADERS, RST_STREAM, or PRIORITY valid to receive\n\t */\n\tLWS_H2_STATE_OPEN,\n\t/*\n\t * Send RST_STREAM      -> LWS_H2_STATE_CLOSED\n\t * Recv RST_STREAM      -> LWS_H2_STATE_CLOSED\n\t * Send END_STREAM flag -> LWS_H2_STATE_HALF_CLOSED_LOCAL\n\t * Recv END_STREAM flag -> LWS_H2_STATE_HALF_CLOSED_REMOTE\n\t */\n\tLWS_H2_STATE_HALF_CLOSED_REMOTE,\n\t/*\n\t * Send RST_STREAM      -> LWS_H2_STATE_CLOSED\n\t * Recv RST_STREAM      -> LWS_H2_STATE_CLOSED\n\t * Send END_STREAM flag -> LWS_H2_STATE_CLOSED\n\t *\n\t *  - Any frame valid to send\n\t *  - Only WINDOW_UPDATE, PRIORITY, or RST_STREAM valid to receive\n\t */\n\tLWS_H2_STATE_HALF_CLOSED_LOCAL,\n\t/*\n\t * Send RST_STREAM      -> LWS_H2_STATE_CLOSED\n\t * Recv RST_STREAM      -> LWS_H2_STATE_CLOSED\n\t * Recv END_STREAM flag -> LWS_H2_STATE_CLOSED\n\t *\n\t *  - Only WINDOW_UPDATE, PRIORITY, and RST_STREAM valid to send\n\t *  - Any frame valid to receive\n\t */\n\tLWS_H2_STATE_CLOSED,\n\t/*\n\t *  - Only PRIORITY, WINDOW_UPDATE (IGNORE) and RST_STREAM (IGNORE)\n\t *     may be received\n\t *\n\t *  - Only PRIORITY valid to send\n\t */\n};\n\nvoid\nlws_h2_state(struct lws *wsi, enum lws_h2_states s);\n\n#define LWS_H2_STREAM_ID_MASTER 0\n#define LWS_H2_SETTINGS_LEN 6\n#define LWS_H2_FLAG_SETTINGS_ACK 1\n\nenum http2_hpack_state {\n\tHPKS_TYPE,\n\n\tHPKS_IDX_EXT,\n\n\tHPKS_HLEN,\n\tHPKS_HLEN_EXT,\n\n\tHPKS_DATA,\n};\n\n/*\n * lws general parsimonious header strategy is only store values from known\n * headers, and refer to them by index.\n *\n * That means if we can't map the peer header name to one that lws knows, we\n * will drop the content but track the indexing with associated_lws_hdr_idx =\n * LWS_HPACK_IGNORE_ENTRY.\n */\n\nenum http2_hpack_type {\n\tHPKT_INDEXED_HDR_7,\t\t/* 1xxxxxxx: just \"header field\" */\n\tHPKT_INDEXED_HDR_6_VALUE_INCR,  /* 01xxxxxx: NEW indexed hdr with value */\n\tHPKT_LITERAL_HDR_VALUE_INCR,\t/* 01000000: NEW literal hdr with value */\n\tHPKT_INDEXED_HDR_4_VALUE,\t/* 0000xxxx: indexed hdr with value */\n\tHPKT_INDEXED_HDR_4_VALUE_NEVER,\t/* 0001xxxx: indexed hdr with value NEVER NEW */\n\tHPKT_LITERAL_HDR_VALUE,\t\t/* 00000000: literal hdr with value */\n\tHPKT_LITERAL_HDR_VALUE_NEVER,\t/* 00010000: literal hdr with value NEVER NEW */\n\tHPKT_SIZE_5\n};\n\n#define LWS_HPACK_IGNORE_ENTRY 0xffff\n\n\nstruct hpack_dt_entry {\n\tchar *value; /* malloc'd */\n\tuint16_t value_len;\n\tuint16_t hdr_len; /* virtual, for accounting */\n\tuint16_t lws_hdr_idx; /* LWS_HPACK_IGNORE_ENTRY = IGNORE */\n};\n\nstruct hpack_dynamic_table {\n\tstruct hpack_dt_entry *entries; /* malloc'd */\n\tuint32_t virtual_payload_usage;\n\tuint32_t virtual_payload_max;\n\tuint16_t pos;\n\tuint16_t used_entries;\n\tuint16_t num_entries;\n};\n\nenum lws_h2_protocol_send_type {\n\tLWS_PPS_NONE,\n\tLWS_H2_PPS_MY_SETTINGS,\n\tLWS_H2_PPS_ACK_SETTINGS,\n\tLWS_H2_PPS_PING,\n\tLWS_H2_PPS_PONG,\n\tLWS_H2_PPS_GOAWAY,\n\tLWS_H2_PPS_RST_STREAM,\n\tLWS_H2_PPS_UPDATE_WINDOW,\n\tLWS_H2_PPS_SETTINGS_INITIAL_UPDATE_WINDOW\n};\n\nstruct lws_h2_protocol_send {\n\tstruct lws_h2_protocol_send *next; /* linked list */\n\tenum lws_h2_protocol_send_type type;\n\n\tunion uu {\n\t\tstruct {\n\t\t\tchar\t\tstr[32];\n\t\t\tuint32_t\thighest_sid;\n\t\t\tuint32_t\terr;\n\t\t} ga;\n\t\tstruct {\n\t\t\tuint32_t\tsid;\n\t\t\tuint32_t\terr;\n\t\t} rs;\n\t\tstruct {\n\t\t\tuint8_t\t\tping_payload[8];\n\t\t} ping;\n\t\tstruct {\n\t\t\tuint32_t\tsid;\n\t\t\tuint32_t\tcredit;\n\t\t} update_window;\n\t} u;\n};\n\nstruct lws_h2_ghost_sid {\n\tstruct lws_h2_ghost_sid *next;\n\tuint32_t sid;\n};\n\n/*\n * http/2 connection info that is only used by the root connection that has\n * the network connection.\n *\n * h2 tends to spawn many child connections from one network connection, so\n * it's necessary to make members only needed by the network connection\n * distinct and only malloc'd on network connections.\n *\n * There's only one HPACK parser per network connection.\n *\n * But there is an ah per logical child connection... the network connection\n * fills it but it belongs to the logical child.\n */\nstruct lws_h2_netconn {\n\tstruct http2_settings our_set;\n\tstruct http2_settings peer_set;\n\tstruct hpack_dynamic_table hpack_dyn_table;\n\tuint8_t\tping_payload[8];\n\tuint8_t one_setting[LWS_H2_SETTINGS_LEN];\n\tchar goaway_str[32]; /* for rx */\n\tstruct lws *swsi;\n\tstruct lws_h2_protocol_send *pps; /* linked list */\n\n\tenum http2_hpack_state hpack;\n\tenum http2_hpack_type hpack_type;\n\n\tunsigned int huff:1;\n\tunsigned int value:1;\n\tunsigned int unknown_header:1;\n\tunsigned int cont_exp:1;\n\tunsigned int cont_exp_headers:1;\n\tunsigned int we_told_goaway:1;\n\tunsigned int pad_length:1;\n\tunsigned int collected_priority:1;\n\tunsigned int is_first_header_char:1;\n\tunsigned int zero_huff_padding:1;\n\tunsigned int last_action_dyntable_resize:1;\n\tunsigned int sent_preface:1;\n\n\tuint32_t hdr_idx;\n\tuint32_t hpack_len;\n\tuint32_t hpack_e_dep;\n\tuint32_t count;\n\tuint32_t preamble;\n\tuint32_t length;\n\tuint32_t sid;\n\tuint32_t inside;\n\tuint32_t highest_sid;\n\tuint32_t highest_sid_opened;\n\tuint32_t cont_exp_sid;\n\tuint32_t dep;\n\tuint32_t goaway_last_sid;\n\tuint32_t goaway_err;\n\tuint32_t hpack_hdr_len;\n\n\tuint16_t hpack_pos;\n\n\tuint8_t frame_state;\n\tuint8_t type;\n\tuint8_t flags;\n\tuint8_t padding;\n\tuint8_t weight_temp;\n\tuint8_t huff_pad;\n\tchar first_hdr_char;\n\tuint8_t hpack_m;\n\tuint8_t ext_count;\n};\n\nstruct _lws_h2_related {\n\n\tstruct lws_h2_netconn\t*h2n; /* malloc'd for root net conn */\n\n\tchar\t\t\t*pending_status_body;\n\n\tuint8_t\t\t\th2_state; /* RFC7540 state of the connection */\n\n\tuint8_t\t\t\tEND_STREAM:1;\n\tuint8_t\t\t\tEND_HEADERS:1;\n\tuint8_t\t\t\tsend_END_STREAM:1;\n\tuint8_t\t\t\tlong_poll:1;\n\tuint8_t\t\t\tinitialized:1;\n};\n\n#define HTTP2_IS_TOPLEVEL_WSI(wsi) (!wsi->mux.parent_wsi)\n\nint\nlws_h2_rst_stream(struct lws *wsi, uint32_t err, const char *reason);\nstruct lws * lws_h2_get_nth_child(struct lws *wsi, int n);\nvoid lws_h2_init(struct lws *wsi);\nint\nlws_h2_settings(struct lws *nwsi, struct http2_settings *settings,\n\t\tunsigned char *buf, int len);\nint\nlws_h2_parser(struct lws *wsi, unsigned char *in, lws_filepos_t inlen,\n\t      lws_filepos_t *inused);\nint\nlws_h2_do_pps_send(struct lws *wsi);\nint\nlws_h2_frame_write(struct lws *wsi, int type, int flags, unsigned int sid,\n\t\t   unsigned int len, unsigned char *buf);\nstruct lws *\nlws_wsi_mux_from_id(struct lws *wsi, unsigned int sid);\nint\nlws_hpack_interpret(struct lws *wsi, unsigned char c);\nint\nlws_add_http2_header_by_name(struct lws *wsi,\n\t\t\t     const unsigned char *name,\n\t\t\t     const unsigned char *value, int length,\n\t\t\t     unsigned char **p, unsigned char *end);\nint\nlws_add_http2_header_by_token(struct lws *wsi,\n\t\t\t      enum lws_token_indexes token,\n\t\t\t      const unsigned char *value, int length,\n\t\t\t      unsigned char **p, unsigned char *end);\nint\nlws_add_http2_header_status(struct lws *wsi,\n\t\t\t    unsigned int code, unsigned char **p,\n\t\t\t    unsigned char *end);\nvoid\nlws_hpack_destroy_dynamic_header(struct lws *wsi);\nint\nlws_hpack_dynamic_size(struct lws *wsi, int size);\nint\nlws_h2_goaway(struct lws *wsi, uint32_t err, const char *reason);\nint\nlws_h2_tx_cr_get(struct lws *wsi);\nvoid\nlws_h2_tx_cr_consume(struct lws *wsi, int consumed);\nint\nlws_hdr_extant(struct lws *wsi, enum lws_token_indexes h);\nvoid\nlws_pps_schedule(struct lws *wsi, struct lws_h2_protocol_send *pss);\n\nextern const struct http2_settings lws_h2_defaults;\nint\nlws_h2_ws_handshake(struct lws *wsi);\nint lws_h2_issue_preface(struct lws *wsi);\nint\nlws_h2_client_handshake(struct lws *wsi);\nstruct lws *\nlws_wsi_h2_adopt(struct lws *parent_wsi, struct lws *wsi);\nint\nlws_handle_POLLOUT_event_h2(struct lws *wsi);\nint\nlws_read_h2(struct lws *wsi, unsigned char *buf, lws_filepos_t len);\nstruct lws_h2_protocol_send *\nlws_h2_new_pps(enum lws_h2_protocol_send_type type);\n",
			"file": "libwebsockets/lib/roles/h2/private-lib-roles-h2.h",
			"file_size": 11311,
			"file_write_time": 132716304932994818,
			"settings":
			{
				"buffer_size": 11311,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "minnet-request.c",
			"settings":
			{
				"buffer_size": 8590,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					12,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AgAAANsgAAAAAAAA3CAAAAAAAAAAAAAA3CAAAAAAAADcIAAAAAAAABIAAABKU19QUk9QX0VOVU1FUkFCTEU",
					"AQAAAAAAAAABAAAA2yAAAAAAAADtIAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "          #ifndef MINNET_JSUTILS_H\n#define MINNET_JSUTILS_H\n\n#include <quickjs.h>\n#include <cutils.h>\n#include <list.h>\n\ntypedef struct JSThreadState {\n  struct list_head                                    d os_rw_handlers;\n  struct list_head os_signal_handlers;\n  struct list_head os_timers;\n  struct list_head port_list;\n  int eval_script_recurse;\n  void *recv_pipe, *send_pipe;\n} JSThreadState;\n\ntypedef struct input_buffer {\n  uint8_t* data;\n  size_t size;\n  void (*free)(JSContext*, uint8_t*, JSValue);\n  JSValue value;\n} JSBuffer;\n\nJSValue vector2array(JSContext*, int argc, JSValue argv[]);\nvoid js_console_log(JSContext*, JSValue* console, JSValue* console_log);\nJSValue js_function_bound(JSContext*, JSValue this_val, int argc, JSValue argv[], int magic, JSValue* func_data);\nJSValue js_function_bind(JSContext*, JSValue func, int argc, JSValue argv[]);\nJSValue js_function_bind_1(JSContext*, JSValue func, JSValue arg);\nJSValue js_iterator_next(JSContext*, JSValue obj, JSValue* next, BOOL* done_p, int argc, JSValue argv[]);\nint js_copy_properties(JSContext*, JSValue dst, JSValue src, int flags);\nJSBuffer js_buffer_from(JSContext*, JSValue value);\nBOOL js_buffer_valid(const JSBuffer*);\nJSBuffer js_buffer_clone(const JSBuffer*, JSContext* ctx);\nvoid js_buffer_dump(const JSBuffer*, DynBuf* db);\nvoid js_buffer_free(JSBuffer*, JSContext* ctx);\nBOOL js_is_iterable(JSContext*, JSValue obj);\nBOOL js_is_iterator(JSContext*, JSValue obj);\nJSAtom js_symbol_static_atom(JSContext*, const char* name);\nJSValue js_symbol_static_value(JSContext*, const char* name);\nJSValue js_symbol_ctor(JSContext*);\nJSValue js_global_get(JSContext*, const char* prop);\n\nstatic inline void\njs_dump_string(const char* str, size_t len, size_t maxlen) {\n  size_t i, n = 2;\n  putchar('\\'');\n  for(i = 0; i < len; i++) {\n    if(str[i] == '\\n') {\n      putchar('\\\\');\n      putchar('n');\n      n += 2;\n    } else {\n      putchar(str[i]);\n      n++;\n    }\n    if(maxlen > 0 && n + 1 >= maxlen) {\n      fputs(\"'...\", stdout);\n      return;\n    }\n  }\n  putchar('\\'');\n}\n\nstatic inline char*\njs_to_string(JSContext* ctx, JSValueConst value) {\n  const char* s;\n  char* ret = 0;\n\n  if((s = JS_ToCString(ctx, value))) {\n    ret = js_strdup(ctx, s);\n    JS_FreeCString(ctx, s);\n  }\n  return ret;\n}\n\ntypedef union pointer {\n  void* p;\n  struct {\n    int32_t lo32, hi32;\n  };\n  uint64_t u64;\n  int64_t s64;\n  uint32_t u32[2];\n  int32_t s32[2];\n  uint16_t u16[4];\n  int16_t s16[4];\n  uint8_t u8[8];\n  int8_t s8[8];\n} Pointer;\n\nstatic inline Pointer\nptr(const void* ptr) {\n  Pointer r = {0};\n  r.p = (void*)ptr;\n  return r;\n}\n\nstatic inline JSValue\nptr2value(JSContext* ctx, const void* ptr) {\n  char buf[128];\n  size_t len;\n  len = snprintf(buf, sizeof(buf), \"0x%llx\", (long long)ptr);\n  return JS_NewStringLen(ctx, buf, len);\n}\n\nstatic inline void*\nvalue2ptr(JSContext* ctx, JSValueConst value) {\n  Pointer r = {ptr};\n\n  if(JS_ToIndex(ctx, &r.u64, value)) {\n    const char* str = JS_ToCString(ctx, value);\n    BOOL hex = str[0] == '0' && str[1] == 'x';\n\n    r.u64 = strtoull(hex ? str + 2 : str, 0, hex ? 16 : 10);\n  }\n  return r.p;\n}\n\nstatic inline void*\nptr32(uint32_t lo, uint32_t hi) {\n  Pointer r = {0};\n  r.u32[0] = lo;\n  r.u32[1] = hi;\n  return r.p;\n}\n\nstatic inline void*\nvalues32ptr(JSContext* ctx, JSValueConst values[2]) {\n  uint32_t lo, hi;\n  JS_ToUint32(ctx, &lo, values[0]);\n  JS_ToUint32(ctx, &hi, values[1]);\n  return ptr32(lo, hi);\n}\n\nstatic inline JSValue\nptr32value(JSContext* ctx, const void* ptr, int index) {\n  Pointer r = {(void*)ptr};\n  return JS_NewUint32(ctx, r.u32[index]);\n}\n\nstatic inline BOOL\njs_is_nullish(JSValueConst value) {\n  return JS_IsNull(value) || JS_IsUndefined(value);\n}\n\nstatic inline void\njs_buffer_free_default(JSContext* ctx, uint8_t* data, JSValue val) {\n\n  if(JS_IsString(val))\n    JS_FreeCString(ctx, (const char*)data);\n\n  if(!JS_IsUndefined(val))\n    JS_FreeValue(ctx, val);\n}\n\nstatic inline const uint8_t*\njs_buffer_begin(const JSBuffer* in) {\n  return in->data;\n}\n\nstatic inline const uint8_t*\njs_buffer_end(const JSBuffer* in) {\n  return in->data + in->size;\n}\n\n#endif /* MINNET_JS_UTILS_H */\n",
			"file": "jsutils.h",
			"file_size": 4074,
			"file_write_time": 132729268104786117,
			"settings":
			{
				"buffer_size": 4121,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "\t\t\t\t\t"
					},
					"BQAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAKAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"insert_completion",
					{
						"completion": "list_head",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "list_head"
					},
					"AgAAAKEAAAAAAAAAoQAAAAAAAAAIAAAAbGlzdF9oZWGhAAAAAAAAAKoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQAAAAAAAACpAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAKoAAAAAAAAArAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqgAAAAAAAACqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
					},
					"EQAAAKwAAAAAAAAArgAAAAAAAAAAAAAArgAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAALIAAAAAAAAAAAAAALIAAAAAAAAAtAAAAAAAAAAAAAAAtAAAAAAAAAC2AAAAAAAAAAAAAAC2AAAAAAAAALgAAAAAAAAAAAAAALgAAAAAAAAAugAAAAAAAAAAAAAAugAAAAAAAAC8AAAAAAAAAAAAAAC8AAAAAAAAAL4AAAAAAAAAAAAAAL4AAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADCAAAAAAAAAAAAAADCAAAAAAAAAMQAAAAAAAAAAAAAAMQAAAAAAAAAxgAAAAAAAAAAAAAAxgAAAAAAAADIAAAAAAAAAAAAAADIAAAAAAAAAMoAAAAAAAAAAAAAAMoAAAAAAAAAzAAAAAAAAAAAAAAAzAAAAAAAAADOAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAAAAAAAAACsAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/home/roman/Projects/plot-cv/quickjs/quickjs.h",
			"settings":
			{
				"buffer_size": 42478,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "/home/roman/Projects/plot-cv/quickjs/cutils.h",
			"settings":
			{
				"buffer_size": 7403,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"contents": "# Doxyfile 1.8.11\n\n#---------------------------------------------------------------------------\n# Project related configuration options\n#---------------------------------------------------------------------------\nDOXYFILE_ENCODING      = UTF-8\nPROJECT_NAME           = \"libwebsockets\"\nPROJECT_NUMBER         =\nPROJECT_BRIEF          = \"Lightweight C library for HTML5 websockets\"\nPROJECT_LOGO           = \"./test-apps/libwebsockets.org-logo.svg\"\nOUTPUT_DIRECTORY       = \"doc\"\nCREATE_SUBDIRS         = NO\nALLOW_UNICODE_NAMES    = NO\nOUTPUT_LANGUAGE        = English\nBRIEF_MEMBER_DESC      = YES\nREPEAT_BRIEF           = YES\nABBREVIATE_BRIEF       =\nALWAYS_DETAILED_SEC    = NO\nINLINE_INHERITED_MEMB  = NO\nFULL_PATH_NAMES        = YES\nSTRIP_FROM_PATH        =\nSTRIP_FROM_INC_PATH    =\nSHORT_NAMES            = NO\nJAVADOC_AUTOBRIEF      = NO\nQT_AUTOBRIEF           = NO\nMULTILINE_CPP_IS_BRIEF = NO\nINHERIT_DOCS           = YES\nSEPARATE_MEMBER_PAGES  = NO\nTAB_SIZE               = 8\nALIASES                =\nOPTIMIZE_OUTPUT_FOR_C  = YES\nOPTIMIZE_OUTPUT_JAVA   = NO\nOPTIMIZE_FOR_FORTRAN   = NO\nOPTIMIZE_OUTPUT_VHDL   = NO\nEXTENSION_MAPPING      =\nMARKDOWN_SUPPORT       = YES\nAUTOLINK_SUPPORT       = YES\nBUILTIN_STL_SUPPORT    = NO\nCPP_CLI_SUPPORT        = NO\nSIP_SUPPORT            = NO\nIDL_PROPERTY_SUPPORT   = YES\nDISTRIBUTE_GROUP_DOC   = NO\nGROUP_NESTED_COMPOUNDS = NO\nSUBGROUPING            = YES\nINLINE_GROUPED_CLASSES = NO\nINLINE_SIMPLE_STRUCTS  = NO\nTYPEDEF_HIDES_STRUCT   = NO\nLOOKUP_CACHE_SIZE      = 0\n#---------------------------------------------------------------------------\n# Build related configuration options\n#---------------------------------------------------------------------------\nEXTRACT_ALL            = NO\nEXTRACT_PRIVATE        = NO\nEXTRACT_PACKAGE        = NO\nEXTRACT_STATIC         = NO\nEXTRACT_LOCAL_CLASSES  = YES\nEXTRACT_LOCAL_METHODS  = YES\nEXTRACT_ANON_NSPACES   = NO\nHIDE_UNDOC_MEMBERS     = NO\nHIDE_UNDOC_CLASSES     = NO\nHIDE_FRIEND_COMPOUNDS  = NO\nHIDE_IN_BODY_DOCS      = NO\nINTERNAL_DOCS          = NO\nCASE_SENSE_NAMES       = YES\nHIDE_SCOPE_NAMES       = NO\nHIDE_COMPOUND_REFERENCE= NO\nSHOW_INCLUDE_FILES     = YES\nSHOW_GROUPED_MEMB_INC  = YES\nFORCE_LOCAL_INCLUDES   = NO\nINLINE_INFO            = YES\nSORT_MEMBER_DOCS       = YES\nSORT_BRIEF_DOCS        = NO\nSORT_MEMBERS_CTORS_1ST = NO\nSORT_GROUP_NAMES       = YES\nSORT_BY_SCOPE_NAME     = NO\nSTRICT_PROTO_MATCHING  = YES\nGENERATE_TODOLIST      = YES\nGENERATE_TESTLIST      = YES\nGENERATE_BUGLIST       = YES\nGENERATE_DEPRECATEDLIST= YES\nENABLED_SECTIONS       =\nMAX_INITIALIZER_LINES  = 30\nSHOW_USED_FILES        = YES\nSHOW_FILES             = YES\nSHOW_NAMESPACES        = YES\nFILE_VERSION_FILTER    =\nLAYOUT_FILE            =\nCITE_BIB_FILES         =\n#---------------------------------------------------------------------------\n# Configuration options related to warning and progress messages\n#---------------------------------------------------------------------------\nQUIET                  = NO\nWARNINGS               = YES\nWARN_IF_UNDOCUMENTED   = NO\nWARN_IF_DOC_ERROR      = YES\nWARN_NO_PARAMDOC       = NO\nWARN_AS_ERROR          = NO\nWARN_FORMAT            = \"$file:$line: $text\"\nWARN_LOGFILE           =\n#---------------------------------------------------------------------------\n# Configuration options related to the input files\n#---------------------------------------------------------------------------\nINPUT                  = include/libwebsockets.h \\\n\t\t\t include/libwebsockets/lws-adopt.h \\\n\t\t\t include/libwebsockets/lws-async-dns.h \\\n\t\t\t include/libwebsockets/lws-bb-i2c.h \\\n\t\t\t include/libwebsockets/lws-bb-spi.h \\\n\t\t\t include/libwebsockets/lws-button.h \\\n\t\t\t include/libwebsockets/lws-callbacks.h \\\n\t\t\t include/libwebsockets/lws-cgi.h \\\n\t\t\t include/libwebsockets/lws-client.h \\\n\t\t\t include/libwebsockets/lws-context-vhost.h \\\n\t\t\t include/libwebsockets/lws-dbus.h \\\n\t\t\t include/libwebsockets/lws-detailed-latency.h \\\n\t\t\t include/libwebsockets/lws-diskcache.h \\\n\t\t\t include/libwebsockets/lws-display.h \\\n\t\t\t include/libwebsockets/lws-dll2.h \\\n\t\t\t include/libwebsockets/lws-dsh.h \\\n\t\t\t include/libwebsockets/lws-eventlib-exports.h \\\n\t\t\t include/libwebsockets/lws-freertos.h \\\n\t\t\t include/libwebsockets/lws-fts.h \\\n\t\t\t include/libwebsockets/lws-genaes.h \\\n\t\t\t include/libwebsockets/lws-gencrypto.h \\\n\t\t\t include/libwebsockets/lws-genec.h \\\n\t\t\t include/libwebsockets/lws-genhash.h \\\n\t\t\t include/libwebsockets/lws-genrsa.h \\\n\t\t\t include/libwebsockets/lws-gpio.h \\\n\t\t\t include/libwebsockets/lws-http.h \\\n\t\t\t include/libwebsockets/lws-i2c.h \\\n\t\t\t include/libwebsockets/lws-ili9341-spi.h \\\n\t\t\t include/libwebsockets/lws-jose.h \\\n\t\t\t include/libwebsockets/lws-jwe.h \\\n\t\t\t include/libwebsockets/lws-jwk.h \\\n\t\t\t include/libwebsockets/lws-jws.h \\\n\t\t\t include/libwebsockets/lws-led.h \\\n\t\t\t include/libwebsockets/lws-lejp.h \\\n\t\t\t include/libwebsockets/lws-logs.h \\\n\t\t\t include/libwebsockets/lws-lwsac.h \\\n\t\t\t include/libwebsockets/lws-misc.h \\\n\t\t\t include/libwebsockets/lws-mqtt.h \\\n\t\t\t include/libwebsockets/lws-netdev.h \\\n\t\t\t include/libwebsockets/lws-network-helper.h \\\n\t\t\t include/libwebsockets/lws-protocols-plugins.h \\\n\t\t\t include/libwebsockets/lws-purify.h \\\n\t\t\t include/libwebsockets/lws-pwm.h \\\n\t\t\t include/libwebsockets/lws-retry.h \\\n\t\t\t include/libwebsockets/lws-ring.h \\\n\t\t\t include/libwebsockets/lws-secure-streams-client.h \\\n\t\t\t include/libwebsockets/lws-secure-streams.h \\\n\t\t\t include/libwebsockets/lws-secure-streams-policy.h \\\n\t\t\t include/libwebsockets/lws-sequencer.h \\\n\t\t\t include/libwebsockets/lws-service.h \\\n\t\t\t include/libwebsockets/lws-settings.h \\\n\t\t\t include/libwebsockets/lws-sha1-base64.h \\\n\t\t\t include/libwebsockets/lws-smd.h \\\n\t\t\t include/libwebsockets/lws-spa.h \\\n\t\t\t include/libwebsockets/lws-spi.h \\\n\t\t\t include/libwebsockets/lws-ssd1306-i2c.h \\\n\t\t\t include/libwebsockets/lws-state.h \\\n\t\t\t include/libwebsockets/lws-stats.h \\\n\t\t\t include/libwebsockets/lws-struct.h \\\n\t\t\t include/libwebsockets/lws-system.h \\\n\t\t\t include/libwebsockets/lws-test-sequencer.h \\\n\t\t\t include/libwebsockets/lws-threadpool.h \\\n\t\t\t include/libwebsockets/lws-timeout-timer.h \\\n\t\t\t include/libwebsockets/lws-tokenize.h \\\n\t\t\t include/libwebsockets/lws-vfs.h \\\n\t\t\t include/libwebsockets/lws-write.h \\\n\t\t\t include/libwebsockets/lws-writeable.h \\\n\t\t\t include/libwebsockets/lws-ws-close.h \\\n\t\t\t include/libwebsockets/lws-ws-ext.h \\\n\t\t\t include/libwebsockets/lws-ws-state.h \\\n\t\t\t include/libwebsockets/lws-x509.h \\\n\t\t\t plugins/ssh-base/include/lws-plugin-ssh.h \\\n\t\t\t ./READMEs/mainpage.md \\\n\t\t\t ./READMEs/README.async-dns.md \\\n\t\t\t ./READMEs/README.build.md \\\n\t\t\t ./READMEs/README.ci.md \\\n\t\t\t ./READMEs/README.coding.md \\\n\t\t\t ./READMEs/README.content-security-policy.md \\\n\t\t\t ./READMEs/README.contributing.md \\\n\t\t\t ./READMEs/README.crypto-apis.md \\\n\t\t\t ./READMEs/README.detailed-latency.md \\\n\t\t\t ./READMEs/README.esp32.md \\\n\t\t\t ./READMEs/README.h2-long-poll.md \\\n\t\t\t ./READMEs/README.http-fallback.md \\\n\t\t\t ./READMEs/README.lws_dll.md \\\n\t\t\t ./READMEs/README.lws_sequencer.md \\\n\t\t\t ./READMEs/README.lws_struct.md \\\n\t\t\t ./READMEs/README.lws_sul.md \\\n\t\t\t ./READMEs/README.lwsws.md \\\n\t\t\t ./READMEs/README-plugin-sshd-base.md \\\n\t\t\t ./READMEs/README.plugin-acme.md \\\n\t\t\t ./READMEs/README.porting.md \\\n\t\t\t ./READMEs/README.problems.md \\\n\t\t\t ./READMEs/README.release-policy.md \\\n\t\t\t ./READMEs/README.test-apps.md \\\n\t\t\t ./READMEs/README.unix-domain-reverse-proxy.md \\\n\t\t\t ./READMEs/README.vulnerability-reporting.md \\\n\t\t\t ./doc-assets \nINPUT_ENCODING         = UTF-8\nFILE_PATTERNS          = lib/*.c *.md *.png include/*.h\nRECURSIVE              = NO\nEXCLUDE                =\nEXCLUDE_SYMLINKS       = NO\nEXCLUDE_PATTERNS       =\nEXCLUDE_SYMBOLS        =\nEXAMPLE_PATH           =\nEXAMPLE_PATTERNS       =\nEXAMPLE_RECURSIVE      = NO\nIMAGE_PATH             = doc-assets\nINPUT_FILTER           =\nFILTER_PATTERNS        =\nFILTER_SOURCE_FILES    = NO\nFILTER_SOURCE_PATTERNS =\nUSE_MDFILE_AS_MAINPAGE = mainpage.md\n#---------------------------------------------------------------------------\n# Configuration options related to source browsing\n#---------------------------------------------------------------------------\nSOURCE_BROWSER         = YES\nINLINE_SOURCES         = YES\nSTRIP_CODE_COMMENTS    = YES\nREFERENCED_BY_RELATION = NO\nREFERENCES_RELATION    = NO\nREFERENCES_LINK_SOURCE = YES\nSOURCE_TOOLTIPS        = YES\nUSE_HTAGS              = NO\nVERBATIM_HEADERS       = YES\n#---------------------------------------------------------------------------\n# Configuration options related to the alphabetical class index\n#---------------------------------------------------------------------------\nALPHABETICAL_INDEX     = YES\nCOLS_IN_ALPHA_INDEX    = 5\nIGNORE_PREFIX          =\n#---------------------------------------------------------------------------\n# Configuration options related to the HTML output\n#---------------------------------------------------------------------------\nGENERATE_HTML          = YES\nHTML_OUTPUT            = html\nHTML_FILE_EXTENSION    = .html\nHTML_HEADER            =\nHTML_FOOTER            =\nHTML_STYLESHEET        =\nHTML_EXTRA_STYLESHEET  = scripts/dox-extra.css\nHTML_EXTRA_FILES       =\nHTML_COLORSTYLE_HUE    = 220\nHTML_COLORSTYLE_SAT    = 100\nHTML_COLORSTYLE_GAMMA  = 80\nHTML_TIMESTAMP         = NO\nHTML_DYNAMIC_SECTIONS  = NO\nHTML_INDEX_NUM_ENTRIES = 100\nGENERATE_DOCSET        = NO\nDOCSET_FEEDNAME        = \"Doxygen generated docs\"\nDOCSET_BUNDLE_ID       = org.doxygen.Project\nDOCSET_PUBLISHER_ID    = org.doxygen.Publisher\nDOCSET_PUBLISHER_NAME  = Publisher\nGENERATE_HTMLHELP      = NO\nCHM_FILE               =\nHHC_LOCATION           =\nGENERATE_CHI           = NO\nCHM_INDEX_ENCODING     =\nBINARY_TOC             = NO\nTOC_EXPAND             = NO\nGENERATE_QHP           = NO\nQCH_FILE               =\nQHP_NAMESPACE          = org.doxygen.Project\nQHP_VIRTUAL_FOLDER     = doc\nQHP_CUST_FILTER_NAME   =\nQHP_CUST_FILTER_ATTRS  =\nQHP_SECT_FILTER_ATTRS  =\nQHG_LOCATION           =\nGENERATE_ECLIPSEHELP   = NO\nECLIPSE_DOC_ID         = org.doxygen.Project\nDISABLE_INDEX          = NO\nGENERATE_TREEVIEW      = YES\nENUM_VALUES_PER_LINE   = 4\nTREEVIEW_WIDTH         = 250\nEXT_LINKS_IN_WINDOW    = NO\nFORMULA_FONTSIZE       = 10\nFORMULA_TRANSPARENT    = YES\nUSE_MATHJAX            = NO\nMATHJAX_FORMAT         = HTML-CSS\nMATHJAX_RELPATH        = http://cdn.mathjax.org/mathjax/latest\nMATHJAX_EXTENSIONS     =\nMATHJAX_CODEFILE       =\nSEARCHENGINE           = YES\nSERVER_BASED_SEARCH    = NO\nEXTERNAL_SEARCH        = NO\nSEARCHENGINE_URL       =\nSEARCHDATA_FILE        = searchdata.xml\nEXTERNAL_SEARCH_ID     =\nEXTRA_SEARCH_MAPPINGS  =\n#---------------------------------------------------------------------------\n# Configuration options related to the LaTeX output\n#---------------------------------------------------------------------------\nGENERATE_LATEX         = NO\nLATEX_OUTPUT           = latex\nLATEX_CMD_NAME         = latex\nMAKEINDEX_CMD_NAME     = makeindex\nCOMPACT_LATEX          = NO\nPAPER_TYPE             = a4\nEXTRA_PACKAGES         =\nLATEX_HEADER           =\nLATEX_FOOTER           =\nLATEX_EXTRA_STYLESHEET =\nLATEX_EXTRA_FILES      =\nPDF_HYPERLINKS         = YES\nUSE_PDFLATEX           = YES\nLATEX_BATCHMODE        = NO\nLATEX_HIDE_INDICES     = NO\nLATEX_SOURCE_CODE      = NO\nLATEX_BIB_STYLE        = plain\nLATEX_TIMESTAMP        = NO\n#---------------------------------------------------------------------------\n# Configuration options related to the RTF output\n#---------------------------------------------------------------------------\nGENERATE_RTF           = NO\nRTF_OUTPUT             = rtf\nCOMPACT_RTF            = NO\nRTF_HYPERLINKS         = NO\nRTF_STYLESHEET_FILE    =\nRTF_EXTENSIONS_FILE    =\nRTF_SOURCE_CODE        = NO\n#---------------------------------------------------------------------------\n# Configuration options related to the man page output\n#---------------------------------------------------------------------------\nGENERATE_MAN           = NO\nMAN_OUTPUT             = man\nMAN_EXTENSION          = .3\nMAN_SUBDIR             =\nMAN_LINKS              = NO\n#---------------------------------------------------------------------------\n# Configuration options related to the XML output\n#---------------------------------------------------------------------------\nGENERATE_XML           = NO\nXML_OUTPUT             = xml\nXML_PROGRAMLISTING     = YES\n#---------------------------------------------------------------------------\n# Configuration options related to the DOCBOOK output\n#---------------------------------------------------------------------------\nGENERATE_DOCBOOK       = NO\nDOCBOOK_OUTPUT         = docbook\nDOCBOOK_PROGRAMLISTING = NO\n#---------------------------------------------------------------------------\n# Configuration options for the AutoGen Definitions output\n#---------------------------------------------------------------------------\nGENERATE_AUTOGEN_DEF   = NO\n#---------------------------------------------------------------------------\n# Configuration options related to the Perl module output\n#---------------------------------------------------------------------------\nGENERATE_PERLMOD       = NO\nPERLMOD_LATEX          = NO\nPERLMOD_PRETTY         = YES\nPERLMOD_MAKEVAR_PREFIX =\n#---------------------------------------------------------------------------\n# Configuration options related to the preprocessor\n#---------------------------------------------------------------------------\nENABLE_PREPROCESSING   = YES\nMACRO_EXPANSION        = NO\nEXPAND_ONLY_PREDEF     = NO\nSEARCH_INCLUDES        = YES\nINCLUDE_PATH           = ./include\nINCLUDE_FILE_PATTERNS  =\nPREDEFINED             =\nEXPAND_AS_DEFINED      =\nSKIP_FUNCTION_MACROS   = YES\n#---------------------------------------------------------------------------\n# Configuration options related to external references\n#---------------------------------------------------------------------------\nTAGFILES               =\nGENERATE_TAGFILE       =\nALLEXTERNALS           = NO\nEXTERNAL_GROUPS        = YES\nEXTERNAL_PAGES         = YES\n#---------------------------------------------------------------------------\n# Configuration options related to the dot tool\n#---------------------------------------------------------------------------\nCLASS_DIAGRAMS         = YES\nDIA_PATH               =\nHIDE_UNDOC_RELATIONS   = YES\nHAVE_DOT               = NO\nDOT_NUM_THREADS        = 0\nDOT_FONTNAME           = Helvetica\nDOT_FONTSIZE           = 10\nDOT_FONTPATH           =\nCLASS_GRAPH            = YES\nCOLLABORATION_GRAPH    = YES\nGROUP_GRAPHS           = YES\nUML_LOOK               = NO\nUML_LIMIT_NUM_FIELDS   = 10\nTEMPLATE_RELATIONS     = NO\nINCLUDE_GRAPH          = YES\nINCLUDED_BY_GRAPH      = YES\nCALL_GRAPH             = NO\nCALLER_GRAPH           = NO\nGRAPHICAL_HIERARCHY    = YES\nDIRECTORY_GRAPH        = YES\nDOT_IMAGE_FORMAT       = png\nINTERACTIVE_SVG        = NO\nDOT_PATH               =\nDOTFILE_DIRS           =\nMSCFILE_DIRS           =\nDIAFILE_DIRS           =\nPLANTUML_JAR_PATH      =\nPLANTUML_INCLUDE_PATH  =\nDOT_GRAPH_MAX_NODES    = 50\nMAX_DOT_GRAPH_DEPTH    = 0\nDOT_TRANSPARENT        = NO\nDOT_MULTI_TARGETS      = NO\nGENERATE_LEGEND        = YES\nDOT_CLEANUP            = YES\n",
			"file": "libwebsockets/libwebsockets.dox",
			"file_size": 15088,
			"file_write_time": 132729358761781017,
			"settings":
			{
				"buffer_size": 15088,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					10,
					1,
					"insert",
					{
						"characters": "YES"
					},
					"BAAAAEwHAAAAAAAATQcAAAAAAAAAAAAATQcAAAAAAABNBwAAAAAAAAIAAABOT00HAAAAAAAATgcAAAAAAAAAAAAATgcAAAAAAABPBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAcAAAAAAABOBwAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "YES"
					},
					"BAAAALofAAAAAAAAux8AAAAAAAAAAAAAux8AAAAAAAC7HwAAAAAAAAIAAABOT7sfAAAAAAAAvB8AAAAAAAAAAAAAvB8AAAAAAAC9HwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuh8AAAAAAAC8HwAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "YES"
					},
					"BAAAAHUoAAAAAAAAdigAAAAAAAAAAAAAdigAAAAAAAB2KAAAAAAAAAIAAABOT3YoAAAAAAAAdygAAAAAAAAAAAAAdygAAAAAAAB4KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdSgAAAAAAAB3KAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "/*\n * libwebsockets - small server side websockets and web server implementation\n *\n * Copyright (C) 2010 - 2020 Andy Green <andy@warmcat.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\n/* minimal space for typical headers and CSP stuff */\n\n#define LWS_RECOMMENDED_MIN_HEADER_SPACE 2048\n\n/*! \\defgroup http HTTP\n\n    Modules related to handling HTTP\n*/\n//@{\n\n/*! \\defgroup httpft HTTP File transfer\n * \\ingroup http\n\n    APIs for sending local files in response to HTTP requests\n*/\n//@{\n\n/**\n * lws_get_mimetype() - Determine mimetype to use from filename\n *\n * \\param file:\t\tfilename\n * \\param m:\t\tNULL, or mount context\n *\n * This uses a canned list of known filetypes first, if no match and m is\n * non-NULL, then tries a list of per-mount file suffix to mimtype mappings.\n *\n * Returns either NULL or a pointer to the mimetype matching the file.\n */\nLWS_VISIBLE LWS_EXTERN const char *\nlws_get_mimetype(const char *file, const struct lws_http_mount *m);\n\n/**\n * lws_serve_http_file() - Send a file back to the client using http\n * \\param wsi:\t\tWebsocket instance (available from user callback)\n * \\param file:\t\tThe file to issue over http\n * \\param content_type:\tThe http content type, eg, text/html\n * \\param other_headers:\tNULL or pointer to header string\n * \\param other_headers_len:\tlength of the other headers if non-NULL\n *\n *\tThis function is intended to be called from the callback in response\n *\tto http requests from the client.  It allows the callback to issue\n *\tlocal files down the http link in a single step.\n *\n *\tReturning <0 indicates error and the wsi should be closed.  Returning\n *\t>0 indicates the file was completely sent and\n *\tlws_http_transaction_completed() called on the wsi (and close if != 0)\n *\t==0 indicates the file transfer is started and needs more service later,\n *\tthe wsi should be left alone.\n */\nLWS_VISIBLE LWS_EXTERN int\nlws_serve_http_file(struct lws *wsi, const char *file, const char *content_type,\n\t\t    const char *other_headers, int other_headers_len);\n\nLWS_VISIBLE LWS_EXTERN int\nlws_serve_http_file_fragment(struct lws *wsi);\n//@}\n\n\nenum http_status {\n\tHTTP_STATUS_CONTINUE\t\t\t\t\t= 100,\n\n\tHTTP_STATUS_OK\t\t\t\t\t\t= 200,\n\tHTTP_STATUS_NO_CONTENT\t\t\t\t\t= 204,\n\tHTTP_STATUS_PARTIAL_CONTENT\t\t\t\t= 206,\n\n\tHTTP_STATUS_MOVED_PERMANENTLY\t\t\t\t= 301,\n\tHTTP_STATUS_FOUND\t\t\t\t\t= 302,\n\tHTTP_STATUS_SEE_OTHER\t\t\t\t\t= 303,\n\tHTTP_STATUS_NOT_MODIFIED\t\t\t\t= 304,\n\n\tHTTP_STATUS_BAD_REQUEST\t\t\t\t\t= 400,\n\tHTTP_STATUS_UNAUTHORIZED,\n\tHTTP_STATUS_PAYMENT_REQUIRED,\n\tHTTP_STATUS_FORBIDDEN,\n\tHTTP_STATUS_NOT_FOUND,\n\tHTTP_STATUS_METHOD_NOT_ALLOWED,\n\tHTTP_STATUS_NOT_ACCEPTABLE,\n\tHTTP_STATUS_PROXY_AUTH_REQUIRED,\n\tHTTP_STATUS_REQUEST_TIMEOUT,\n\tHTTP_STATUS_CONFLICT,\n\tHTTP_STATUS_GONE,\n\tHTTP_STATUS_LENGTH_REQUIRED,\n\tHTTP_STATUS_PRECONDITION_FAILED,\n\tHTTP_STATUS_REQ_ENTITY_TOO_LARGE,\n\tHTTP_STATUS_REQ_URI_TOO_LONG,\n\tHTTP_STATUS_UNSUPPORTED_MEDIA_TYPE,\n\tHTTP_STATUS_REQ_RANGE_NOT_SATISFIABLE,\n\tHTTP_STATUS_EXPECTATION_FAILED,\n\n\tHTTP_STATUS_INTERNAL_SERVER_ERROR\t\t\t= 500,\n\tHTTP_STATUS_NOT_IMPLEMENTED,\n\tHTTP_STATUS_BAD_GATEWAY,\n\tHTTP_STATUS_SERVICE_UNAVAILABLE,\n\tHTTP_STATUS_GATEWAY_TIMEOUT,\n\tHTTP_STATUS_HTTP_VERSION_NOT_SUPPORTED,\n};\n/*! \\defgroup html-chunked-substitution HTML Chunked Substitution\n * \\ingroup http\n *\n * ##HTML chunked Substitution\n *\n * APIs for receiving chunks of text, replacing a set of variable names via\n * a callback, and then prepending and appending HTML chunked encoding\n * headers.\n */\n//@{\n\nstruct lws_process_html_args {\n\tchar *p; /**< pointer to the buffer containing the data */\n\tint len; /**< length of the original data at p */\n\tint max_len; /**< maximum length we can grow the data to */\n\tint final; /**< set if this is the last chunk of the file */\n\tint chunked; /**< 0 == unchunked, 1 == produce chunk headers\n\t\t\t(incompatible with HTTP/2) */\n};\n\ntypedef const char *(*lws_process_html_state_cb)(void *data, int index);\n\nstruct lws_process_html_state {\n\tchar *start; /**< pointer to start of match */\n\tchar swallow[16]; /**< matched character buffer */\n\tint pos; /**< position in match */\n\tvoid *data; /**< opaque pointer */\n\tconst char * const *vars; /**< list of variable names */\n\tint count_vars; /**< count of variable names */\n\n\tlws_process_html_state_cb replace;\n\t\t/**< called on match to perform substitution */\n};\n\n/*! lws_chunked_html_process() - generic chunked substitution\n * \\param args: buffer to process using chunked encoding\n * \\param s: current processing state\n */\nLWS_VISIBLE LWS_EXTERN int\nlws_chunked_html_process(struct lws_process_html_args *args,\n\t\t\t struct lws_process_html_state *s);\n//@}\n\n/** \\defgroup HTTP-headers-read HTTP headers: read\n * \\ingroup http\n *\n * ##HTTP header releated functions\n *\n *  In lws the client http headers are temporarily stored in a pool, only for the\n *  duration of the http part of the handshake.  It's because in most cases,\n *  the header content is ignored for the whole rest of the connection lifetime\n *  and would then just be taking up space needlessly.\n *\n *  During LWS_CALLBACK_HTTP when the URI path is delivered is the last time\n *  the http headers are still allocated, you can use these apis then to\n *  look at and copy out interesting header content (cookies, etc)\n *\n *  Notice that the header total length reported does not include a terminating\n *  '\\0', however you must allocate for it when using the _copy apis.  So the\n *  length reported for a header containing \"123\" is 3, but you must provide\n *  a buffer of length 4 so that \"123\\0\" may be copied into it, or the copy\n *  will fail with a nonzero return code.\n *\n *  In the special case of URL arguments, like ?x=1&y=2, the arguments are\n *  stored in a token named for the method, eg,  WSI_TOKEN_GET_URI if it\n *  was a GET or WSI_TOKEN_POST_URI if POST.  You can check the total\n *  length to confirm the method.\n *\n *  For URL arguments, each argument is stored urldecoded in a \"fragment\", so\n *  you can use the fragment-aware api lws_hdr_copy_fragment() to access each\n *  argument in turn: the fragments contain urldecoded strings like x=1 or y=2.\n *\n *  As a convenience, lws has an api that will find the fragment with a\n *  given name= part, lws_get_urlarg_by_name().\n */\n///@{\n\n/** struct lws_tokens\n * you need these to look at headers that have been parsed if using the\n * LWS_CALLBACK_FILTER_CONNECTION callback.  If a header from the enum\n * list below is absent, .token = NULL and len = 0.  Otherwise .token\n * points to .len chars containing that header content.\n */\nstruct lws_tokens {\n\tunsigned char *token; /**< pointer to start of the token */\n\tint len; /**< length of the token's value */\n};\n\n/* enum lws_token_indexes\n * these have to be kept in sync with lextable.h / minilex.c\n *\n * NOTE: These public enums are part of the abi.  If you want to add one,\n * add it at where specified so existing users are unaffected.\n */\nenum lws_token_indexes {\n\tWSI_TOKEN_GET_URI, /* 0 */\n\tWSI_TOKEN_POST_URI,\n#if defined(LWS_WITH_HTTP_UNCOMMON_HEADERS) || defined(LWS_HTTP_HEADERS_ALL)\n\tWSI_TOKEN_OPTIONS_URI,\n#endif\n\tWSI_TOKEN_HOST,\n\tWSI_TOKEN_CONNECTION,\n\tWSI_TOKEN_UPGRADE, /* 5 */\n\tWSI_TOKEN_ORIGIN,\n#if defined(LWS_ROLE_WS) || defined(LWS_HTTP_HEADERS_ALL)\n\tWSI_TOKEN_DRAFT,\n#endif\n\tWSI_TOKEN_CHALLENGE,\n#if defined(LWS_ROLE_WS) || defined(LWS_HTTP_HEADERS_ALL)\n\tWSI_TOKEN_EXTENSIONS,\n\tWSI_TOKEN_KEY1, /* 10 */\n\tWSI_TOKEN_KEY2,\n\tWSI_TOKEN_PROTOCOL,\n\tWSI_TOKEN_ACCEPT,\n\tWSI_TOKEN_NONCE,\n#endif\n\tWSI_TOKEN_HTTP,\n#if defined(LWS_ROLE_H2) || defined(LWS_HTTP_HEADERS_ALL)\n\tWSI_TOKEN_HTTP2_SETTINGS, /* 16 */\n#endif\n\tWSI_TOKEN_HTTP_ACCEPT,\n#if defined(LWS_WITH_HTTP_UNCOMMON_HEADERS) || defined(LWS_HTTP_HEADERS_ALL)\n\tWSI_TOKEN_HTTP_AC_REQUEST_HEADERS,\n#endif\n\tWSI_TOKEN_HTTP_IF_MODIFIED_SINCE,\n\tWSI_TOKEN_HTTP_IF_NONE_MATCH, /* 20 */\n\tWSI_TOKEN_HTTP_ACCEPT_ENCODING,\n\tWSI_TOKEN_HTTP_ACCEPT_LANGUAGE,\n\tWSI_TOKEN_HTTP_PRAGMA,\n\tWSI_TOKEN_HTTP_CACHE_CONTROL,\n\tWSI_TOKEN_HTTP_AUTHORIZATION,\n\tWSI_TOKEN_HTTP_COOKIE,\n\tWSI_TOKEN_HTTP_CONTENT_LENGTH, /* 27 */\n\tWSI_TOKEN_HTTP_CONTENT_TYPE,\n\tWSI_TOKEN_HTTP_DATE,\n\tWSI_TOKEN_HTTP_RANGE,\n#if defined(LWS_WITH_HTTP_UNCOMMON_HEADERS) || defined(LWS_ROLE_H2) || defined(LWS_HTTP_HEADERS_ALL)\n\tWSI_TOKEN_HTTP_REFERER,\n#endif\n#if defined(LWS_ROLE_WS) || defined(LWS_HTTP_HEADERS_ALL)\n\tWSI_TOKEN_KEY,\n\tWSI_TOKEN_VERSION,\n\tWSI_TOKEN_SWORIGIN,\n#endif\n#if defined(LWS_ROLE_H2) || defined(LWS_HTTP_HEADERS_ALL)\n\tWSI_TOKEN_HTTP_COLON_AUTHORITY,\n\tWSI_TOKEN_HTTP_COLON_METHOD,\n\tWSI_TOKEN_HTTP_COLON_PATH,\n\tWSI_TOKEN_HTTP_COLON_SCHEME,\n\tWSI_TOKEN_HTTP_COLON_STATUS,\n#endif\n\n#if defined(LWS_WITH_HTTP_UNCOMMON_HEADERS) || defined(LWS_ROLE_H2) || defined(LWS_HTTP_HEADERS_ALL)\n\tWSI_TOKEN_HTTP_ACCEPT_CHARSET,\n#endif\n\tWSI_TOKEN_HTTP_ACCEPT_RANGES,\n#if defined(LWS_WITH_HTTP_UNCOMMON_HEADERS) || defined(LWS_ROLE_H2) || defined(LWS_HTTP_HEADERS_ALL)\n\tWSI_TOKEN_HTTP_ACCESS_CONTROL_ALLOW_ORIGIN,\n#endif\n\tWSI_TOKEN_HTTP_AGE,\n\tWSI_TOKEN_HTTP_ALLOW,\n\tWSI_TOKEN_HTTP_CONTENT_DISPOSITION,\n\tWSI_TOKEN_HTTP_CONTENT_ENCODING,\n\tWSI_TOKEN_HTTP_CONTENT_LANGUAGE,\n\tWSI_TOKEN_HTTP_CONTENT_LOCATION,\n\tWSI_TOKEN_HTTP_CONTENT_RANGE,\n\tWSI_TOKEN_HTTP_ETAG,\n\tWSI_TOKEN_HTTP_EXPECT,\n\tWSI_TOKEN_HTTP_EXPIRES,\n\tWSI_TOKEN_HTTP_FROM,\n\tWSI_TOKEN_HTTP_IF_MATCH,\n\tWSI_TOKEN_HTTP_IF_RANGE,\n\tWSI_TOKEN_HTTP_IF_UNMODIFIED_SINCE,\n\tWSI_TOKEN_HTTP_LAST_MODIFIED,\n\tWSI_TOKEN_HTTP_LINK,\n\tWSI_TOKEN_HTTP_LOCATION,\n#if defined(LWS_WITH_HTTP_UNCOMMON_HEADERS) || defined(LWS_ROLE_H2) || defined(LWS_HTTP_HEADERS_ALL)\n\tWSI_TOKEN_HTTP_MAX_FORWARDS,\n\tWSI_TOKEN_HTTP_PROXY_AUTHENTICATE,\n\tWSI_TOKEN_HTTP_PROXY_AUTHORIZATION,\n#endif\n\tWSI_TOKEN_HTTP_REFRESH,\n\tWSI_TOKEN_HTTP_RETRY_AFTER,\n\tWSI_TOKEN_HTTP_SERVER,\n\tWSI_TOKEN_HTTP_SET_COOKIE,\n#if defined(LWS_WITH_HTTP_UNCOMMON_HEADERS) || defined(LWS_ROLE_H2) || defined(LWS_HTTP_HEADERS_ALL)\n\tWSI_TOKEN_HTTP_STRICT_TRANSPORT_SECURITY,\n#endif\n\tWSI_TOKEN_HTTP_TRANSFER_ENCODING,\n#if defined(LWS_WITH_HTTP_UNCOMMON_HEADERS) || defined(LWS_ROLE_H2) || defined(LWS_HTTP_HEADERS_ALL)\n\tWSI_TOKEN_HTTP_USER_AGENT,\n\tWSI_TOKEN_HTTP_VARY,\n\tWSI_TOKEN_HTTP_VIA,\n\tWSI_TOKEN_HTTP_WWW_AUTHENTICATE,\n#endif\n#if defined(LWS_WITH_HTTP_UNCOMMON_HEADERS) || defined(LWS_HTTP_HEADERS_ALL)\n\tWSI_TOKEN_PATCH_URI,\n\tWSI_TOKEN_PUT_URI,\n\tWSI_TOKEN_DELETE_URI,\n#endif\n\n\tWSI_TOKEN_HTTP_URI_ARGS,\n#if defined(LWS_WITH_HTTP_UNCOMMON_HEADERS) || defined(LWS_HTTP_HEADERS_ALL)\n\tWSI_TOKEN_PROXY,\n\tWSI_TOKEN_HTTP_X_REAL_IP,\n#endif\n\tWSI_TOKEN_HTTP1_0,\n\tWSI_TOKEN_X_FORWARDED_FOR,\n\tWSI_TOKEN_CONNECT,\n\tWSI_TOKEN_HEAD_URI,\n#if defined(LWS_WITH_HTTP_UNCOMMON_HEADERS) || defined(LWS_ROLE_H2) || defined(LWS_HTTP_HEADERS_ALL)\n\tWSI_TOKEN_TE,\n\tWSI_TOKEN_REPLAY_NONCE, /* ACME */\n#endif\n#if defined(LWS_ROLE_H2) || defined(LWS_HTTP_HEADERS_ALL)\n\tWSI_TOKEN_COLON_PROTOCOL,\n#endif\n\tWSI_TOKEN_X_AUTH_TOKEN,\n\tWSI_TOKEN_DSS_SIGNATURE,\n\n\t/****** add new things just above ---^ ******/\n\n\t/* use token storage to stash these internally, not for\n\t * user use */\n\n\t_WSI_TOKEN_CLIENT_SENT_PROTOCOLS,\n\t_WSI_TOKEN_CLIENT_PEER_ADDRESS,\n\t_WSI_TOKEN_CLIENT_URI,\n\t_WSI_TOKEN_CLIENT_HOST,\n\t_WSI_TOKEN_CLIENT_ORIGIN,\n\t_WSI_TOKEN_CLIENT_METHOD,\n\t_WSI_TOKEN_CLIENT_IFACE,\n\t_WSI_TOKEN_CLIENT_ALPN,\n\n\t/* always last real token index*/\n\tWSI_TOKEN_COUNT,\n\n\t/* parser state additions, no storage associated */\n\tWSI_TOKEN_NAME_PART,\n#if defined(LWS_WITH_CUSTOM_HEADERS) || defined(LWS_HTTP_HEADERS_ALL)\n\tWSI_TOKEN_UNKNOWN_VALUE_PART,\n#endif\n\tWSI_TOKEN_SKIPPING,\n\tWSI_TOKEN_SKIPPING_SAW_CR,\n\tWSI_PARSING_COMPLETE,\n\tWSI_INIT_TOKEN_MUXURL,\n};\n\nstruct lws_token_limits {\n\tunsigned short token_limit[WSI_TOKEN_COUNT]; /**< max chars for this token */\n};\n\nenum lws_h2_settings {\n\tH2SET_HEADER_TABLE_SIZE = 1,\n\tH2SET_ENABLE_PUSH,\n\tH2SET_MAX_CONCURRENT_STREAMS,\n\tH2SET_INITIAL_WINDOW_SIZE,\n\tH2SET_MAX_FRAME_SIZE,\n\tH2SET_MAX_HEADER_LIST_SIZE,\n\tH2SET_RESERVED7,\n\tH2SET_ENABLE_CONNECT_PROTOCOL, /* defined in mcmanus-httpbis-h2-ws-02 */\n\n\tH2SET_COUNT /* always last */\n};\n\n/**\n * lws_token_to_string() - returns a textual representation of a hdr token index\n *\n * \\param token: token index\n */\nLWS_VISIBLE LWS_EXTERN const unsigned char *\nlws_token_to_string(enum lws_token_indexes token);\n\n/**\n * lws_hdr_total_length: report length of all fragments of a header totalled up\n *\t\tThe returned length does not include the space for a\n *\t\tterminating '\\0'\n *\n * \\param wsi: websocket connection\n * \\param h: which header index we are interested in\n */\nLWS_VISIBLE LWS_EXTERN int LWS_WARN_UNUSED_RESULT\nlws_hdr_total_length(struct lws *wsi, enum lws_token_indexes h);\n\n/**\n * lws_hdr_fragment_length: report length of a single fragment of a header\n *\t\tThe returned length does not include the space for a\n *\t\tterminating '\\0'\n *\n * \\param wsi: websocket connection\n * \\param h: which header index we are interested in\n * \\param frag_idx: which fragment of h we want to get the length of\n */\nLWS_VISIBLE LWS_EXTERN int LWS_WARN_UNUSED_RESULT\nlws_hdr_fragment_length(struct lws *wsi, enum lws_token_indexes h,\n\t\t\tint frag_idx);\n\n/**\n * lws_hdr_copy() - copy all fragments of the given header to a buffer\n *\t\tThe buffer length len must include space for an additional\n *\t\tterminating '\\0', or it will fail returning -1.\n *\n * \\param wsi: websocket connection\n * \\param dest: destination buffer\n * \\param len: length of destination buffer\n * \\param h: which header index we are interested in\n *\n * copies the whole, aggregated header, even if it was delivered in\n * several actual headers piece by piece.  Returns -1 or length of the whole\n * header.\n */\nLWS_VISIBLE LWS_EXTERN int\nlws_hdr_copy(struct lws *wsi, char *dest, int len, enum lws_token_indexes h);\n\n/**\n * lws_hdr_copy_fragment() - copy a single fragment of the given header to a buffer\n *\t\tThe buffer length len must include space for an additional\n *\t\tterminating '\\0', or it will fail returning -1.\n *\t\tIf the requested fragment index is not present, it fails\n *\t\treturning -1.\n *\n * \\param wsi: websocket connection\n * \\param dest: destination buffer\n * \\param len: length of destination buffer\n * \\param h: which header index we are interested in\n * \\param frag_idx: which fragment of h we want to copy\n *\n * Normally this is only useful\n * to parse URI arguments like ?x=1&y=2, token index WSI_TOKEN_HTTP_URI_ARGS\n * fragment 0 will contain \"x=1\" and fragment 1 \"y=2\"\n */\nLWS_VISIBLE LWS_EXTERN int\nlws_hdr_copy_fragment(struct lws *wsi, char *dest, int len,\n\t\t      enum lws_token_indexes h, int frag_idx);\n\n/**\n * lws_hdr_custom_length() - return length of a custom header\n *\n * \\param wsi: websocket connection\n * \\param name: header string (including terminating :)\n * \\param nlen: length of name\n *\n * Lws knows about 100 common http headers, and parses them into indexes when\n * it recognizes them.  When it meets a header that it doesn't know, it stores\n * the name and value directly, and you can look them up using\n * lws_hdr_custom_length() and lws_hdr_custom_copy().\n *\n * This api returns -1, or the length of the value part of the header if it\n * exists.  Lws must be built with LWS_WITH_CUSTOM_HEADERS (on by default) to\n * use this api.\n */\nLWS_VISIBLE LWS_EXTERN int\nlws_hdr_custom_length(struct lws *wsi, const char *name, int nlen);\n\n/**\n * lws_hdr_custom_copy() - copy value part of a custom header\n *\n * \\param wsi: websocket connection\n * \\param dst: pointer to buffer to receive the copy\n * \\param len: number of bytes available at dst\n * \\param name: header string (including terminating :)\n * \\param nlen: length of name\n *\n * Lws knows about 100 common http headers, and parses them into indexes when\n * it recognizes them.  When it meets a header that it doesn't know, it stores\n * the name and value directly, and you can look them up using\n * lws_hdr_custom_length() and lws_hdr_custom_copy().\n *\n * This api returns -1, or the length of the string it copied into dst if it\n * was big enough to contain both the string and an extra terminating NUL. Lws\n * must be built with LWS_WITH_CUSTOM_HEADERS (on by default) to use this api.\n */\nLWS_VISIBLE LWS_EXTERN int\nlws_hdr_custom_copy(struct lws *wsi, char *dst, int len, const char *name,\n\t\t    int nlen);\n\n/**\n * lws_get_urlarg_by_name_safe() - get copy and return length of y for x=y urlargs\n *\n * \\param wsi: the connection to check\n * \\param name: the arg name, like \"token\" or \"token=\"\n * \\param buf: the buffer to receive the urlarg (including the name= part)\n * \\param len: the length of the buffer to receive the urlarg\n *\n * Returns -1 if not present, else the length of y in the urlarg name=y.  If\n * zero or greater, then buf contains a copy of the string y.  Any = after the\n * name match is trimmed off if the name does not end with = itself.\n *\n * This returns the explicit length and so can deal with binary blobs that are\n * percent-encoded.  It also makes sure buf has a NUL just after the valid\n * length so it can work with NUL-based apis if you don't care about truncation.\n *\n * buf may have been written even when -1 is returned indicating no match.\n *\n * Use this in place of lws_get_urlarg_by_name() that does not return an\n * explicit length.\n *\n * Use lws_get_urlarg_by_name_safe() instead of this, which returns the length.\n */\nLWS_VISIBLE LWS_EXTERN int\nlws_get_urlarg_by_name_safe(struct lws *wsi, const char *name, char *buf, int len);\n\n/**\n * lws_get_urlarg_by_name() - return pointer to arg value if present\n *\n * \\param wsi: the connection to check\n * \\param name: the arg name, like \"token=\"\n * \\param buf: the buffer to receive the urlarg (including the name= part)\n * \\param len: the length of the buffer to receive the urlarg\n *\n *     Returns NULL if not found or a pointer inside buf to just after the\n *     name= part.\n *\n * This assumed the argument can be represented with a NUL-terminated string.\n * It can't correctly deal with binary values encoded with %XX, eg. %00 will\n * be understood to terminate the string.\n *\n * Use lws_get_urlarg_by_name_safe() instead of this, which returns the length.\n */\nLWS_VISIBLE LWS_EXTERN const char *\nlws_get_urlarg_by_name(struct lws *wsi, const char *name, char *buf, int len)\n/* LWS_WARN_DEPRECATED */;\n///@}\n\n/*! \\defgroup HTTP-headers-create HTTP headers: create\n *\n * ## HTTP headers: Create\n *\n * These apis allow you to create HTTP response headers in a way compatible with\n * both HTTP/1.x and HTTP/2.\n *\n * They each append to a buffer taking care about the buffer end, which is\n * passed in as a pointer.  When data is written to the buffer, the current\n * position p is updated accordingly.\n *\n * All of these apis are LWS_WARN_UNUSED_RESULT as they can run out of space\n * and fail with nonzero return.\n */\n///@{\n\n#define LWSAHH_CODE_MASK\t\t\t((1 << 16) - 1)\n#define LWSAHH_FLAG_NO_SERVER_NAME\t\t(1 << 30)\n\n/**\n * lws_add_http_header_status() - add the HTTP response status code\n *\n * \\param wsi: the connection to check\n * \\param code: an HTTP code like 200, 404 etc (see enum http_status)\n * \\param p: pointer to current position in buffer pointer\n * \\param end: pointer to end of buffer\n *\n * Adds the initial response code, so should be called first.\n *\n * Code may additionally take OR'd flags:\n *\n *    LWSAHH_FLAG_NO_SERVER_NAME:  don't apply server name header this time\n */\nLWS_VISIBLE LWS_EXTERN int LWS_WARN_UNUSED_RESULT\nlws_add_http_header_status(struct lws *wsi,\n\t\t\t   unsigned int code, unsigned char **p,\n\t\t\t   unsigned char *end);\n/**\n * lws_add_http_header_by_name() - append named header and value\n *\n * \\param wsi: the connection to check\n * \\param name: the hdr name, like \"my-header:\"\n * \\param value: the value after the = for this header\n * \\param length: the length of the value\n * \\param p: pointer to current position in buffer pointer\n * \\param end: pointer to end of buffer\n *\n * Appends name: value to the headers\n */\nLWS_VISIBLE LWS_EXTERN int LWS_WARN_UNUSED_RESULT\nlws_add_http_header_by_name(struct lws *wsi, const unsigned char *name,\n\t\t\t    const unsigned char *value, int length,\n\t\t\t    unsigned char **p, unsigned char *end);\n/**\n * lws_add_http_header_by_token() - append given header and value\n *\n * \\param wsi: the connection to check\n * \\param token: the token index for the hdr\n * \\param value: the value after the = for this header\n * \\param length: the length of the value\n * \\param p: pointer to current position in buffer pointer\n * \\param end: pointer to end of buffer\n *\n * Appends name=value to the headers, but is able to take advantage of better\n * HTTP/2 coding mechanisms where possible.\n */\nLWS_VISIBLE LWS_EXTERN int LWS_WARN_UNUSED_RESULT\nlws_add_http_header_by_token(struct lws *wsi, enum lws_token_indexes token,\n\t\t\t     const unsigned char *value, int length,\n\t\t\t     unsigned char **p, unsigned char *end);\n/**\n * lws_add_http_header_content_length() - append content-length helper\n *\n * \\param wsi: the connection to check\n * \\param content_length: the content length to use\n * \\param p: pointer to current position in buffer pointer\n * \\param end: pointer to end of buffer\n *\n * Appends content-length: content_length to the headers\n */\nLWS_VISIBLE LWS_EXTERN int LWS_WARN_UNUSED_RESULT\nlws_add_http_header_content_length(struct lws *wsi,\n\t\t\t\t   lws_filepos_t content_length,\n\t\t\t\t   unsigned char **p, unsigned char *end);\n/**\n * lws_finalize_http_header() - terminate header block\n *\n * \\param wsi: the connection to check\n * \\param p: pointer to current position in buffer pointer\n * \\param end: pointer to end of buffer\n *\n * Indicates no more headers will be added\n */\nLWS_VISIBLE LWS_EXTERN int LWS_WARN_UNUSED_RESULT\nlws_finalize_http_header(struct lws *wsi, unsigned char **p,\n\t\t\t unsigned char *end);\n\n/**\n * lws_finalize_write_http_header() - Helper finializing and writing http headers\n *\n * \\param wsi: the connection to check\n * \\param start: pointer to the start of headers in the buffer, eg &buf[LWS_PRE]\n * \\param p: pointer to current position in buffer pointer\n * \\param end: pointer to end of buffer\n *\n * Terminates the headers correctly accoring to the protocol in use (h1 / h2)\n * and writes the headers.  Returns nonzero for error.\n */\nLWS_VISIBLE LWS_EXTERN int LWS_WARN_UNUSED_RESULT\nlws_finalize_write_http_header(struct lws *wsi, unsigned char *start,\n\t\t\t       unsigned char **p, unsigned char *end);\n\n#define LWS_ILLEGAL_HTTP_CONTENT_LEN ((lws_filepos_t)-1ll)\n\n/**\n * lws_add_http_common_headers() - Helper preparing common http headers\n *\n * \\param wsi: the connection to check\n * \\param code: an HTTP code like 200, 404 etc (see enum http_status)\n * \\param content_type: the content type, like \"text/html\"\n * \\param content_len: the content length, in bytes\n * \\param p: pointer to current position in buffer pointer\n * \\param end: pointer to end of buffer\n *\n * Adds the initial response code, so should be called first.\n *\n * Code may additionally take OR'd flags:\n *\n *    LWSAHH_FLAG_NO_SERVER_NAME:  don't apply server name header this time\n *\n * This helper just calls public apis to simplify adding headers that are\n * commonly needed.  If it doesn't fit your case, or you want to add additional\n * headers just call the public apis directly yourself for what you want.\n *\n * You can miss out the content length header by providing the constant\n * LWS_ILLEGAL_HTTP_CONTENT_LEN for the content_len.\n *\n * It does not call lws_finalize_http_header(), to allow you to add further\n * headers after calling this.  You will need to call that yourself at the end.\n */\nLWS_VISIBLE LWS_EXTERN int LWS_WARN_UNUSED_RESULT\nlws_add_http_common_headers(struct lws *wsi, unsigned int code,\n\t\t\t    const char *content_type, lws_filepos_t content_len,\n\t\t\t    unsigned char **p, unsigned char *end);\n\nenum {\n\tLWSHUMETH_GET,\n\tLWSHUMETH_POST,\n\tLWSHUMETH_OPTIONS,\n\tLWSHUMETH_PUT,\n\tLWSHUMETH_PATCH,\n\tLWSHUMETH_DELETE,\n\tLWSHUMETH_CONNECT,\n\tLWSHUMETH_HEAD,\n\tLWSHUMETH_COLON_PATH,\n};\n\n/**\n * lws_http_get_uri_and_method() - Get information on method and url\n *\n * \\param wsi: the connection to get information on\n * \\param puri_ptr: points to pointer to set to url\n * \\param puri_len: points to int to set to uri length\n *\n * Returns -1 or method index as one of the LWSHUMETH_ constants\n *\n * If returns method, *puri_ptr is set to the method's URI string and *puri_len\n * to its length\n */\n\nLWS_VISIBLE LWS_EXTERN int LWS_WARN_UNUSED_RESULT\nlws_http_get_uri_and_method(struct lws *wsi, char **puri_ptr, int *puri_len);\n\n///@}\n\n/*! \\defgroup urlendec Urlencode and Urldecode\n * \\ingroup http\n *\n * ##HTML chunked Substitution\n *\n * APIs for receiving chunks of text, replacing a set of variable names via\n * a callback, and then prepending and appending HTML chunked encoding\n * headers.\n */\n//@{\n\n/**\n * lws_urlencode() - like strncpy but with urlencoding\n *\n * \\param escaped: output buffer\n * \\param string: input buffer ('/0' terminated)\n * \\param len: output buffer max length\n *\n * Because urlencoding expands the output string, it's not\n * possible to do it in-place, ie, with escaped == string\n */\nLWS_VISIBLE LWS_EXTERN const char *\nlws_urlencode(char *escaped, const char *string, int len);\n\n/*\n * URLDECODE 1 / 2\n *\n * This simple urldecode only operates until the first '\\0' and requires the\n * data to exist all at once\n */\n/**\n * lws_urldecode() - like strncpy but with urldecoding\n *\n * \\param string: output buffer\n * \\param escaped: input buffer ('\\0' terminated)\n * \\param len: output buffer max length\n *\n * This is only useful for '\\0' terminated strings\n *\n * Since urldecoding only shrinks the output string, it is possible to\n * do it in-place, ie, string == escaped\n *\n * Returns 0 if completed OK or nonzero for urldecode violation (non-hex chars\n * where hex required, etc)\n */\nLWS_VISIBLE LWS_EXTERN int\nlws_urldecode(char *string, const char *escaped, int len);\n///@}\n\n/**\n * lws_http_date_render_from_unix() - render unixtime as RFC7231 date string\n *\n * \\param buf:\t\tDestination string buffer\n * \\param len:\t\tavilable length of dest string buffer in bytes\n * \\param t:\t\tpointer to the time_t to render\n *\n * Returns 0 if time_t is rendered into the string buffer successfully, else\n * nonzero.\n */\nLWS_VISIBLE LWS_EXTERN int\nlws_http_date_render_from_unix(char *buf, size_t len, const time_t *t);\n\n/**\n * lws_http_date_parse_unix() - parse a RFC7231 date string into unixtime\n *\n * \\param b:\t\tSource string buffer\n * \\param len:\t\tavilable length of source string buffer in bytes\n * \\param t:\t\tpointer to the destination time_t to set\n *\n * Returns 0 if string buffer parsed as RFC7231 time successfully, and\n * *t set to the parsed unixtime, else return nonzero.\n */\nLWS_VISIBLE LWS_EXTERN int\nlws_http_date_parse_unix(const char *b, size_t len, time_t *t);\n\n/**\n * lws_http_check_retry_after() - increase a timeout if retry-after present\n *\n * \\param wsi:\t\thttp stream this relates to\n * \\param us_interval_in_out: default us retry interval on entry may be updated\n *\n * This function may extend the incoming retry interval if the server has\n * requested that using retry-after: header.  It won't reduce the incoming\n * retry interval, only leave it alone or increase it.\n *\n * *us_interval_in_out should be set to a default retry interval on entry, if\n * the wsi has a retry-after time or interval that resolves to an interval\n * longer than the entry *us_interval_in_out, that will be updated to the longer\n * interval and return 0.\n *\n * If no usable retry-after or the time is now or in the past,\n * *us_interval_in_out is left alone and the function returns nonzero.\n */\nLWS_VISIBLE LWS_EXTERN int\nlws_http_check_retry_after(struct lws *wsi, lws_usec_t *us_interval_in_out);\n\n/**\n * lws_return_http_status() - Return simple http status\n * \\param wsi:\t\tWebsocket instance (available from user callback)\n * \\param code:\t\tStatus index, eg, 404\n * \\param html_body:\t\tUser-readable HTML description < 1KB, or NULL\n *\n *\tHelper to report HTTP errors back to the client cleanly and\n *\tconsistently\n */\nLWS_VISIBLE LWS_EXTERN int\nlws_return_http_status(struct lws *wsi, unsigned int code,\n\t\t       const char *html_body);\n\n/**\n * lws_http_redirect() - write http redirect out on wsi\n *\n * \\param wsi:\twebsocket connection\n * \\param code:\tHTTP response code (eg, 301)\n * \\param loc:\twhere to redirect to\n * \\param len:\tlength of loc\n * \\param p:\tpointer current position in buffer (updated as we write)\n * \\param end:\tpointer to end of buffer\n *\n * Returns amount written, or < 0 indicating fatal write failure.\n */\nLWS_VISIBLE LWS_EXTERN int LWS_WARN_UNUSED_RESULT\nlws_http_redirect(struct lws *wsi, int code, const unsigned char *loc, int len,\n\t\t  unsigned char **p, unsigned char *end);\n\n/**\n * lws_http_transaction_completed() - wait for new http transaction or close\n * \\param wsi:\twebsocket connection\n *\n *\tReturns 1 if the HTTP connection must close now\n *\tReturns 0 and resets connection to wait for new HTTP header /\n *\t  transaction if possible\n */\nLWS_VISIBLE LWS_EXTERN int LWS_WARN_UNUSED_RESULT\nlws_http_transaction_completed(struct lws *wsi);\n\n/**\n * lws_http_headers_detach() - drop the associated headers storage and allow\n *\t\t\t\tit to be reused by another connection\n * \\param wsi:\thttp connection\n *\n * If the wsi has an ah headers struct attached, detach it.\n */\nLWS_VISIBLE LWS_EXTERN int\nlws_http_headers_detach(struct lws *wsi);\n\n/**\n * lws_http_mark_sse() - called to indicate this http stream is now doing SSE\n *\n * \\param wsi:\thttp connection\n *\n * Cancel any timeout on the wsi, and for h2, mark the network connection as\n * containing an immortal stream for the duration the SSE stream is open.\n */\nLWS_VISIBLE LWS_EXTERN int\nlws_http_mark_sse(struct lws *wsi);\n\n/**\n * lws_h2_client_stream_long_poll_rxonly() - h2 stream to immortal read-only\n *\n * \\param wsi: h2 stream client wsi\n *\n * Send END_STREAM-flagged zero-length DATA frame to set client stream wsi into\n * half-closed (local) and remote into half-closed (remote).  Set the client\n * stream wsi to be immortal (not subject to timeouts).\n *\n * Used if the remote server supports immortal long poll to put the stream into\n * a read-only state where it can wait as long as needed for rx.\n *\n * Returns 0 if the process (which happens asynchronously) started or non-zero\n * if it wasn't an h2 stream.\n */\nLWS_VISIBLE LWS_EXTERN int\nlws_h2_client_stream_long_poll_rxonly(struct lws *wsi);\n\n/**\n * lws_http_compression_apply() - apply an http compression transform\n *\n * \\param wsi: the wsi to apply the compression transform to\n * \\param name: NULL, or the name of the compression transform, eg, \"deflate\"\n * \\param p: pointer to pointer to headers buffer\n * \\param end: pointer to end of headers buffer\n * \\param decomp: 0 = add compressor to wsi, 1 = add decompressor\n *\n * This allows transparent compression of dynamically generated HTTP.  The\n * requested compression (eg, \"deflate\") is only applied if the client headers\n * indicated it was supported (and it has support in lws), otherwise it's a NOP.\n *\n * If the requested compression method is NULL, then the supported compression\n * formats are tried, and for non-decompression (server) mode the first that's\n * found on the client's accept-encoding header is chosen.\n *\n * NOTE: the compression transform, same as h2 support, relies on the user\n * code using LWS_WRITE_HTTP and then LWS_WRITE_HTTP_FINAL on the last part\n * written.  The internal lws fileserving code already does this.\n *\n * If the library was built without the cmake option\n * LWS_WITH_HTTP_STREAM_COMPRESSION set, then a NOP is provided for this api,\n * allowing user code to build either way and use compression if available.\n */\nLWS_VISIBLE LWS_EXTERN int\nlws_http_compression_apply(struct lws *wsi, const char *name,\n\t\t\t   unsigned char **p, unsigned char *end, char decomp);\n\n/**\n * lws_http_is_redirected_to_get() - true if redirected to GET\n *\n * \\param wsi: the wsi to check\n *\n * Check if the wsi is currently in GET mode, after, eg, doing a POST and\n * receiving a 303.\n */\nLWS_VISIBLE LWS_EXTERN int\nlws_http_is_redirected_to_get(struct lws *wsi);\n\n/**\n * lws_http_cookie_get() - return copy of named cookie if present\n *\n * \\param wsi: the wsi to check\n * \\param name: name of the cookie\n * \\param buf: buffer to store the cookie contents into\n * \\param max_len: on entry, maximum length of buf... on exit, used len of buf\n *\n * If no cookie header, or no cookie of the requested name, or the value is\n * larger than can fit in buf, returns nonzero.\n *\n * If the cookie is found, copies its value into buf with a terminating NUL,\n * sets *max_len to the used length, and returns 0.\n *\n * This handles the parsing of the possibly multi-cookie header string and\n * terminating the requested cookie at the next ; if present.\n */\nLWS_VISIBLE LWS_EXTERN int\nlws_http_cookie_get(struct lws *wsi, const char *name, char *buf, size_t *max);\n\n/**\n * lws_http_client_http_error() - determine if the response code indicates an error\n *\n * \\param code: the response code to test\n *\n * Returns nonzero if the code indicates an error, else zero if reflects a\n * non-error condition\n */\n#define lws_http_client_http_resp_is_error(code) (!(code < 400))\n\n/**\n * lws_h2_update_peer_txcredit() - manually update stream peer tx credit\n *\n * \\param wsi: the h2 child stream whose peer credit to change\n * \\param sid: the stream ID, or LWS_H2_STREAM_SID for the wsi stream ID\n * \\param bump: signed change to confer upon peer tx credit for sid\n *\n * In conjunction with LCCSCF_H2_MANUAL_RXFLOW flag, allows the user code to\n * selectively starve the remote peer of the ability to send us data on a client\n * connection.\n *\n * Normally lws sends an initial window size for the peer to send to it of 0,\n * but during the header phase it sends a WINDOW_UPDATE to increase the amount\n * available.  LCCSCF_H2_MANUAL_RXFLOW restricts this initial increase in tx\n * credit for the stream, before it has been asked to send us anything, to the\n * amount specified in the client info .manual_initial_tx_credit member, and\n * this api can be called to send the other side permission to send us up to\n * \\p bump additional bytes.\n *\n * The nwsi tx credit is updated automatically for exactly what was sent to us\n * on a stream with LCCSCF_H2_MANUAL_RXFLOW flag, but the stream's own tx credit\n * must be handled manually by user code via this api.\n *\n * Returns 0 for success or nonzero for failure.\n */\n#define LWS_H2_STREAM_SID -1\nLWS_VISIBLE LWS_EXTERN int\nlws_h2_update_peer_txcredit(struct lws *wsi, unsigned int sid, int bump);\n\n\n/**\n * lws_h2_get_peer_txcredit_estimate() - return peer tx credit estimate\n *\n * \\param wsi: the h2 child stream whose peer credit estimate to return\n *\n * Returns the estimated amount of tx credit at the peer, in other words the\n * number of bytes the peer is authorized to send to us.\n *\n * It's an 'estimate' because we don't know how much is already in flight\n * towards us and actually already used.\n */\nLWS_VISIBLE LWS_EXTERN int\nlws_h2_get_peer_txcredit_estimate(struct lws *wsi);\n\n///@}\n\n",
			"file": "libwebsockets/include/libwebsockets/lws-http.h",
			"file_size": 35735,
			"file_write_time": 132716304932634818,
			"settings":
			{
				"buffer_size": 35735,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAB41AAAAAAAAHzUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHjUAAAAAAAAeNQAAAAAAAAAAAAAAAAAA"
				],
				[
					4,
					1,
					"left_delete",
					null,
					"AQAAAB41AAAAAAAAHjUAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAHzUAAAAAAAAfNQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "/*\n * libwebsockets - small server side websockets and web server implementation\n *\n * Copyright (C) 2010 - 2019 Andy Green <andy@warmcat.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\n#include \"private-lib-core.h\"\n\n#if !defined(SOL_TCP) && defined(IPPROTO_TCP)\n#define SOL_TCP IPPROTO_TCP\n#endif\n\nconst char * const method_names[] = {\n\t\"GET\", \"POST\",\n#if defined(LWS_WITH_HTTP_UNCOMMON_HEADERS)\n\t\"OPTIONS\", \"PUT\", \"PATCH\", \"DELETE\",\n#endif\n\t\"CONNECT\", \"HEAD\",\n#ifdef LWS_WITH_HTTP2\n\t\":path\",\n#endif\n\t};\n\n#if defined(LWS_WITH_FILE_OPS)\nstatic const char * const intermediates[] = { \"private\", \"public\" };\n#endif\n\n/*\n * return 0: all done\n *        1: nonfatal error\n *       <0: fatal error\n *\n *       REQUIRES CONTEXT LOCK HELD\n */\n\n#if defined(LWS_WITH_SERVER)\n\nstruct vh_sock_args {\n\tconst struct lws_context_creation_info\t*info;\n\tstruct lws_vhost\t\t\t*vhost;\n\tint\t\t\t\t\taf;\n};\n\n\nstatic int\ncheck_extant(struct lws_dll2 *d, void *user)\n{\n\tstruct lws *wsi = lws_container_of(d, struct lws, listen_list);\n\tstruct vh_sock_args *a = (struct vh_sock_args *)user;\n\n\tif (!lws_vhost_compare_listen(wsi->a.vhost, a->vhost))\n\t\treturn 0;\n\n\tif (wsi->af != a ->af)\n\t\treturn 0;\n\n\tlwsl_notice(\" using listen skt from vhost %s\\n\", wsi->a.vhost->name);\n\n\treturn 1;\n}\n\n/*\n * Creates a single listen socket of a specific AF\n */\n\nint\n_lws_vhost_init_server_af(struct vh_sock_args *a)\n{\n\tstruct lws_context *cx = a->vhost->context;\n\tstruct lws_context_per_thread *pt;\n\tint n, opt = 1, limit = 1;\n\tlws_sockfd_type sockfd;\n\tstruct lws *wsi;\n\tint m = 0, is;\n#if defined(LWS_WITH_IPV6)\n\tint value = 1;\n#endif\n\n\t(void)method_names;\n\t(void)opt;\n\n\tlwsl_info(\"%s: af %d\\n\", __func__, (int)a->af);\n\n\tif (lws_vhost_foreach_listen_wsi(a->vhost->context, a, check_extant))\n\t\treturn 0;\n\ndeal:\n\n\tif (a->vhost->iface) {\n\n\t\t/*\n\t\t * let's check before we do anything else about the disposition\n\t\t * of the interface he wants to bind to...\n\t\t */\n\t\tis = lws_socket_bind(a->vhost, NULL, LWS_SOCK_INVALID,\n\t\t\t\t     a->vhost->listen_port, a->vhost->iface,\n\t\t\t\t     a->af);\n\t\tlwsl_debug(\"initial if check says %d\\n\", is);\n\n\t\tif (is == LWS_ITOSA_BUSY)\n\t\t\t/* treat as fatal */\n\t\t\treturn -1;\n\n\t\tlws_start_foreach_llp(struct lws_vhost **, pv,\n\t\t\t\t      cx->no_listener_vhost_list) {\n\t\t\tif (is >= LWS_ITOSA_USABLE && *pv == a->vhost) {\n\t\t\t\t/* on the list and shouldn't be: remove it */\n\t\t\t\tlwsl_debug(\"deferred iface: removing vh %s\\n\",\n\t\t\t\t\t\t(*pv)->name);\n\t\t\t\t*pv = a->vhost->no_listener_vhost_list;\n\t\t\t\ta->vhost->no_listener_vhost_list = NULL;\n\t\t\t\tgoto done_list;\n\t\t\t}\n\t\t\tif (is < LWS_ITOSA_USABLE && *pv == a->vhost)\n\t\t\t\tgoto done_list;\n\t\t} lws_end_foreach_llp(pv, no_listener_vhost_list);\n\n\t\t/* not on the list... */\n\n\t\tif (is < LWS_ITOSA_USABLE) {\n\n\t\t\t/* ... but needs to be: so add it */\n\n\t\t\tlwsl_debug(\"deferred iface: adding vh %s\\n\",\n\t\t\t\t\ta->vhost->name);\n\t\t\ta->vhost->no_listener_vhost_list =\n\t\t\t\t\tcx->no_listener_vhost_list;\n\t\t\tcx->no_listener_vhost_list = a->vhost;\n\t\t}\n\ndone_list:\n\n\t\tswitch (is) {\n\t\tdefault:\n\t\t\tbreak;\n\t\tcase LWS_ITOSA_NOT_EXIST:\n\t\t\t/* can't add it */\n\t\t\tif (!a->info)\n\t\t\t\treturn -1;\n\n\t\t\t/* first time */\n\t\t\tlwsl_err(\"%s: VH %s: iface %s port %d DOESN'T EXIST\\n\",\n\t\t\t\t __func__, a->vhost->name, a->vhost->iface,\n\t\t\t\t a->vhost->listen_port);\n\n\t\t\treturn (a->info->options &\n\t\t\t\tLWS_SERVER_OPTION_FAIL_UPON_UNABLE_TO_BIND) ==\n\t\t\t\tLWS_SERVER_OPTION_FAIL_UPON_UNABLE_TO_BIND ?\n\t\t\t\t-1 : 1;\n\n\t\tcase LWS_ITOSA_NOT_USABLE:\n\t\t\t/* can't add it */\n\t\t\tif (!a->info) /* first time */\n\t\t\t\treturn -1;\n\n\t\t\tlwsl_err(\"%s: VH %s: iface %s port %d NOT USABLE\\n\",\n\t\t\t\t __func__, a->vhost->name, a->vhost->iface,\n\t\t\t\t a->vhost->listen_port);\n\n\t\t\treturn (a->info->options &\n\t\t\t\tLWS_SERVER_OPTION_FAIL_UPON_UNABLE_TO_BIND) ==\n\t\t\t\tLWS_SERVER_OPTION_FAIL_UPON_UNABLE_TO_BIND ?\n\t\t\t\t-1 : 1;\n\t\t}\n\t}\n\n\t(void)n;\n#if defined(__linux__)\n\t/*\n\t * A Unix domain sockets cannot be bound multiple times, even if we\n\t * set the SO_REUSE* options on.\n\t *\n\t * However on recent linux, each thread is able to independently listen.\n\t *\n\t * So we can assume creating just one listening socket for a multi-\n\t * threaded environment will typically work.\n\t */\n\tif (a->af != AF_UNIX)\n\t\tlimit = cx->count_threads;\n#endif\n\n\tfor (m = 0; m < limit; m++) {\n\n\t\tsockfd = lws_fi(&a->vhost->fic, \"listenskt\") ?\n\t\t\t\t\tLWS_SOCK_INVALID :\n\t\t\t\t\tsocket(a->af, SOCK_STREAM, 0);\n\n\t\tif (sockfd == LWS_SOCK_INVALID) {\n\t\t\tlwsl_err(\"ERROR opening socket\\n\");\n\t\t\treturn 1;\n\t\t}\n\n#if !defined(LWS_PLAT_FREERTOS)\n#if (defined(WIN32) || defined(_WIN32)) && defined(SO_EXCLUSIVEADDRUSE)\n\t\t/*\n\t\t * only accept that we are the only listener on the port\n\t\t * https://msdn.microsoft.com/zh-tw/library/\n\t\t *    windows/desktop/ms740621(v=vs.85).aspx\n\t\t *\n\t\t * for lws, to match Linux, we default to exclusive listen\n\t\t */\n\t\tif (!lws_check_opt(a->vhost->options,\n\t\t\t\tLWS_SERVER_OPTION_ALLOW_LISTEN_SHARE)) {\n\t\t\tif (setsockopt(sockfd, SOL_SOCKET, SO_EXCLUSIVEADDRUSE,\n\t\t\t\t       (const void *)&opt, sizeof(opt)) < 0) {\n\t\t\t\tlwsl_err(\"reuseaddr failed\\n\");\n\t\t\t\tcompatible_close(sockfd);\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t} else\n#endif\n\n\t\t/*\n\t\t * allow us to restart even if old sockets in TIME_WAIT\n\t\t */\n\t\tif (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR,\n\t\t\t       (const void *)&opt, sizeof(opt)) < 0) {\n\t\t\tlwsl_err(\"reuseaddr failed\\n\");\n\t\t\tcompatible_close(sockfd);\n\t\t\treturn -1;\n\t\t}\n\n#if defined(LWS_WITH_IPV6) && defined(IPV6_V6ONLY)\n\t\t/*\n\t\t * If we have an ipv6 listen socket, it only accepts ipv6.\n\t\t *\n\t\t * There will be a separate ipv4 listen socket if that's\n\t\t * enabled.\n\t\t */\n\t\tif (a->af == AF_INET6 &&\n\t\t    setsockopt(sockfd, IPPROTO_IPV6, IPV6_V6ONLY,\n\t\t\t       (const void*)&value, sizeof(value)) < 0) {\n\t\t\tcompatible_close(sockfd);\n\t\t\treturn -1;\n\t\t}\n#endif\n\n#if defined(__linux__) && defined(SO_REUSEPORT)\n\t\t/* keep coverity happy */\n#if LWS_MAX_SMP > 1\n\t\tn = 1;\n#else\n\t\tn = lws_check_opt(a->vhost->options,\n\t\t\t\t  LWS_SERVER_OPTION_ALLOW_LISTEN_SHARE);\n#endif\n\t\tif (n && cx->count_threads > 1)\n\t\t\tif (setsockopt(sockfd, SOL_SOCKET, SO_REUSEPORT,\n\t\t\t\t\t(const void *)&opt, sizeof(opt)) < 0) {\n\t\t\t\tcompatible_close(sockfd);\n\t\t\t\treturn -1;\n\t\t\t}\n#endif\n#endif\n\t\tlws_plat_set_socket_options(a->vhost, sockfd, 0);\n\n\t\tis = lws_socket_bind(a->vhost, NULL, sockfd,\n\t\t\t\t     a->vhost->listen_port,\n\t\t\t\t     a->vhost->iface, a->af);\n\n\t\tif (is == LWS_ITOSA_BUSY) {\n\t\t\t/* treat as fatal */\n\t\t\tcompatible_close(sockfd);\n\n\t\t\treturn -1;\n\t\t}\n\n\t\t/*\n\t\t * There is a race where the network device may come up and then\n\t\t * go away and fail here.  So correctly handle unexpected failure\n\t\t * here despite we earlier confirmed it.\n\t\t */\n\t\tif (is < 0) {\n\t\t\tlwsl_info(\"%s: lws_socket_bind says %d\\n\", __func__, is);\n\t\t\tcompatible_close(sockfd);\n\t\t\tif (a->vhost->iface)\n\t\t\t\tgoto deal;\n\t\t\treturn -1;\n\t\t}\n\n\t\t/*\n\t\t * Create the listen wsi and customize it\n\t\t */\n\n\t\tlws_context_lock(cx, __func__);\n\t\twsi = __lws_wsi_create_with_role(cx, m, &role_ops_listen, NULL);\n\t\tlws_context_unlock(cx);\n\t\tif (wsi == NULL) {\n\t\t\tlwsl_err(\"Out of mem\\n\");\n\t\t\tgoto bail;\n\t\t}\n\n\t\twsi->af = (uint8_t)a->af;\n\n#ifdef LWS_WITH_UNIX_SOCK\n\t\tif (!LWS_UNIX_SOCK_ENABLED(a->vhost))\n#endif\n\t\t{\n\t\t\twsi->unix_skt = 1;\n\t\t\ta->vhost->listen_port = is;\n\n\t\t\tlwsl_debug(\"%s: lws_socket_bind says %d\\n\", __func__, is);\n\t\t}\n\n\t\twsi->desc.sockfd = sockfd;\n\t\twsi->a.protocol = a->vhost->protocols;\n\t\tlws_vhost_bind_wsi(a->vhost, wsi);\n\t\twsi->listener = 1;\n\n\t\tif (wsi->a.context->event_loop_ops->init_vhost_listen_wsi)\n\t\t\twsi->a.context->event_loop_ops->init_vhost_listen_wsi(wsi);\n\n\t\tpt = &cx->pt[m];\n\t\tlws_pt_lock(pt, __func__);\n\n\t\tif (__insert_wsi_socket_into_fds(cx, wsi)) {\n\t\t\tlwsl_notice(\"inserting wsi socket into fds failed\\n\");\n\t\t\tlws_pt_unlock(pt);\n\t\t\tgoto bail;\n\t\t}\n\n\t\tlws_dll2_add_tail(&wsi->listen_list, &a->vhost->listen_wsi);\n\t\tlws_pt_unlock(pt);\n\n#if defined(WIN32) && defined(TCP_FASTOPEN)\n\t\tif (a->vhost->fo_listen_queue) {\n\t\t\tint optval = 1;\n\t\t\tif (setsockopt(wsi->desc.sockfd, IPPROTO_TCP,\n\t\t\t\t       TCP_FASTOPEN,\n\t\t\t\t       (const char*)&optval, sizeof(optval)) < 0) {\n\t\t\t\tint error = LWS_ERRNO;\n\t\t\t\tlwsl_warn(\"%s: TCP_NODELAY failed with error %d\\n\",\n\t\t\t\t\t\t__func__, error);\n\t\t\t}\n\t\t}\n#else\n#if defined(TCP_FASTOPEN)\n\t\tif (a->vhost->fo_listen_queue) {\n\t\t\tint qlen = a->vhost->fo_listen_queue;\n\n\t\t\tif (setsockopt(wsi->desc.sockfd, SOL_TCP, TCP_FASTOPEN,\n\t\t\t\t       &qlen, sizeof(qlen)))\n\t\t\t\tlwsl_warn(\"%s: TCP_FASTOPEN failed\\n\", __func__);\n\t\t}\n#endif\n#endif\n\n\t\tn = listen(wsi->desc.sockfd, LWS_SOMAXCONN);\n\t\tif (n < 0) {\n\t\t\tlwsl_err(\"listen failed with error %d\\n\", LWS_ERRNO);\n\t\t\tlws_dll2_remove(&wsi->listen_list);\n\t\t\t__remove_wsi_socket_from_fds(wsi);\n\t\t\tgoto bail;\n\t\t}\n\n\t\tif (wsi)\n\t\t\t__lws_lc_tag(a->vhost->context,\n\t\t\t\t     &a->vhost->context->lcg[LWSLCG_WSI],\n\t\t\t\t     &wsi->lc, \"listen|%s|%s|%d\",\n\t\t\t\t     a->vhost->name,\n\t\t\t\t     a->vhost->iface ? a->vhost->iface : \"\",\n\t\t\t\t     (int)a->vhost->listen_port);\n\n\t} /* for each thread able to independently listen */\n\n\tif (!lws_check_opt(cx->options, LWS_SERVER_OPTION_EXPLICIT_VHOSTS)) {\n#ifdef LWS_WITH_UNIX_SOCK\n\t\tif (a->af == AF_UNIX)\n\t\t\tlwsl_info(\" Listening on \\\"%s\\\"\\n\", a->vhost->iface);\n\t\telse\n#endif\n\t\t\tlwsl_info(\" Listening on %s:%d\\n\",\n\t\t\t\t\ta->vhost->iface,\n\t\t\t\t\ta->vhost->listen_port);\n        }\n\n\t// info->port = vhost->listen_port;\n\n\treturn 0;\n\nbail:\n\tcompatible_close(sockfd);\n\n\treturn -1;\n}\n\n\nint\n_lws_vhost_init_server(const struct lws_context_creation_info *info,\n\t\t       struct lws_vhost *vhost)\n{\n\tstruct vh_sock_args a;\n\n\ta.info = info;\n\ta.vhost = vhost;\n\n\tif (info) {\n\t\tvhost->iface = info->iface;\n\t\tvhost->listen_port = info->port;\n\t}\n\n\t/* set up our external listening socket we serve on */\n\n\tif (vhost->listen_port == CONTEXT_PORT_NO_LISTEN ||\n\t    vhost->listen_port == CONTEXT_PORT_NO_LISTEN_SERVER)\n\t\treturn 0;\n\n\t/*\n\t * Let's figure out what AF(s) we want this vhost to listen on.\n\t *\n\t * We want AF_UNIX alone if that's what's told\n\t */\n\n#if defined(LWS_WITH_UNIX_SOCK)\n\t/*\n\t * If unix socket, ask for that and we are done\n\t */\n\tif (LWS_UNIX_SOCK_ENABLED(vhost)) {\n\t\ta.af = AF_UNIX;\n\t\tgoto single;\n\t}\n#endif\n\n\t/*\n\t * We may support both ipv4 and ipv6, but get a numeric vhost listen\n\t * iface that is unambiguously ipv4 or ipv6, meaning we can only listen\n\t * for the related AF then.\n\t */\n\n\tif (vhost->iface) {\n\t\tuint8_t buf[16];\n\t\tint q;\n\n\t\tq = lws_parse_numeric_address(vhost->iface, buf, sizeof(buf));\n\n\t\tif (q == 4) {\n\t\t\ta.af = AF_INET;\n\t\t\tgoto single;\n\t\t}\n\n\t\tif (q == 16) {\n#if defined(LWS_WITH_IPV6)\n\t\t\tif (LWS_IPV6_ENABLED(vhost)) {\n\t\t\t\ta.af = AF_INET6;\n\t\t\t\tgoto single;\n\t\t\t}\n#endif\n\t\t\tlwsl_err(\"%s: ipv6 not supported on %s\\n\", __func__,\n\t\t\t\t\tvhost->name);\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/*\n\t * ... if we make it here, we would want to listen on AF_INET and\n\t * AF_INET6 unless one or the other is forbidden\n\t */\n\n#if defined(LWS_WITH_IPV6)\n\tif (!(LWS_IPV6_ENABLED(vhost) &&\n\t      (vhost->options & LWS_SERVER_OPTION_IPV6_V6ONLY_MODIFY) &&\n\t      (vhost->options & LWS_SERVER_OPTION_IPV6_V6ONLY_VALUE))) {\n#endif\n\t\ta.af = AF_INET;\n\t\tif (_lws_vhost_init_server_af(&a))\n\t\t\treturn 1;\n\n#if defined(LWS_WITH_IPV6)\n\t}\n\tif (LWS_IPV6_ENABLED(vhost)) {\n\t\ta.af = AF_INET6;\n\t\tgoto single;\n\t}\n#endif\n\n\treturn 0;\n\nsingle:\n\treturn _lws_vhost_init_server_af(&a);\n}\n\n#endif\n\nstruct lws_vhost *\nlws_select_vhost(struct lws_context *context, int port, const char *servername)\n{\n\tstruct lws_vhost *vhost = context->vhost_list;\n\tconst char *p;\n\tint n, colon;\n\n\tn = (int)strlen(servername);\n\tcolon = n;\n\tp = strchr(servername, ':');\n\tif (p)\n\t\tcolon = lws_ptr_diff(p, servername);\n\n\t/* Priotity 1: first try exact matches */\n\n\twhile (vhost) {\n\t\tif (port == vhost->listen_port &&\n\t\t    !strncmp(vhost->name, servername, (unsigned int)colon)) {\n\t\t\tlwsl_info(\"SNI: Found: %s\\n\", servername);\n\t\t\treturn vhost;\n\t\t}\n\t\tvhost = vhost->vhost_next;\n\t}\n\n\t/*\n\t * Priority 2: if no exact matches, try matching *.vhost-name\n\t * unintentional matches are possible but resolve to x.com for *.x.com\n\t * which is reasonable.  If exact match exists we already chose it and\n\t * never reach here.  SSL will still fail it if the cert doesn't allow\n\t * *.x.com.\n\t */\n\tvhost = context->vhost_list;\n\twhile (vhost) {\n\t\tint m = (int)strlen(vhost->name);\n\t\tif (port && port == vhost->listen_port &&\n\t\t    m <= (colon - 2) &&\n\t\t    servername[colon - m - 1] == '.' &&\n\t\t    !strncmp(vhost->name, servername + colon - m, (unsigned int)m)) {\n\t\t\tlwsl_info(\"SNI: Found %s on wildcard: %s\\n\",\n\t\t\t\t    servername, vhost->name);\n\t\t\treturn vhost;\n\t\t}\n\t\tvhost = vhost->vhost_next;\n\t}\n\n\t/* Priority 3: match the first vhost on our port */\n\n\tvhost = context->vhost_list;\n\twhile (vhost) {\n\t\tif (port && port == vhost->listen_port) {\n\t\t\tlwsl_info(\"%s: vhost match to %s based on port %d\\n\",\n\t\t\t\t\t__func__, vhost->name, port);\n\t\t\treturn vhost;\n\t\t}\n\t\tvhost = vhost->vhost_next;\n\t}\n\n\t/* no match */\n\n\treturn NULL;\n}\n\nstatic const struct lws_mimetype {\n\tconst char *extension;\n\tconst char *mimetype;\n} server_mimetypes[] = {\n\t{ \".html\", \"text/html\" },\n\t{ \".htm\", \"text/html\" },\n\t{ \".js\", \"text/javascript\" },\n\t{ \".css\", \"text/css\" },\n\t{ \".png\", \"image/png\" },\n\t{ \".jpg\", \"image/jpeg\" },\n\t{ \".jpeg\", \"image/jpeg\" },\n\t{ \".ico\", \"image/x-icon\" },\n\t{ \".gif\", \"image/gif\" },\n\t{ \".svg\", \"image/svg+xml\" },\n\t{ \".ttf\", \"application/x-font-ttf\" },\n\t{ \".otf\", \"application/font-woff\" },\n\t{ \".woff\", \"application/font-woff\" },\n\t{ \".woff2\", \"application/font-woff2\" },\n\t{ \".gz\", \"application/gzip\" },\n\t{ \".txt\", \"text/plain\" },\n\t{ \".xml\", \"application/xml\" },\n\t{ \".json\", \"application/json\" },\n\t{ \".mjs\", \"text/javascript\" },\n};\n\nconst char *\nlws_get_mimetype(const char *file, const struct lws_http_mount *m)\n{\n\tconst struct lws_protocol_vhost_options *pvo;\n\tsize_t n = strlen(file), len, i;\n\tconst char *fallback_mimetype = NULL;\n\tconst struct lws_mimetype *mt;\n\n\t/* prioritize user-defined mimetypes */\n\tfor (pvo = m ? m->extra_mimetypes : NULL; pvo; pvo = pvo->next) {\n\t\t/* ie, match anything */\n\t\tif (!fallback_mimetype && pvo->name[0] == '*') {\n\t\t\tfallback_mimetype = pvo->value;\n\t\t\tcontinue;\n\t\t}\n\n\t\tlen = strlen(pvo->name);\n\t\tif (n > len && !strcasecmp(&file[n - len], pvo->name)) {\n\t\t\tlwsl_info(\"%s: match to user mimetype: %s\\n\", __func__,\n\t\t\t\t  pvo->value);\n\t\t\treturn pvo->value;\n\t\t}\n\t}\n\n\t/* fallback to server-defined mimetypes */\n\tfor (i = 0; i < LWS_ARRAY_SIZE(server_mimetypes); ++i) {\n\t\tmt = &server_mimetypes[i];\n\n\t\tlen = strlen(mt->extension);\n\t\tif (n > len && !strcasecmp(&file[n - len], mt->extension)) {\n\t\t\tlwsl_info(\"%s: match to server mimetype: %s\\n\", __func__,\n\t\t\t\t  mt->mimetype);\n\t\t\treturn mt->mimetype;\n\t\t}\n\t}\n\n\t/* fallback to '*' if defined */\n\tif (fallback_mimetype) {\n\t\tlwsl_info(\"%s: match to any mimetype: %s\\n\", __func__,\n\t\t\t  fallback_mimetype);\n\t\treturn fallback_mimetype;\n\t}\n\n\treturn NULL;\n}\n\n#if defined(LWS_WITH_FILE_OPS)\nstatic lws_fop_flags_t\nlws_vfs_prepare_flags(struct lws *wsi)\n{\n\tlws_fop_flags_t f = 0;\n\n\tif (!lws_hdr_total_length(wsi, WSI_TOKEN_HTTP_ACCEPT_ENCODING))\n\t\treturn f;\n\n\tif (strstr(lws_hdr_simple_ptr(wsi, WSI_TOKEN_HTTP_ACCEPT_ENCODING),\n\t\t   \"gzip\")) {\n\t\tlwsl_info(\"client indicates GZIP is acceptable\\n\");\n\t\tf |= LWS_FOP_FLAG_COMPR_ACCEPTABLE_GZIP;\n\t}\n\n\treturn f;\n}\n\nstatic int\nlws_http_serve(struct lws *wsi, char *uri, const char *origin,\n\t       const struct lws_http_mount *m)\n{\n\tconst struct lws_protocol_vhost_options *pvo = m->interpret;\n\tstruct lws_process_html_args args;\n\tconst char *mimetype;\n#if !defined(_WIN32_WCE)\n\tconst struct lws_plat_file_ops *fops;\n\tconst char *vpath;\n\tlws_fop_flags_t fflags = LWS_O_RDONLY;\n#if defined(WIN32) && defined(LWS_HAVE__STAT32I64)\n\tstruct _stat32i64 st;\n#else\n\tstruct stat st;\n#endif\n\tint spin = 0;\n#endif\n\tchar path[256], sym[2048];\n\tunsigned char *p = (unsigned char *)sym + 32 + LWS_PRE, *start = p;\n\tunsigned char *end = p + sizeof(sym) - 32 - LWS_PRE;\n#if !defined(WIN32) && !defined(LWS_PLAT_FREERTOS)\n\tsize_t len;\n#endif\n\tint n;\n\n\twsi->handling_404 = 0;\n\tif (!wsi->a.vhost)\n\t\treturn -1;\n\n#if defined(LWS_ROLE_H1) || defined(LWS_ROLE_H2)\n\tif (wsi->a.vhost->http.error_document_404 &&\n\t    !strcmp(uri, wsi->a.vhost->http.error_document_404))\n\t\twsi->handling_404 = 1;\n#endif\n\n\tlws_snprintf(path, sizeof(path) - 1, \"%s/%s\", origin, uri);\n\n#if !defined(_WIN32_WCE)\n\n\tfflags |= lws_vfs_prepare_flags(wsi);\n\n\tdo {\n\t\tspin++;\n\t\tfops = lws_vfs_select_fops(wsi->a.context->fops, path, &vpath);\n\n\t\tif (wsi->http.fop_fd)\n\t\t\tlws_vfs_file_close(&wsi->http.fop_fd);\n\n\t\twsi->http.fop_fd = fops->LWS_FOP_OPEN(wsi->a.context->fops,\n\t\t\t\t\t\t\tpath, vpath, &fflags);\n\t\tif (!wsi->http.fop_fd) {\n\t\t\tlwsl_info(\"%s: Unable to open '%s': errno %d\\n\",\n\t\t\t\t  __func__, path, errno);\n\n\t\t\treturn 1;\n\t\t}\n\n\t\t/* if it can't be statted, don't try */\n\t\tif (fflags & LWS_FOP_FLAG_VIRTUAL)\n\t\t\tbreak;\n#if defined(LWS_PLAT_FREERTOS)\n\t\tbreak;\n#endif\n#if !defined(WIN32)\n\t\tif (fstat(wsi->http.fop_fd->fd, &st)) {\n\t\t\tlwsl_info(\"unable to stat %s\\n\", path);\n\t\t\tgoto notfound;\n\t\t}\n#else\n#if defined(LWS_HAVE__STAT32I64)\n\t\tif (_stat32i64(path, &st)) {\n\t\t\tlwsl_info(\"unable to stat %s\\n\", path);\n\t\t\tgoto notfound;\n\t\t}\n#else\n\t\tif (stat(path, &st)) {\n\t\t\tlwsl_info(\"unable to stat %s\\n\", path);\n\t\t\tgoto notfound;\n\t\t}\n#endif\n#endif\n\n\t\twsi->http.fop_fd->mod_time = (uint32_t)st.st_mtime;\n\t\tfflags |= LWS_FOP_FLAG_MOD_TIME_VALID;\n\n#if !defined(WIN32) && !defined(LWS_PLAT_FREERTOS)\n\t\tif ((S_IFMT & st.st_mode) == S_IFLNK) {\n\t\t\tlen = (size_t)readlink(path, sym, sizeof(sym) - 1);\n\t\t\tif (len) {\n\t\t\t\tlwsl_err(\"Failed to read link %s\\n\", path);\n\t\t\t\tgoto notfound;\n\t\t\t}\n\t\t\tsym[len] = '\\0';\n\t\t\tlwsl_debug(\"symlink %s -> %s\\n\", path, sym);\n\t\t\tlws_snprintf(path, sizeof(path) - 1, \"%s\", sym);\n\t\t}\n#endif\n\t\tif ((S_IFMT & st.st_mode) == S_IFDIR) {\n\t\t\tlwsl_debug(\"default filename append to dir\\n\");\n\t\t\tlws_snprintf(path, sizeof(path) - 1, \"%s/%s/%s\",\n\t\t\t\t origin, uri, m->def ? m->def : \"index.html\");\n\t\t}\n\n\t} while ((S_IFMT & st.st_mode) != S_IFREG && spin < 5);\n\n\tif (spin == 5)\n\t\tlwsl_err(\"symlink loop %s \\n\", path);\n\n\tn = sprintf(sym, \"%08llX%08lX\",\n\t\t    (unsigned long long)lws_vfs_get_length(wsi->http.fop_fd),\n\t\t    (unsigned long)lws_vfs_get_mod_time(wsi->http.fop_fd));\n\n\t/* disable ranges if IF_RANGE token invalid */\n\n\tif (lws_hdr_total_length(wsi, WSI_TOKEN_HTTP_IF_RANGE))\n\t\tif (strcmp(sym, lws_hdr_simple_ptr(wsi, WSI_TOKEN_HTTP_IF_RANGE)))\n\t\t\t/* differs - defeat Range: */\n\t\t\twsi->http.ah->frag_index[WSI_TOKEN_HTTP_RANGE] = 0;\n\n\tif (lws_hdr_total_length(wsi, WSI_TOKEN_HTTP_IF_NONE_MATCH)) {\n\t\t/*\n\t\t * he thinks he has some version of it already,\n\t\t * check if the tag matches\n\t\t */\n\t\tif (!strcmp(sym, lws_hdr_simple_ptr(wsi,\n\t\t\t\t\tWSI_TOKEN_HTTP_IF_NONE_MATCH))) {\n\n\t\t\tchar cache_control[50], *cc = \"no-store\";\n\t\t\tint cclen = 8;\n\n\t\t\tlwsl_debug(\"%s: ETAG match %s %s\\n\", __func__,\n\t\t\t\t   uri, origin);\n\n\t\t\t/* we don't need to send the payload */\n\t\t\tif (lws_add_http_header_status(wsi,\n\t\t\t\t\tHTTP_STATUS_NOT_MODIFIED, &p, end)) {\n\t\t\t\tlwsl_err(\"%s: failed adding not modified\\n\",\n\t\t\t\t\t\t__func__);\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\tif (lws_add_http_header_by_token(wsi,\n\t\t\t\t\tWSI_TOKEN_HTTP_ETAG,\n\t\t\t\t\t(unsigned char *)sym, n, &p, end))\n\t\t\t\treturn -1;\n\n\t\t\t/* but we still need to send cache control... */\n\n\t\t\tif (m->cache_max_age && m->cache_reusable) {\n\t\t\t\tif (!m->cache_revalidate) {\n\t\t\t\t\tcc = cache_control;\n\t\t\t\t\tcclen = sprintf(cache_control,\n\t\t\t\t\t\t\"%s, max-age=%u\",\n\t\t\t\t\t\tintermediates[wsi->cache_intermediaries],\n\t\t\t\t\t\tm->cache_max_age);\n\t\t\t\t} else {\n\t\t\t\t\tcc = cache_control;\n                                        cclen = sprintf(cache_control,\n                                        \t\"must-revalidate, %s, max-age=%u\",\n                                                intermediates[wsi->cache_intermediaries],\n                                                m->cache_max_age);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (lws_add_http_header_by_token(wsi,\n\t\t\t\t\tWSI_TOKEN_HTTP_CACHE_CONTROL,\n\t\t\t\t\t(unsigned char *)cc, cclen, &p, end))\n\t\t\t\treturn -1;\n\n\t\t\tif (lws_finalize_http_header(wsi, &p, end))\n\t\t\t\treturn -1;\n\n\t\t\tn = lws_write(wsi, start, lws_ptr_diff_size_t(p, start),\n\t\t\t\t      LWS_WRITE_HTTP_HEADERS |\n\t\t\t\t      LWS_WRITE_H2_STREAM_END);\n\t\t\tif (n != lws_ptr_diff(p, start)) {\n\t\t\t\tlwsl_err(\"_write returned %d from %ld\\n\", n,\n\t\t\t\t\t (long)(p - start));\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\tlws_vfs_file_close(&wsi->http.fop_fd);\n\n\t\t\tif (lws_http_transaction_completed(wsi))\n\t\t\t\treturn -1;\n\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tif (lws_add_http_header_by_token(wsi, WSI_TOKEN_HTTP_ETAG,\n\t\t\t(unsigned char *)sym, n, &p, end))\n\t\treturn -1;\n#endif\n\n\tmimetype = lws_get_mimetype(path, m);\n\tif (!mimetype) {\n\t\tlwsl_info(\"unknown mimetype for %s\\n\", path);\n\t\tif (lws_return_http_status(wsi,\n\t\t\t\tHTTP_STATUS_UNSUPPORTED_MEDIA_TYPE, NULL) ||\n\t\t    lws_http_transaction_completed(wsi))\n\t\t\treturn -1;\n\n\t\treturn 0;\n\t}\n\tif (!mimetype[0])\n\t\tlwsl_debug(\"sending no mimetype for %s\\n\", path);\n\n\twsi->sending_chunked = 0;\n\twsi->interpreting = 0;\n\n\t/*\n\t * check if this is in the list of file suffixes to be interpreted by\n\t * a protocol\n\t */\n\twhile (pvo) {\n\t\tn = (int)strlen(path);\n\t\tif (n > (int)strlen(pvo->name) &&\n\t\t    !strcmp(&path[(unsigned int)n - strlen(pvo->name)], pvo->name)) {\n\t\t\twsi->interpreting = 1;\n\t\t\tif (!wsi->mux_substream)\n\t\t\t\twsi->sending_chunked = 1;\n\n\t\t\twsi->protocol_interpret_idx = (char)(\n\t\t\t\tlws_vhost_name_to_protocol(wsi->a.vhost,\n\t\t\t\t\t\t\t   pvo->value) -\n\t\t\t\t&lws_get_vhost(wsi)->protocols[0]);\n\n\t\t\tlwsl_debug(\"want %s interpreted by %s (pcol is %s)\\n\", path,\n\t\t\t\t    wsi->a.vhost->protocols[\n\t\t\t\t             (int)wsi->protocol_interpret_idx].name,\n\t\t\t\t             wsi->a.protocol->name);\n\t\t\tif (lws_bind_protocol(wsi, &wsi->a.vhost->protocols[\n\t\t\t          (int)wsi->protocol_interpret_idx], __func__))\n\t\t\t\treturn -1;\n\n\t\t\tif (lws_ensure_user_space(wsi))\n\t\t\t\treturn -1;\n\t\t\tbreak;\n\t\t}\n\t\tpvo = pvo->next;\n\t}\n\n\tif (wsi->sending_chunked) {\n\t\tif (lws_add_http_header_by_token(wsi,\n\t\t\t\tWSI_TOKEN_HTTP_TRANSFER_ENCODING,\n\t\t\t\t(unsigned char *)\"chunked\", 7,\n\t\t\t\t&p, end))\n\t\t\treturn -1;\n\t}\n\n\tif (m->protocol) {\n\t\tconst struct lws_protocols *pp = lws_vhost_name_to_protocol(\n\t\t\t\t\t\t       wsi->a.vhost, m->protocol);\n\n\t\tif (lws_bind_protocol(wsi, pp, __func__))\n\t\t\treturn -1;\n\t\targs.p = (char *)p;\n\t\targs.max_len = lws_ptr_diff(end, p);\n\t\tif (pp->callback(wsi, LWS_CALLBACK_ADD_HEADERS,\n\t\t\t\t\t  wsi->user_space, &args, 0))\n\t\t\treturn -1;\n\t\tp = (unsigned char *)args.p;\n\t}\n\n\t*p = '\\0';\n\tn = lws_serve_http_file(wsi, path, mimetype, (char *)start,\n\t\t\t\tlws_ptr_diff(p, start));\n\n\tif (n < 0 || ((n > 0) && lws_http_transaction_completed(wsi)))\n\t\treturn -1; /* error or can't reuse connection: close the socket */\n\n\treturn 0;\n\nnotfound:\n\n\treturn 1;\n}\n#endif\n\n#if defined(LWS_ROLE_H1) || defined(LWS_ROLE_H2)\nconst struct lws_http_mount *\nlws_find_mount(struct lws *wsi, const char *uri_ptr, int uri_len)\n{\n\tconst struct lws_http_mount *hm, *hit = NULL;\n\tint best = 0;\n\n\thm = wsi->a.vhost->http.mount_list;\n\twhile (hm) {\n\t\tif (uri_len >= hm->mountpoint_len &&\n\t\t    !strncmp(uri_ptr, hm->mountpoint, hm->mountpoint_len) &&\n\t\t    (uri_ptr[hm->mountpoint_len] == '\\0' ||\n\t\t     uri_ptr[hm->mountpoint_len] == '/' ||\n\t\t     hm->mountpoint_len == 1)\n\t\t    ) {\n#if defined(LWS_WITH_SYS_METRICS)\n\t\t\tlws_metrics_tag_wsi_add(wsi, \"mnt\", hm->mountpoint);\n#endif\n\n\t\t\tif (hm->origin_protocol == LWSMPRO_CALLBACK ||\n\t\t\t    ((hm->origin_protocol == LWSMPRO_CGI ||\n\t\t\t     lws_hdr_total_length(wsi, WSI_TOKEN_GET_URI) ||\n\t\t\t     lws_hdr_total_length(wsi, WSI_TOKEN_POST_URI) ||\n#if defined(LWS_WITH_HTTP_UNCOMMON_HEADERS)\n\t\t\t     lws_hdr_total_length(wsi, WSI_TOKEN_PUT_URI) ||\n\t\t\t     lws_hdr_total_length(wsi, WSI_TOKEN_PATCH_URI) ||\n\t\t\t     lws_hdr_total_length(wsi, WSI_TOKEN_DELETE_URI) ||\n#endif\n\t\t\t     lws_hdr_total_length(wsi, WSI_TOKEN_HEAD_URI) ||\n#if defined(LWS_ROLE_H2)\n\t\t\t     (wsi->mux_substream &&\n\t\t\t\tlws_hdr_total_length(wsi,\n\t\t\t\t\t\tWSI_TOKEN_HTTP_COLON_PATH)) ||\n#endif\n\t\t\t     hm->protocol) &&\n\t\t\t    hm->mountpoint_len > best)) {\n\t\t\t\tbest = hm->mountpoint_len;\n\t\t\t\thit = hm;\n\t\t\t}\n\t\t}\n\t\thm = hm->mount_next;\n\t}\n\n\treturn hit;\n}\n#endif\n\n#if defined(LWS_WITH_HTTP_BASIC_AUTH) && !defined(LWS_PLAT_FREERTOS) && defined(LWS_WITH_FILE_OPS)\nstatic int\nlws_find_string_in_file(const char *filename, const char *string, int stringlen)\n{\n\tchar buf[128];\n\tint fd, match = 0, pos = 0, n = 0, hit = 0;\n\n\tfd = lws_open(filename, O_RDONLY);\n\tif (fd < 0) {\n\t\tlwsl_err(\"can't open auth file: %s\\n\", filename);\n\t\treturn 0;\n\t}\n\n\twhile (1) {\n\t\tif (pos == n) {\n\t\t\tn = (int)read(fd, buf, sizeof(buf));\n\t\t\tif (n <= 0) {\n\t\t\t\tif (match == stringlen)\n\t\t\t\t\thit = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpos = 0;\n\t\t}\n\n\t\tif (match == stringlen) {\n\t\t\tif (buf[pos] == '\\r' || buf[pos] == '\\n') {\n\t\t\t\thit = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatch = 0;\n\t\t}\n\n\t\tif (buf[pos] == string[match])\n\t\t\tmatch++;\n\t\telse\n\t\t\tmatch = 0;\n\n\t\tpos++;\n\t}\n\n\tclose(fd);\n\n\treturn hit;\n}\n#endif\n\n#if defined(LWS_WITH_HTTP_BASIC_AUTH)\n\nint\nlws_unauthorised_basic_auth(struct lws *wsi)\n{\n\tstruct lws_context_per_thread *pt = &wsi->a.context->pt[(int)wsi->tsi];\n\tunsigned char *start = pt->serv_buf + LWS_PRE,\n\t\t      *p = start, *end = p + 2048;\n\tchar buf[64];\n\tint n;\n\n\t/* no auth... tell him it is required */\n\n\tif (lws_add_http_header_status(wsi, HTTP_STATUS_UNAUTHORIZED, &p, end))\n\t\treturn -1;\n\n\tn = lws_snprintf(buf, sizeof(buf), \"Basic realm=\\\"lwsws\\\"\");\n\tif (lws_add_http_header_by_token(wsi,\n\t\t\tWSI_TOKEN_HTTP_WWW_AUTHENTICATE,\n\t\t\t(unsigned char *)buf, n, &p, end))\n\t\treturn -1;\n\n\tif (lws_add_http_header_content_length(wsi, 0, &p, end))\n\t\treturn -1;\n\n\tif (lws_finalize_http_header(wsi, &p, end))\n\t\treturn -1;\n\n\tn = lws_write(wsi, start, lws_ptr_diff_size_t(p, start), LWS_WRITE_HTTP_HEADERS |\n\t\t\t\t\t     LWS_WRITE_H2_STREAM_END);\n\tif (n < 0)\n\t\treturn -1;\n\n\treturn lws_http_transaction_completed(wsi);\n\n}\n\n#endif\n\nint lws_clean_url(char *p)\n{\n\tif (p[0] == 'h' && p[1] == 't' && p[2] == 't' && p[3] == 'p') {\n\t\tp += 4;\n\t\tif (*p == 's')\n\t\tp++;\n\t\tif (*p == ':') {\n\t\t\tp++;\n\t\t\tif (*p == '/')\n\t\t\tp++;\n\t\t}\n\t}\n\n\twhile (*p) {\n\t\tif (p[0] == '/' && p[1] == '/') {\n\t\t\tchar *p1 = p;\n\t\t\twhile (*p1) {\n\t\t\t\t*p1 = p1[1];\n\t\t\t\tp1++;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tp++;\n\t}\n\n\treturn 0;\n}\n\nstatic const unsigned char methods[] = {\n\tWSI_TOKEN_GET_URI,\n\tWSI_TOKEN_POST_URI,\n#if defined(LWS_WITH_HTTP_UNCOMMON_HEADERS)\n\tWSI_TOKEN_OPTIONS_URI,\n\tWSI_TOKEN_PUT_URI,\n\tWSI_TOKEN_PATCH_URI,\n\tWSI_TOKEN_DELETE_URI,\n#endif\n\tWSI_TOKEN_CONNECT,\n\tWSI_TOKEN_HEAD_URI,\n#ifdef LWS_WITH_HTTP2\n\tWSI_TOKEN_HTTP_COLON_PATH,\n#endif\n};\n\nint\nlws_http_get_uri_and_method(struct lws *wsi, char **puri_ptr, int *puri_len)\n{\n\tint n, count = 0;\n\n\tfor (n = 0; n < (int)LWS_ARRAY_SIZE(methods); n++)\n\t\tif (lws_hdr_total_length(wsi, methods[n]))\n\t\t\tcount++;\n\tif (!count) {\n\t\tlwsl_warn(\"Missing URI in HTTP request\\n\");\n\t\treturn -1;\n\t}\n\n\tif (count != 1 &&\n\t    !((wsi->mux_substream || wsi->h2_stream_carries_ws)\n#if defined(LWS_ROLE_H2)\n\t\t\t    &&\n\t      lws_hdr_total_length(wsi, WSI_TOKEN_HTTP_COLON_PATH)\n#endif\n\t      )) {\n\t\tlwsl_warn(\"multiple methods?\\n\");\n\t\treturn -1;\n\t}\n\n\tfor (n = 0; n < (int)LWS_ARRAY_SIZE(methods); n++)\n\t\tif (lws_hdr_total_length(wsi, methods[n])) {\n\t\t\t*puri_ptr = lws_hdr_simple_ptr(wsi, methods[n]);\n\t\t\t*puri_len = lws_hdr_total_length(wsi, methods[n]);\n\t\t\treturn n;\n\t\t}\n\n\treturn -1;\n}\n\n#if defined(LWS_WITH_HTTP_BASIC_AUTH)\n\nenum lws_check_basic_auth_results\nlws_check_basic_auth(struct lws *wsi, const char *basic_auth_login_file,\n\t\t     unsigned int auth_mode)\n{\n#if defined(LWS_WITH_FILE_OPS)\n\tchar b64[160], plain[(sizeof(b64) * 3) / 4], *pcolon;\n\tint m, ml, fi, bar;\n\n\tif (!basic_auth_login_file && auth_mode == LWSAUTHM_DEFAULT)\n\t\treturn LCBA_CONTINUE;\n\n\t/* Did he send auth? */\n\tml = lws_hdr_total_length(wsi, WSI_TOKEN_HTTP_AUTHORIZATION);\n\tif (!ml)\n\t\treturn LCBA_FAILED_AUTH;\n\n\t/* Disallow fragmentation monkey business */\n\n\tfi = wsi->http.ah->frag_index[WSI_TOKEN_HTTP_AUTHORIZATION];\n\tif (wsi->http.ah->frags[fi].nfrag) {\n\t\tlwsl_err(\"fragmented basic auth header not allowed\\n\");\n\t\treturn LCBA_FAILED_AUTH;\n\t}\n\n\tm = lws_hdr_copy(wsi, b64, sizeof(b64),\n\t\t\t WSI_TOKEN_HTTP_AUTHORIZATION);\n\tif (m < 7) {\n\t\tlwsl_err(\"b64 auth too long\\n\");\n\t\treturn LCBA_END_TRANSACTION;\n\t}\n\n\tb64[5] = '\\0';\n\tif (strcasecmp(b64, \"Basic\")) {\n\t\tlwsl_err(\"auth missing basic: %s\\n\", b64);\n\t\treturn LCBA_END_TRANSACTION;\n\t}\n\n\t/* It'll be like Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l */\n\n\tm = lws_b64_decode_string(b64 + 6, plain, sizeof(plain) - 1);\n\tif (m < 0) {\n\t\tlwsl_err(\"plain auth too long\\n\");\n\t\treturn LCBA_END_TRANSACTION;\n\t}\n\n\tplain[m] = '\\0';\n\tpcolon = strchr(plain, ':');\n\tif (!pcolon) {\n\t\tlwsl_err(\"basic auth format broken\\n\");\n\t\treturn LCBA_END_TRANSACTION;\n\t}\n\n\tswitch (auth_mode) {\n\tcase LWSAUTHM_DEFAULT:\n\t\tif (lws_find_string_in_file(basic_auth_login_file, plain, m))\n\t\t\tbreak;\n\t\tlwsl_err(\"%s: basic auth lookup failed\\n\", __func__);\n\t\treturn LCBA_FAILED_AUTH;\n\n\tcase LWSAUTHM_BASIC_AUTH_CALLBACK:\n\t\tbar = wsi->a.protocol->callback(wsi,\n\t\t\t\tLWS_CALLBACK_VERIFY_BASIC_AUTHORIZATION,\n\t\t\t\twsi->user_space, plain, (unsigned int)m);\n\t\tif (!bar)\n\t\t\treturn LCBA_FAILED_AUTH;\n\t\tbreak;\n\tdefault:\n\t\t/* Invalid auth mode so lets fail all authentication attempts */\n\t\treturn LCBA_FAILED_AUTH;\n\t}\n\n\t/*\n\t * Rewrite WSI_TOKEN_HTTP_AUTHORIZATION so it is just the\n\t * authorized username\n\t */\n\n\t*pcolon = '\\0';\n\twsi->http.ah->frags[fi].len = (uint16_t)lws_ptr_diff_size_t(pcolon, &plain[0]);\n\tpcolon = lws_hdr_simple_ptr(wsi, WSI_TOKEN_HTTP_AUTHORIZATION);\n\tstrncpy(pcolon, plain, (unsigned int)(ml - 1));\n\tpcolon[ml - 1] = '\\0';\n\tlwsl_info(\"%s: basic auth accepted for %s\\n\", __func__,\n\t\t lws_hdr_simple_ptr(wsi, WSI_TOKEN_HTTP_AUTHORIZATION));\n\n\treturn LCBA_CONTINUE;\n#else\n\treturn LCBA_FAILED_AUTH;\n#endif\n}\n\n#endif\n\n#if defined(LWS_WITH_HTTP_PROXY)\n/*\n * Set up an onward http proxy connection according to the mount this\n * uri falls under.  Notice this can also be starting the proxying of what was\n * originally an incoming h1 upgrade, or an h2 ws \"upgrade\".\n */\nint\nlws_http_proxy_start(struct lws *wsi, const struct lws_http_mount *hit,\n\t\t     char *uri_ptr, char ws)\n{\n\tchar ads[96], rpath[256], host[96], *pcolon, *pslash, unix_skt = 0;\n\tstruct lws_client_connect_info i;\n\tstruct lws *cwsi;\n\tint n, na;\n\n#if defined(LWS_ROLE_WS)\n\tif (ws)\n\t\t/*\n\t\t * Neither our inbound ws upgrade request side, nor our onward\n\t\t * ws client connection on our side can bind to the actual\n\t\t * protocol that only the remote inbound side and the remote\n\t\t * onward side understand.\n\t\t *\n\t\t * Instead these are both bound to our built-in \"lws-ws-proxy\"\n\t\t * protocol, which understands how to proxy between the two\n\t\t * sides.\n\t\t *\n\t\t * We bind the parent, inbound part here and our side of the\n\t\t * onward client connection is bound to the same handler using\n\t\t * the .local_protocol_name.\n\t\t */\n\t\tlws_bind_protocol(wsi, &lws_ws_proxy, __func__);\n#endif\n\tmemset(&i, 0, sizeof(i));\n\ti.context = lws_get_context(wsi);\n\n\tif (hit->origin[0] == '+')\n\t\tunix_skt = 1;\n\n\tpcolon = strchr(hit->origin, ':');\n\tpslash = strchr(hit->origin, '/');\n\tif (!pslash) {\n\t\tlwsl_err(\"Proxy mount origin '%s' must have /\\n\", hit->origin);\n\t\treturn -1;\n\t}\n\n\tif (unix_skt) {\n\t\tif (!pcolon) {\n\t\t\tlwsl_err(\"Proxy mount origin for unix skt must \"\n\t\t\t\t \"have address delimited by :\\n\");\n\n\t\t\treturn -1;\n\t\t}\n\t\tn = lws_ptr_diff(pcolon, hit->origin);\n\t\tpslash = pcolon;\n\t} else {\n\t\tif (pcolon > pslash)\n\t\t\tpcolon = NULL;\n\n\t\tif (pcolon)\n\t\t\tn = (int)(pcolon - hit->origin);\n\t\telse\n\t\t\tn = (int)(pslash - hit->origin);\n\n\t\tif (n >= (int)sizeof(ads) - 2)\n\t\t\tn = sizeof(ads) - 2;\n\t}\n\n\tmemcpy(ads, hit->origin, (unsigned int)n);\n\tads[n] = '\\0';\n\n\ti.address = ads;\n\ti.port = 80;\n\tif (hit->origin_protocol == LWSMPRO_HTTPS) {\n\t\ti.port = 443;\n\t\ti.ssl_connection = 1;\n\t}\n\tif (pcolon)\n\t\ti.port = atoi(pcolon + 1);\n\n\tn = lws_snprintf(rpath, sizeof(rpath) - 1, \"/%s/%s\",\n\t\t\t pslash + 1, uri_ptr + hit->mountpoint_len) - 1;\n\tlws_clean_url(rpath);\n\tn = (int)strlen(rpath);\n\tif (n && rpath[n - 1] == '/')\n\t\tn--;\n\n\tna = lws_hdr_total_length(wsi, WSI_TOKEN_HTTP_URI_ARGS);\n\tif (na) {\n\t\tchar *p;\n\t\tint budg;\n\n\t\tif (!n) /* don't start with the ?... use the first / if so */\n\t\t\tn++;\n\n\t\tp = rpath + n;\n\n\t\tif (na >= (int)sizeof(rpath) - n - 2) {\n\t\t\tlwsl_info(\"%s: query string %d longer \"\n\t\t\t\t  \"than we can handle\\n\", __func__,\n\t\t\t\t  na);\n\n\t\t\treturn -1;\n\t\t}\n\n\t\t*p++ = '?';\n\t\tbudg = lws_hdr_copy(wsi, p,\n\t\t\t     (int)(&rpath[sizeof(rpath) - 1] - p),\n\t\t\t     WSI_TOKEN_HTTP_URI_ARGS);\n\t       if (budg > 0)\n\t\t       p += budg;\n\n\t\t*p = '\\0';\n\t}\n\n\ti.path = rpath;\n\tlwsl_notice(\"%s: proxied path '%s'\\n\", __func__, i.path);\n\n\t/* incoming may be h1 or h2... if he sends h1 HOST, use that\n\t * directly, otherwise we must convert h2 :authority to h1\n\t * host */\n\n\ti.host = NULL;\n#if defined(LWS_ROLE_H2)\n\tn = lws_hdr_total_length(wsi, WSI_TOKEN_HTTP_COLON_AUTHORITY);\n\tif (n > 0)\n\t\ti.host = lws_hdr_simple_ptr(wsi, WSI_TOKEN_HTTP_COLON_AUTHORITY);\n\telse\n#endif\n\t{\n\t\tn = lws_hdr_total_length(wsi, WSI_TOKEN_HOST);\n\t\tif (n > 0) {\n\t\t\ti.host = lws_hdr_simple_ptr(wsi, WSI_TOKEN_HOST);\n\t\t}\n\t}\n\n#if 0\n\tif (i.address[0] != '+' ||\n\t    !lws_hdr_simple_ptr(wsi, WSI_TOKEN_HOST))\n\t\ti.host = i.address;\n\telse\n\t\ti.host = lws_hdr_simple_ptr(wsi, WSI_TOKEN_HOST);\n#endif\n\ti.origin = NULL;\n\tif (!ws) {\n\t\tif (lws_hdr_simple_ptr(wsi, WSI_TOKEN_POST_URI)\n#if defined(LWS_WITH_HTTP2)\n\t\t\t\t\t\t\t\t|| (\n\t\t\tlws_hdr_simple_ptr(wsi, WSI_TOKEN_HTTP_COLON_METHOD) &&\n\t\t\t!strcmp(lws_hdr_simple_ptr(wsi,\n\t\t\t\t\tWSI_TOKEN_HTTP_COLON_METHOD), \"post\")\n\t\t\t)\n#endif\n\t\t)\n\t\t\ti.method = \"POST\";\n\t\telse\n\t\t\ti.method = \"GET\";\n\t}\n\n\tif (i.host)\n\t\tlws_snprintf(host, sizeof(host), \"%s:%u\", i.host,\n\t\t\t\t\twsi->a.vhost->listen_port);\n\telse\n\t\tlws_snprintf(host, sizeof(host), \"%s:%d\", i.address, i.port);\n\n\ti.host = host;\n\n\ti.alpn = \"http/1.1\";\n\ti.parent_wsi = wsi;\n\ti.pwsi = &cwsi;\n#if defined(LWS_ROLE_WS)\n\ti.protocol = lws_hdr_simple_ptr(wsi, WSI_TOKEN_PROTOCOL);\n\tif (ws)\n\t\ti.local_protocol_name = \"lws-ws-proxy\";\n#endif\n\n//\ti.uri_replace_from = hit->origin;\n//\ti.uri_replace_to = hit->mountpoint;\n\n\tlwsl_info(\"proxying to %s port %d url %s, ssl %d, from %s, to %s\\n\",\n\t\t   i.address, i.port, i.path, i.ssl_connection,\n\t\t   i.uri_replace_from, i.uri_replace_to);\n\n\tif (!lws_client_connect_via_info(&i)) {\n\t\tlwsl_err(\"proxy connect fail\\n\");\n\n\t\t/*\n\t\t * ... we can't do the proxy action, but we can\n\t\t * cleanly return him a 503 and a description\n\t\t */\n\n\t\tlws_return_http_status(wsi,\n\t\t\tHTTP_STATUS_SERVICE_UNAVAILABLE,\n\t\t\t\"<h1>Service Temporarily Unavailable</h1>\"\n\t\t\t\"The server is temporarily unable to service \"\n\t\t\t\"your request due to maintenance downtime or \"\n\t\t\t\"capacity problems. Please try again later.\");\n\n\t\treturn 1;\n\t}\n\n\tlwsl_info(\"%s: setting proxy clientside on %s (parent %s)\\n\",\n\t\t  __func__, lws_wsi_tag(cwsi), lws_wsi_tag(lws_get_parent(cwsi)));\n\n\tcwsi->http.proxy_clientside = 1;\n\tif (ws) {\n\t\twsi->proxied_ws_parent = 1;\n\t\tcwsi->h1_ws_proxied = 1;\n\t\tif (i.protocol) {\n\t\t\tlwsl_debug(\"%s: (requesting '%s')\\n\",\n\t\t\t\t\t__func__, i.protocol);\n\t\t}\n\t}\n\n\treturn 0;\n}\n#endif\n\n\nstatic const char * const oprot[] = {\n\t\"http://\", \"https://\"\n};\n\n\nstatic int\nlws_http_redirect_hit(struct lws_context_per_thread *pt, struct lws *wsi,\n\t\t      const struct lws_http_mount *hit, char *uri_ptr,\n\t\t      int uri_len, int *h)\n{\n\tchar *s;\n\tint n;\n\n\t*h = 0;\n\ts = uri_ptr + hit->mountpoint_len;\n\n\t/*\n\t * if we have a mountpoint like https://xxx.com/yyy\n\t * there is an implied / at the end for our purposes since\n\t * we can only mount on a \"directory\".\n\t *\n\t * But if we just go with that, the browser cannot understand\n\t * that he is actually looking down one \"directory level\", so\n\t * even though we give him /yyy/abc.html he acts like the\n\t * current directory level is /.  So relative urls like \"x.png\"\n\t * wrongly look outside the mountpoint.\n\t *\n\t * Therefore if we didn't come in on a url with an explicit\n\t * / at the end, we must redirect to add it so the browser\n\t * understands he is one \"directory level\" down.\n\t */\n\tif ((hit->mountpoint_len > 1 ||\n\t     (hit->origin_protocol == LWSMPRO_REDIR_HTTP ||\n\t      hit->origin_protocol == LWSMPRO_REDIR_HTTPS)) &&\n\t    (*s != '/' ||\n\t     (hit->origin_protocol == LWSMPRO_REDIR_HTTP ||\n\t      hit->origin_protocol == LWSMPRO_REDIR_HTTPS)) &&\n\t    (hit->origin_protocol != LWSMPRO_CGI &&\n\t     hit->origin_protocol != LWSMPRO_CALLBACK)) {\n\t\tunsigned char *start = pt->serv_buf + LWS_PRE, *p = start,\n\t\t\t      *end = p + wsi->a.context->pt_serv_buf_size -\n\t\t\t\t\tLWS_PRE - 512;\n\n\t\t*h = 1;\n\n\t\tlwsl_info(\"Doing 301 '%s' org %s\\n\", s, hit->origin);\n\n\t\t/* > at start indicates deal with by redirect */\n\t\tif (hit->origin_protocol == LWSMPRO_REDIR_HTTP ||\n\t\t    hit->origin_protocol == LWSMPRO_REDIR_HTTPS)\n\t\t\tn = lws_snprintf((char *)end, 256, \"%s%s\",\n\t\t\t\t    oprot[hit->origin_protocol & 1],\n\t\t\t\t    hit->origin);\n\t\telse {\n\t\t\tif (!lws_hdr_total_length(wsi, WSI_TOKEN_HOST)) {\n#if defined(LWS_ROLE_H2)\n\t\t\t\tif (!lws_hdr_total_length(wsi,\n\t\t\t\t\t\tWSI_TOKEN_HTTP_COLON_AUTHORITY))\n#endif\n\t\t\t\t\tgoto bail_nuke_ah;\n#if defined(LWS_ROLE_H2)\n\t\t\t\tn = lws_snprintf((char *)end, 256,\n\t\t\t\t    \"%s%s%s/\", oprot[!!lws_is_ssl(wsi)],\n\t\t\t\t    lws_hdr_simple_ptr(wsi,\n\t\t\t\t\t\tWSI_TOKEN_HTTP_COLON_AUTHORITY),\n\t\t\t\t    uri_ptr);\n#else\n\t\t\t\t;\n#endif\n\t\t\t} else\n\t\t\t\tn = lws_snprintf((char *)end, 256,\n\t\t\t\t    \"%s%s%s/\", oprot[!!lws_is_ssl(wsi)],\n\t\t\t\t    lws_hdr_simple_ptr(wsi, WSI_TOKEN_HOST),\n\t\t\t\t    uri_ptr);\n\t\t}\n\n\t\tlws_clean_url((char *)end);\n\t\tn = lws_http_redirect(wsi, HTTP_STATUS_MOVED_PERMANENTLY,\n\t\t\t\t      end, n, &p, end);\n\t\tif ((int)n < 0)\n\t\t\tgoto bail_nuke_ah;\n\n\t\treturn lws_http_transaction_completed(wsi);\n\t}\n\n\treturn 0;\n\nbail_nuke_ah:\n\tlws_header_table_detach(wsi, 1);\n\n\treturn 1;\n}\n\nint\nlws_http_action(struct lws *wsi)\n{\n\tstruct lws_context_per_thread *pt = &wsi->a.context->pt[(int)wsi->tsi];\n\tint uri_len = 0, meth, m, http_version_len, ha;\n\tconst struct lws_http_mount *hit = NULL;\n\tenum http_version request_version;\n\tstruct lws_process_html_args args;\n\tenum http_conn_type conn_type;\n\tchar content_length_str[32];\n\tchar http_version_str[12];\n\tchar http_conn_str[25];\n\tchar *uri_ptr = NULL;\n#if defined(LWS_WITH_FILE_OPS)\n\tchar *s;\n#endif\n\tunsigned int n;\n\n\tmeth = lws_http_get_uri_and_method(wsi, &uri_ptr, &uri_len);\n\tif (meth < 0 || meth >= (int)LWS_ARRAY_SIZE(method_names))\n\t\tgoto bail_nuke_ah;\n\n\tlws_metrics_tag_wsi_add(wsi, \"vh\", wsi->a.vhost->name);\n\tlws_metrics_tag_wsi_add(wsi, \"meth\", method_names[meth]);\n\n\t/* we insist on absolute paths */\n\n\tif (!uri_ptr || uri_ptr[0] != '/') {\n\t\tlws_return_http_status(wsi, HTTP_STATUS_FORBIDDEN, NULL);\n\n\t\tgoto bail_nuke_ah;\n\t}\n\n\tlwsl_info(\"Method: '%s' (%d), request for '%s'\\n\", method_names[meth],\n\t\t  meth, uri_ptr);\n\n\tif (wsi->role_ops &&\n\t    lws_rops_fidx(wsi->role_ops, LWS_ROPS_check_upgrades))\n\t\tswitch (lws_rops_func_fidx(wsi->role_ops,\n\t\t\t\t\t   LWS_ROPS_check_upgrades).\n\t\t\t\t\t\t\tcheck_upgrades(wsi)) {\n\t\tcase LWS_UPG_RET_DONE:\n\t\t\treturn 0;\n\t\tcase LWS_UPG_RET_CONTINUE:\n\t\t\tbreak;\n\t\tcase LWS_UPG_RET_BAIL:\n\t\t\tgoto bail_nuke_ah;\n\t\t}\n\n\tif (lws_ensure_user_space(wsi))\n\t\tgoto bail_nuke_ah;\n\n\t/* HTTP header had a content length? */\n\n\twsi->http.rx_content_length = 0;\n\twsi->http.content_length_explicitly_zero = 0;\n\tif (lws_hdr_total_length(wsi, WSI_TOKEN_POST_URI)\n#if defined(LWS_WITH_HTTP_UNCOMMON_HEADERS)\n\t\t\t||\n\t    lws_hdr_total_length(wsi, WSI_TOKEN_PATCH_URI) ||\n\t    lws_hdr_total_length(wsi, WSI_TOKEN_PUT_URI)\n#endif\n\t    )\n\t\twsi->http.rx_content_length = 100 * 1024 * 1024;\n\n\tif (lws_hdr_total_length(wsi, WSI_TOKEN_HTTP_CONTENT_LENGTH) &&\n\t    lws_hdr_copy(wsi, content_length_str,\n\t\t\t sizeof(content_length_str) - 1,\n\t\t\t WSI_TOKEN_HTTP_CONTENT_LENGTH) > 0) {\n\t\twsi->http.rx_content_remain = wsi->http.rx_content_length =\n\t\t\t\t(lws_filepos_t)atoll(content_length_str);\n\t\tif (!wsi->http.rx_content_length) {\n\t\t\twsi->http.content_length_explicitly_zero = 1;\n\t\t\tlwsl_debug(\"%s: explicit 0 content-length\\n\", __func__);\n\t\t}\n\t}\n\n\tif (wsi->mux_substream) {\n\t\twsi->http.request_version = HTTP_VERSION_2;\n\t} else {\n\t\t/* http_version? Default to 1.0, override with token: */\n\t\trequest_version = HTTP_VERSION_1_0;\n\n\t\t/* Works for single digit HTTP versions. : */\n\t\thttp_version_len = lws_hdr_total_length(wsi, WSI_TOKEN_HTTP);\n\t\tif (http_version_len > 7 &&\n\t\t    lws_hdr_copy(wsi, http_version_str,\n\t\t\t\t sizeof(http_version_str) - 1,\n\t\t\t\t WSI_TOKEN_HTTP) > 0 &&\n\t\t    http_version_str[5] == '1' && http_version_str[7] == '1')\n\t\t\trequest_version = HTTP_VERSION_1_1;\n\n\t\twsi->http.request_version = request_version;\n\n\t\t/* HTTP/1.1 defaults to \"keep-alive\", 1.0 to \"close\" */\n\t\tif (request_version == HTTP_VERSION_1_1)\n\t\t\tconn_type = HTTP_CONNECTION_KEEP_ALIVE;\n\t\telse\n\t\t\tconn_type = HTTP_CONNECTION_CLOSE;\n\n\t\t/* Override default if http \"Connection:\" header: */\n\t\tif (lws_hdr_total_length(wsi, WSI_TOKEN_CONNECTION) &&\n\t\t    lws_hdr_copy(wsi, http_conn_str, sizeof(http_conn_str) - 1,\n\t\t\t\t WSI_TOKEN_CONNECTION) > 0) {\n\t\t\thttp_conn_str[sizeof(http_conn_str) - 1] = '\\0';\n\t\t\tif (!strcasecmp(http_conn_str, \"keep-alive\"))\n\t\t\t\tconn_type = HTTP_CONNECTION_KEEP_ALIVE;\n\t\t\telse\n\t\t\t\tif (!strcasecmp(http_conn_str, \"close\"))\n\t\t\t\t\tconn_type = HTTP_CONNECTION_CLOSE;\n\t\t}\n\t\twsi->http.conn_type = conn_type;\n\t}\n\n\tn = (unsigned int)wsi->a.protocol->callback(wsi, LWS_CALLBACK_FILTER_HTTP_CONNECTION,\n\t\t\t\t    wsi->user_space, uri_ptr, (unsigned int)uri_len);\n\tif (n) {\n\t\tlwsl_info(\"LWS_CALLBACK_HTTP closing\\n\");\n\n\t\treturn 1;\n\t}\n\t/*\n\t * if there is content supposed to be coming,\n\t * put a timeout on it having arrived\n\t */\n\tif (!wsi->mux_stream_immortal)\n\t\tlws_set_timeout(wsi, PENDING_TIMEOUT_HTTP_CONTENT,\n\t\t\t\t(int)wsi->a.context->timeout_secs);\n#if defined(LWS_WITH_TLS)\n\tif (wsi->tls.redirect_to_https) {\n\t\t/*\n\t\t * We accepted http:// only so we could redirect to\n\t\t * https://, so issue the redirect.  Create the redirection\n\t\t * URI from the host: header, and regenerate the path part from\n\t\t * the parsed pieces\n\t\t */\n\t\tunsigned char *start = pt->serv_buf + LWS_PRE, *p = start,\n\t\t\t      *end = p + wsi->a.context->pt_serv_buf_size -\n\t\t\t\t     LWS_PRE;\n\n\t\tn = (unsigned int)lws_hdr_total_length(wsi, WSI_TOKEN_HOST);\n\t\tif (!n || n > 128)\n\t\t\tgoto bail_nuke_ah;\n\n\t\tif (!lws_hdr_simple_ptr(wsi, WSI_TOKEN_HOST))\n\t\t\tgoto bail_nuke_ah;\n\n\t\tp += lws_snprintf((char *)p, lws_ptr_diff_size_t(end, p), \"https://\");\n\t\tmemcpy(p, lws_hdr_simple_ptr(wsi, WSI_TOKEN_HOST), n);\n\t\tp += n;\n\t\t*p++ = '/';\n\t\tif (uri_len >= lws_ptr_diff(end, p))\n\t\t\tgoto bail_nuke_ah;\n\n\t\tif (uri_ptr[0])\n\t\t\tp--;\n\t\tmemcpy(p, uri_ptr, (unsigned int)uri_len);\n\t\tp += uri_len;\n\n\t\tn = 0;\n\t\twhile (lws_hdr_copy_fragment(wsi, (char *)p + 1,\n\t\t\t\t\t     lws_ptr_diff(end, p) - 2,\n\t\t\t\t\t     WSI_TOKEN_HTTP_URI_ARGS, (int)n) > 0) {\n\t\t\t*p = n ? '&' : '?';\n\t\t\tp += strlen((char *)p);\n\t\t\tif (p >= end - 2)\n\t\t\t\tgoto bail_nuke_ah;\n\t\t\tn++;\n\t\t}\n\n\t\tn = (unsigned int)lws_ptr_diff(p, start);\n\n\t\tp += LWS_PRE;\n\t\tn = (unsigned int)lws_http_redirect(wsi, HTTP_STATUS_MOVED_PERMANENTLY,\n\t\t\t\t      start, (int)n, &p, end);\n\t\tif ((int)n < 0)\n\t\t\tgoto bail_nuke_ah;\n\n\t\treturn lws_http_transaction_completed(wsi);\n\t}\n#endif\n\n#ifdef LWS_WITH_ACCESS_LOG\n\tlws_prepare_access_log_info(wsi, uri_ptr, uri_len, meth);\n#endif\n\n\t/* can we serve it from the mount list? */\n\n\thit = lws_find_mount(wsi, uri_ptr, uri_len);\n\tif (!hit) {\n\t\t/* deferred cleanup and reset to protocols[0] */\n\n\t\tlwsl_info(\"no hit\\n\");\n\n\t\tif (lws_bind_protocol(wsi, &wsi->a.vhost->protocols[0],\n\t\t\t\t      \"no mount hit\"))\n\t\t\treturn 1;\n\n\t\tlwsi_set_state(wsi, LRS_DOING_TRANSACTION);\n\n\t\tm = wsi->a.protocol->callback(wsi, LWS_CALLBACK_HTTP,\n\t\t\t\t    wsi->user_space, uri_ptr, (unsigned int)uri_len);\n\n\t\tgoto after;\n\t}\n\n#if defined(LWS_WITH_FILE_OPS)\n\ts = uri_ptr + hit->mountpoint_len;\n#endif\n\tn = (unsigned int)lws_http_redirect_hit(pt, wsi, hit, uri_ptr, uri_len, &ha);\n\tif (ha)\n\t\treturn (int)n;\n\n#if defined(LWS_WITH_HTTP_BASIC_AUTH)\n\n\t/* basic auth? */\n\n\tswitch (lws_check_basic_auth(wsi, hit->basic_auth_login_file,\n\t\t\t\t     hit->auth_mask & AUTH_MODE_MASK)) {\n\tcase LCBA_CONTINUE:\n\t\tbreak;\n\tcase LCBA_FAILED_AUTH:\n\t\treturn lws_unauthorised_basic_auth(wsi);\n\tcase LCBA_END_TRANSACTION:\n\t\tlws_return_http_status(wsi, HTTP_STATUS_FORBIDDEN, NULL);\n\t\treturn lws_http_transaction_completed(wsi);\n\t}\n#endif\n\n#if defined(LWS_WITH_HTTP_PROXY)\n\t/*\n\t * The mount is a reverse proxy?\n\t */\n\n\t// if (hit)\n\t// lwsl_notice(\"%s: origin_protocol: %d\\n\", __func__, hit->origin_protocol);\n\t//else\n\t//\tlwsl_notice(\"%s: no hit\\n\", __func__);\n\n\tif (hit->origin_protocol == LWSMPRO_HTTPS ||\n\t    hit->origin_protocol == LWSMPRO_HTTP) {\n\t\tn = (unsigned int)lws_http_proxy_start(wsi, hit, uri_ptr, 0);\n\t\t// lwsl_notice(\"proxy start says %d\\n\", n);\n\t\tif (n)\n\t\t\treturn (int)n;\n\n\t\tgoto deal_body;\n\t}\n#endif\n\n\t/*\n\t * A particular protocol callback is mounted here?\n\t *\n\t * For the duration of this http transaction, bind us to the\n\t * associated protocol\n\t */\n\tif (hit->origin_protocol == LWSMPRO_CALLBACK || hit->protocol) {\n\t\tconst struct lws_protocols *pp;\n\t\tconst char *name = hit->origin;\n\t\tif (hit->protocol)\n\t\t\tname = hit->protocol;\n\n\t\tpp = lws_vhost_name_to_protocol(wsi->a.vhost, name);\n\t\tif (!pp) {\n\t\t\tlwsl_err(\"Unable to find plugin '%s'\\n\",\n\t\t\t\t hit->origin);\n\t\t\treturn 1;\n\t\t}\n\n\t\tif (lws_bind_protocol(wsi, pp, \"http action CALLBACK bind\"))\n\t\t\treturn 1;\n\n\t\tlwsl_debug(\"%s: %s, checking access rights for mask 0x%x\\n\",\n\t\t\t\t__func__, hit->origin, hit->auth_mask);\n\n\t\targs.p = uri_ptr;\n\t\targs.len = uri_len;\n\t\targs.max_len = hit->auth_mask & ~AUTH_MODE_MASK;\n\t\targs.final = 0; /* used to signal callback dealt with it */\n\t\targs.chunked = 0;\n\n\t\tn = (unsigned int)wsi->a.protocol->callback(wsi,\n\t\t\t\t\t    LWS_CALLBACK_CHECK_ACCESS_RIGHTS,\n\t\t\t\t\t    wsi->user_space, &args, 0);\n\t\tif (n) {\n\t\t\tlws_return_http_status(wsi, HTTP_STATUS_UNAUTHORIZED,\n\t\t\t\t\t       NULL);\n\t\t\tgoto bail_nuke_ah;\n\t\t}\n\t\tif (args.final) /* callback completely handled it well */\n\t\t\treturn 0;\n\n\t\tif (hit->cgienv && wsi->a.protocol->callback(wsi,\n\t\t\t\tLWS_CALLBACK_HTTP_PMO,\n\t\t\t\twsi->user_space, (void *)hit->cgienv, 0))\n\t\t\treturn 1;\n\n\t\tif (lws_hdr_total_length(wsi, WSI_TOKEN_POST_URI)) {\n\t\t\tm = wsi->a.protocol->callback(wsi, LWS_CALLBACK_HTTP,\n\t\t\t\t\t    wsi->user_space,\n\t\t\t\t\t    uri_ptr + hit->mountpoint_len,\n\t\t\t\t\t    (unsigned int)uri_len - hit->mountpoint_len);\n\t\t\tgoto after;\n\t\t}\n\t}\n\n#ifdef LWS_WITH_CGI\n\t/* did we hit something with a cgi:// origin? */\n\tif (hit->origin_protocol == LWSMPRO_CGI) {\n\t\tconst char *cmd[] = {\n\t\t\tNULL, /* replace with cgi path */\n\t\t\tNULL\n\t\t};\n\n\t\tlwsl_debug(\"%s: cgi\\n\", __func__);\n\t\tcmd[0] = hit->origin;\n\n\t\tn = 5;\n\t\tif (hit->cgi_timeout)\n\t\t\tn = (unsigned int)hit->cgi_timeout;\n\n\t\tn = (unsigned int)lws_cgi(wsi, cmd, hit->mountpoint_len, (int)n,\n\t\t\t    hit->cgienv);\n\t\tif (n) {\n\t\t\tlwsl_err(\"%s: cgi failed\\n\", __func__);\n\t\t\treturn -1;\n\t\t}\n\n\t\tgoto deal_body;\n\t}\n#endif\n\n#if defined(LWS_WITH_FILE_OPS)\n\tn = (unsigned int)(uri_len - lws_ptr_diff(s, uri_ptr));\n\tif (s[0] == '\\0' || (n == 1 && s[n - 1] == '/'))\n\t\ts = (char *)hit->def;\n\tif (!s)\n\t\ts = \"index.html\";\n#endif\n\n\twsi->cache_secs = (unsigned int)hit->cache_max_age;\n\twsi->cache_reuse = hit->cache_reusable;\n\twsi->cache_revalidate = hit->cache_revalidate;\n\twsi->cache_intermediaries = hit->cache_intermediaries;\n\n#if defined(LWS_WITH_FILE_OPS)\n\tm = 1;\n\tif (hit->origin_protocol == LWSMPRO_FILE)\n\t\tm = lws_http_serve(wsi, s, hit->origin, hit);\n\n\tif (m > 0)\n#endif\n\t{\n\t\t/*\n\t\t * lws_return_http_status(wsi, HTTP_STATUS_NOT_FOUND, NULL);\n\t\t */\n\t\tif (hit->protocol) {\n\t\t\tconst struct lws_protocols *pp =\n\t\t\t\t\tlws_vhost_name_to_protocol(\n\t\t\t\t\t\twsi->a.vhost, hit->protocol);\n\n\t\t\t/* coverity */\n\t\t\tif (!pp)\n\t\t\t\treturn 1;\n\n\t\t\tlwsi_set_state(wsi, LRS_DOING_TRANSACTION);\n\n\t\t\tif (lws_bind_protocol(wsi, pp, \"http_action HTTP\"))\n\t\t\t\treturn 1;\n\n\t\t\tm = pp->callback(wsi, LWS_CALLBACK_HTTP,\n\t\t\t\t\t wsi->user_space,\n\t\t\t\t\t uri_ptr + hit->mountpoint_len,\n\t\t\t\t\t (size_t)(uri_len - hit->mountpoint_len));\n\t\t} else\n\t\t\tm = wsi->a.protocol->callback(wsi, LWS_CALLBACK_HTTP,\n\t\t\t\t    wsi->user_space, uri_ptr, (size_t)uri_len);\n\t}\n\nafter:\n\tif (m) {\n\t\tlwsl_info(\"LWS_CALLBACK_HTTP closing\\n\");\n\n\t\treturn 1;\n\t}\n\n#if defined(LWS_WITH_CGI) || defined(LWS_WITH_HTTP_PROXY)\ndeal_body:\n#endif\n\t/*\n\t * If we're not issuing a file, check for content_length or\n\t * HTTP keep-alive. No keep-alive header allocation for\n\t * ISSUING_FILE, as this uses HTTP/1.0.\n\t *\n\t * In any case, return 0 and let lws_read decide how to\n\t * proceed based on state\n\t */\n\tif (lwsi_state(wsi) == LRS_ISSUING_FILE)\n\t\treturn 0;\n\n\t/* Prepare to read body if we have a content length: */\n\tlwsl_debug(\"wsi->http.rx_content_length %lld %d %d\\n\",\n\t\t   (long long)wsi->http.rx_content_length,\n\t\t   wsi->upgraded_to_http2, wsi->mux_substream);\n\n\tif (wsi->http.content_length_explicitly_zero &&\n\t    lws_hdr_total_length(wsi, WSI_TOKEN_POST_URI)) {\n\n\t\t/*\n\t\t * POST with an explicit content-length of zero\n\t\t *\n\t\t * If we don't give the user code the empty HTTP_BODY callback,\n\t\t * he may become confused to hear the HTTP_BODY_COMPLETION (due\n\t\t * to, eg, instantiation of lws_spa never happened).\n\t\t *\n\t\t * HTTP_BODY_COMPLETION is responsible for sending the result\n\t\t * status code and result body if any, and to do the transaction\n\t\t * complete processing.\n\t\t */\n\t\tif (wsi->a.protocol->callback(wsi, LWS_CALLBACK_HTTP_BODY,\n\t\t\t\t\t    wsi->user_space, NULL, 0))\n\t\t\treturn 1;\n\t\tif (wsi->a.protocol->callback(wsi, LWS_CALLBACK_HTTP_BODY_COMPLETION,\n\t\t\t\t\t    wsi->user_space, NULL, 0))\n\t\t\treturn 1;\n\n\t\treturn 0;\n\t}\n\n\tif (wsi->http.rx_content_length <= 0)\n\t\treturn 0;\n\n\tif (lwsi_state(wsi) != LRS_DISCARD_BODY) {\n\t\tlwsi_set_state(wsi, LRS_BODY);\n\t\tlwsl_info(\"%s: %s: LRS_BODY state set (0x%x)\\n\", __func__,\n\t\t\t  lws_wsi_tag(wsi), (int)wsi->wsistate);\n\t}\n\twsi->http.rx_content_remain = wsi->http.rx_content_length;\n\n\t/*\n\t * At this point we have transitioned from deferred\n\t * action to expecting BODY on the stream wsi, if it's\n\t * in a bundle like h2.  So if the stream wsi has its\n\t * own buflist, we need to deal with that first.\n\t */\n\n\twhile (1) {\n\t\tstruct lws_tokens ebuf;\n\t\tint m;\n\n\t\tebuf.len = (int)lws_buflist_next_segment_len(&wsi->buflist,\n\t\t\t\t\t\t\t     &ebuf.token);\n\t\tif (!ebuf.len)\n\t\t\tbreak;\n\n\t\tlwsl_debug(\"%s: consuming %d\\n\", __func__, (int)ebuf.len);\n\t\tm = lws_read_h1(wsi, ebuf.token, (lws_filepos_t)ebuf.len);\n\t\tif (m < 0)\n\t\t\treturn -1;\n\n\t\tif (lws_buflist_aware_finished_consuming(wsi, &ebuf, m, 1,\n\t\t\t\t\t\t\t __func__))\n\t\t\treturn -1;\n\t}\n\n\treturn 0;\n\nbail_nuke_ah:\n\tlws_header_table_detach(wsi, 1);\n\n\treturn 1;\n}\n\nint\nlws_confirm_host_header(struct lws *wsi)\n{\n\tstruct lws_tokenize ts;\n\tlws_tokenize_elem e;\n\tint port = 80, n;\n\tchar buf[128];\n\n\t/*\n\t * this vhost wants us to validate what the\n\t * client sent against our vhost name\n\t */\n\n\tif (!lws_hdr_total_length(wsi, WSI_TOKEN_HOST)) {\n\t\tlwsl_info(\"%s: missing host on upgrade\\n\", __func__);\n\n\t\treturn 1;\n\t}\n\n#if defined(LWS_WITH_TLS)\n\tif (wsi->tls.ssl)\n\t\tport = 443;\n#endif\n\n\tlws_tokenize_init(&ts, buf, LWS_TOKENIZE_F_DOT_NONTERM /* server.com */|\n\t\t\t\t    LWS_TOKENIZE_F_NO_FLOATS /* 1.server.com */|\n\t\t\t\t    LWS_TOKENIZE_F_MINUS_NONTERM /* a-b.com */);\n\tn = lws_hdr_copy(wsi, buf, sizeof(buf) - 1, WSI_TOKEN_HOST);\n\tif (n <= 0) {\n\t\tlwsl_info(\"%s: missing or oversize host header\\n\", __func__);\n\t\treturn 1;\n\t}\n\tts.len = (size_t)n;\n\n\tif (lws_tokenize(&ts) != LWS_TOKZE_TOKEN)\n\t\tgoto bad_format;\n\n\tif (strncmp(ts.token, wsi->a.vhost->name, ts.token_len)) {\n\t\tbuf[(size_t)(ts.token - buf) + ts.token_len] = '\\0';\n\t\tlwsl_info(\"%s: '%s' in host hdr but vhost name %s\\n\",\n\t\t\t  __func__, ts.token, wsi->a.vhost->name);\n\t\treturn 1;\n\t}\n\n\te = lws_tokenize(&ts);\n\tif (e == LWS_TOKZE_DELIMITER && ts.token[0] == ':') {\n\t\tif (lws_tokenize(&ts) != LWS_TOKZE_INTEGER)\n\t\t\tgoto bad_format;\n\t\telse\n\t\t\tport = atoi(ts.token);\n\t} else\n\t\tif (e != LWS_TOKZE_ENDED)\n\t\t\tgoto bad_format;\n\n\tif (wsi->a.vhost->listen_port != port) {\n\t\tlwsl_info(\"%s: host port %d mismatches vhost port %d\\n\",\n\t\t\t  __func__, port, wsi->a.vhost->listen_port);\n\t\treturn 1;\n\t}\n\n\tlwsl_debug(\"%s: host header OK\\n\", __func__);\n\n\treturn 0;\n\nbad_format:\n\tlwsl_info(\"%s: bad host header format\\n\", __func__);\n\n\treturn 1;\n}\n\n#if defined(LWS_WITH_SERVER)\nint\nlws_http_to_fallback(struct lws *wsi, unsigned char *obuf, size_t olen)\n{\n\tconst struct lws_role_ops *role = &role_ops_raw_skt;\n\tconst struct lws_protocols *p1, *protocol =\n\t\t\t &wsi->a.vhost->protocols[wsi->a.vhost->raw_protocol_index];\n\tchar ipbuf[64];\n\tint n;\n\n\tif (wsi->a.vhost->listen_accept_role &&\n\t    lws_role_by_name(wsi->a.vhost->listen_accept_role))\n\t\trole = lws_role_by_name(wsi->a.vhost->listen_accept_role);\n\n\tif (wsi->a.vhost->listen_accept_protocol) {\n\t\tp1 = lws_vhost_name_to_protocol(wsi->a.vhost,\n\t\t\t    wsi->a.vhost->listen_accept_protocol);\n\t\tif (p1)\n\t\t\tprotocol = p1;\n\t}\n\n\tlws_bind_protocol(wsi, protocol, __func__);\n\n\tlws_role_transition(wsi, LWSIFR_SERVER, LRS_ESTABLISHED, role);\n\n\tlws_header_table_detach(wsi, 0);\n\tlws_set_timeout(wsi, NO_PENDING_TIMEOUT, 0);\n\n\tn = LWS_CALLBACK_SERVER_NEW_CLIENT_INSTANTIATED;\n\tif (wsi->role_ops->adoption_cb[1])\n\t\tn = wsi->role_ops->adoption_cb[1];\n\n\tipbuf[0] = '\\0';\n#if !defined(LWS_PLAT_OPTEE)\n\tlws_get_peer_simple(wsi, ipbuf, sizeof(ipbuf));\n#endif\n\n\tlwsl_notice(\"%s: vh %s, peer: %s, role %s, \"\n\t\t    \"protocol %s, cb %d, ah %p\\n\", __func__, wsi->a.vhost->name,\n\t\t    ipbuf, role ? role->name : \"null\", protocol->name, n,\n\t\t    wsi->http.ah);\n\n\tif ((wsi->a.protocol->callback)(wsi, (enum lws_callback_reasons)n, wsi->user_space, NULL, 0))\n\t\treturn 1;\n\n\tn = LWS_CALLBACK_RAW_RX;\n\tif (wsi->role_ops->rx_cb[lwsi_role_server(wsi)])\n\t\tn = wsi->role_ops->rx_cb[lwsi_role_server(wsi)];\n\tif (wsi->a.protocol->callback(wsi, (enum lws_callback_reasons)n, wsi->user_space, obuf, olen))\n\t\treturn 1;\n\n\treturn 0;\n}\n\nint\nlws_handshake_server(struct lws *wsi, unsigned char **buf, size_t len)\n{\n\tstruct lws_context *context = lws_get_context(wsi);\n\tstruct lws_context_per_thread *pt = &context->pt[(int)wsi->tsi];\n#if defined(LWS_WITH_HTTP2)\n\tstruct allocated_headers *ah;\n#endif\n\tunsigned char *obuf = *buf;\n#if defined(LWS_WITH_HTTP2)\n\tchar tbuf[128], *p;\n#endif\n\tsize_t olen = len;\n\tint n = 0, m, i;\n\n\tif (len >= 10000000) {\n\t\tlwsl_err(\"%s: assert: len %ld\\n\", __func__, (long)len);\n\t\tassert(0);\n\t}\n\n\tif (!wsi->http.ah) {\n\t\tlwsl_err(\"%s: assert: NULL ah\\n\", __func__);\n\t\tassert(0);\n\t}\n\n\twhile (len) {\n\t\tif (!lwsi_role_server(wsi) || !lwsi_role_http(wsi)) {\n\t\t\tlwsl_err(\"%s: bad wsi role 0x%x\\n\", __func__,\n\t\t\t\t\t(int)lwsi_role(wsi));\n\t\t\tgoto bail_nuke_ah;\n\t\t}\n\n\t\ti = (int)len;\n\t\tm = lws_parse(wsi, *buf, &i);\n\t\tlwsl_info(\"%s: parsed count %d\\n\", __func__, (int)len - i);\n\t\t(*buf) += (int)len - i;\n\t\tlen = (unsigned int)i;\n\n\t\tif (m == LPR_DO_FALLBACK) {\n\n\t\t\t/*\n\t\t\t * http parser went off the rails and\n\t\t\t * LWS_SERVER_OPTION_FALLBACK_TO_APPLY_LISTEN_\n\t\t\t * ACCEPT_CONFIG is set on this vhost.\n\t\t\t *\n\t\t\t * We are transitioning from http with an AH, to\n\t\t\t * a backup role (raw-skt, by default).  Drop\n\t\t\t * the ah, bind to the role with mode as\n\t\t\t * ESTABLISHED.\n\t\t\t */\nraw_transition:\n\n\t\t\tif (lws_http_to_fallback(wsi, obuf, olen)) {\n\t\t\t\tlwsl_info(\"%s: fallback -> close\\n\", __func__);\n\t\t\t\tgoto bail_nuke_ah;\n\t\t\t}\n\n\t\t\t(*buf) = obuf + olen;\n\n\t\t\treturn 0;\n\t\t}\n\t\tif (m) {\n\t\t\tlwsl_info(\"lws_parse failed\\n\");\n\t\t\tgoto bail_nuke_ah;\n\t\t}\n\n\t\t/* coverity... */\n\t\tif (!wsi->http.ah)\n\t\t\tgoto bail_nuke_ah;\n\n\t\tif (wsi->http.ah->parser_state != WSI_PARSING_COMPLETE)\n\t\t\tcontinue;\n\n\t\tlwsl_parser(\"%s: lws_parse sees parsing complete\\n\", __func__);\n\n\t\t/* select vhost */\n\n\t\tif (wsi->a.vhost->listen_port &&\n\t\t    lws_hdr_total_length(wsi, WSI_TOKEN_HOST)) {\n\t\t\tstruct lws_vhost *vhost = lws_select_vhost(\n\t\t\t\tcontext, wsi->a.vhost->listen_port,\n\t\t\t\tlws_hdr_simple_ptr(wsi, WSI_TOKEN_HOST));\n\n\t\t\tif (vhost)\n\t\t\t\tlws_vhost_bind_wsi(vhost, wsi);\n\t\t} else\n\t\t\tlwsl_info(\"no host\\n\");\n\n\t\tif ((!lwsi_role_h2(wsi) || !lwsi_role_server(wsi)) &&\n\t\t    (!wsi->conn_stat_done))\n\t\t\twsi->conn_stat_done = 1;\n\n\t\t/* check for unwelcome guests */\n#if defined(LWS_WITH_HTTP_UNCOMMON_HEADERS)\n\t\tif (wsi->a.context->reject_service_keywords) {\n\t\t\tconst struct lws_protocol_vhost_options *rej =\n\t\t\t\t\twsi->a.context->reject_service_keywords;\n\t\t\tchar ua[384], *msg = NULL;\n\n\t\t\tif (lws_hdr_copy(wsi, ua, sizeof(ua) - 1,\n\t\t\t\t\t WSI_TOKEN_HTTP_USER_AGENT) > 0) {\n#ifdef LWS_WITH_ACCESS_LOG\n\t\t\t\tchar *uri_ptr = NULL;\n\t\t\t\tint meth, uri_len;\n#endif\n\t\t\t\tua[sizeof(ua) - 1] = '\\0';\n\t\t\t\twhile (rej) {\n\t\t\t\t\tif (!strstr(ua, rej->name)) {\n\t\t\t\t\t\trej = rej->next;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg = strchr(rej->value, ' ');\n\t\t\t\t\tif (msg)\n\t\t\t\t\t\tmsg++;\n\t\t\t\t\tlws_return_http_status(wsi,\n\t\t\t\t\t\t(unsigned int)atoi(rej->value), msg);\n#ifdef LWS_WITH_ACCESS_LOG\n\t\t\t\t\tmeth = lws_http_get_uri_and_method(wsi,\n\t\t\t\t\t\t\t&uri_ptr, &uri_len);\n\t\t\t\t\tif (meth >= 0)\n\t\t\t\t\t\tlws_prepare_access_log_info(wsi,\n\t\t\t\t\t\t\turi_ptr, uri_len, meth);\n\n\t\t\t\t\t/* wsi close will do the log */\n#endif\n\t\t\t\t\t/*\n\t\t\t\t\t * We don't want anything from\n\t\t\t\t\t * this rejected guy.  Follow\n\t\t\t\t\t * the close flow, not the\n\t\t\t\t\t * transaction complete flow.\n\t\t\t\t\t */\n\t\t\t\t\tgoto bail_nuke_ah;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n#endif\n\t\t/*\n\t\t * So he may have come to us requesting one or another kind\n\t\t * of upgrade from http... but we may want to redirect him at\n\t\t * http level.  In that case, we need to check the redirect\n\t\t * situation even though he's not actually wanting http and\n\t\t * prioritize returning that if there is one.\n\t\t */\n\n\t\t{\n\t\t\tconst struct lws_http_mount *hit = NULL;\n\t\t\tint uri_len = 0, ha, n;\n\t\t\tchar *uri_ptr = NULL;\n\n\t\t\tn = lws_http_get_uri_and_method(wsi, &uri_ptr, &uri_len);\n\t\t\tif (n >= 0) {\n\t\t\t\thit = lws_find_mount(wsi, uri_ptr, uri_len);\n\t\t\t\tif (hit) {\n\t\t\t\t\tn = lws_http_redirect_hit(pt, wsi, hit, uri_ptr,\n\t\t\t\t\t\t\t\t  uri_len, &ha);\n\t\t\t\t\tif (ha)\n\t\t\t\t\t\treturn n;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\n\t\tif (lws_hdr_total_length(wsi, WSI_TOKEN_CONNECT)) {\n\t\t\tlwsl_info(\"Changing to RAW mode\\n\");\n\t\t\tgoto raw_transition;\n\t\t}\n\n\t\tlwsi_set_state(wsi, LRS_PRE_WS_SERVING_ACCEPT);\n\t\tlws_set_timeout(wsi, NO_PENDING_TIMEOUT, 0);\n\n\t\tif (lws_hdr_total_length(wsi, WSI_TOKEN_UPGRADE)) {\n\n\t\t\tconst char *up = lws_hdr_simple_ptr(wsi,\n\t\t\t\t\t\t\t    WSI_TOKEN_UPGRADE);\n\n\t\t\tif (strcasecmp(up, \"websocket\") &&\n\t\t\t    strcasecmp(up, \"h2c\")) {\n\t\t\t\tlwsl_info(\"Unknown upgrade '%s'\\n\", up);\n\n\t\t\t\tif (lws_return_http_status(wsi,\n\t\t\t\t\t\tHTTP_STATUS_FORBIDDEN, NULL) ||\n\t\t\t\t    lws_http_transaction_completed(wsi))\n\t\t\t\t\tgoto bail_nuke_ah;\n\t\t\t}\n\n\t\t\tn = user_callback_handle_rxflow(wsi->a.protocol->callback,\n\t\t\t\t\twsi, LWS_CALLBACK_HTTP_CONFIRM_UPGRADE,\n\t\t\t\t\twsi->user_space, (char *)up, 0);\n\n\t\t\t/* just hang up? */\n\n\t\t\tif (n < 0)\n\t\t\t\tgoto bail_nuke_ah;\n\n\t\t\t/* callback returned headers already, do t_c? */\n\n\t\t\tif (n > 0) {\n\t\t\t\tif (lws_http_transaction_completed(wsi))\n\t\t\t\t\tgoto bail_nuke_ah;\n\n\t\t\t\t/* continue on */\n\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\t/* callback said 0, it was allowed */\n\n\t\t\tif (wsi->a.vhost->options &\n\t\t\t    LWS_SERVER_OPTION_VHOST_UPG_STRICT_HOST_CHECK &&\n\t\t\t    lws_confirm_host_header(wsi))\n\t\t\t\tgoto bail_nuke_ah;\n\n\t\t\tif (!strcasecmp(up, \"websocket\")) {\n#if defined(LWS_ROLE_WS)\n\t\t\t\tlws_metrics_tag_wsi_add(wsi, \"upg\", \"ws\");\n\t\t\t\tlwsl_info(\"Upgrade to ws\\n\");\n\t\t\t\tgoto upgrade_ws;\n#endif\n\t\t\t}\n#if defined(LWS_WITH_HTTP2)\n\t\t\tif (!strcasecmp(up, \"h2c\")) {\n\t\t\t\tlws_metrics_tag_wsi_add(wsi, \"upg\", \"h2c\");\n\t\t\t\tlwsl_info(\"Upgrade to h2c\\n\");\n\t\t\t\tgoto upgrade_h2c;\n\t\t\t}\n#endif\n\t\t}\n\n\t\t/* no upgrade ack... he remained as HTTP */\n\n\t\tlwsl_info(\"%s: %s: No upgrade\\n\", __func__, lws_wsi_tag(wsi));\n\n\t\tlwsi_set_state(wsi, LRS_ESTABLISHED);\n#if defined(LWS_WITH_FILE_OPS)\n\t\twsi->http.fop_fd = NULL;\n#endif\n\n#if defined(LWS_WITH_HTTP_STREAM_COMPRESSION)\n\t\tlws_http_compression_validate(wsi);\n#endif\n\n\t\tlwsl_debug(\"%s: %s: ah %p\\n\", __func__, lws_wsi_tag(wsi),\n\t\t\t   (void *)wsi->http.ah);\n\n\t\tn = lws_http_action(wsi);\n\n\t\treturn n;\n\n#if defined(LWS_WITH_HTTP2)\nupgrade_h2c:\n\t\tif (!lws_hdr_total_length(wsi, WSI_TOKEN_HTTP2_SETTINGS)) {\n\t\t\tlwsl_info(\"missing http2_settings\\n\");\n\t\t\tgoto bail_nuke_ah;\n\t\t}\n\n\t\tlwsl_info(\"h2c upgrade...\\n\");\n\n\t\tp = lws_hdr_simple_ptr(wsi, WSI_TOKEN_HTTP2_SETTINGS);\n\t\t/* convert the peer's HTTP-Settings */\n\t\tn = lws_b64_decode_string(p, tbuf, sizeof(tbuf));\n\t\tif (n < 0) {\n\t\t\tlwsl_parser(\"HTTP2_SETTINGS too long\\n\");\n\t\t\treturn 1;\n\t\t}\n\n\t\twsi->upgraded_to_http2 = 1;\n\n\t\t/* adopt the header info */\n\n\t\tah = wsi->http.ah;\n\t\tlws_role_transition(wsi, LWSIFR_SERVER, LRS_H2_AWAIT_PREFACE,\n\t\t\t\t    &role_ops_h2);\n\n\t\t/* http2 union member has http union struct at start */\n\t\twsi->http.ah = ah;\n\n\t\tif (!wsi->h2.h2n) {\n\t\t\twsi->h2.h2n = lws_zalloc(sizeof(*wsi->h2.h2n), \"h2n\");\n\t\t\tif (!wsi->h2.h2n)\n\t\t\t\treturn 1;\n\t\t}\n\n\t\tlws_h2_init(wsi);\n\n\t\t/* HTTP2 union */\n\n\t\tlws_h2_settings(wsi, &wsi->h2.h2n->peer_set, (uint8_t *)tbuf, n);\n\n\t\tlws_hpack_dynamic_size(wsi, (int)wsi->h2.h2n->peer_set.s[\n\t\t                                      H2SET_HEADER_TABLE_SIZE]);\n\n\t\tstrcpy(tbuf, \"HTTP/1.1 101 Switching Protocols\\x0d\\x0a\"\n\t\t\t      \"Connection: Upgrade\\x0d\\x0a\"\n\t\t\t      \"Upgrade: h2c\\x0d\\x0a\\x0d\\x0a\");\n\t\tm = (int)strlen(tbuf);\n\t\tn = lws_issue_raw(wsi, (unsigned char *)tbuf, (unsigned int)m);\n\t\tif (n != m) {\n\t\t\tlwsl_debug(\"http2 switch: ERROR writing to socket\\n\");\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn 0;\n#endif\n#if defined(LWS_ROLE_WS)\nupgrade_ws:\n\t\tif (lws_process_ws_upgrade(wsi))\n\t\t\tgoto bail_nuke_ah;\n\n\t\treturn 0;\n#endif\n\t} /* while all chars are handled */\n\n\treturn 0;\n\nbail_nuke_ah:\n\t/* drop the header info */\n\tlws_header_table_detach(wsi, 1);\n\n\treturn 1;\n}\n#endif\n\nint LWS_WARN_UNUSED_RESULT\nlws_http_transaction_completed(struct lws *wsi)\n{\n\tint n;\n\n\tif (wsi->http.cgi_transaction_complete)\n\t\treturn 0;\n\n\tif (lws_has_buffered_out(wsi)\n#if defined(LWS_WITH_HTTP_STREAM_COMPRESSION)\n\t\t\t|| wsi->http.comp_ctx.buflist_comp ||\n\t    wsi->http.comp_ctx.may_have_more\n#endif\n\t) {\n\t\t/*\n\t\t * ...so he tried to send something large as the http reply,\n\t\t * it went as a partial, but he immediately said the\n\t\t * transaction was completed.\n\t\t *\n\t\t * Defer the transaction completed until the last part of the\n\t\t * partial is sent.\n\t\t */\n\t\tlwsl_debug(\"%s: %s: deferring due to partial\\n\", __func__,\n\t\t\t\tlws_wsi_tag(wsi));\n\t\twsi->http.deferred_transaction_completed = 1;\n\t\tlws_callback_on_writable(wsi);\n\n\t\treturn 0;\n\t}\n\t/*\n\t * Are we finishing the transaction before we have consumed any body?\n\t *\n\t * For h1 this would kill keepalive pipelining, and for h2, considering\n\t * it can extend over multiple DATA frames, it would kill the network\n\t * connection.\n\t */\n\tif (wsi->http.rx_content_length && wsi->http.rx_content_remain) {\n\t\t/*\n\t\t * are we already in LRS_DISCARD_BODY and didn't clear the\n\t\t * remaining before trying to complete the transaction again?\n\t\t */\n\t\tif (lwsi_state(wsi) == LRS_DISCARD_BODY)\n\t\t\treturn -1;\n\t\t/*\n\t\t * let's defer transaction completed processing until we\n\t\t * discarded the remaining body\n\t\t */\n\t\tlwsi_set_state(wsi, LRS_DISCARD_BODY);\n\n\t\treturn 0;\n\t}\n\n#if defined(LWS_WITH_SYS_METRICS)\n\t{\n\t\tchar tmp[10];\n\n\t\tlws_snprintf(tmp, sizeof(tmp), \"%u\", wsi->http.response_code);\n\t\tlws_metrics_tag_wsi_add(wsi, \"status\", tmp);\n\t}\n#endif\n\n\tlwsl_info(\"%s: %s\\n\", __func__, lws_wsi_tag(wsi));\n\n#if defined(LWS_WITH_HTTP_STREAM_COMPRESSION)\n\tlws_http_compression_destroy(wsi);\n#endif\n\tlws_access_log(wsi);\n\n\tif (!wsi->hdr_parsing_completed\n#if defined(LWS_WITH_CGI)\n\t\t\t&& !wsi->http.cgi\n#endif\n\t) {\n\t\tchar peer[64];\n\n#if !defined(LWS_PLAT_OPTEE)\n\t\tlws_get_peer_simple(wsi, peer, sizeof(peer) - 1);\n#else\n\t\tpeer[0] = '\\0';\n#endif\n\t\tpeer[sizeof(peer) - 1] = '\\0';\n\t\tlwsl_info(\"%s: (from %s) ignoring, ah parsing incomplete\\n\",\n\t\t\t\t__func__, peer);\n\t\treturn 0;\n\t}\n\n#if defined(LWS_WITH_CGI)\n\tif (wsi->http.cgi) {\n\t\tlwsl_debug(\"%s: cleaning cgi\\n\", __func__);\n\t\twsi->http.cgi_transaction_complete = 1;\n\t\tlws_cgi_remove_and_kill(wsi);\n\t\tlws_spawn_piped_destroy(&wsi->http.cgi->lsp);\n\t\tlws_sul_cancel(&wsi->http.cgi->sul_grace);\n\n\t\tlws_free_set_NULL(wsi->http.cgi);\n\t\twsi->http.cgi_transaction_complete = 0;\n\t}\n#endif\n\n\t/* if we can't go back to accept new headers, drop the connection */\n\tif (wsi->mux_substream)\n\t\treturn 1;\n\n\tif (wsi->seen_zero_length_recv)\n\t\treturn 1;\n\n\tif (wsi->http.conn_type != HTTP_CONNECTION_KEEP_ALIVE) {\n\t\tlwsl_info(\"%s: %s: close connection\\n\", __func__, lws_wsi_tag(wsi));\n\t\treturn 1;\n\t}\n\n\tif (lws_bind_protocol(wsi, &wsi->a.vhost->protocols[0], __func__))\n\t\treturn 1;\n\n\t/*\n\t * otherwise set ourselves up ready to go again, but because we have no\n\t * idea about the wsi writability, we make put it in a holding state\n\t * until we can verify POLLOUT.  The part of this that confirms POLLOUT\n\t * with no partials is in lws_server_socket_service() below.\n\t */\n\tlwsl_debug(\"%s: %s: setting DEF_ACT from 0x%x: %p\\n\", __func__,\n\t\t   lws_wsi_tag(wsi), (int)wsi->wsistate, wsi->buflist);\n\tlwsi_set_state(wsi, LRS_DEFERRING_ACTION);\n\twsi->http.tx_content_length = 0;\n\twsi->http.tx_content_remain = 0;\n\twsi->hdr_parsing_completed = 0;\n\twsi->sending_chunked = 0;\n#ifdef LWS_WITH_ACCESS_LOG\n\twsi->http.access_log.sent = 0;\n#endif\n#if defined(LWS_WITH_FILE_OPS) && (defined(LWS_ROLE_H1) || defined(LWS_ROLE_H2))\n\tif (lwsi_role_http(wsi) && lwsi_role_server(wsi) &&\n\t    wsi->http.fop_fd != NULL)\n\t\tlws_vfs_file_close(&wsi->http.fop_fd);\n#endif\n\n\tn = NO_PENDING_TIMEOUT;\n\tif (wsi->a.vhost->keepalive_timeout)\n\t\tn = PENDING_TIMEOUT_HTTP_KEEPALIVE_IDLE;\n\tlws_set_timeout(wsi, (enum pending_timeout)n, wsi->a.vhost->keepalive_timeout);\n\n\t/*\n\t * We already know we are on http1.1 / keepalive and the next thing\n\t * coming will be another header set.\n\t *\n\t * If there is no pending rx and we still have the ah, drop it and\n\t * reacquire a new ah when the new headers start to arrive.  (Otherwise\n\t * we needlessly hog an ah indefinitely.)\n\t *\n\t * However if there is pending rx and we know from the keepalive state\n\t * that is already at least the start of another header set, simply\n\t * reset the existing header table and keep it.\n\t */\n\tif (wsi->http.ah) {\n\t\t// lws_buflist_describe(&wsi->buflist, wsi, __func__);\n\t\tif (!lws_buflist_next_segment_len(&wsi->buflist, NULL)) {\n\t\t\tlwsl_debug(\"%s: %s: nothing in buflist, detaching ah\\n\",\n\t\t\t\t  __func__, lws_wsi_tag(wsi));\n\t\t\tlws_header_table_detach(wsi, 1);\n#ifdef LWS_WITH_TLS\n\t\t\t/*\n\t\t\t * additionally... if we are hogging an SSL instance\n\t\t\t * with no pending pipelined headers (or ah now), and\n\t\t\t * SSL is scarce, drop this connection without waiting\n\t\t\t */\n\n\t\t\tif (wsi->a.vhost->tls.use_ssl &&\n\t\t\t    wsi->a.context->simultaneous_ssl_restriction &&\n\t\t\t    wsi->a.context->simultaneous_ssl ==\n\t\t\t\t   wsi->a.context->simultaneous_ssl_restriction) {\n\t\t\t\tlwsl_info(\"%s: simultaneous_ssl_restriction\\n\",\n\t\t\t\t\t  __func__);\n\t\t\t\treturn 1;\n\t\t\t}\n#endif\n\t\t} else {\n\t\t\tlwsl_info(\"%s: %s: resetting/keeping ah as pipeline\\n\",\n\t\t\t\t  __func__, lws_wsi_tag(wsi));\n\t\t\tlws_header_table_reset(wsi, 0);\n\t\t\t/*\n\t\t\t * If we kept the ah, we should restrict the amount\n\t\t\t * of time we are willing to keep it.  Otherwise it\n\t\t\t * will be bound the whole time the connection remains\n\t\t\t * open.\n\t\t\t */\n\t\t\tlws_set_timeout(wsi, PENDING_TIMEOUT_HOLDING_AH,\n\t\t\t\t\twsi->a.vhost->keepalive_timeout);\n\t\t}\n\t\t/* If we're (re)starting on headers, need other implied init */\n\t\tif (wsi->http.ah)\n\t\t\twsi->http.ah->ues = URIES_IDLE;\n\n\t\t//lwsi_set_state(wsi, LRS_ESTABLISHED); // !!!\n\t} else\n\t\tif (lws_buflist_next_segment_len(&wsi->buflist, NULL))\n\t\t\tif (lws_header_table_attach(wsi, 0))\n\t\t\t\tlwsl_debug(\"acquired ah\\n\");\n\n\tlwsl_debug(\"%s: %s: keep-alive await new transaction (state 0x%x)\\n\",\n\t\t   __func__, lws_wsi_tag(wsi), (int)wsi->wsistate);\n\tlws_callback_on_writable(wsi);\n\n\treturn 0;\n}\n\n#if defined(LWS_WITH_FILE_OPS)\nint\nlws_serve_http_file(struct lws *wsi, const char *file, const char *content_type,\n\t\t    const char *other_headers, int other_headers_len)\n{\n\tstruct lws_context *context = lws_get_context(wsi);\n\tstruct lws_context_per_thread *pt = &context->pt[(int)wsi->tsi];\n\tunsigned char *response = pt->serv_buf + LWS_PRE;\n#if defined(LWS_WITH_RANGES)\n\tstruct lws_range_parsing *rp = &wsi->http.range;\n#endif\n\tint ret = 0, cclen = 8, n = HTTP_STATUS_OK;\n\tchar cache_control[50], *cc = \"no-store\";\n\tlws_fop_flags_t fflags = LWS_O_RDONLY;\n\tconst struct lws_plat_file_ops *fops;\n\tlws_filepos_t total_content_length;\n\tunsigned char *p = response;\n\tunsigned char *end = p + context->pt_serv_buf_size - LWS_PRE;\n\tconst char *vpath;\n#if defined(LWS_WITH_RANGES)\n\tint ranges;\n#endif\n\n\tif (wsi->handling_404)\n\t\tn = HTTP_STATUS_NOT_FOUND;\n\n\t/*\n\t * We either call the platform fops .open with first arg platform fops,\n\t * or we call fops_zip .open with first arg platform fops, and fops_zip\n\t * open will decide whether to switch to fops_zip or stay with fops_def.\n\t *\n\t * If wsi->http.fop_fd is already set, the caller already opened it\n\t */\n\tif (!wsi->http.fop_fd) {\n\t\tfops = lws_vfs_select_fops(wsi->a.context->fops, file, &vpath);\n\t\tfflags |= lws_vfs_prepare_flags(wsi);\n\t\twsi->http.fop_fd = fops->LWS_FOP_OPEN(wsi->a.context->fops,\n\t\t\t\t\t\t\tfile, vpath, &fflags);\n\t\tif (!wsi->http.fop_fd) {\n\t\t\tlwsl_info(\"%s: Unable to open: '%s': errno %d\\n\",\n\t\t\t\t  __func__, file, errno);\n\t\t\tif (lws_return_http_status(wsi, HTTP_STATUS_NOT_FOUND,\n\t\t\t\t\t\t   NULL))\n\t\t\t\t\t\treturn -1;\n\t\t\treturn !wsi->mux_substream;\n\t\t}\n\t}\n\n\t/*\n\t * Caution... wsi->http.fop_fd is live from here\n\t */\n\n\twsi->http.filelen = lws_vfs_get_length(wsi->http.fop_fd);\n\ttotal_content_length = wsi->http.filelen;\n\n#if defined(LWS_WITH_RANGES)\n\tranges = lws_ranges_init(wsi, rp, wsi->http.filelen);\n\n\tlwsl_debug(\"Range count %d\\n\", ranges);\n\t/*\n\t * no ranges -> 200;\n\t *  1 range  -> 206 + Content-Type: normal; Content-Range;\n\t *  more     -> 206 + Content-Type: multipart/byteranges\n\t *  \t\tRepeat the true Content-Type in each multipart header\n\t *  \t\talong with Content-Range\n\t */\n\tif (ranges < 0) {\n\t\t/* it means he expressed a range in Range:, but it was illegal */\n\t\tlws_return_http_status(wsi,\n\t\t\t\tHTTP_STATUS_REQ_RANGE_NOT_SATISFIABLE, NULL);\n\t\tif (lws_http_transaction_completed(wsi))\n\t\t\tgoto bail; /* <0 means just hang up */\n\n\t\tlws_vfs_file_close(&wsi->http.fop_fd);\n\n\t\treturn 0; /* == 0 means we did the transaction complete */\n\t}\n\tif (ranges)\n\t\tn = HTTP_STATUS_PARTIAL_CONTENT;\n#endif\n\n\tif (lws_add_http_header_status(wsi, (unsigned int)n, &p, end))\n\t\tgoto bail;\n\n\tif ((wsi->http.fop_fd->flags & (LWS_FOP_FLAG_COMPR_ACCEPTABLE_GZIP |\n\t\t       LWS_FOP_FLAG_COMPR_IS_GZIP)) ==\n\t    (LWS_FOP_FLAG_COMPR_ACCEPTABLE_GZIP | LWS_FOP_FLAG_COMPR_IS_GZIP)) {\n\t\tif (lws_add_http_header_by_token(wsi,\n\t\t\tWSI_TOKEN_HTTP_CONTENT_ENCODING,\n\t\t\t(unsigned char *)\"gzip\", 4, &p, end))\n\t\t\tgoto bail;\n\t\tlwsl_info(\"file is being provided in gzip\\n\");\n\t}\n#if defined(LWS_WITH_HTTP_STREAM_COMPRESSION)\n\telse {\n\t\t/*\n\t\t * if we know its very compressible, and we can use\n\t\t * compression, then use the most preferred compression\n\t\t * method that the client said he will accept\n\t\t */\n\n\t\tif (!wsi->interpreting && (\n\t\t     !strncmp(content_type, \"text/\", 5) ||\n\t\t     !strcmp(content_type, \"application/javascript\") ||\n\t\t     !strcmp(content_type, \"image/svg+xml\")))\n\t\t\tlws_http_compression_apply(wsi, NULL, &p, end, 0);\n\t}\n#endif\n\n\tif (\n#if defined(LWS_WITH_RANGES)\n\t    ranges < 2 &&\n#endif\n\t    content_type && content_type[0])\n\t\tif (lws_add_http_header_by_token(wsi,\n\t\t\t\t\t\t WSI_TOKEN_HTTP_CONTENT_TYPE,\n\t\t\t\t\t\t (unsigned char *)content_type,\n\t\t\t\t\t\t (int)strlen(content_type),\n\t\t\t\t\t\t &p, end))\n\t\t\tgoto bail;\n\n#if defined(LWS_WITH_RANGES)\n\tif (ranges >= 2) { /* multipart byteranges */\n\t\tlws_strncpy(wsi->http.multipart_content_type, content_type,\n\t\t\tsizeof(wsi->http.multipart_content_type));\n\n\t\tif (lws_add_http_header_by_token(wsi,\n\t\t\t\t\t\t WSI_TOKEN_HTTP_CONTENT_TYPE,\n\t\t\t\t\t\t (unsigned char *)\n\t\t\t\t\t\t \"multipart/byteranges; \"\n\t\t\t\t\t\t \"boundary=_lws\",\n\t\t\t \t \t \t 20, &p, end))\n\t\t\tgoto bail;\n\n\t\t/*\n\t\t *  our overall content length has to include\n\t\t *\n\t\t *  - (n + 1) x \"_lws\\r\\n\"\n\t\t *  - n x Content-Type: xxx/xxx\\r\\n\n\t\t *  - n x Content-Range: bytes xxx-yyy/zzz\\r\\n\n\t\t *  - n x /r/n\n\t\t *  - the actual payloads (aggregated in rp->agg)\n\t\t *\n\t\t *  Precompute it for the main response header\n\t\t */\n\n\t\ttotal_content_length = (lws_filepos_t)rp->agg +\n\t\t\t\t       6 /* final _lws\\r\\n */;\n\n\t\tlws_ranges_reset(rp);\n\t\twhile (lws_ranges_next(rp)) {\n\t\t\tn = lws_snprintf(cache_control, sizeof(cache_control),\n\t\t\t\t\t\"bytes %llu-%llu/%llu\",\n\t\t\t\t\trp->start, rp->end, rp->extent);\n\n\t\t\ttotal_content_length = total_content_length +\n\t\t\t\t\t(lws_filepos_t)(\n\t\t\t\t6 /* header _lws\\r\\n */ +\n\t\t\t\t/* Content-Type: xxx/xxx\\r\\n */\n\t\t\t\t14 + (int)strlen(content_type) + 2 +\n\t\t\t\t/* Content-Range: xxxx\\r\\n */\n\t\t\t\t15 + n + 2 +\n\t\t\t\t2); /* /r/n */\n\t\t}\n\n\t\tlws_ranges_reset(rp);\n\t\tlws_ranges_next(rp);\n\t}\n\n\tif (ranges == 1) {\n\t\ttotal_content_length = (lws_filepos_t)rp->agg;\n\t\tn = lws_snprintf(cache_control, sizeof(cache_control),\n\t\t\t\t \"bytes %llu-%llu/%llu\",\n\t\t\t\t rp->start, rp->end, rp->extent);\n\n\t\tif (lws_add_http_header_by_token(wsi,\n\t\t\t\t\t\t WSI_TOKEN_HTTP_CONTENT_RANGE,\n\t\t\t\t\t\t (unsigned char *)cache_control,\n\t\t\t\t\t\t n, &p, end))\n\t\t\tgoto bail;\n\t}\n\n\twsi->http.range.inside = 0;\n\n\tif (lws_add_http_header_by_token(wsi, WSI_TOKEN_HTTP_ACCEPT_RANGES,\n\t\t\t\t\t (unsigned char *)\"bytes\", 5, &p, end))\n\t\tgoto bail;\n#endif\n\n\tif (!wsi->mux_substream) {\n\t\t/* for http/1.1 ... */\n\t\tif (!wsi->sending_chunked\n#if defined(LWS_WITH_HTTP_STREAM_COMPRESSION)\n\t\t\t\t&& !wsi->http.lcs\n#endif\n\t\t) {\n\t\t\t/* ... if not already using chunked and not using an\n\t\t\t * http compression translation, then send the naive\n\t\t\t * content length\n\t\t\t */\n\t\t\tif (lws_add_http_header_content_length(wsi,\n\t\t\t\t\t\ttotal_content_length, &p, end))\n\t\t\t\tgoto bail;\n\t\t} else {\n\n#if defined(LWS_WITH_HTTP_STREAM_COMPRESSION)\n\t\t\tif (wsi->http.lcs) {\n\n\t\t\t\t/* ...otherwise, for http 1 it must go chunked.\n\t\t\t\t * For the compression case, the reason is we\n\t\t\t\t * compress on the fly and do not know the\n\t\t\t\t * compressed content-length until it has all\n\t\t\t\t * been sent.  Http/1.1 pipelining must be able\n\t\t\t\t * to know where the transaction boundaries are\n\t\t\t\t * ... so chunking...\n\t\t\t\t */\n\t\t\t\tif (lws_add_http_header_by_token(wsi,\n\t\t\t\t\t\tWSI_TOKEN_HTTP_TRANSFER_ENCODING,\n\t\t\t\t\t\t(unsigned char *)\"chunked\", 7,\n\t\t\t\t\t\t&p, end))\n\t\t\t\t\tgoto bail;\n\n\t\t\t\t/*\n\t\t\t\t * ...this is fun, isn't it :-)  For h1 that is\n\t\t\t\t * using an http compression translation, the\n\t\t\t\t * compressor must chunk its output privately.\n\t\t\t\t *\n\t\t\t\t * h2 doesn't need (or support) any of this\n\t\t\t\t * crap.\n\t\t\t\t */\n\t\t\t\tlwsl_debug(\"setting chunking\\n\");\n\t\t\t\twsi->http.comp_ctx.chunking = 1;\n\t\t\t}\n#endif\n\t\t}\n\t}\n\n\tif (wsi->cache_secs && wsi->cache_reuse) {\n\t\tif (!wsi->cache_revalidate) {\n\t\t\tcc = cache_control;\n\t\t\tcclen = sprintf(cache_control, \"%s, max-age=%u\",\n\t\t\t\t    intermediates[wsi->cache_intermediaries],\n\t\t\t\t    wsi->cache_secs);\n\t\t} else {\n\t\t\tcc = cache_control;\n\t\t\tcclen = sprintf(cache_control,\n\t\t\t\t\t\"must-revalidate, %s, max-age=%u\",\n                                intermediates[wsi->cache_intermediaries],\n                                                    wsi->cache_secs);\n\n\t\t}\n\t}\n\n\t/* Only add cache control if its not specified by any other_headers. */\n\tif (!other_headers ||\n\t    (!strstr(other_headers, \"cache-control\") &&\n\t     !strstr(other_headers, \"Cache-Control\"))) {\n\t\tif (lws_add_http_header_by_token(wsi,\n\t\t\t\tWSI_TOKEN_HTTP_CACHE_CONTROL,\n\t\t\t\t(unsigned char *)cc, cclen, &p, end))\n\t\t\tgoto bail;\n\t}\n\n\tif (other_headers) {\n\t\tif ((end - p) < other_headers_len)\n\t\t\tgoto bail;\n\t\tmemcpy(p, other_headers, (unsigned int)other_headers_len);\n\t\tp += other_headers_len;\n\t}\n\n\tif (lws_finalize_http_header(wsi, &p, end))\n\t\tgoto bail;\n\n\tret = lws_write(wsi, response, lws_ptr_diff_size_t(p, response), LWS_WRITE_HTTP_HEADERS);\n\tif (ret != (p - response)) {\n\t\tlwsl_err(\"_write returned %d from %ld\\n\", ret,\n\t\t\t (long)(p - response));\n\t\tgoto bail;\n\t}\n\n\twsi->http.filepos = 0;\n\tlwsi_set_state(wsi, LRS_ISSUING_FILE);\n\n\tif (lws_hdr_total_length(wsi, WSI_TOKEN_HEAD_URI)) {\n\t\t/* we do not emit the body */\n\t\tlws_vfs_file_close(&wsi->http.fop_fd);\n\t\tif (lws_http_transaction_completed(wsi))\n\t\t\tgoto bail;\n\n\t\treturn 0;\n\t}\n\n\tlws_callback_on_writable(wsi);\n\n\treturn 0;\n\nbail:\n\tlws_vfs_file_close(&wsi->http.fop_fd);\n\n\treturn -1;\n}\n#endif\n\n#if defined(LWS_WITH_FILE_OPS)\n\nint lws_serve_http_file_fragment(struct lws *wsi)\n{\n\tstruct lws_context *context = wsi->a.context;\n\tstruct lws_context_per_thread *pt = &context->pt[(int)wsi->tsi];\n\tstruct lws_process_html_args args;\n\tlws_filepos_t amount, poss;\n\tunsigned char *p, *pstart;\n#if defined(LWS_WITH_RANGES)\n\tunsigned char finished = 0;\n#endif\n#if defined(LWS_ROLE_H2)\n\tstruct lws *nwsi;\n#endif\n\tint n, m;\n\n\tlwsl_debug(\"wsi->mux_substream %d\\n\", wsi->mux_substream);\n\n\tdo {\n\n\t\t/* priority 1: buffered output */\n\n\t\tif (lws_has_buffered_out(wsi)) {\n\t\t\tif (lws_issue_raw(wsi, NULL, 0) < 0) {\n\t\t\t\tlwsl_info(\"%s: closing\\n\", __func__);\n\t\t\t\tgoto file_had_it;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\t\t/* priority 2: buffered pre-compression-transform */\n\n#if defined(LWS_WITH_HTTP_STREAM_COMPRESSION)\n\tif (wsi->http.comp_ctx.buflist_comp ||\n\t    wsi->http.comp_ctx.may_have_more) {\n\t\tenum lws_write_protocol wp = LWS_WRITE_HTTP;\n\n\t\tlwsl_info(\"%s: completing comp partial (buflist %p, may %d)\\n\",\n\t\t\t   __func__, wsi->http.comp_ctx.buflist_comp,\n\t\t\t   wsi->http.comp_ctx.may_have_more);\n\n\t\tif (lws_rops_fidx(wsi->role_ops, LWS_ROPS_write_role_protocol) &&\n\t\t    lws_rops_func_fidx(wsi->role_ops, LWS_ROPS_write_role_protocol).\n\t\t\t\t\twrite_role_protocol(wsi, NULL, 0, &wp) < 0) {\n\t\t\tlwsl_info(\"%s signalling to close\\n\", __func__);\n\t\t\tgoto file_had_it;\n\t\t}\n\t\tlws_callback_on_writable(wsi);\n\n\t\tbreak;\n\t}\n#endif\n\n\t\tif (wsi->http.filepos == wsi->http.filelen)\n\t\t\tgoto all_sent;\n\n\t\tn = 0;\n\t\tp = pstart = pt->serv_buf + LWS_H2_FRAME_HEADER_LENGTH;\n\n#if defined(LWS_WITH_RANGES)\n\t\tif (wsi->http.range.count_ranges && !wsi->http.range.inside) {\n\n\t\t\tlwsl_notice(\"%s: doing range start %llu\\n\", __func__,\n\t\t\t\t    wsi->http.range.start);\n\n\t\t\tif ((long long)lws_vfs_file_seek_cur(wsi->http.fop_fd,\n\t\t\t\t\t\t   (lws_fileofs_t)wsi->http.range.start -\n\t\t\t\t\t\t   (lws_fileofs_t)wsi->http.filepos) < 0)\n\t\t\t\tgoto file_had_it;\n\n\t\t\twsi->http.filepos = wsi->http.range.start;\n\n\t\t\tif (wsi->http.range.count_ranges > 1) {\n\t\t\t\tn =  lws_snprintf((char *)p,\n\t\t\t\t\t\tcontext->pt_serv_buf_size -\n\t\t\t\t\t\tLWS_H2_FRAME_HEADER_LENGTH,\n\t\t\t\t\t\"_lws\\x0d\\x0a\"\n\t\t\t\t\t\"Content-Type: %s\\x0d\\x0a\"\n\t\t\t\t\t\"Content-Range: bytes \"\n\t\t\t\t\t\t\"%llu-%llu/%llu\\x0d\\x0a\"\n\t\t\t\t\t\"\\x0d\\x0a\",\n\t\t\t\t\twsi->http.multipart_content_type,\n\t\t\t\t\twsi->http.range.start,\n\t\t\t\t\twsi->http.range.end,\n\t\t\t\t\twsi->http.range.extent);\n\t\t\t\tp += n;\n\t\t\t}\n\n\t\t\twsi->http.range.budget = wsi->http.range.end -\n\t\t\t\t\t\t   wsi->http.range.start + 1;\n\t\t\twsi->http.range.inside = 1;\n\t\t}\n#endif\n\n\t\tposs = context->pt_serv_buf_size;\n\n#if defined(LWS_ROLE_H2)\n\t\t/*\n\t\t * If it's h2, restrict any lump that we are sending to the\n\t\t * max h2 frame size the peer indicated he could handle in\n\t\t * his SETTINGS\n\t\t */\n\t\tnwsi = lws_get_network_wsi(wsi);\n\t\tif (nwsi->h2.h2n &&\n\t\t    poss > (lws_filepos_t)nwsi->h2.h2n->peer_set.s[H2SET_MAX_FRAME_SIZE])\n\t\t\tposs = (lws_filepos_t)nwsi->h2.h2n->peer_set.s[H2SET_MAX_FRAME_SIZE];\n#endif\n\t\tposs = poss - (lws_filepos_t)(n + LWS_H2_FRAME_HEADER_LENGTH);\n\n\t\tif (wsi->http.tx_content_length)\n\t\t\tif (poss > wsi->http.tx_content_remain)\n\t\t\t\tposs = wsi->http.tx_content_remain;\n\n\t\t/*\n\t\t * If there is a hint about how much we will do well to send at\n\t\t * one time, restrict ourselves to only trying to send that.\n\t\t */\n\t\tif (wsi->a.protocol->tx_packet_size &&\n\t\t    poss > wsi->a.protocol->tx_packet_size)\n\t\t\tposs = wsi->a.protocol->tx_packet_size;\n\n\t\tif (lws_rops_fidx(wsi->role_ops, LWS_ROPS_tx_credit)) {\n\t\t\tlws_filepos_t txc = (unsigned int)lws_rops_func_fidx(wsi->role_ops,\n\t\t\t\t\t\t\t       LWS_ROPS_tx_credit).\n\t\t\t\t\ttx_credit(wsi, LWSTXCR_US_TO_PEER, 0);\n\n\t\t\tif (!txc) {\n\t\t\t\t/*\n\t\t\t\t * We shouldn't've been able to get the\n\t\t\t\t * WRITEABLE if we are skint\n\t\t\t\t */\n\t\t\t\tlwsl_notice(\"%s: %s: no tx credit\\n\", __func__,\n\t\t\t\t\t\tlws_wsi_tag(wsi));\n\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif (txc < poss)\n\t\t\t\tposs = txc;\n\n\t\t\t/*\n\t\t\t * Tracking consumption of the actual payload amount\n\t\t\t * will be handled when the role data frame is sent...\n\t\t\t */\n\t\t}\n\n#if defined(LWS_WITH_RANGES)\n\t\tif (wsi->http.range.count_ranges) {\n\t\t\tif (wsi->http.range.count_ranges > 1)\n\t\t\t\tposs -= 7; /* allow for final boundary */\n\t\t\tif (poss > wsi->http.range.budget)\n\t\t\t\tposs = wsi->http.range.budget;\n\t\t}\n#endif\n\t\tif (wsi->sending_chunked) {\n\t\t\t/* we need to drop the chunk size in here */\n\t\t\tp += 10;\n\t\t\t/* allow for the chunk to grow by 128 in translation */\n\t\t\tposs -= 10 + 128;\n\t\t}\n\n\t\tamount = 0;\n\t\tif (lws_vfs_file_read(wsi->http.fop_fd, &amount, p, poss) < 0)\n\t\t\tgoto file_had_it; /* caller will close */\n\n\t\tif (wsi->sending_chunked)\n\t\t\tn = (int)amount;\n\t\telse\n\t\t\tn = lws_ptr_diff(p, pstart) + (int)amount;\n\n\t\tlwsl_debug(\"%s: sending %d\\n\", __func__, n);\n\n\t\tif (n) {\n\t\t\tlws_set_timeout(wsi, PENDING_TIMEOUT_HTTP_CONTENT,\n\t\t\t\t\t(int)context->timeout_secs);\n\n\t\t\tif (wsi->interpreting) {\n\t\t\t\targs.p = (char *)p;\n\t\t\t\targs.len = n;\n\t\t\t\targs.max_len = (int)(unsigned int)poss + 128;\n\t\t\t\targs.final = wsi->http.filepos + (unsigned int)n ==\n\t\t\t\t\t\t\twsi->http.filelen;\n\t\t\t\targs.chunked = wsi->sending_chunked;\n\t\t\t\tif (user_callback_handle_rxflow(\n\t\t\t\t     wsi->a.vhost->protocols[\n\t\t\t\t     (int)wsi->protocol_interpret_idx].callback,\n\t\t\t\t     wsi, LWS_CALLBACK_PROCESS_HTML,\n\t\t\t\t     wsi->user_space, &args, 0) < 0)\n\t\t\t\t\tgoto file_had_it;\n\t\t\t\tn = args.len;\n\t\t\t\tp = (unsigned char *)args.p;\n\t\t\t} else\n\t\t\t\tp = pstart;\n\n#if defined(LWS_WITH_RANGES)\n\t\t\tif (wsi->http.range.send_ctr + 1 ==\n\t\t\t\twsi->http.range.count_ranges && // last range\n\t\t\t    wsi->http.range.count_ranges > 1 && // was 2+ ranges (ie, multipart)\n\t\t\t    wsi->http.range.budget - amount == 0) {// final part\n\t\t\t\tn += lws_snprintf((char *)pstart + n, 6,\n\t\t\t\t\t\"_lws\\x0d\\x0a\"); // append trailing boundary\n\t\t\t\tlwsl_debug(\"added trailing boundary\\n\");\n\t\t\t}\n#endif\n\t\t\tm = lws_write(wsi, p, (unsigned int)n, wsi->http.filepos + amount ==\n\t\t\t\t\twsi->http.filelen ?\n\t\t\t\t\t LWS_WRITE_HTTP_FINAL : LWS_WRITE_HTTP);\n\t\t\tif (m < 0)\n\t\t\t\tgoto file_had_it;\n\n\t\t\twsi->http.filepos += amount;\n\n#if defined(LWS_WITH_RANGES)\n\t\t\tif (wsi->http.range.count_ranges >= 1) {\n\t\t\t\twsi->http.range.budget -= amount;\n\t\t\t\tif (wsi->http.range.budget == 0) {\n\t\t\t\t\tlwsl_notice(\"range budget exhausted\\n\");\n\t\t\t\t\twsi->http.range.inside = 0;\n\t\t\t\t\twsi->http.range.send_ctr++;\n\n\t\t\t\t\tif (lws_ranges_next(&wsi->http.range) < 1) {\n\t\t\t\t\t\tfinished = 1;\n\t\t\t\t\t\tgoto all_sent;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n#endif\n\n\t\t\tif (m != n) {\n\t\t\t\t/* adjust for what was not sent */\n\t\t\t\tif (lws_vfs_file_seek_cur(wsi->http.fop_fd,\n\t\t\t\t\t\t\t   m - n) ==\n\t\t\t\t\t\t\t     (lws_fileofs_t)-1)\n\t\t\t\t\tgoto file_had_it;\n\t\t\t}\n\t\t}\n\nall_sent:\n\t\tif ((!lws_has_buffered_out(wsi)\n#if defined(LWS_WITH_HTTP_STREAM_COMPRESSION)\n\t\t\t\t&& !wsi->http.comp_ctx.buflist_comp &&\n\t\t    !wsi->http.comp_ctx.may_have_more\n#endif\n\t\t    ) && (wsi->http.filepos >= wsi->http.filelen\n#if defined(LWS_WITH_RANGES)\n\t\t    || finished)\n#else\n\t\t)\n#endif\n\t\t) {\n\t\t\tlwsi_set_state(wsi, LRS_ESTABLISHED);\n\t\t\t/* we might be in keepalive, so close it off here */\n\t\t\tlws_vfs_file_close(&wsi->http.fop_fd);\n\n\t\t\tlwsl_debug(\"file completed\\n\");\n\n\t\t\tif (wsi->a.protocol->callback &&\n\t\t\t    user_callback_handle_rxflow(wsi->a.protocol->callback,\n\t\t\t\t\twsi, LWS_CALLBACK_HTTP_FILE_COMPLETION,\n\t\t\t\t\twsi->user_space, NULL, 0) < 0) {\n\t\t\t\t\t/*\n\t\t\t\t\t * For http/1.x, the choices from\n\t\t\t\t\t * transaction_completed are either\n\t\t\t\t\t * 0 to use the connection for pipelined\n\t\t\t\t\t * or nonzero to hang it up.\n\t\t\t\t\t *\n\t\t\t\t\t * However for http/2. while we are\n\t\t\t\t\t * still interested in hanging up the\n\t\t\t\t\t * nwsi if there was a network-level\n\t\t\t\t\t * fatal error, simply completing the\n\t\t\t\t\t * transaction is a matter of the stream\n\t\t\t\t\t * state, not the root connection at the\n\t\t\t\t\t * network level\n\t\t\t\t\t */\n\t\t\t\t\tif (wsi->mux_substream)\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\telse\n\t\t\t\t\t\treturn -1;\n\t\t\t\t}\n\n\t\t\treturn 1;  /* >0 indicates completed */\n\t\t}\n\t\t/*\n\t\t * while(1) here causes us to spam the whole file contents into\n\t\t * a hugely bloated output buffer if it ever can't send the\n\t\t * whole chunk...\n\t\t */\n\t} while (!lws_send_pipe_choked(wsi));\n\n\tlws_callback_on_writable(wsi);\n\n\treturn 0; /* indicates further processing must be done */\n\nfile_had_it:\n\tlws_vfs_file_close(&wsi->http.fop_fd);\n\n\treturn -1;\n}\n\n#endif\n\n#if defined(LWS_WITH_SERVER)\nvoid\nlws_server_get_canonical_hostname(struct lws_context *context,\n\t\t\t\t  const struct lws_context_creation_info *info)\n{\n\tif (lws_check_opt(info->options,\n\t\t\tLWS_SERVER_OPTION_SKIP_SERVER_CANONICAL_NAME))\n\t\treturn;\n#if !defined(LWS_PLAT_FREERTOS)\n\t/* find canonical hostname */\n\tif (gethostname((char *)context->canonical_hostname,\n\t\t        sizeof(context->canonical_hostname) - 1))\n\t\tlws_strncpy((char *)context->canonical_hostname, \"unknown\",\n\t\t\t    sizeof(context->canonical_hostname));\n\n\tlwsl_cx_info(context, \" canonical_hostname = %s\\n\",\n\t\t\t\t\tcontext->canonical_hostname);\n#else\n\t(void)context;\n#endif\n}\n#endif\n\nint\nlws_chunked_html_process(struct lws_process_html_args *args,\n\t\t\t struct lws_process_html_state *s)\n{\n\tchar *sp, buffer[32];\n\tconst char *pc;\n\tint old_len, n;\n\n\t/* do replacements */\n\tsp = args->p;\n\told_len = args->len;\n\targs->len = 0;\n\ts->start = sp;\n\twhile (sp < args->p + old_len) {\n\n\t\tif (args->len + 7 >= args->max_len) {\n\t\t\tlwsl_err(\"Used up interpret padding\\n\");\n\t\t\treturn -1;\n\t\t}\n\n\t\tif ((!s->pos && *sp == '$') || s->pos) {\n\t\t\tint hits = 0, hit = 0;\n\n\t\t\tif (!s->pos)\n\t\t\t\ts->start = sp;\n\t\t\ts->swallow[s->pos++] = *sp;\n\t\t\tif (s->pos == sizeof(s->swallow) - 1)\n\t\t\t\tgoto skip;\n\t\t\tfor (n = 0; n < s->count_vars; n++)\n\t\t\t\tif (!strncmp(s->swallow, s->vars[n], (unsigned int)s->pos)) {\n\t\t\t\t\thits++;\n\t\t\t\t\thit = n;\n\t\t\t\t}\n\t\t\tif (!hits) {\nskip:\n\t\t\t\ts->swallow[s->pos] = '\\0';\n\t\t\t\tmemcpy(s->start, s->swallow, (unsigned int)s->pos);\n\t\t\t\targs->len++;\n\t\t\t\ts->pos = 0;\n\t\t\t\tsp = s->start + 1;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (hits == 1 && s->pos == (int)strlen(s->vars[hit])) {\n\t\t\t\tpc = s->replace(s->data, hit);\n\t\t\t\tif (!pc)\n\t\t\t\t\tpc = \"NULL\";\n\t\t\t\tn = (int)strlen(pc);\n\t\t\t\ts->swallow[s->pos] = '\\0';\n\t\t\t\tif (n != s->pos) {\n\t\t\t\t\tmemmove(s->start + n, s->start + s->pos,\n\t\t\t\t\t\t(unsigned int)(old_len - (sp - args->p) - 1));\n\t\t\t\t\told_len += (n - s->pos) + 1;\n\t\t\t\t}\n\t\t\t\tmemcpy(s->start, pc, (unsigned int)n);\n\t\t\t\targs->len++;\n\t\t\t\tsp = s->start + 1;\n\n\t\t\t\ts->pos = 0;\n\t\t\t}\n\t\t\tsp++;\n\t\t\tcontinue;\n\t\t}\n\n\t\targs->len++;\n\t\tsp++;\n\t}\n\n\tif (args->chunked) {\n\t\t/* no space left for final chunk trailer */\n\t\tif (args->final && args->len + 7 >= args->max_len)\n\t\t\treturn -1;\n\n\t\tn = sprintf(buffer, \"%X\\x0d\\x0a\", args->len);\n\n\t\targs->p -= n;\n\t\tmemcpy(args->p, buffer, (unsigned int)n);\n\t\targs->len += n;\n\n\t\tif (args->final) {\n\t\t\tsp = args->p + args->len;\n\t\t\t*sp++ = '\\x0d';\n\t\t\t*sp++ = '\\x0a';\n\t\t\t*sp++ = '0';\n\t\t\t*sp++ = '\\x0d';\n\t\t\t*sp++ = '\\x0a';\n\t\t\t*sp++ = '\\x0d';\n\t\t\t*sp++ = '\\x0a';\n\t\t\targs->len += 7;\n\t\t} else {\n\t\t\tsp = args->p + args->len;\n\t\t\t*sp++ = '\\x0d';\n\t\t\t*sp++ = '\\x0a';\n\t\t\targs->len += 2;\n\t\t}\n\t}\n\n\treturn 0;\n}\n",
			"file": "libwebsockets/lib/roles/http/server/server.c",
			"file_size": 86928,
			"file_write_time": 132725001496323148,
			"settings":
			{
				"buffer_size": 86928,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"cmake",
				"CMake Format: Format Selection"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edi",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"prettier",
				"Build With: prettier"
			],
			[
				"edit current",
				"SchemeEditor: Edit Current Scheme"
			],
			[
				"edit curr",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 393.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/minnet-quickjs",
		"/home/roman/Projects/minnet-quickjs/build"
	],
	"file_history":
	[
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/server/lws-spa.c",
		"/home/roman/Projects/minnet-quickjs/buffer.h",
		"/home/roman/Projects/minnet-quickjs/buffer.c",
		"/home/roman/Projects/minnet-quickjs/minnet-request.c",
		"/home/roman/Projects/minnet-quickjs/minnet-response.h",
		"/home/roman/Projects/minnet-quickjs/minnet.c",
		"/home/roman/Projects/minnet-quickjs/CMakeLists.txt.user",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/minimal-examples/http-server/minimal-http-server-h2-long-poll/minimal-http-server.c",
		"/home/roman/Projects/minnet-quickjs/minnet-client.h",
		"/home/roman/Projects/minnet-quickjs/minnet-websocket.h",
		"/home/roman/Projects/minnet-quickjs/minnet-response.c",
		"/home/roman/Projects/minnet-quickjs/minnet-server.c.orig",
		"/home/roman/Projects/minnet-quickjs/minnet-request.h",
		"/home/roman/Projects/minnet-quickjs/minnet-stream.h",
		"/home/roman/Projects/minnet-quickjs/minnet.h",
		"/home/roman/Projects/minnet-quickjs/minnet-stream.c",
		"/home/roman/Projects/minnet-quickjs/minnet-websocket.c",
		"/home/roman/Projects/plot-cv/quickjs/cutils.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/minimal-examples/http-server/minimal-http-server-sse-ring/README.md",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/minimal-examples/http-server/minimal-http-server-sse/README.md",
		"/home/roman/Projects/minnet-quickjs/minnet-client.c",
		"/home/roman/Projects/minnet-quickjs/minnet.sublime-project",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/include/libwebsockets/lws-adopt.h",
		"/home/roman/Projects/minnet-quickjs/minnet-server.h",
		"/home/roman/Projects/minnet-quickjs/jsutils.h",
		"/home/roman/Projects/minnet-quickjs/jsutils.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/minimal-examples/http-server/minimal-http-server/minimal-http-server.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/minimal-examples/http-server/minimal-http-server-dynamic/minimal-http-server-dynamic.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/server/server.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/h2/ops-h2.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/header.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/test-rpc.js",
		"/home/roman/Projects/plot-cv/quickjs/net/rpc.js",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/include/libwebsockets/lws-callbacks.h",
		"/home/roman/Projects/minnet-quickjs/example.mjs",
		"/home/roman/Projects/minnet-quickjs/minnet-server.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/core-net/wsi.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/core-net/vhost.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/core-net/output.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/core-net/private-lib-core-net.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/h2/hpack.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/h2/http2.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/server/ranges.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/private-lib-roles.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/h2/minihuf.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/h2/huftable.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/h2/private-lib-roles-h2.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/private-lib-roles-http.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/CMakeLists.txt",
		"/home/roman/Projects/minnet-quickjs/CMakeLists.txt",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/CMakeLists-implied-options.txt",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/cookie.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/date.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/lextable-strings.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/lextable.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/minilex.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/parsers.c",
		"/home/roman/Projects/minnet-quickjs/rpc.js",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/minimal-examples/http-server/minimal-http-server-sse/minimal-http-server-sse.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/include/libwebsockets/lws-http.h",
		"/home/roman/Projects/minnet-quickjs/minnet.c.orig",
		"/home/roman/.config/sublime-text/Packages/Outroot Color Schemes/Luscious.tmTheme",
		"/home/roman/.config/sublime-text/Packages/User/Themes/Next (New).tmTheme",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/.mailmap",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/include/libwebsockets/lws-writeable.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/core-net/dummy-callback.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/include/libwebsockets/lws-context-vhost.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/include/libwebsockets/lws-misc.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/include/libwebsockets/lws-lecp.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/include/libwebsockets/lws-client.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/include/libwebsockets/lws-service.h",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/roles/http/server/lejp-conf.c",
		"/home/roman/Projects/plot-cv/quickjs/cutils.c",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.h",
		"/home/roman/Projects/plot-cv/cutils.h",
		"/home/roman/Projects/plot-cv/ws-worker.js",
		"/home/roman/Projects/minnet-quickjs/minnet-jsutils.h",
		"/home/roman/Projects/minnet-quickjs/minnet-socket.h",
		"/home/roman/Projects/minnet-quickjs/minnet-socket.c",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/include/libwebsockets/lws-context-vhost.h",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/test-apps/test-server.c",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet.c",
		"/home/roman/Projects/minnet-quickjs/libwebsockets/lib/core/libwebsockets.c",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet-server.c",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/lib/core-net/network.c",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/include/libwebsockets/lws-network-helper.h",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/include/libwebsockets/lws-http.h",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet-websocket.h",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet.h",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet-websocket.c",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet-request.h",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet-response.c",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet-server.h",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet-response.h",
		"/home/roman/Projects/plot-cv/quickjs/net/build/x86_64-linux-release/libwebsockets/include/libwebsockets/lws-network-helper.h",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet-jsutils.h",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet-client.c",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/include/libwebsockets.h",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/minimal-examples/http-server/minimal-http-server-dynamic/minimal-http-server-dynamic.c",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/minimal-examples/http-server/minimal-http-server-dynamic/minimal-http-server-dynamic",
		"/home/roman/Projects/plot-cv/quickjs/net/jsutils.h",
		"/home/roman/Projects/plot-cv/quickjs/net/websocket.c",
		"/home/roman/Projects/plot-cv/quickjs/net/client.c",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet-client.h",
		"/home/roman/Projects/plot-cv/quickjs/net/response.c",
		"/home/roman/Projects/plot-cv/quickjs/net/websocket.h",
		"/home/roman/Projects/plot-cv/quickjs/net/response.h",
		"/home/roman/Projects/plot-cv/quickjs/net/server.c",
		"/home/roman/Projects/plot-cv/quickjs/net/server.h",
		"/home/roman/Projects/plot-cv/quickjs/net/rpc.js.orig",
		"/home/roman/Projects/plot-cv/quickjs/net/client.h",
		"/home/roman/Projects/plot-cv/quickjs/net/minnet.sublime-project",
		"/home/roman/Projects/plot-cv/quickjs/net/CMakeLists.txt",
		"/home/roman/mnt/v3server/var/www/html/index.html",
		"/home/roman/Projects/plot-cv/quickjs/net/y.diff",
		"/home/roman/.config/sublime-text/Packages/User/Themes/ES6 Next.tmTheme",
		"/home/roman/.config/sublime-text/Packages/Outline/outline-Dark.hidden-tmTheme",
		"/home/roman/.config/sublime-text/Packages/Outline/outline.hidden-tmTheme",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/process.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/require.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/tests/test_misc.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/tty.js"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 109.0,
		"where_history":
		[
			"*.c,*.h,*.txt,*.cmake,-*/build/*",
			"*.c,*.h,*.txt,*.cmakem,-*/build/*",
			"*.c,*.h,*.txt,-*/build/*",
			"*.c,*.h,-*/build/*",
			"*.c,*.h,-*/build/*,-*/libwebsockets/*",
			"*.c,*.h,-*/build/*",
			"*.c,*.h",
			"/home/roman/Projects/plot-cv/quickjs/net,-*/build/*,*.c,*.h",
			"/home/roman/Projects/plot-cv/quickjs/net,-*/build/*,-*/libwebsockets/*,*.c,*.h",
			"/home/roman/Projects/plot-cv/quickjs/net,-*/build/*,*.c,*.h",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"onresponse",
			"\\.add",
			"\\.list",
			"Connection\\.list",
			"\\.list",
			"sendMessage",
			"MessageTransceiver",
			"EventEmitter",
			"DEBUG",
			"RPCClient",
			"No command",
			"sendMessage",
			"sock, ",
			"sock:",
			"onMessage",
			"processMessage",
			"statusResponse",
			"No such",
			"onconnect",
			"FILTER_HTTP",
			"minnet_ws_wrap",
			"HTTP_BODY",
			"lws_h2_bind_for_post_before_action",
			"LWS_CALLBACK_HTTP_BODY",
			"LWS_CALLBACK_HTTP_",
			"serv->mount",
			"\"LWS_CALLBACK_CLOSED_HTTP",
			"TESTAPPS",
			"WITH_FILE_OPS",
			"LWSMPRO_FILE",
			"LWS_CALLBACK_HTTP",
			"LWS_CALLBACK_HTTP_BODY",
			"serve_file",
			"respond",
			"read_only",
			"lws_write",
			"h2",
			"serve_file",
			"^lws_",
			"^lws",
			"sending",
			"lws_vfs",
			"fopen",
			"_open",
			"STREAM_",
			"STREAM_ARRAYBUFFER",
			"http_stream",
			"cb_body",
			"^\\s*include.Check",
			"^\\s*include",
			"include",
			"case\\(int\\)",
			"  ",
			"is_h2",
			"ssl",
			"sslCert",
			"ssl_cert_filepath",
			"onconn",
			"fdlist\\[",
			"fdlist",
			"Connected",
			"\\.close\\(",
			"onclose",
			"LWS_CALLBACK_RECEIVE",
			"CLOSE",
			"util",
			"'Handle",
			"'connect'",
			"onconnect",
			"onconn",
			"minnet_ws_wrap",
			"onConn",
			"cb_message",
			"set_opa",
			"->handlers",
			"server\\.",
			"server",
			"lws_adopt",
			"callHandler",
			"on[Cc]onnect",
			"onconnect",
			"cb_connect",
			"log.*Connection",
			"onconnect",
			"generator =",
			"js_iterator",
			"generator =",
			"generator",
			"argument is",
			"resp->generator",
			"->generator",
			"JS_FreeCString",
			"byte_",
			"byte_rchr",
			"js_buffer_free",
			"js_buffer_from",
			"404",
			"555",
			"is_h2",
			"lws.*h2",
			"lws.*is_",
			"wsi.*H2",
			"lws_wsi_is",
			"malloc_usable_size",
			"len",
			"lws_http_transaction_completed",
			"request\\(",
			"request",
			"read.only",
			"binary",
			"params",
			"`params",
			"'params",
			"repl.historyLoad",
			"repl.history",
			"createWS",
			"onFd",
			"LWS_WRITE_HTTP_FINAL",
			"->type",
			"REQUEST_METHOD",
			"->type",
			"%s",
			"\"%s",
			"\"lws_callback_on_writable",
			"in:",
			"js_dump_string",
			"'on",
			"'onFd"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"mount",
			"STREAM_BUFFER",
			"stream",
			"cb_http",
			"case ",
			"minnet_server.",
			"serv->generator",
			"REQUEST_TYPE",
			"ws_obj",
			"case (int)LWS_CALLBACK",
			"",
			">normal<",
			"server.cb",
			"&server.info",
			"src",
			"url",
			"",
			"rsp",
			"_ws_",
			"->rsp",
			"state_dump",
			"RESPONSE_OFFSET",
			"RESPONSE_LENGTH",
			"static JSValue",
			"0",
			"res->body",
			"REQUEST_BODY",
			"\\\\n\"\\n\"\\1",
			"<br />",
			"\\\\n\"",
			"\\n\"",
			"#include <quickjs-libc.h>",
			"#include <list.h>",
			"#include <cutils.h>",
			"#include <quickjs.h>",
			"MinnetCallback",
			"_socket_",
			"MINNET_SOCKET_H",
			"inline",
			"static inline ",
			"hdr->",
			"",
			"request",
			"h->",
			"ctx",
			"equest",
			"req",
			"request",
			"args",
			"MinnetPollFd",
			"request->body.",
			"request->",
			"request",
			"body",
			"http_callback",
			"ws_callback",
			"protocols",
			"MinnetHttpHeader",
			"MinnetHttpMount",
			"struct lws_http_mount",
			"org",
			"JSUTILS_H",
			"io_handler",
			"make_handler",
			", ",
			"MinnetWebsocketCallback",
			", ",
			"MinnetWebsocketCallback",
			"websocket_callback(",
			"websocket_callback",
			"MINNET_JSUTILS_H",
			"static struct minnet_ws_callback",
			"static JSValue\nminnet_ws",
			"static &",
			"JSValue",
			"",
			"header->",
			"struct",
			"extern struct",
			"struct",
			"extern struct",
			"get_websocket_obj",
			"respondtype",
			"typeName",
			"respond",
			"}, respond) =>",
			"statusResponse",
			"callbacks",
			"function",
			"log",
			"MessageTransmitter"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 119,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"current_file": "/home/roman/Projects/minnet-quickjs/libwebsockets/include/libwebsockets/lws-callbacks.h",
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									1642,
									1654
								],
								[
									1688,
									1709
								],
								[
									2342,
									2366
								],
								[
									2586,
									2614
								],
								[
									2934,
									2954
								]
							],
							"symlist":
							[
								"  lws_ssl_info",
								"  lws_cert_update_state",
								"  lws_acme_cert_aging_args",
								"  lws_filter_network_conn_args",
								"  lws_callback_reasons"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tabs_extra_last_activated": 1628496395.36,
							"tabs_extra_last_activated_sheet_index": 0
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "/home/roman/Projects/plot-cv/quickjs/net/rpc.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29758,
						"regions":
						{
						},
						"selection":
						[
							[
								16350,
								16350
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1628496477.77,
							"tabs_extra_last_activated_sheet_index": 0,
							"tabs_extra_moving":
							[
								5,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8319.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/roman/Projects/plot-cv/lib/events.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5344,
						"regions":
						{
						},
						"selection":
						[
							[
								4573,
								4573
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1628552934.74,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2070.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/roman/Projects/plot-cv/debugger-client.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2107,
						"regions":
						{
						},
						"selection":
						[
							[
								1384,
								1384
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1628485682.71,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 585.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/home/roman/Projects/plot-cv/debugger.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4260,
						"regions":
						{
						},
						"selection":
						[
							[
								1652,
								1696
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1628495023.22,
							"tabs_extra_last_activated_sheet_index": 3,
							"tabs_extra_moving":
							[
								5,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 585.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/home/roman/Projects/plot-cv/debugger.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 340,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1628552936.56,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "libwebsockets/include/libwebsockets/lws-callbacks.h",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37291,
						"regions":
						{
						},
						"selection":
						[
							[
								9221,
								9274
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1628569547.3,
							"tabs_extra_last_activated_sheet_index": 5,
							"tabs_extra_moving":
							[
								5,
								1
							],
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 257.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "libwebsockets/minimal-examples/http-server/minimal-http-server-form-post/minimal-http-server-form-post.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5767,
						"regions":
						{
						},
						"selection":
						[
							[
								2586,
								2628
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1628474494.06,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/home/roman/Projects/plot-cv/test-rpc.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7461,
						"regions":
						{
						},
						"selection":
						[
							[
								5692,
								5692
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1628473422.2,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2220.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "minnet-response.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9607,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1628481623.27,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/home/roman/Projects/plot-cv/ws-worker.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3643,
						"regions":
						{
						},
						"selection":
						[
							[
								1210,
								1223
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1628477863.4,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 612.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "minnet-server.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1134,
						"regions":
						{
						},
						"selection":
						[
							[
								942,
								942
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1628485397.79,
							"tabs_extra_last_activated_sheet_index": 10,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13896,
						"regions":
						{
						},
						"selection":
						[
							[
								9575,
								9575
							]
						],
						"settings":
						{
							"syntax": "Packages/User/Themes/CMake.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1628472169.79,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3992.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "minnet-websocket.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16214,
						"regions":
						{
						},
						"selection":
						[
							[
								8612,
								8631
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1628484655.4,
							"tabs_extra_last_activated_sheet_index": 12,
							"tabs_extra_moving":
							[
								5,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4637.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "minnet-server.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26473,
						"regions":
						{
						},
						"selection":
						[
							[
								8347,
								8707
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1628485960.5,
							"tabs_extra_last_activated_sheet_index": 13,
							"tabs_extra_moving":
							[
								5,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4354.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "minnet-websocket.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1170,
						"regions":
						{
						},
						"selection":
						[
							[
								280,
								298
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1628484635.2,
							"tabs_extra_last_activated_sheet_index": 14,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "libwebsockets/lib/roles/h2/http2.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 77939,
						"regions":
						{
						},
						"selection":
						[
							[
								75297,
								75315
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1628474187.44,
							"tabs_extra_last_activated_sheet_index": 10,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 41162.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 17,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6458,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										186,
										208
									],
									[
										226,
										248
									],
									[
										404,
										426
									],
									[
										545,
										567
									],
									[
										846,
										868
									],
									[
										976,
										998
									],
									[
										1254,
										1276
									],
									[
										1293,
										1315
									],
									[
										1590,
										1612
									],
									[
										1757,
										1779
									],
									[
										2030,
										2052
									],
									[
										2204,
										2226
									],
									[
										2550,
										2572
									],
									[
										2739,
										2761
									],
									[
										3013,
										3035
									],
									[
										3178,
										3200
									],
									[
										3449,
										3471
									],
									[
										3580,
										3602
									],
									[
										3849,
										3871
									],
									[
										4168,
										4190
									],
									[
										4314,
										4336
									],
									[
										4443,
										4465
									],
									[
										4717,
										4739
									],
									[
										4863,
										4885
									],
									[
										5150,
										5172
									],
									[
										5296,
										5318
									],
									[
										5425,
										5447
									],
									[
										5637,
										5659
									],
									[
										5801,
										5823
									],
									[
										5857,
										5879
									],
									[
										6154,
										6176
									],
									[
										6300,
										6322
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"tabs_extra_last_activated": 1628474189.18,
							"tabs_extra_last_activated_sheet_index": 11
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "libwebsockets/lib/roles/h2/ops-h2.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 39005,
						"regions":
						{
						},
						"selection":
						[
							[
								24129,
								24151
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1628474437.47,
							"tabs_extra_last_activated_sheet_index": 12,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 12767.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "libwebsockets/lib/roles/h2/private-lib-roles-h2.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11311,
						"regions":
						{
						},
						"selection":
						[
							[
								11159,
								11170
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1628474157.63,
							"tabs_extra_last_activated_sheet_index": 12,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5040.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "minnet-request.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8590,
						"regions":
						{
						},
						"selection":
						[
							[
								8412,
								8412
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1628473980.03,
							"tabs_extra_last_activated_sheet_index": 10,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4532.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "jsutils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4121,
						"regions":
						{
						},
						"selection":
						[
							[
								206,
								206
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1628470189.01,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "/home/roman/Projects/plot-cv/quickjs/quickjs.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 42478,
						"regions":
						{
						},
						"selection":
						[
							[
								2620,
								2620
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 4,
							"tabs_extra_last_activated": 1628477316.53,
							"tabs_extra_last_activated_sheet_index": 17,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 730.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "/home/roman/Projects/plot-cv/quickjs/cutils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7403,
						"regions":
						{
						},
						"selection":
						[
							[
								1926,
								1933
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 4,
							"tabs_extra_last_activated": 1628470188.98,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 495.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "libwebsockets/libwebsockets.dox",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15088,
						"regions":
						{
						},
						"selection":
						[
							[
								10360,
								10360
							]
						],
						"settings":
						{
							"syntax": "Packages/DoxyDoxygen/Doxygen.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1628471734.2,
							"tabs_extra_last_activated_sheet_index": 18,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6075.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "libwebsockets/include/libwebsockets/lws-http.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35735,
						"regions":
						{
						},
						"selection":
						[
							[
								12856,
								12860
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 3,
							"tabs_extra_last_activated": 1628471715.81,
							"tabs_extra_last_activated_sheet_index": 28,
							"tabs_extra_moving":
							[
								5,
								1
							],
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5154.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "libwebsockets/lib/roles/http/server/server.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 86928,
						"regions":
						{
						},
						"selection":
						[
							[
								47668,
								47680
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1628472547.37,
							"tabs_extra_last_activated_sheet_index": 14,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 27902.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 27,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tabs_extra_last_activated": 1628471802.73,
							"tabs_extra_last_activated_sheet_index": 15
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 28,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tabs_extra_last_activated": 1628477044.97,
							"tabs_extra_last_activated_sheet_index": 23
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 38.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.exec":
	{
		"height": 304.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Build debug",
	"project": "minnet.sublime-project",
	"replace":
	{
		"height": 68.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"events.js",
				"~/Projects/plot-cv/lib/events.js"
			],
			[
				"debugger.js",
				"~/Projects/plot-cv/debugger.js"
			],
			[
				"",
				"minnet-request.c"
			],
			[
				"lws-call",
				"libwebsockets/include/libwebsockets/lws-callbacks.h"
			],
			[
				"test-rpc",
				"~/Projects/plot-cv/test-rpc.js"
			],
			[
				"lws-htt",
				"libwebsockets/include/libwebsockets/lws-http.h"
			],
			[
				"server.c",
				"libwebsockets/lib/roles/http/server/server.c"
			],
			[
				"minnet-server",
				"minnet-server.c"
			],
			[
				"lws-ado",
				"libwebsockets/include/libwebsockets/lws-adopt.h"
			],
			[
				"ops-h2",
				"libwebsockets/lib/roles/h2/ops-h2.c"
			],
			[
				"test-rp",
				"~/Projects/plot-cv/test-rpc.js"
			],
			[
				"minnet.c",
				"minnet.c"
			],
			[
				"cmakelists-im",
				"libwebsockets/CMakeLists-implied-options.txt"
			],
			[
				"cmake",
				"libwebsockets/CMakeLists.txt"
			],
			[
				"roles-htt",
				"libwebsockets/lib/roles/http/private-lib-roles-http.h"
			],
			[
				"-roles",
				"libwebsockets/lib/roles/h2/private-lib-roles-h2.h"
			],
			[
				"private-lib-rol",
				"libwebsockets/lib/roles/private-lib-roles.h"
			],
			[
				"server",
				"libwebsockets/lib/roles/http/server/server.c"
			],
			[
				"rpc.js",
				"rpc.js"
			],
			[
				"sse.c",
				"libwebsockets/minimal-examples/http-server/minimal-http-server-sse/minimal-http-server-sse.c"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"minnet-ser",
				"minnet-server.c"
			],
			[
				"quicjs",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"buffer.h",
				"buffer.h"
			],
			[
				"quickj",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"minnet.h",
				"minnet.h"
			],
			[
				"quickjs.",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"webso",
				"minnet-websocket.c"
			],
			[
				"jsutil",
				"minnet-jsutils.h"
			],
			[
				"minnet",
				"minnet.c"
			],
			[
				"websoc",
				"websocket.c"
			],
			[
				"jsut",
				"jsutils.h"
			],
			[
				"minnet-",
				"minnet-server.h"
			],
			[
				"client.c",
				"client.c"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"minn",
				"minnet.c"
			],
			[
				"terminal.",
				"lib/terminal.js"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"qjsm",
				"qjsm.c"
			],
			[
				"tty.js",
				"lib/tty.js"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"inspe",
				"quickjs-inspect.c"
			],
			[
				"utils.h",
				"utils.h"
			],
			[
				"intern",
				"quickjs-internal.h"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"test_chil",
				"tests/test_childprocess.js"
			],
			[
				"pointer.h",
				"pointer.h"
			],
			[
				"stack",
				"lib/stack.js"
			],
			[
				"test_misc",
				"tests/test_misc.js"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"vector.h",
				"vector.h"
			],
			[
				"test_lex",
				"tests/test_lexer.js"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"quickjs.c",
				"~/Projects/plot-cv/quickjs/quickjs.c"
			],
			[
				"pointer.c",
				"pointer.c"
			],
			[
				"-insp",
				"quickjs-inspect.c"
			],
			[
				"test_op",
				"tests/test_op_overloading.js"
			],
			[
				"lexer.c",
				"lexer.c"
			],
			[
				"quickjs-lexer",
				"quickjs-lexer.c"
			],
			[
				"test_qjs",
				"tests/test_qjsm.js"
			],
			[
				"utils.c",
				"utils.c"
			],
			[
				"qjsm.c",
				"qjsm.c"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"pred",
				"predicate.c"
			],
			[
				"dee",
				"quickjs-deep.c"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"qjsm.",
				"qjsm.c"
			],
			[
				"test_qj",
				"tests/test_qjsm.js"
			],
			[
				"quicksj-in",
				"quickjs-internal.h"
			],
			[
				"property",
				"property-enumeration.c"
			],
			[
				"pointer.",
				"pointer.c"
			],
			[
				"quickjs",
				"quickjs-inspect.c"
			],
			[
				"util.j",
				"lib/util.js"
			],
			[
				"jsm.c",
				"qjsm.c"
			],
			[
				"test_point",
				"tests/test_pointer.js"
			],
			[
				"bnflex",
				"lib/bnflexer.js"
			],
			[
				"bnf.y",
				"~/Projects/plot-cv/lib/grammars/bnf.y"
			],
			[
				"test_par",
				"tests/test_parser.js"
			],
			[
				"grammar.ki",
				"grammar.kison"
			],
			[
				"test_pat",
				"tests/test_path.js"
			],
			[
				"exten",
				"lib/extendArray.js"
			],
			[
				"test_parse",
				"tests/test_parser.js"
			],
			[
				"test_path",
				"tests/test_path.js"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"lexer.h",
				"lexer.h"
			],
			[
				"test_tree",
				"tests/test_treewalker.js"
			],
			[
				"tree.h",
				"src/tree.h"
			],
			[
				"scan_ulongn",
				"lib/scan/scan_ulongn.c"
			],
			[
				"term_rest",
				"src/term/term_restore.c"
			],
			[
				"parse.h",
				"src/parse.h"
			],
			[
				"byte.h",
				"lib/byte.h"
			],
			[
				"shell.h",
				"lib/shell.h"
			],
			[
				"mmap_file",
				"lib/stralloc/mmap_filename.c"
			],
			[
				"uffer.h",
				"lib/buffer.h"
			],
			[
				"scan.h",
				"lib/scan.h"
			],
			[
				"stralloc.h",
				"lib/stralloc.h"
			],
			[
				"path.h",
				"lib/path.h"
			],
			[
				"str.h",
				"lib/str.h"
			],
			[
				"scan.",
				"lib/scan.h"
			],
			[
				"debug_char",
				"src/debug/debug_char.c"
			],
			[
				"source_pop",
				"src/source/source_pop.c"
			],
			[
				"builtin.h",
				"src/builtin.h"
			],
			[
				"debug_node",
				"src/debug/debug_node.c"
			],
			[
				"sig_in",
				"lib/sig_internal.h"
			],
			[
				"term_",
				"src/term/term_attr.c"
			],
			[
				"glob.h",
				"lib/glob.h"
			],
			[
				"source.h",
				"src/source.h"
			],
			[
				"fdtable",
				"src/fdtable.h"
			],
			[
				"fd.h",
				"src/fd.h"
			],
			[
				"eval",
				"src/eval.h"
			],
			[
				"ieee",
				"doc/posix/ieee-p1003.2-d11.2-s3.txt"
			],
			[
				"expand.h",
				"src/expand.h"
			],
			[
				"builtin_dum",
				"src/builtin/builtin_dump.c"
			],
			[
				"h_main",
				"src/sh/sh_main.c"
			],
			[
				"parse_cha",
				"src/parse/parse_chartable.c"
			],
			[
				"debug.h",
				"src/debug.h"
			],
			[
				"exec_c",
				"src/exec/exec_command.c"
			],
			[
				"eval.h",
				"src/eval.h"
			],
			[
				"test-op",
				"test-operators.js"
			],
			[
				"filesys",
				"lib/filesystem.js"
			],
			[
				"repl.",
				"repl.js"
			],
			[
				"test-str",
				"plot-cv/quickjs/modules/test-str0.c"
			],
			[
				"property-en",
				"plot-cv/quickjs/modules/property-enumeration.h"
			],
			[
				"cutil",
				"plot-cv/quickjs/cutils.c"
			],
			[
				"test-libre",
				"plot-cv/quickjs/modules/test-libregexp.c"
			],
			[
				"clang-as",
				"plot-cv/clang-ast.js"
			],
			[
				"repl",
				"plot-cv/repl.js"
			],
			[
				"consoleS",
				"plot-cv/lib/consoleSetup.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 397.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
