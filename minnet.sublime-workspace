{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"add_",
				"add_dependencies"
			],
			[
				"ch",
				"chunks_written"
			],
			[
				"defineP",
				"defineProperties(...)"
			],
			[
				"CMAKE_CURR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"gener",
				"generate_module_header"
			],
			[
				"RINGBUFFER_C",
				"RINGBUFFER_CONSUMERANGE"
			],
			[
				"RINGBUFFER_CONSU",
				"RINGBUFFER_CONSUMERANGE"
			],
			[
				"JS_NewArra",
				"JS_NewArrayBufferCopy"
			],
			[
				"RINGBU",
				"RINGBUFFER_INSERT"
			],
			[
				"hea",
				"headers_sent"
			],
			[
				"JS_ToCS",
				"JS_ToCStringLen"
			],
			[
				"PR",
				"PRIi64"
			],
			[
				"JS_Set",
				"JS_SetPropertyStr"
			],
			[
				"db",
				"dbuf_init2"
			],
			[
				"JS_Get",
				"JS_GetProperty"
			],
			[
				"Ret",
				"ReturnValuePathFunction"
			],
			[
				"cFunc",
				"cFuncListObjects"
			],
			[
				"isC",
				"isCFuncCall"
			],
			[
				"En",
				"EntityNames"
			],
			[
				"parseFrom",
				"parseFromString"
			],
			[
				"pseu",
				"pseudoClassArg"
			],
			[
				"pseudoC",
				"pseudoClassName"
			],
			[
				"Key",
				"KeyboardEvent"
			],
			[
				"getOp",
				"getOptionEntries"
			],
			[
				"setProp",
				"setPropertyValue"
			],
			[
				"parse",
				"parseSelectors"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"jsm_buil",
				"jsm_builtin_init"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_New",
				"JS_NewObject"
			],
			[
				"ide",
				"importIdentifiers"
			],
			[
				"iden",
				"importIdentifiers"
			],
			[
				"import",
				"importIdentifiers"
			],
			[
				"ident",
				"identifierSets"
			],
			[
				"path_is",
				"path_is_absolute"
			],
			[
				"js_is_",
				"js_is_null_or_undefined"
			],
			[
				"path_skip_se",
				"path_skip_separator_s"
			],
			[
				"WRITABLE_METHO",
				"WRITABLE_METHOD_CLOSE"
			],
			[
				"list_fo",
				"list_for_each_prev"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"underly",
				"underlying_source"
			],
			[
				"Tok",
				"TokenSequence"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"getAt",
				"getAttributeNames"
			],
			[
				"self",
				"self_closing_tags"
			],
			[
				"self_",
				"self_closing_tags"
			],
			[
				"JS_PROP",
				"JS_PROP_ENUMERABLE"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"de",
				"dependencyMap"
			],
			[
				"dep",
				"dependencyMap"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"js_",
				"js_location_data"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"getOwn",
				"getOwnPropertySymbols(...)"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			],
			[
				"js_misc_ate",
				"js_misc_atexit_functions"
			],
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			],
			[
				"isARr",
				"isArrayBuffer"
			],
			[
				"BIT",
				"BITFIELD_FROMARRAY"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"inotify",
				"inotify_add_watch"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"JS_GEt",
				"JS_GetGlobalObject"
			],
			[
				"dbuf_put",
				"dbuf_put_colorstr"
			],
			[
				"REPEATER_",
				"REPEATER_REJECTED"
			],
			[
				"REP",
				"REPEATER_DONE"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"JS_NEwCFun",
				"JS_NewCFunctionData"
			],
			[
				"js_function",
				"js_function_bind_this"
			],
			[
				"js_repeater_iter",
				"js_repeater_iteration"
			],
			[
				"REPEA",
				"REPEATER_REJECTED"
			],
			[
				"exe",
				"execution"
			],
			[
				"REPEAT",
				"REPEATER_STOPPED"
			],
			[
				"JS_THro",
				"JS_ThrowOutOfMemory"
			],
			[
				"repeater",
				"repeater_finalizer"
			],
			[
				"BACK",
				"BACKGROUND_RED"
			],
			[
				"js_inspec",
				"js_inspect_tostring"
			],
			[
				"JS_Atom",
				"JS_AtomToValue"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"js_misc_glob_err",
				"js_misc_glob_errfunc_ctx"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  Ⓜ  _GNU_SOURCE … — macro object\n—Ⓕ– vector2array ( ) { … } — function\n—Ⓕ– js_object_constructor ( ) { … } — function\n—Ⓕ– js_object_classname ( ) { … } — function\n—Ⓕ– js_console_log ( ) { … } — function\n—Ⓕ– js_function_bound ( ) { … } — function\n—Ⓕ– js_function_bind ( ) { … } — function\n—Ⓕ– js_function_bind_1 ( ) { … } — function\n—Ⓕ– js_function_bind_this ( ) { … } — function\n—Ⓕ– js_function_bind_this_1 ( ) { … } — function\n—Ⓕ– js_function_name ( ) { … } — function\n—Ⓕ– js_function_prototype ( ) { … } — function\n—Ⓕ– js_iterator_result ( ) { … } — function\n—Ⓕ– js_iterator_next ( ) { … } — function\n—Ⓕ– js_copy_properties ( ) { … } — function\n—Ⓕ– js_buffer_free_default ( ) { … } — function\n—Ⓕ– js_buffer_from ( ) { … } — function\n—Ⓕ– js_buffer_new ( ) { … } — function\n—Ⓕ– js_buffer_fromblock ( ) { … } — function\n—Ⓕ– js_buffer_data ( ) { … } — function\n—Ⓕ– js_buffer_alloc ( ) { … } — function\n—Ⓕ– js_buffer_to ( ) { … } — function\n—Ⓕ– js_buffer_to3 ( ) { … } — function\n—Ⓕ– js_buffer_valid ( ) { … } — function\n—Ⓕ– js_buffer_clone ( ) { … } — function\n—Ⓕ– js_buffer_dump ( ) { … } — function\n—Ⓕ– js_buffer_free_rt ( ) { … } — function\n—Ⓕ– js_buffer_free ( ) { … } — function\n—Ⓕ– js_is_iterable ( ) { … } — function\n—Ⓕ– js_is_iterator ( ) { … } — function\n—Ⓕ– js_is_async_generator ( ) { … } — function\n—Ⓕ– js_symbol_static_atom ( ) { … } — function\n—Ⓕ– js_symbol_static_value ( ) { … } — function\n—Ⓕ– js_symbol_for_value ( ) { … } — function\n—Ⓕ– js_symbol_for_atom ( ) { … } — function\n—Ⓕ– js_symbol_ctor ( ) { … } — function\n—Ⓕ– js_global_get ( ) { … } — function\n—Ⓕ– js_global_os ( ) { … } — function\n—Ⓕ– js_os_get ( ) { … } — function\n—Ⓕ– js_timer_start ( ) { … } — function\n—Ⓕ– js_timer_cancel ( ) { … } — function\n—Ⓕ– js_timer_free ( ) { … } — function\n—Ⓕ– js_timer_callback ( ) { … } — function\n—Ⓕ– js_timer_interval ( ) { … } — function\n—Ⓕ– js_timer_restart ( ) { … } — function\n—Ⓕ– js_resolve_functions_zero ( ) { … } — function\n—Ⓕ– js_resolve_functions_is_null ( ) { … } — function\n—Ⓕ– js_resolve_functions_call ( ) { … } — function\n—Ⓕ– js_tostringlen ( ) { … } — function\n—Ⓕ– js_tostring ( ) { … } — function\n—Ⓕ– js_invoke ( ) { … } — function\n—Ⓕ– js_promise_create ( ) { … } — function\n—Ⓕ– js_promise_free ( ) { … } — function\n—Ⓕ– js_promise_free_rt ( ) { … } — function\n—Ⓕ– js_promise_resolve ( ) { … } — function\n—Ⓕ– js_promise_reject ( ) { … } — function\n—Ⓕ– js_promise_zero ( ) { … } — function\n—Ⓕ– js_promise_pending ( ) { … } — function\n—Ⓕ– js_promise_done ( ) { … } — function\n—Ⓕ– js_promise_then ( ) { … } — function\n—Ⓕ– js_promise_catch ( ) { … } — function\n—Ⓕ– js_is_promise ( ) { … } — function\n—Ⓕ– js_error_new ( ) { … } — function\n—Ⓕ– js_error_print ( ) { … } — function\n—Ⓕ– js_toptrsize ( ) { … } — function\n—Ⓕ– js_get_propertystr_bool ( ) { … } — function\n—Ⓕ– js_get_propertystr_int64 ( ) { … } — function\n—Ⓕ– js_get_propertystr_uint32 ( ) { … } — function\n—Ⓕ– js_has_propertystr ( ) { … } — function\n—Ⓕ– js_module_list ( ) { … } — function\n—Ⓕ– js_module_at ( ) { … } — function\n—Ⓕ– js_module_find ( ) { … } — function\n—Ⓕ– js_module_find_s ( ) { … } — function\n—Ⓕ– js_module_export_find ( ) { … } — function\n—Ⓕ– js_module_loader ( ) { … } — function\n—Ⓕ– js_module_import_meta ( ) { … } — function\n—Ⓕ– js_array_length ( ) { … } — function\n—Ⓕ– js_array_to_argv ( ) { … } — function\n—Ⓕ– js_arraybuffer_length ( ) { … } — function\n—Ⓕ– js_offset_length ( ) { … } — function\n—Ⓕ– js_argv_to_array ( ) { … } — function\n—Ⓕ– js_atom_is_index ( ) { … } — function\n—Ⓕ– js_atom_compare_string ( ) { … } — function\n—Ⓕ– js_atom_is_length ( ) { … } — function\n—Ⓕ– js_atom_is_symbol ( ) { … } — function\n—Ⓕ– js_atom_is_string ( ) { … } — function\n—Ⓕ– js_input_buffer ( ) { … } — function\n—Ⓕ– js_input_chars ( ) { … } — function\n—Ⓕ– js_input_args ( ) { … } — function\n—Ⓕ– js_buffer_fromargs ( ) { … } — function\n—Ⓕ– js_is_arraybuffer ( ) { … } — function\n—Ⓕ– js_is_dataview ( ) { … } — function\n—Ⓕ– js_is_typedarray ( ) { … } — function\n—Ⓕ– js_is_generator ( ) { … } — function\n—Ⓕ– js_is_( ) { … } — function\n—Ⓕ– js_typedarray_constructor ( ) { … } — function\n—Ⓕ– js_typedarray_new ( ) { … } — function\n  Ⓣ  JSCClosureRecord ; — typedef\n—Ⓕ– js_cclosure_data ( ) { … } — function\n—Ⓕ– js_cclosure_data2 ( ) { … } — function\n—Ⓕ– js_cclosure_call ( ) { … } — function\n—Ⓕ– js_cclosure_finalizer ( ) { … } — function\n—Ⓕ– js_function_cclosure ( ) { … } — function",
			"settings":
			{
				"buffer_size": 4372,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					181,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/closure.h",
						"symkeys":
						[
							[
								37,
								57
							],
							[
								117,
								131
							],
							[
								203,
								207
							],
							[
								294,
								303
							],
							[
								334,
								345
							],
							[
								374,
								385
							],
							[
								408,
								420
							]
						],
						"symlist":
						[
							"QJSNET_LIB_CLOSURE_H",
							"closure_free_t",
							"void",
							"allocated",
							"closure_new",
							"closure_dup",
							"closure_free"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAQFQAAICDik4IgIF9HTlVfU09VUkNFIOKApiDigJQgbWFjcm8gb2JqZWN0CuKAlOKSu+KAkyB2ZWN0b3IyYXJyYXkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vYmplY3RfY29uc3RydWN0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vYmplY3RfY2xhc3NuYW1lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfY29uc29sZV9sb2cgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9ib3VuZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2Z1bmN0aW9uX2JpbmQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9iaW5kXzEgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9iaW5kX3RoaXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9iaW5kX3RoaXNfMSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2Z1bmN0aW9uX25hbWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9wcm90b3R5cGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pdGVyYXRvcl9yZXN1bHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pdGVyYXRvcl9uZXh0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfY29weV9wcm9wZXJ0aWVzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnVmZmVyX2ZyZWVfZGVmYXVsdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl9mcm9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnVmZmVyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl9mcm9tYmxvY2sgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19idWZmZXJfZGF0YSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl9hbGxvYyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl90byAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl90bzMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19idWZmZXJfdmFsaWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19idWZmZXJfY2xvbmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19idWZmZXJfZHVtcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl9mcmVlX3J0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnVmZmVyX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pc19pdGVyYWJsZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2lzX2l0ZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaXNfYXN5bmNfZ2VuZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc3ltYm9sX3N0YXRpY19hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc3ltYm9sX3N0YXRpY192YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3N5bWJvbF9mb3JfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zeW1ib2xfZm9yX2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zeW1ib2xfY3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2dsb2JhbF9nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19nbG9iYWxfb3MgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vc19nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190aW1lcl9zdGFydCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RpbWVyX2NhbmNlbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RpbWVyX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190aW1lcl9jYWxsYmFjayAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RpbWVyX2ludGVydmFsICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdGltZXJfcmVzdGFydCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Jlc29sdmVfZnVuY3Rpb25zX3plcm8gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19yZXNvbHZlX2Z1bmN0aW9uc19pc19udWxsICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcmVzb2x2ZV9mdW5jdGlvbnNfY2FsbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Rvc3RyaW5nbGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnZva2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcm9taXNlX2NyZWF0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Byb21pc2VfZnJlZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Byb21pc2VfZnJlZV9ydCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Byb21pc2VfcmVzb2x2ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Byb21pc2VfcmVqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV96ZXJvICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV9wZW5kaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV9kb25lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV90aGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV9jYXRjaCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2lzX3Byb21pc2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19lcnJvcl9uZXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19lcnJvcl9wcmludCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RvcHRyc2l6ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2dldF9wcm9wZXJ0eXN0cl9ib29sICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfZ2V0X3Byb3BlcnR5c3RyX2ludDY0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfZ2V0X3Byb3BlcnR5c3RyX3VpbnQzMiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2hhc19wcm9wZXJ0eXN0ciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21vZHVsZV9saXN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbW9kdWxlX2F0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbW9kdWxlX2ZpbmQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19tb2R1bGVfZmluZF9zICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbW9kdWxlX2V4cG9ydF9maW5kICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbW9kdWxlX2xvYWRlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21vZHVsZV9pbXBvcnRfbWV0YSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2FycmF5X2xlbmd0aCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2FycmF5X3RvX2FyZ3YgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hcnJheWJ1ZmZlcl9sZW5ndGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vZmZzZXRfbGVuZ3RoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJndl90b19hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2F0b21faXNfaW5kZXggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hdG9tX2NvbXBhcmVfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXRvbV9pc19sZW5ndGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hdG9tX2lzX3N5bWJvbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2F0b21faXNfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5wdXRfYnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5wdXRfY2hhcnMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnB1dF9hcmdzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnVmZmVyX2Zyb21hcmdzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaXNfYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pc19kYXRhdmlldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2lzX3R5cGVkYXJyYXkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pc19nZW5lcmF0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pc18oICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3R5cGVkYXJyYXlfY29uc3RydWN0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190eXBlZGFycmF5X25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4kgIEpTQ0Nsb3N1cmVSZWNvcmQgOyDigJQgdHlwZWRlZgrigJTikrvigJMganNfY2Nsb3N1cmVfZGF0YSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2NjbG9zdXJlX2RhdGEyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfY2Nsb3N1cmVfY2FsbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2NjbG9zdXJlX2ZpbmFsaXplciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2Z1bmN0aW9uX2NjbG9zdXJlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgAAAAAAAAAAYwAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					182,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/closure.c",
						"symkeys":
						[
							[
								58,
								69
							],
							[
								267,
								278
							],
							[
								337,
								349
							]
						],
						"symlist":
						[
							"—Ⓕ– closure_new ( ) { … } — function",
							"—Ⓕ– closure_dup ( ) { … } — function",
							"—Ⓕ– closure_free ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABjAAAAUUpTTkVUX0xJQl9DTE9TVVJFX0gKICBjbG9zdXJlX2ZyZWVfdAogIHZvaWQKICBhbGxvY2F0ZWQKICBjbG9zdXJlX25ldwogIGNsb3N1cmVfZHVwCiAgY2xvc3VyZV9mcmVlAAAAAAAAAABvAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					183,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/closure.h",
						"symkeys":
						[
							[
								37,
								57
							],
							[
								117,
								131
							],
							[
								203,
								207
							],
							[
								294,
								303
							],
							[
								334,
								345
							],
							[
								374,
								385
							],
							[
								408,
								420
							]
						],
						"symlist":
						[
							"QJSNET_LIB_CLOSURE_H",
							"closure_free_t",
							"void",
							"allocated",
							"closure_new",
							"closure_dup",
							"closure_free"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACNAAAA4oCU4pK74oCTIGNsb3N1cmVfbmV3ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgY2xvc3VyZV9kdXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBjbG9zdXJlX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uAAAAAAAAAABjAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					184,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/closure.c",
						"symkeys":
						[
							[
								58,
								69
							],
							[
								267,
								278
							],
							[
								337,
								349
							]
						],
						"symlist":
						[
							"—Ⓕ– closure_new ( ) { … } — function",
							"—Ⓕ– closure_dup ( ) { … } — function",
							"—Ⓕ– closure_free ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABjAAAAUUpTTkVUX0xJQl9DTE9TVVJFX0gKICBjbG9zdXJlX2ZyZWVfdAogIHZvaWQKICBhbGxvY2F0ZWQKICBjbG9zdXJlX25ldwogIGNsb3N1cmVfZHVwCiAgY2xvc3VyZV9mcmVlAAAAAAAAAABvAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					185,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/closure.h",
						"symkeys":
						[
							[
								37,
								57
							],
							[
								117,
								131
							],
							[
								203,
								207
							],
							[
								294,
								303
							],
							[
								334,
								345
							],
							[
								374,
								385
							],
							[
								408,
								420
							]
						],
						"symlist":
						[
							"QJSNET_LIB_CLOSURE_H",
							"closure_free_t",
							"void",
							"allocated",
							"closure_new",
							"closure_dup",
							"closure_free"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACNAAAA4oCU4pK74oCTIGNsb3N1cmVfbmV3ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgY2xvc3VyZV9kdXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBjbG9zdXJlX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uAAAAAAAAAABjAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					186,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/closure.c",
						"symkeys":
						[
							[
								58,
								69
							],
							[
								267,
								278
							],
							[
								337,
								349
							]
						],
						"symlist":
						[
							"—Ⓕ– closure_new ( ) { … } — function",
							"—Ⓕ– closure_dup ( ) { … } — function",
							"—Ⓕ– closure_free ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABjAAAAUUpTTkVUX0xJQl9DTE9TVVJFX0gKICBjbG9zdXJlX2ZyZWVfdAogIHZvaWQKICBhbGxvY2F0ZWQKICBjbG9zdXJlX25ldwogIGNsb3N1cmVfZHVwCiAgY2xvc3VyZV9mcmVlAAAAAAAAAABvAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					187,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/closure.h",
						"symkeys":
						[
							[
								37,
								57
							],
							[
								117,
								131
							],
							[
								203,
								207
							],
							[
								294,
								303
							],
							[
								334,
								345
							],
							[
								374,
								385
							],
							[
								408,
								420
							]
						],
						"symlist":
						[
							"QJSNET_LIB_CLOSURE_H",
							"closure_free_t",
							"void",
							"allocated",
							"closure_new",
							"closure_dup",
							"closure_free"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACNAAAA4oCU4pK74oCTIGNsb3N1cmVfbmV3ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgY2xvc3VyZV9kdXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBjbG9zdXJlX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uAAAAAAAAAABjAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					188,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/jsutils.c",
						"symkeys":
						[
							[
								8,
								19
							],
							[
								169,
								181
							],
							[
								371,
								392
							],
							[
								568,
								587
							],
							[
								1076,
								1090
							],
							[
								1347,
								1364
							],
							[
								1829,
								1845
							],
							[
								2180,
								2198
							],
							[
								2312,
								2333
							],
							[
								2472,
								2495
							],
							[
								3107,
								3123
							],
							[
								3882,
								3903
							],
							[
								4058,
								4076
							],
							[
								4315,
								4331
							],
							[
								5638,
								5656
							],
							[
								6013,
								6035
							],
							[
								6358,
								6372
							],
							[
								6497,
								6510
							],
							[
								6920,
								6939
							],
							[
								7076,
								7090
							],
							[
								7257,
								7272
							],
							[
								7464,
								7476
							],
							[
								7594,
								7607
							],
							[
								7843,
								7858
							],
							[
								7930,
								7945
							],
							[
								8102,
								8116
							],
							[
								8261,
								8278
							],
							[
								8437,
								8451
							],
							[
								8537,
								8551
							],
							[
								8933,
								8947
							],
							[
								9146,
								9167
							],
							[
								9384,
								9405
							],
							[
								9612,
								9634
							],
							[
								9846,
								9865
							],
							[
								10235,
								10253
							],
							[
								10456,
								10470
							],
							[
								10539,
								10552
							],
							[
								10764,
								10776
							],
							[
								10841,
								10850
							],
							[
								11033,
								11047
							],
							[
								11329,
								11344
							],
							[
								11581,
								11594
							],
							[
								11876,
								11893
							],
							[
								12439,
								12456
							],
							[
								12918,
								12934
							],
							[
								13162,
								13187
							],
							[
								13292,
								13320
							],
							[
								13443,
								13468
							],
							[
								13738,
								13752
							],
							[
								14035,
								14046
							],
							[
								14136,
								14145
							],
							[
								14390,
								14407
							],
							[
								14544,
								14559
							],
							[
								14720,
								14738
							],
							[
								14903,
								14921
							],
							[
								15115,
								15132
							],
							[
								15322,
								15337
							],
							[
								15409,
								15427
							],
							[
								15516,
								15531
							],
							[
								15622,
								15637
							],
							[
								15766,
								15782
							],
							[
								15909,
								15922
							],
							[
								16126,
								16138
							],
							[
								16418,
								16432
							],
							[
								17485,
								17497
							],
							[
								17732,
								17755
							],
							[
								18006,
								18030
							],
							[
								18250,
								18275
							],
							[
								18493,
								18511
							],
							[
								18709,
								18723
							],
							[
								19077,
								19089
							],
							[
								19339,
								19353
							],
							[
								19625,
								19641
							],
							[
								19838,
								19859
							],
							[
								20546,
								20562
							],
							[
								20628,
								20649
							],
							[
								20845,
								20860
							],
							[
								21199,
								21215
							],
							[
								21579,
								21600
							],
							[
								21735,
								21751
							],
							[
								22313,
								22329
							],
							[
								22552,
								22568
							],
							[
								23168,
								23190
							],
							[
								23374,
								23391
							],
							[
								23485,
								23502
							],
							[
								23678,
								23695
							],
							[
								23875,
								23890
							],
							[
								25135,
								25149
							],
							[
								25550,
								25563
							],
							[
								25775,
								25793
							],
							[
								26067,
								26084
							],
							[
								26250,
								26264
							],
							[
								26698,
								26714
							],
							[
								26853,
								26868
							],
							[
								27246,
								27257
							],
							[
								27578,
								27603
							],
							[
								27863,
								27880
							],
							[
								28477,
								28493
							],
							[
								28581,
								28597
							],
							[
								28707,
								28724
							],
							[
								28839,
								28855
							],
							[
								29494,
								29515
							],
							[
								29868,
								29888
							]
						],
						"symlist":
						[
							" Ⓜ  _GNU_SOURCE … — macro object",
							"—Ⓕ– vector2array ( ) { … } — function",
							"—Ⓕ– js_object_constructor ( ) { … } — function",
							"—Ⓕ– js_object_classname ( ) { … } — function",
							"—Ⓕ– js_console_log ( ) { … } — function",
							"—Ⓕ– js_function_bound ( ) { … } — function",
							"—Ⓕ– js_function_bind ( ) { … } — function",
							"—Ⓕ– js_function_bind_1 ( ) { … } — function",
							"—Ⓕ– js_function_bind_this ( ) { … } — function",
							"—Ⓕ– js_function_bind_this_1 ( ) { … } — function",
							"—Ⓕ– js_function_name ( ) { … } — function",
							"—Ⓕ– js_function_prototype ( ) { … } — function",
							"—Ⓕ– js_iterator_result ( ) { … } — function",
							"—Ⓕ– js_iterator_next ( ) { … } — function",
							"—Ⓕ– js_copy_properties ( ) { … } — function",
							"—Ⓕ– js_buffer_free_default ( ) { … } — function",
							"—Ⓕ– js_buffer_from ( ) { … } — function",
							"—Ⓕ– js_buffer_new ( ) { … } — function",
							"—Ⓕ– js_buffer_fromblock ( ) { … } — function",
							"—Ⓕ– js_buffer_data ( ) { … } — function",
							"—Ⓕ– js_buffer_alloc ( ) { … } — function",
							"—Ⓕ– js_buffer_to ( ) { … } — function",
							"—Ⓕ– js_buffer_to3 ( ) { … } — function",
							"—Ⓕ– js_buffer_valid ( ) { … } — function",
							"—Ⓕ– js_buffer_clone ( ) { … } — function",
							"—Ⓕ– js_buffer_dump ( ) { … } — function",
							"—Ⓕ– js_buffer_free_rt ( ) { … } — function",
							"—Ⓕ– js_buffer_free ( ) { … } — function",
							"—Ⓕ– js_is_iterable ( ) { … } — function",
							"—Ⓕ– js_is_iterator ( ) { … } — function",
							"—Ⓕ– js_is_async_generator ( ) { … } — function",
							"—Ⓕ– js_symbol_static_atom ( ) { … } — function",
							"—Ⓕ– js_symbol_static_value ( ) { … } — function",
							"—Ⓕ– js_symbol_for_value ( ) { … } — function",
							"—Ⓕ– js_symbol_for_atom ( ) { … } — function",
							"—Ⓕ– js_symbol_ctor ( ) { … } — function",
							"—Ⓕ– js_global_get ( ) { … } — function",
							"—Ⓕ– js_global_os ( ) { … } — function",
							"—Ⓕ– js_os_get ( ) { … } — function",
							"—Ⓕ– js_timer_start ( ) { … } — function",
							"—Ⓕ– js_timer_cancel ( ) { … } — function",
							"—Ⓕ– js_timer_free ( ) { … } — function",
							"—Ⓕ– js_timer_callback ( ) { … } — function",
							"—Ⓕ– js_timer_interval ( ) { … } — function",
							"—Ⓕ– js_timer_restart ( ) { … } — function",
							"—Ⓕ– js_resolve_functions_zero ( ) { … } — function",
							"—Ⓕ– js_resolve_functions_is_null ( ) { … } — function",
							"—Ⓕ– js_resolve_functions_call ( ) { … } — function",
							"—Ⓕ– js_tostringlen ( ) { … } — function",
							"—Ⓕ– js_tostring ( ) { … } — function",
							"—Ⓕ– js_invoke ( ) { … } — function",
							"—Ⓕ– js_promise_create ( ) { … } — function",
							"—Ⓕ– js_promise_free ( ) { … } — function",
							"—Ⓕ– js_promise_free_rt ( ) { … } — function",
							"—Ⓕ– js_promise_resolve ( ) { … } — function",
							"—Ⓕ– js_promise_reject ( ) { … } — function",
							"—Ⓕ– js_promise_zero ( ) { … } — function",
							"—Ⓕ– js_promise_pending ( ) { … } — function",
							"—Ⓕ– js_promise_done ( ) { … } — function",
							"—Ⓕ– js_promise_then ( ) { … } — function",
							"—Ⓕ– js_promise_catch ( ) { … } — function",
							"—Ⓕ– js_is_promise ( ) { … } — function",
							"—Ⓕ– js_error_new ( ) { … } — function",
							"—Ⓕ– js_error_print ( ) { … } — function",
							"—Ⓕ– js_toptrsize ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_bool ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_int64 ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_uint32 ( ) { … } — function",
							"—Ⓕ– js_has_propertystr ( ) { … } — function",
							"—Ⓕ– js_module_list ( ) { … } — function",
							"—Ⓕ– js_module_at ( ) { … } — function",
							"—Ⓕ– js_module_find ( ) { … } — function",
							"—Ⓕ– js_module_find_s ( ) { … } — function",
							"—Ⓕ– js_module_export_find ( ) { … } — function",
							"—Ⓕ– js_module_loader ( ) { … } — function",
							"—Ⓕ– js_module_import_meta ( ) { … } — function",
							"—Ⓕ– js_array_length ( ) { … } — function",
							"—Ⓕ– js_array_to_argv ( ) { … } — function",
							"—Ⓕ– js_arraybuffer_length ( ) { … } — function",
							"—Ⓕ– js_offset_length ( ) { … } — function",
							"—Ⓕ– js_argv_to_array ( ) { … } — function",
							"—Ⓕ– js_atom_is_index ( ) { … } — function",
							"—Ⓕ– js_atom_compare_string ( ) { … } — function",
							"—Ⓕ– js_atom_is_length ( ) { … } — function",
							"—Ⓕ– js_atom_is_symbol ( ) { … } — function",
							"—Ⓕ– js_atom_is_string ( ) { … } — function",
							"—Ⓕ– js_input_buffer ( ) { … } — function",
							"—Ⓕ– js_input_chars ( ) { … } — function",
							"—Ⓕ– js_input_args ( ) { … } — function",
							"—Ⓕ– js_buffer_fromargs ( ) { … } — function",
							"—Ⓕ– js_is_arraybuffer ( ) { … } — function",
							"—Ⓕ– js_is_dataview ( ) { … } — function",
							"—Ⓕ– js_is_typedarray ( ) { … } — function",
							"—Ⓕ– js_is_generator ( ) { … } — function",
							"—Ⓕ– js_is_async ( ) { … } — function",
							"—Ⓕ– js_typedarray_constructor ( ) { … } — function",
							"—Ⓕ– js_typedarray_new ( ) { … } — function",
							" Ⓣ  JSCClosureRecord ; — typedef",
							"—Ⓕ– js_cclosure_data ( ) { … } — function",
							"—Ⓕ– js_cclosure_data2 ( ) { … } — function",
							"—Ⓕ– js_cclosure_call ( ) { … } — function",
							"—Ⓕ– js_cclosure_finalizer ( ) { … } — function",
							"—Ⓕ– js_function_cclosure ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABjAAAAUUpTTkVUX0xJQl9DTE9TVVJFX0gKICBjbG9zdXJlX2ZyZWVfdAogIHZvaWQKICBhbGxvY2F0ZWQKICBjbG9zdXJlX25ldwogIGNsb3N1cmVfZHVwCiAgY2xvc3VyZV9mcmVlAAAAAAAAAAAUEQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					189,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/jsutils.c",
						"symkeys":
						[
							[
								8,
								19
							],
							[
								169,
								181
							],
							[
								371,
								392
							],
							[
								568,
								587
							],
							[
								1076,
								1090
							],
							[
								1347,
								1364
							],
							[
								1829,
								1845
							],
							[
								2180,
								2198
							],
							[
								2312,
								2333
							],
							[
								2472,
								2495
							],
							[
								3107,
								3123
							],
							[
								3882,
								3903
							],
							[
								4058,
								4076
							],
							[
								4315,
								4331
							],
							[
								5638,
								5656
							],
							[
								6013,
								6035
							],
							[
								6358,
								6372
							],
							[
								6497,
								6510
							],
							[
								6920,
								6939
							],
							[
								7076,
								7090
							],
							[
								7257,
								7272
							],
							[
								7464,
								7476
							],
							[
								7594,
								7607
							],
							[
								7843,
								7858
							],
							[
								7930,
								7945
							],
							[
								8102,
								8116
							],
							[
								8261,
								8278
							],
							[
								8437,
								8451
							],
							[
								8537,
								8551
							],
							[
								8933,
								8947
							],
							[
								9146,
								9167
							],
							[
								9384,
								9405
							],
							[
								9612,
								9634
							],
							[
								9846,
								9865
							],
							[
								10235,
								10253
							],
							[
								10456,
								10470
							],
							[
								10539,
								10552
							],
							[
								10764,
								10776
							],
							[
								10841,
								10850
							],
							[
								11033,
								11047
							],
							[
								11329,
								11344
							],
							[
								11581,
								11594
							],
							[
								11876,
								11893
							],
							[
								12439,
								12456
							],
							[
								12918,
								12934
							],
							[
								13162,
								13187
							],
							[
								13292,
								13320
							],
							[
								13443,
								13468
							],
							[
								13738,
								13752
							],
							[
								14035,
								14046
							],
							[
								14136,
								14145
							],
							[
								14390,
								14407
							],
							[
								14544,
								14559
							],
							[
								14720,
								14738
							],
							[
								14903,
								14921
							],
							[
								15115,
								15132
							],
							[
								15322,
								15337
							],
							[
								15409,
								15427
							],
							[
								15516,
								15531
							],
							[
								15622,
								15637
							],
							[
								15766,
								15782
							],
							[
								15909,
								15922
							],
							[
								16126,
								16138
							],
							[
								16418,
								16432
							],
							[
								17485,
								17497
							],
							[
								17732,
								17755
							],
							[
								18006,
								18030
							],
							[
								18250,
								18275
							],
							[
								18493,
								18511
							],
							[
								18709,
								18723
							],
							[
								19077,
								19089
							],
							[
								19339,
								19353
							],
							[
								19625,
								19641
							],
							[
								19838,
								19859
							],
							[
								20546,
								20562
							],
							[
								20628,
								20649
							],
							[
								20845,
								20860
							],
							[
								21199,
								21215
							],
							[
								21579,
								21600
							],
							[
								21735,
								21751
							],
							[
								22313,
								22329
							],
							[
								22552,
								22568
							],
							[
								23168,
								23190
							],
							[
								23374,
								23391
							],
							[
								23485,
								23502
							],
							[
								23678,
								23695
							],
							[
								23875,
								23890
							],
							[
								25135,
								25149
							],
							[
								25550,
								25563
							],
							[
								25775,
								25793
							],
							[
								26067,
								26084
							],
							[
								26250,
								26264
							],
							[
								26698,
								26714
							],
							[
								26853,
								26868
							],
							[
								27246,
								27257
							],
							[
								27578,
								27603
							],
							[
								27863,
								27880
							],
							[
								28465,
								28481
							],
							[
								28569,
								28585
							],
							[
								28695,
								28712
							],
							[
								28827,
								28843
							],
							[
								29482,
								29503
							],
							[
								29855,
								29875
							]
						],
						"symlist":
						[
							" Ⓜ  _GNU_SOURCE … — macro object",
							"—Ⓕ– vector2array ( ) { … } — function",
							"—Ⓕ– js_object_constructor ( ) { … } — function",
							"—Ⓕ– js_object_classname ( ) { … } — function",
							"—Ⓕ– js_console_log ( ) { … } — function",
							"—Ⓕ– js_function_bound ( ) { … } — function",
							"—Ⓕ– js_function_bind ( ) { … } — function",
							"—Ⓕ– js_function_bind_1 ( ) { … } — function",
							"—Ⓕ– js_function_bind_this ( ) { … } — function",
							"—Ⓕ– js_function_bind_this_1 ( ) { … } — function",
							"—Ⓕ– js_function_name ( ) { … } — function",
							"—Ⓕ– js_function_prototype ( ) { … } — function",
							"—Ⓕ– js_iterator_result ( ) { … } — function",
							"—Ⓕ– js_iterator_next ( ) { … } — function",
							"—Ⓕ– js_copy_properties ( ) { … } — function",
							"—Ⓕ– js_buffer_free_default ( ) { … } — function",
							"—Ⓕ– js_buffer_from ( ) { … } — function",
							"—Ⓕ– js_buffer_new ( ) { … } — function",
							"—Ⓕ– js_buffer_fromblock ( ) { … } — function",
							"—Ⓕ– js_buffer_data ( ) { … } — function",
							"—Ⓕ– js_buffer_alloc ( ) { … } — function",
							"—Ⓕ– js_buffer_to ( ) { … } — function",
							"—Ⓕ– js_buffer_to3 ( ) { … } — function",
							"—Ⓕ– js_buffer_valid ( ) { … } — function",
							"—Ⓕ– js_buffer_clone ( ) { … } — function",
							"—Ⓕ– js_buffer_dump ( ) { … } — function",
							"—Ⓕ– js_buffer_free_rt ( ) { … } — function",
							"—Ⓕ– js_buffer_free ( ) { … } — function",
							"—Ⓕ– js_is_iterable ( ) { … } — function",
							"—Ⓕ– js_is_iterator ( ) { … } — function",
							"—Ⓕ– js_is_async_generator ( ) { … } — function",
							"—Ⓕ– js_symbol_static_atom ( ) { … } — function",
							"—Ⓕ– js_symbol_static_value ( ) { … } — function",
							"—Ⓕ– js_symbol_for_value ( ) { … } — function",
							"—Ⓕ– js_symbol_for_atom ( ) { … } — function",
							"—Ⓕ– js_symbol_ctor ( ) { … } — function",
							"—Ⓕ– js_global_get ( ) { … } — function",
							"—Ⓕ– js_global_os ( ) { … } — function",
							"—Ⓕ– js_os_get ( ) { … } — function",
							"—Ⓕ– js_timer_start ( ) { … } — function",
							"—Ⓕ– js_timer_cancel ( ) { … } — function",
							"—Ⓕ– js_timer_free ( ) { … } — function",
							"—Ⓕ– js_timer_callback ( ) { … } — function",
							"—Ⓕ– js_timer_interval ( ) { … } — function",
							"—Ⓕ– js_timer_restart ( ) { … } — function",
							"—Ⓕ– js_resolve_functions_zero ( ) { … } — function",
							"—Ⓕ– js_resolve_functions_is_null ( ) { … } — function",
							"—Ⓕ– js_resolve_functions_call ( ) { … } — function",
							"—Ⓕ– js_tostringlen ( ) { … } — function",
							"—Ⓕ– js_tostring ( ) { … } — function",
							"—Ⓕ– js_invoke ( ) { … } — function",
							"—Ⓕ– js_promise_create ( ) { … } — function",
							"—Ⓕ– js_promise_free ( ) { … } — function",
							"—Ⓕ– js_promise_free_rt ( ) { … } — function",
							"—Ⓕ– js_promise_resolve ( ) { … } — function",
							"—Ⓕ– js_promise_reject ( ) { … } — function",
							"—Ⓕ– js_promise_zero ( ) { … } — function",
							"—Ⓕ– js_promise_pending ( ) { … } — function",
							"—Ⓕ– js_promise_done ( ) { … } — function",
							"—Ⓕ– js_promise_then ( ) { … } — function",
							"—Ⓕ– js_promise_catch ( ) { … } — function",
							"—Ⓕ– js_is_promise ( ) { … } — function",
							"—Ⓕ– js_error_new ( ) { … } — function",
							"—Ⓕ– js_error_print ( ) { … } — function",
							"—Ⓕ– js_toptrsize ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_bool ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_int64 ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_uint32 ( ) { … } — function",
							"—Ⓕ– js_has_propertystr ( ) { … } — function",
							"—Ⓕ– js_module_list ( ) { … } — function",
							"—Ⓕ– js_module_at ( ) { … } — function",
							"—Ⓕ– js_module_find ( ) { … } — function",
							"—Ⓕ– js_module_find_s ( ) { … } — function",
							"—Ⓕ– js_module_export_find ( ) { … } — function",
							"—Ⓕ– js_module_loader ( ) { … } — function",
							"—Ⓕ– js_module_import_meta ( ) { … } — function",
							"—Ⓕ– js_array_length ( ) { … } — function",
							"—Ⓕ– js_array_to_argv ( ) { … } — function",
							"—Ⓕ– js_arraybuffer_length ( ) { … } — function",
							"—Ⓕ– js_offset_length ( ) { … } — function",
							"—Ⓕ– js_argv_to_array ( ) { … } — function",
							"—Ⓕ– js_atom_is_index ( ) { … } — function",
							"—Ⓕ– js_atom_compare_string ( ) { … } — function",
							"—Ⓕ– js_atom_is_length ( ) { … } — function",
							"—Ⓕ– js_atom_is_symbol ( ) { … } — function",
							"—Ⓕ– js_atom_is_string ( ) { … } — function",
							"—Ⓕ– js_input_buffer ( ) { … } — function",
							"—Ⓕ– js_input_chars ( ) { … } — function",
							"—Ⓕ– js_input_args ( ) { … } — function",
							"—Ⓕ– js_buffer_fromargs ( ) { … } — function",
							"—Ⓕ– js_is_arraybuffer ( ) { … } — function",
							"—Ⓕ– js_is_dataview ( ) { … } — function",
							"—Ⓕ– js_is_typedarray ( ) { … } — function",
							"—Ⓕ– js_is_generator ( ) { … } — function",
							"—Ⓕ– js_is_async ( ) { … } — function",
							"—Ⓕ– js_typedarray_constructor ( ) { … } — function",
							"—Ⓕ– js_typedarray_new ( ) { … } — function",
							" Ⓣ  JSCClosureRecord ; — typedef",
							"—Ⓕ– js_cclosure_data ( ) { … } — function",
							"—Ⓕ– js_cclosure_data2 ( ) { … } — function",
							"—Ⓕ– js_cclosure_call ( ) { … } — function",
							"—Ⓕ– js_cclosure_finalizer ( ) { … } — function",
							"—Ⓕ– js_function_cclosure ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAQFQAAICDik4IgIF9HTlVfU09VUkNFIOKApiDigJQgbWFjcm8gb2JqZWN0CuKAlOKSu+KAkyB2ZWN0b3IyYXJyYXkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vYmplY3RfY29uc3RydWN0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vYmplY3RfY2xhc3NuYW1lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfY29uc29sZV9sb2cgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9ib3VuZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2Z1bmN0aW9uX2JpbmQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9iaW5kXzEgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9iaW5kX3RoaXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9iaW5kX3RoaXNfMSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2Z1bmN0aW9uX25hbWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9wcm90b3R5cGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pdGVyYXRvcl9yZXN1bHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pdGVyYXRvcl9uZXh0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfY29weV9wcm9wZXJ0aWVzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnVmZmVyX2ZyZWVfZGVmYXVsdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl9mcm9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnVmZmVyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl9mcm9tYmxvY2sgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19idWZmZXJfZGF0YSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl9hbGxvYyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl90byAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl90bzMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19idWZmZXJfdmFsaWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19idWZmZXJfY2xvbmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19idWZmZXJfZHVtcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl9mcmVlX3J0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnVmZmVyX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pc19pdGVyYWJsZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2lzX2l0ZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaXNfYXN5bmNfZ2VuZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc3ltYm9sX3N0YXRpY19hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc3ltYm9sX3N0YXRpY192YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3N5bWJvbF9mb3JfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zeW1ib2xfZm9yX2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zeW1ib2xfY3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2dsb2JhbF9nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19nbG9iYWxfb3MgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vc19nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190aW1lcl9zdGFydCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RpbWVyX2NhbmNlbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RpbWVyX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190aW1lcl9jYWxsYmFjayAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RpbWVyX2ludGVydmFsICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdGltZXJfcmVzdGFydCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Jlc29sdmVfZnVuY3Rpb25zX3plcm8gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19yZXNvbHZlX2Z1bmN0aW9uc19pc19udWxsICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcmVzb2x2ZV9mdW5jdGlvbnNfY2FsbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Rvc3RyaW5nbGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnZva2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcm9taXNlX2NyZWF0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Byb21pc2VfZnJlZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Byb21pc2VfZnJlZV9ydCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Byb21pc2VfcmVzb2x2ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Byb21pc2VfcmVqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV96ZXJvICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV9wZW5kaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV9kb25lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV90aGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV9jYXRjaCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2lzX3Byb21pc2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19lcnJvcl9uZXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19lcnJvcl9wcmludCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RvcHRyc2l6ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2dldF9wcm9wZXJ0eXN0cl9ib29sICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfZ2V0X3Byb3BlcnR5c3RyX2ludDY0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfZ2V0X3Byb3BlcnR5c3RyX3VpbnQzMiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2hhc19wcm9wZXJ0eXN0ciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21vZHVsZV9saXN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbW9kdWxlX2F0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbW9kdWxlX2ZpbmQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19tb2R1bGVfZmluZF9zICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbW9kdWxlX2V4cG9ydF9maW5kICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbW9kdWxlX2xvYWRlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21vZHVsZV9pbXBvcnRfbWV0YSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2FycmF5X2xlbmd0aCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2FycmF5X3RvX2FyZ3YgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hcnJheWJ1ZmZlcl9sZW5ndGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vZmZzZXRfbGVuZ3RoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJndl90b19hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2F0b21faXNfaW5kZXggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hdG9tX2NvbXBhcmVfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXRvbV9pc19sZW5ndGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hdG9tX2lzX3N5bWJvbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2F0b21faXNfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5wdXRfYnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5wdXRfY2hhcnMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnB1dF9hcmdzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnVmZmVyX2Zyb21hcmdzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaXNfYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pc19kYXRhdmlldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2lzX3R5cGVkYXJyYXkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pc19nZW5lcmF0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pc18oICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3R5cGVkYXJyYXlfY29uc3RydWN0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190eXBlZGFycmF5X25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4kgIEpTQ0Nsb3N1cmVSZWNvcmQgOyDigJQgdHlwZWRlZgrigJTikrvigJMganNfY2Nsb3N1cmVfZGF0YSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2NjbG9zdXJlX2RhdGEyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfY2Nsb3N1cmVfY2FsbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2NjbG9zdXJlX2ZpbmFsaXplciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2Z1bmN0aW9uX2NjbG9zdXJlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgAAAAAAAAAAFBEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					190,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/jsutils.c",
						"symkeys":
						[
							[
								8,
								19
							],
							[
								169,
								181
							],
							[
								371,
								392
							],
							[
								568,
								587
							],
							[
								1076,
								1090
							],
							[
								1347,
								1364
							],
							[
								1829,
								1845
							],
							[
								2180,
								2198
							],
							[
								2312,
								2333
							],
							[
								2472,
								2495
							],
							[
								3107,
								3123
							],
							[
								3882,
								3903
							],
							[
								4058,
								4076
							],
							[
								4315,
								4331
							],
							[
								5638,
								5656
							],
							[
								6013,
								6035
							],
							[
								6358,
								6372
							],
							[
								6497,
								6510
							],
							[
								6920,
								6939
							],
							[
								7076,
								7090
							],
							[
								7257,
								7272
							],
							[
								7464,
								7476
							],
							[
								7594,
								7607
							],
							[
								7843,
								7858
							],
							[
								7930,
								7945
							],
							[
								8102,
								8116
							],
							[
								8261,
								8278
							],
							[
								8437,
								8451
							],
							[
								8537,
								8551
							],
							[
								8933,
								8947
							],
							[
								9146,
								9167
							],
							[
								9384,
								9405
							],
							[
								9612,
								9634
							],
							[
								9846,
								9865
							],
							[
								10235,
								10253
							],
							[
								10456,
								10470
							],
							[
								10539,
								10552
							],
							[
								10764,
								10776
							],
							[
								10841,
								10850
							],
							[
								11033,
								11047
							],
							[
								11329,
								11344
							],
							[
								11581,
								11594
							],
							[
								11876,
								11893
							],
							[
								12439,
								12456
							],
							[
								12918,
								12934
							],
							[
								13162,
								13187
							],
							[
								13292,
								13320
							],
							[
								13443,
								13468
							],
							[
								13738,
								13752
							],
							[
								14035,
								14046
							],
							[
								14136,
								14145
							],
							[
								14390,
								14407
							],
							[
								14544,
								14559
							],
							[
								14720,
								14738
							],
							[
								14903,
								14921
							],
							[
								15115,
								15132
							],
							[
								15322,
								15337
							],
							[
								15409,
								15427
							],
							[
								15516,
								15531
							],
							[
								15622,
								15637
							],
							[
								15766,
								15782
							],
							[
								15909,
								15922
							],
							[
								16126,
								16138
							],
							[
								16418,
								16432
							],
							[
								17485,
								17497
							],
							[
								17732,
								17755
							],
							[
								18006,
								18030
							],
							[
								18250,
								18275
							],
							[
								18493,
								18511
							],
							[
								18709,
								18723
							],
							[
								19077,
								19089
							],
							[
								19339,
								19353
							],
							[
								19625,
								19641
							],
							[
								19838,
								19859
							],
							[
								20546,
								20562
							],
							[
								20628,
								20649
							],
							[
								20845,
								20860
							],
							[
								21199,
								21215
							],
							[
								21579,
								21600
							],
							[
								21735,
								21751
							],
							[
								22313,
								22329
							],
							[
								22552,
								22568
							],
							[
								23168,
								23190
							],
							[
								23374,
								23391
							],
							[
								23485,
								23502
							],
							[
								23678,
								23695
							],
							[
								23875,
								23890
							],
							[
								25135,
								25149
							],
							[
								25550,
								25563
							],
							[
								25775,
								25793
							],
							[
								26067,
								26084
							],
							[
								26250,
								26264
							],
							[
								26698,
								26714
							],
							[
								26853,
								26868
							],
							[
								27246,
								27257
							],
							[
								27578,
								27603
							],
							[
								27863,
								27880
							],
							[
								28465,
								28481
							],
							[
								28569,
								28585
							],
							[
								28695,
								28712
							],
							[
								28827,
								28843
							],
							[
								29482,
								29503
							],
							[
								29855,
								29875
							]
						],
						"symlist":
						[
							" Ⓜ  _GNU_SOURCE … — macro object",
							"—Ⓕ– vector2array ( ) { … } — function",
							"—Ⓕ– js_object_constructor ( ) { … } — function",
							"—Ⓕ– js_object_classname ( ) { … } — function",
							"—Ⓕ– js_console_log ( ) { … } — function",
							"—Ⓕ– js_function_bound ( ) { … } — function",
							"—Ⓕ– js_function_bind ( ) { … } — function",
							"—Ⓕ– js_function_bind_1 ( ) { … } — function",
							"—Ⓕ– js_function_bind_this ( ) { … } — function",
							"—Ⓕ– js_function_bind_this_1 ( ) { … } — function",
							"—Ⓕ– js_function_name ( ) { … } — function",
							"—Ⓕ– js_function_prototype ( ) { … } — function",
							"—Ⓕ– js_iterator_result ( ) { … } — function",
							"—Ⓕ– js_iterator_next ( ) { … } — function",
							"—Ⓕ– js_copy_properties ( ) { … } — function",
							"—Ⓕ– js_buffer_free_default ( ) { … } — function",
							"—Ⓕ– js_buffer_from ( ) { … } — function",
							"—Ⓕ– js_buffer_new ( ) { … } — function",
							"—Ⓕ– js_buffer_fromblock ( ) { … } — function",
							"—Ⓕ– js_buffer_data ( ) { … } — function",
							"—Ⓕ– js_buffer_alloc ( ) { … } — function",
							"—Ⓕ– js_buffer_to ( ) { … } — function",
							"—Ⓕ– js_buffer_to3 ( ) { … } — function",
							"—Ⓕ– js_buffer_valid ( ) { … } — function",
							"—Ⓕ– js_buffer_clone ( ) { … } — function",
							"—Ⓕ– js_buffer_dump ( ) { … } — function",
							"—Ⓕ– js_buffer_free_rt ( ) { … } — function",
							"—Ⓕ– js_buffer_free ( ) { … } — function",
							"—Ⓕ– js_is_iterable ( ) { … } — function",
							"—Ⓕ– js_is_iterator ( ) { … } — function",
							"—Ⓕ– js_is_async_generator ( ) { … } — function",
							"—Ⓕ– js_symbol_static_atom ( ) { … } — function",
							"—Ⓕ– js_symbol_static_value ( ) { … } — function",
							"—Ⓕ– js_symbol_for_value ( ) { … } — function",
							"—Ⓕ– js_symbol_for_atom ( ) { … } — function",
							"—Ⓕ– js_symbol_ctor ( ) { … } — function",
							"—Ⓕ– js_global_get ( ) { … } — function",
							"—Ⓕ– js_global_os ( ) { … } — function",
							"—Ⓕ– js_os_get ( ) { … } — function",
							"—Ⓕ– js_timer_start ( ) { … } — function",
							"—Ⓕ– js_timer_cancel ( ) { … } — function",
							"—Ⓕ– js_timer_free ( ) { … } — function",
							"—Ⓕ– js_timer_callback ( ) { … } — function",
							"—Ⓕ– js_timer_interval ( ) { … } — function",
							"—Ⓕ– js_timer_restart ( ) { … } — function",
							"—Ⓕ– js_resolve_functions_zero ( ) { … } — function",
							"—Ⓕ– js_resolve_functions_is_null ( ) { … } — function",
							"—Ⓕ– js_resolve_functions_call ( ) { … } — function",
							"—Ⓕ– js_tostringlen ( ) { … } — function",
							"—Ⓕ– js_tostring ( ) { … } — function",
							"—Ⓕ– js_invoke ( ) { … } — function",
							"—Ⓕ– js_promise_create ( ) { … } — function",
							"—Ⓕ– js_promise_free ( ) { … } — function",
							"—Ⓕ– js_promise_free_rt ( ) { … } — function",
							"—Ⓕ– js_promise_resolve ( ) { … } — function",
							"—Ⓕ– js_promise_reject ( ) { … } — function",
							"—Ⓕ– js_promise_zero ( ) { … } — function",
							"—Ⓕ– js_promise_pending ( ) { … } — function",
							"—Ⓕ– js_promise_done ( ) { … } — function",
							"—Ⓕ– js_promise_then ( ) { … } — function",
							"—Ⓕ– js_promise_catch ( ) { … } — function",
							"—Ⓕ– js_is_promise ( ) { … } — function",
							"—Ⓕ– js_error_new ( ) { … } — function",
							"—Ⓕ– js_error_print ( ) { … } — function",
							"—Ⓕ– js_toptrsize ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_bool ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_int64 ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_uint32 ( ) { … } — function",
							"—Ⓕ– js_has_propertystr ( ) { … } — function",
							"—Ⓕ– js_module_list ( ) { … } — function",
							"—Ⓕ– js_module_at ( ) { … } — function",
							"—Ⓕ– js_module_find ( ) { … } — function",
							"—Ⓕ– js_module_find_s ( ) { … } — function",
							"—Ⓕ– js_module_export_find ( ) { … } — function",
							"—Ⓕ– js_module_loader ( ) { … } — function",
							"—Ⓕ– js_module_import_meta ( ) { … } — function",
							"—Ⓕ– js_array_length ( ) { … } — function",
							"—Ⓕ– js_array_to_argv ( ) { … } — function",
							"—Ⓕ– js_arraybuffer_length ( ) { … } — function",
							"—Ⓕ– js_offset_length ( ) { … } — function",
							"—Ⓕ– js_argv_to_array ( ) { … } — function",
							"—Ⓕ– js_atom_is_index ( ) { … } — function",
							"—Ⓕ– js_atom_compare_string ( ) { … } — function",
							"—Ⓕ– js_atom_is_length ( ) { … } — function",
							"—Ⓕ– js_atom_is_symbol ( ) { … } — function",
							"—Ⓕ– js_atom_is_string ( ) { … } — function",
							"—Ⓕ– js_input_buffer ( ) { … } — function",
							"—Ⓕ– js_input_chars ( ) { … } — function",
							"—Ⓕ– js_input_args ( ) { … } — function",
							"—Ⓕ– js_buffer_fromargs ( ) { … } — function",
							"—Ⓕ– js_is_arraybuffer ( ) { … } — function",
							"—Ⓕ– js_is_dataview ( ) { … } — function",
							"—Ⓕ– js_is_typedarray ( ) { … } — function",
							"—Ⓕ– js_is_generator ( ) { … } — function",
							"—Ⓕ– js_is_async ( ) { … } — function",
							"—Ⓕ– js_typedarray_constructor ( ) { … } — function",
							"—Ⓕ– js_typedarray_new ( ) { … } — function",
							" Ⓣ  JSCClosureRecord ; — typedef",
							"—Ⓕ– js_cclosure_data ( ) { … } — function",
							"—Ⓕ– js_cclosure_data2 ( ) { … } — function",
							"—Ⓕ– js_cclosure_call ( ) { … } — function",
							"—Ⓕ– js_cclosure_finalizer ( ) { … } — function",
							"—Ⓕ– js_function_cclosure ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAQFQAAICDik4IgIF9HTlVfU09VUkNFIOKApiDigJQgbWFjcm8gb2JqZWN0CuKAlOKSu+KAkyB2ZWN0b3IyYXJyYXkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vYmplY3RfY29uc3RydWN0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vYmplY3RfY2xhc3NuYW1lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfY29uc29sZV9sb2cgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9ib3VuZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2Z1bmN0aW9uX2JpbmQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9iaW5kXzEgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9iaW5kX3RoaXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9iaW5kX3RoaXNfMSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2Z1bmN0aW9uX25hbWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9wcm90b3R5cGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pdGVyYXRvcl9yZXN1bHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pdGVyYXRvcl9uZXh0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfY29weV9wcm9wZXJ0aWVzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnVmZmVyX2ZyZWVfZGVmYXVsdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl9mcm9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnVmZmVyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl9mcm9tYmxvY2sgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19idWZmZXJfZGF0YSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl9hbGxvYyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl90byAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl90bzMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19idWZmZXJfdmFsaWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19idWZmZXJfY2xvbmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19idWZmZXJfZHVtcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl9mcmVlX3J0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnVmZmVyX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pc19pdGVyYWJsZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2lzX2l0ZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaXNfYXN5bmNfZ2VuZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc3ltYm9sX3N0YXRpY19hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc3ltYm9sX3N0YXRpY192YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3N5bWJvbF9mb3JfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zeW1ib2xfZm9yX2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zeW1ib2xfY3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2dsb2JhbF9nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19nbG9iYWxfb3MgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vc19nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190aW1lcl9zdGFydCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RpbWVyX2NhbmNlbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RpbWVyX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190aW1lcl9jYWxsYmFjayAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RpbWVyX2ludGVydmFsICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdGltZXJfcmVzdGFydCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Jlc29sdmVfZnVuY3Rpb25zX3plcm8gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19yZXNvbHZlX2Z1bmN0aW9uc19pc19udWxsICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcmVzb2x2ZV9mdW5jdGlvbnNfY2FsbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Rvc3RyaW5nbGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnZva2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcm9taXNlX2NyZWF0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Byb21pc2VfZnJlZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Byb21pc2VfZnJlZV9ydCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Byb21pc2VfcmVzb2x2ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Byb21pc2VfcmVqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV96ZXJvICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV9wZW5kaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV9kb25lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV90aGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV9jYXRjaCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2lzX3Byb21pc2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19lcnJvcl9uZXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19lcnJvcl9wcmludCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RvcHRyc2l6ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2dldF9wcm9wZXJ0eXN0cl9ib29sICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfZ2V0X3Byb3BlcnR5c3RyX2ludDY0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfZ2V0X3Byb3BlcnR5c3RyX3VpbnQzMiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2hhc19wcm9wZXJ0eXN0ciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21vZHVsZV9saXN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbW9kdWxlX2F0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbW9kdWxlX2ZpbmQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19tb2R1bGVfZmluZF9zICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbW9kdWxlX2V4cG9ydF9maW5kICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbW9kdWxlX2xvYWRlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21vZHVsZV9pbXBvcnRfbWV0YSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2FycmF5X2xlbmd0aCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2FycmF5X3RvX2FyZ3YgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hcnJheWJ1ZmZlcl9sZW5ndGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vZmZzZXRfbGVuZ3RoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJndl90b19hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2F0b21faXNfaW5kZXggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hdG9tX2NvbXBhcmVfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXRvbV9pc19sZW5ndGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hdG9tX2lzX3N5bWJvbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2F0b21faXNfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5wdXRfYnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5wdXRfY2hhcnMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnB1dF9hcmdzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnVmZmVyX2Zyb21hcmdzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaXNfYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pc19kYXRhdmlldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2lzX3R5cGVkYXJyYXkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pc19nZW5lcmF0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pc18oICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3R5cGVkYXJyYXlfY29uc3RydWN0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190eXBlZGFycmF5X25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4kgIEpTQ0Nsb3N1cmVSZWNvcmQgOyDigJQgdHlwZWRlZgrigJTikrvigJMganNfY2Nsb3N1cmVfZGF0YSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2NjbG9zdXJlX2RhdGEyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfY2Nsb3N1cmVfY2FsbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2NjbG9zdXJlX2ZpbmFsaXplciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2Z1bmN0aW9uX2NjbG9zdXJlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgAAAAAAAAAAFBEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					191,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/jsutils.c",
						"symkeys":
						[
							[
								8,
								19
							],
							[
								169,
								181
							],
							[
								371,
								392
							],
							[
								568,
								587
							],
							[
								1076,
								1090
							],
							[
								1347,
								1364
							],
							[
								1829,
								1845
							],
							[
								2180,
								2198
							],
							[
								2312,
								2333
							],
							[
								2472,
								2495
							],
							[
								3107,
								3123
							],
							[
								3882,
								3903
							],
							[
								4058,
								4076
							],
							[
								4315,
								4331
							],
							[
								5638,
								5656
							],
							[
								6013,
								6035
							],
							[
								6358,
								6372
							],
							[
								6497,
								6510
							],
							[
								6920,
								6939
							],
							[
								7076,
								7090
							],
							[
								7257,
								7272
							],
							[
								7464,
								7476
							],
							[
								7594,
								7607
							],
							[
								7843,
								7858
							],
							[
								7930,
								7945
							],
							[
								8102,
								8116
							],
							[
								8261,
								8278
							],
							[
								8437,
								8451
							],
							[
								8537,
								8551
							],
							[
								8933,
								8947
							],
							[
								9146,
								9167
							],
							[
								9384,
								9405
							],
							[
								9612,
								9634
							],
							[
								9846,
								9865
							],
							[
								10235,
								10253
							],
							[
								10456,
								10470
							],
							[
								10539,
								10552
							],
							[
								10764,
								10776
							],
							[
								10841,
								10850
							],
							[
								11033,
								11047
							],
							[
								11329,
								11344
							],
							[
								11581,
								11594
							],
							[
								11876,
								11893
							],
							[
								12439,
								12456
							],
							[
								12918,
								12934
							],
							[
								13162,
								13187
							],
							[
								13292,
								13320
							],
							[
								13443,
								13468
							],
							[
								13738,
								13752
							],
							[
								14035,
								14046
							],
							[
								14136,
								14145
							],
							[
								14390,
								14407
							],
							[
								14544,
								14559
							],
							[
								14720,
								14738
							],
							[
								14903,
								14921
							],
							[
								15115,
								15132
							],
							[
								15322,
								15337
							],
							[
								15409,
								15427
							],
							[
								15516,
								15531
							],
							[
								15622,
								15637
							],
							[
								15766,
								15782
							],
							[
								15909,
								15922
							],
							[
								16126,
								16138
							],
							[
								16418,
								16432
							],
							[
								17485,
								17497
							],
							[
								17732,
								17755
							],
							[
								18006,
								18030
							],
							[
								18250,
								18275
							],
							[
								18493,
								18511
							],
							[
								18709,
								18723
							],
							[
								19077,
								19089
							],
							[
								19339,
								19353
							],
							[
								19625,
								19641
							],
							[
								19838,
								19859
							],
							[
								20546,
								20562
							],
							[
								20628,
								20649
							],
							[
								20845,
								20860
							],
							[
								21199,
								21215
							],
							[
								21579,
								21600
							],
							[
								21735,
								21751
							],
							[
								22313,
								22329
							],
							[
								22552,
								22568
							],
							[
								23168,
								23190
							],
							[
								23374,
								23391
							],
							[
								23485,
								23502
							],
							[
								23678,
								23695
							],
							[
								23875,
								23890
							],
							[
								25135,
								25149
							],
							[
								25550,
								25563
							],
							[
								25775,
								25793
							],
							[
								26067,
								26084
							],
							[
								26250,
								26264
							],
							[
								26698,
								26714
							],
							[
								26853,
								26868
							],
							[
								27246,
								27257
							],
							[
								27578,
								27603
							],
							[
								27863,
								27880
							],
							[
								28465,
								28481
							],
							[
								28569,
								28585
							],
							[
								28695,
								28712
							],
							[
								28827,
								28843
							],
							[
								29482,
								29503
							],
							[
								29855,
								29875
							]
						],
						"symlist":
						[
							" Ⓜ  _GNU_SOURCE … — macro object",
							"—Ⓕ– vector2array ( ) { … } — function",
							"—Ⓕ– js_object_constructor ( ) { … } — function",
							"—Ⓕ– js_object_classname ( ) { … } — function",
							"—Ⓕ– js_console_log ( ) { … } — function",
							"—Ⓕ– js_function_bound ( ) { … } — function",
							"—Ⓕ– js_function_bind ( ) { … } — function",
							"—Ⓕ– js_function_bind_1 ( ) { … } — function",
							"—Ⓕ– js_function_bind_this ( ) { … } — function",
							"—Ⓕ– js_function_bind_this_1 ( ) { … } — function",
							"—Ⓕ– js_function_name ( ) { … } — function",
							"—Ⓕ– js_function_prototype ( ) { … } — function",
							"—Ⓕ– js_iterator_result ( ) { … } — function",
							"—Ⓕ– js_iterator_next ( ) { … } — function",
							"—Ⓕ– js_copy_properties ( ) { … } — function",
							"—Ⓕ– js_buffer_free_default ( ) { … } — function",
							"—Ⓕ– js_buffer_from ( ) { … } — function",
							"—Ⓕ– js_buffer_new ( ) { … } — function",
							"—Ⓕ– js_buffer_fromblock ( ) { … } — function",
							"—Ⓕ– js_buffer_data ( ) { … } — function",
							"—Ⓕ– js_buffer_alloc ( ) { … } — function",
							"—Ⓕ– js_buffer_to ( ) { … } — function",
							"—Ⓕ– js_buffer_to3 ( ) { … } — function",
							"—Ⓕ– js_buffer_valid ( ) { … } — function",
							"—Ⓕ– js_buffer_clone ( ) { … } — function",
							"—Ⓕ– js_buffer_dump ( ) { … } — function",
							"—Ⓕ– js_buffer_free_rt ( ) { … } — function",
							"—Ⓕ– js_buffer_free ( ) { … } — function",
							"—Ⓕ– js_is_iterable ( ) { … } — function",
							"—Ⓕ– js_is_iterator ( ) { … } — function",
							"—Ⓕ– js_is_async_generator ( ) { … } — function",
							"—Ⓕ– js_symbol_static_atom ( ) { … } — function",
							"—Ⓕ– js_symbol_static_value ( ) { … } — function",
							"—Ⓕ– js_symbol_for_value ( ) { … } — function",
							"—Ⓕ– js_symbol_for_atom ( ) { … } — function",
							"—Ⓕ– js_symbol_ctor ( ) { … } — function",
							"—Ⓕ– js_global_get ( ) { … } — function",
							"—Ⓕ– js_global_os ( ) { … } — function",
							"—Ⓕ– js_os_get ( ) { … } — function",
							"—Ⓕ– js_timer_start ( ) { … } — function",
							"—Ⓕ– js_timer_cancel ( ) { … } — function",
							"—Ⓕ– js_timer_free ( ) { … } — function",
							"—Ⓕ– js_timer_callback ( ) { … } — function",
							"—Ⓕ– js_timer_interval ( ) { … } — function",
							"—Ⓕ– js_timer_restart ( ) { … } — function",
							"—Ⓕ– js_resolve_functions_zero ( ) { … } — function",
							"—Ⓕ– js_resolve_functions_is_null ( ) { … } — function",
							"—Ⓕ– js_resolve_functions_call ( ) { … } — function",
							"—Ⓕ– js_tostringlen ( ) { … } — function",
							"—Ⓕ– js_tostring ( ) { … } — function",
							"—Ⓕ– js_invoke ( ) { … } — function",
							"—Ⓕ– js_promise_create ( ) { … } — function",
							"—Ⓕ– js_promise_free ( ) { … } — function",
							"—Ⓕ– js_promise_free_rt ( ) { … } — function",
							"—Ⓕ– js_promise_resolve ( ) { … } — function",
							"—Ⓕ– js_promise_reject ( ) { … } — function",
							"—Ⓕ– js_promise_zero ( ) { … } — function",
							"—Ⓕ– js_promise_pending ( ) { … } — function",
							"—Ⓕ– js_promise_done ( ) { … } — function",
							"—Ⓕ– js_promise_then ( ) { … } — function",
							"—Ⓕ– js_promise_catch ( ) { … } — function",
							"—Ⓕ– js_is_promise ( ) { … } — function",
							"—Ⓕ– js_error_new ( ) { … } — function",
							"—Ⓕ– js_error_print ( ) { … } — function",
							"—Ⓕ– js_toptrsize ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_bool ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_int64 ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_uint32 ( ) { … } — function",
							"—Ⓕ– js_has_propertystr ( ) { … } — function",
							"—Ⓕ– js_module_list ( ) { … } — function",
							"—Ⓕ– js_module_at ( ) { … } — function",
							"—Ⓕ– js_module_find ( ) { … } — function",
							"—Ⓕ– js_module_find_s ( ) { … } — function",
							"—Ⓕ– js_module_export_find ( ) { … } — function",
							"—Ⓕ– js_module_loader ( ) { … } — function",
							"—Ⓕ– js_module_import_meta ( ) { … } — function",
							"—Ⓕ– js_array_length ( ) { … } — function",
							"—Ⓕ– js_array_to_argv ( ) { … } — function",
							"—Ⓕ– js_arraybuffer_length ( ) { … } — function",
							"—Ⓕ– js_offset_length ( ) { … } — function",
							"—Ⓕ– js_argv_to_array ( ) { … } — function",
							"—Ⓕ– js_atom_is_index ( ) { … } — function",
							"—Ⓕ– js_atom_compare_string ( ) { … } — function",
							"—Ⓕ– js_atom_is_length ( ) { … } — function",
							"—Ⓕ– js_atom_is_symbol ( ) { … } — function",
							"—Ⓕ– js_atom_is_string ( ) { … } — function",
							"—Ⓕ– js_input_buffer ( ) { … } — function",
							"—Ⓕ– js_input_chars ( ) { … } — function",
							"—Ⓕ– js_input_args ( ) { … } — function",
							"—Ⓕ– js_buffer_fromargs ( ) { … } — function",
							"—Ⓕ– js_is_arraybuffer ( ) { … } — function",
							"—Ⓕ– js_is_dataview ( ) { … } — function",
							"—Ⓕ– js_is_typedarray ( ) { … } — function",
							"—Ⓕ– js_is_generator ( ) { … } — function",
							"—Ⓕ– js_is_async ( ) { … } — function",
							"—Ⓕ– js_typedarray_constructor ( ) { … } — function",
							"—Ⓕ– js_typedarray_new ( ) { … } — function",
							" Ⓣ  JSCClosureRecord ; — typedef",
							"—Ⓕ– js_cclosure_data ( ) { … } — function",
							"—Ⓕ– js_cclosure_data2 ( ) { … } — function",
							"—Ⓕ– js_cclosure_call ( ) { … } — function",
							"—Ⓕ– js_cclosure_finalizer ( ) { … } — function",
							"—Ⓕ– js_function_cclosure ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAQFQAAICDik4IgIF9HTlVfU09VUkNFIOKApiDigJQgbWFjcm8gb2JqZWN0CuKAlOKSu+KAkyB2ZWN0b3IyYXJyYXkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vYmplY3RfY29uc3RydWN0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vYmplY3RfY2xhc3NuYW1lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfY29uc29sZV9sb2cgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9ib3VuZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2Z1bmN0aW9uX2JpbmQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9iaW5kXzEgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9iaW5kX3RoaXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9iaW5kX3RoaXNfMSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2Z1bmN0aW9uX25hbWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9wcm90b3R5cGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pdGVyYXRvcl9yZXN1bHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pdGVyYXRvcl9uZXh0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfY29weV9wcm9wZXJ0aWVzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnVmZmVyX2ZyZWVfZGVmYXVsdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl9mcm9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnVmZmVyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl9mcm9tYmxvY2sgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19idWZmZXJfZGF0YSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl9hbGxvYyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl90byAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl90bzMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19idWZmZXJfdmFsaWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19idWZmZXJfY2xvbmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19idWZmZXJfZHVtcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl9mcmVlX3J0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnVmZmVyX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pc19pdGVyYWJsZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2lzX2l0ZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaXNfYXN5bmNfZ2VuZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc3ltYm9sX3N0YXRpY19hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc3ltYm9sX3N0YXRpY192YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3N5bWJvbF9mb3JfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zeW1ib2xfZm9yX2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zeW1ib2xfY3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2dsb2JhbF9nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19nbG9iYWxfb3MgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vc19nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190aW1lcl9zdGFydCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RpbWVyX2NhbmNlbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RpbWVyX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190aW1lcl9jYWxsYmFjayAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RpbWVyX2ludGVydmFsICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdGltZXJfcmVzdGFydCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Jlc29sdmVfZnVuY3Rpb25zX3plcm8gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19yZXNvbHZlX2Z1bmN0aW9uc19pc19udWxsICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcmVzb2x2ZV9mdW5jdGlvbnNfY2FsbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Rvc3RyaW5nbGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnZva2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcm9taXNlX2NyZWF0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Byb21pc2VfZnJlZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Byb21pc2VfZnJlZV9ydCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Byb21pc2VfcmVzb2x2ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Byb21pc2VfcmVqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV96ZXJvICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV9wZW5kaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV9kb25lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV90aGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV9jYXRjaCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2lzX3Byb21pc2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19lcnJvcl9uZXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19lcnJvcl9wcmludCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RvcHRyc2l6ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2dldF9wcm9wZXJ0eXN0cl9ib29sICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfZ2V0X3Byb3BlcnR5c3RyX2ludDY0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfZ2V0X3Byb3BlcnR5c3RyX3VpbnQzMiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2hhc19wcm9wZXJ0eXN0ciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21vZHVsZV9saXN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbW9kdWxlX2F0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbW9kdWxlX2ZpbmQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19tb2R1bGVfZmluZF9zICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbW9kdWxlX2V4cG9ydF9maW5kICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbW9kdWxlX2xvYWRlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21vZHVsZV9pbXBvcnRfbWV0YSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2FycmF5X2xlbmd0aCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2FycmF5X3RvX2FyZ3YgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hcnJheWJ1ZmZlcl9sZW5ndGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vZmZzZXRfbGVuZ3RoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJndl90b19hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2F0b21faXNfaW5kZXggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hdG9tX2NvbXBhcmVfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXRvbV9pc19sZW5ndGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hdG9tX2lzX3N5bWJvbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2F0b21faXNfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5wdXRfYnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5wdXRfY2hhcnMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnB1dF9hcmdzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnVmZmVyX2Zyb21hcmdzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaXNfYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pc19kYXRhdmlldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2lzX3R5cGVkYXJyYXkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pc19nZW5lcmF0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pc18oICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3R5cGVkYXJyYXlfY29uc3RydWN0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190eXBlZGFycmF5X25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4kgIEpTQ0Nsb3N1cmVSZWNvcmQgOyDigJQgdHlwZWRlZgrigJTikrvigJMganNfY2Nsb3N1cmVfZGF0YSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2NjbG9zdXJlX2RhdGEyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfY2Nsb3N1cmVfY2FsbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2NjbG9zdXJlX2ZpbmFsaXplciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2Z1bmN0aW9uX2NjbG9zdXJlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgAAAAAAAAAAFBEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					192,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/jsutils.c",
						"symkeys":
						[
							[
								8,
								19
							],
							[
								169,
								181
							],
							[
								371,
								392
							],
							[
								568,
								587
							],
							[
								1076,
								1090
							],
							[
								1347,
								1364
							],
							[
								1829,
								1845
							],
							[
								2180,
								2198
							],
							[
								2312,
								2333
							],
							[
								2472,
								2495
							],
							[
								3107,
								3123
							],
							[
								3882,
								3903
							],
							[
								4058,
								4076
							],
							[
								4315,
								4331
							],
							[
								5638,
								5656
							],
							[
								6013,
								6035
							],
							[
								6358,
								6372
							],
							[
								6497,
								6510
							],
							[
								6920,
								6939
							],
							[
								7076,
								7090
							],
							[
								7257,
								7272
							],
							[
								7464,
								7476
							],
							[
								7594,
								7607
							],
							[
								7843,
								7858
							],
							[
								7930,
								7945
							],
							[
								8102,
								8116
							],
							[
								8261,
								8278
							],
							[
								8437,
								8451
							],
							[
								8537,
								8551
							],
							[
								8933,
								8947
							],
							[
								9146,
								9167
							],
							[
								9384,
								9405
							],
							[
								9612,
								9634
							],
							[
								9846,
								9865
							],
							[
								10235,
								10253
							],
							[
								10456,
								10470
							],
							[
								10539,
								10552
							],
							[
								10764,
								10776
							],
							[
								10841,
								10850
							],
							[
								11033,
								11047
							],
							[
								11329,
								11344
							],
							[
								11581,
								11594
							],
							[
								11876,
								11893
							],
							[
								12439,
								12456
							],
							[
								12918,
								12934
							],
							[
								13162,
								13187
							],
							[
								13292,
								13320
							],
							[
								13443,
								13468
							],
							[
								13738,
								13752
							],
							[
								14035,
								14046
							],
							[
								14136,
								14145
							],
							[
								14390,
								14407
							],
							[
								14544,
								14559
							],
							[
								14720,
								14738
							],
							[
								14903,
								14921
							],
							[
								15115,
								15132
							],
							[
								15322,
								15337
							],
							[
								15409,
								15427
							],
							[
								15516,
								15531
							],
							[
								15622,
								15637
							],
							[
								15766,
								15782
							],
							[
								15909,
								15922
							],
							[
								16126,
								16138
							],
							[
								16418,
								16432
							],
							[
								17485,
								17497
							],
							[
								17732,
								17755
							],
							[
								18006,
								18030
							],
							[
								18250,
								18275
							],
							[
								18493,
								18511
							],
							[
								18709,
								18723
							],
							[
								19077,
								19089
							],
							[
								19339,
								19353
							],
							[
								19625,
								19641
							],
							[
								19838,
								19859
							],
							[
								20546,
								20562
							],
							[
								20628,
								20649
							],
							[
								20845,
								20860
							],
							[
								21199,
								21215
							],
							[
								21579,
								21600
							],
							[
								21735,
								21751
							],
							[
								22313,
								22329
							],
							[
								22552,
								22568
							],
							[
								23168,
								23190
							],
							[
								23374,
								23391
							],
							[
								23485,
								23502
							],
							[
								23678,
								23695
							],
							[
								23875,
								23890
							],
							[
								25135,
								25149
							],
							[
								25550,
								25563
							],
							[
								25775,
								25793
							],
							[
								26067,
								26084
							],
							[
								26250,
								26264
							],
							[
								26698,
								26714
							],
							[
								26853,
								26868
							],
							[
								27246,
								27257
							],
							[
								27578,
								27603
							],
							[
								27863,
								27880
							],
							[
								28465,
								28481
							],
							[
								28569,
								28585
							],
							[
								28695,
								28712
							],
							[
								28827,
								28843
							],
							[
								29482,
								29503
							],
							[
								29855,
								29875
							]
						],
						"symlist":
						[
							" Ⓜ  _GNU_SOURCE … — macro object",
							"—Ⓕ– vector2array ( ) { … } — function",
							"—Ⓕ– js_object_constructor ( ) { … } — function",
							"—Ⓕ– js_object_classname ( ) { … } — function",
							"—Ⓕ– js_console_log ( ) { … } — function",
							"—Ⓕ– js_function_bound ( ) { … } — function",
							"—Ⓕ– js_function_bind ( ) { … } — function",
							"—Ⓕ– js_function_bind_1 ( ) { … } — function",
							"—Ⓕ– js_function_bind_this ( ) { … } — function",
							"—Ⓕ– js_function_bind_this_1 ( ) { … } — function",
							"—Ⓕ– js_function_name ( ) { … } — function",
							"—Ⓕ– js_function_prototype ( ) { … } — function",
							"—Ⓕ– js_iterator_result ( ) { … } — function",
							"—Ⓕ– js_iterator_next ( ) { … } — function",
							"—Ⓕ– js_copy_properties ( ) { … } — function",
							"—Ⓕ– js_buffer_free_default ( ) { … } — function",
							"—Ⓕ– js_buffer_from ( ) { … } — function",
							"—Ⓕ– js_buffer_new ( ) { … } — function",
							"—Ⓕ– js_buffer_fromblock ( ) { … } — function",
							"—Ⓕ– js_buffer_data ( ) { … } — function",
							"—Ⓕ– js_buffer_alloc ( ) { … } — function",
							"—Ⓕ– js_buffer_to ( ) { … } — function",
							"—Ⓕ– js_buffer_to3 ( ) { … } — function",
							"—Ⓕ– js_buffer_valid ( ) { … } — function",
							"—Ⓕ– js_buffer_clone ( ) { … } — function",
							"—Ⓕ– js_buffer_dump ( ) { … } — function",
							"—Ⓕ– js_buffer_free_rt ( ) { … } — function",
							"—Ⓕ– js_buffer_free ( ) { … } — function",
							"—Ⓕ– js_is_iterable ( ) { … } — function",
							"—Ⓕ– js_is_iterator ( ) { … } — function",
							"—Ⓕ– js_is_async_generator ( ) { … } — function",
							"—Ⓕ– js_symbol_static_atom ( ) { … } — function",
							"—Ⓕ– js_symbol_static_value ( ) { … } — function",
							"—Ⓕ– js_symbol_for_value ( ) { … } — function",
							"—Ⓕ– js_symbol_for_atom ( ) { … } — function",
							"—Ⓕ– js_symbol_ctor ( ) { … } — function",
							"—Ⓕ– js_global_get ( ) { … } — function",
							"—Ⓕ– js_global_os ( ) { … } — function",
							"—Ⓕ– js_os_get ( ) { … } — function",
							"—Ⓕ– js_timer_start ( ) { … } — function",
							"—Ⓕ– js_timer_cancel ( ) { … } — function",
							"—Ⓕ– js_timer_free ( ) { … } — function",
							"—Ⓕ– js_timer_callback ( ) { … } — function",
							"—Ⓕ– js_timer_interval ( ) { … } — function",
							"—Ⓕ– js_timer_restart ( ) { … } — function",
							"—Ⓕ– js_resolve_functions_zero ( ) { … } — function",
							"—Ⓕ– js_resolve_functions_is_null ( ) { … } — function",
							"—Ⓕ– js_resolve_functions_call ( ) { … } — function",
							"—Ⓕ– js_tostringlen ( ) { … } — function",
							"—Ⓕ– js_tostring ( ) { … } — function",
							"—Ⓕ– js_invoke ( ) { … } — function",
							"—Ⓕ– js_promise_create ( ) { … } — function",
							"—Ⓕ– js_promise_free ( ) { … } — function",
							"—Ⓕ– js_promise_free_rt ( ) { … } — function",
							"—Ⓕ– js_promise_resolve ( ) { … } — function",
							"—Ⓕ– js_promise_reject ( ) { … } — function",
							"—Ⓕ– js_promise_zero ( ) { … } — function",
							"—Ⓕ– js_promise_pending ( ) { … } — function",
							"—Ⓕ– js_promise_done ( ) { … } — function",
							"—Ⓕ– js_promise_then ( ) { … } — function",
							"—Ⓕ– js_promise_catch ( ) { … } — function",
							"—Ⓕ– js_is_promise ( ) { … } — function",
							"—Ⓕ– js_error_new ( ) { … } — function",
							"—Ⓕ– js_error_print ( ) { … } — function",
							"—Ⓕ– js_toptrsize ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_bool ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_int64 ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_uint32 ( ) { … } — function",
							"—Ⓕ– js_has_propertystr ( ) { … } — function",
							"—Ⓕ– js_module_list ( ) { … } — function",
							"—Ⓕ– js_module_at ( ) { … } — function",
							"—Ⓕ– js_module_find ( ) { … } — function",
							"—Ⓕ– js_module_find_s ( ) { … } — function",
							"—Ⓕ– js_module_export_find ( ) { … } — function",
							"—Ⓕ– js_module_loader ( ) { … } — function",
							"—Ⓕ– js_module_import_meta ( ) { … } — function",
							"—Ⓕ– js_array_length ( ) { … } — function",
							"—Ⓕ– js_array_to_argv ( ) { … } — function",
							"—Ⓕ– js_arraybuffer_length ( ) { … } — function",
							"—Ⓕ– js_offset_length ( ) { … } — function",
							"—Ⓕ– js_argv_to_array ( ) { … } — function",
							"—Ⓕ– js_atom_is_index ( ) { … } — function",
							"—Ⓕ– js_atom_compare_string ( ) { … } — function",
							"—Ⓕ– js_atom_is_length ( ) { … } — function",
							"—Ⓕ– js_atom_is_symbol ( ) { … } — function",
							"—Ⓕ– js_atom_is_string ( ) { … } — function",
							"—Ⓕ– js_input_buffer ( ) { … } — function",
							"—Ⓕ– js_input_chars ( ) { … } — function",
							"—Ⓕ– js_input_args ( ) { … } — function",
							"—Ⓕ– js_buffer_fromargs ( ) { … } — function",
							"—Ⓕ– js_is_arraybuffer ( ) { … } — function",
							"—Ⓕ– js_is_dataview ( ) { … } — function",
							"—Ⓕ– js_is_typedarray ( ) { … } — function",
							"—Ⓕ– js_is_generator ( ) { … } — function",
							"—Ⓕ– js_is_async ( ) { … } — function",
							"—Ⓕ– js_typedarray_constructor ( ) { … } — function",
							"—Ⓕ– js_typedarray_new ( ) { … } — function",
							" Ⓣ  JSCClosureRecord ; — typedef",
							"—Ⓕ– js_cclosure_data ( ) { … } — function",
							"—Ⓕ– js_cclosure_data2 ( ) { … } — function",
							"—Ⓕ– js_cclosure_call ( ) { … } — function",
							"—Ⓕ– js_cclosure_finalizer ( ) { … } — function",
							"—Ⓕ– js_function_cclosure ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAQFQAAICDik4IgIF9HTlVfU09VUkNFIOKApiDigJQgbWFjcm8gb2JqZWN0CuKAlOKSu+KAkyB2ZWN0b3IyYXJyYXkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vYmplY3RfY29uc3RydWN0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vYmplY3RfY2xhc3NuYW1lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfY29uc29sZV9sb2cgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9ib3VuZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2Z1bmN0aW9uX2JpbmQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9iaW5kXzEgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9iaW5kX3RoaXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9iaW5kX3RoaXNfMSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2Z1bmN0aW9uX25hbWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9wcm90b3R5cGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pdGVyYXRvcl9yZXN1bHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pdGVyYXRvcl9uZXh0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfY29weV9wcm9wZXJ0aWVzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnVmZmVyX2ZyZWVfZGVmYXVsdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl9mcm9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnVmZmVyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl9mcm9tYmxvY2sgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19idWZmZXJfZGF0YSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl9hbGxvYyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl90byAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl90bzMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19idWZmZXJfdmFsaWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19idWZmZXJfY2xvbmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19idWZmZXJfZHVtcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl9mcmVlX3J0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnVmZmVyX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pc19pdGVyYWJsZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2lzX2l0ZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaXNfYXN5bmNfZ2VuZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc3ltYm9sX3N0YXRpY19hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc3ltYm9sX3N0YXRpY192YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3N5bWJvbF9mb3JfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zeW1ib2xfZm9yX2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zeW1ib2xfY3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2dsb2JhbF9nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19nbG9iYWxfb3MgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vc19nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190aW1lcl9zdGFydCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RpbWVyX2NhbmNlbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RpbWVyX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190aW1lcl9jYWxsYmFjayAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RpbWVyX2ludGVydmFsICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdGltZXJfcmVzdGFydCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Jlc29sdmVfZnVuY3Rpb25zX3plcm8gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19yZXNvbHZlX2Z1bmN0aW9uc19pc19udWxsICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcmVzb2x2ZV9mdW5jdGlvbnNfY2FsbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Rvc3RyaW5nbGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnZva2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcm9taXNlX2NyZWF0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Byb21pc2VfZnJlZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Byb21pc2VfZnJlZV9ydCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Byb21pc2VfcmVzb2x2ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Byb21pc2VfcmVqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV96ZXJvICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV9wZW5kaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV9kb25lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV90aGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV9jYXRjaCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2lzX3Byb21pc2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19lcnJvcl9uZXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19lcnJvcl9wcmludCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RvcHRyc2l6ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2dldF9wcm9wZXJ0eXN0cl9ib29sICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfZ2V0X3Byb3BlcnR5c3RyX2ludDY0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfZ2V0X3Byb3BlcnR5c3RyX3VpbnQzMiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2hhc19wcm9wZXJ0eXN0ciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21vZHVsZV9saXN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbW9kdWxlX2F0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbW9kdWxlX2ZpbmQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19tb2R1bGVfZmluZF9zICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbW9kdWxlX2V4cG9ydF9maW5kICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbW9kdWxlX2xvYWRlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21vZHVsZV9pbXBvcnRfbWV0YSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2FycmF5X2xlbmd0aCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2FycmF5X3RvX2FyZ3YgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hcnJheWJ1ZmZlcl9sZW5ndGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vZmZzZXRfbGVuZ3RoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJndl90b19hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2F0b21faXNfaW5kZXggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hdG9tX2NvbXBhcmVfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXRvbV9pc19sZW5ndGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hdG9tX2lzX3N5bWJvbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2F0b21faXNfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5wdXRfYnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5wdXRfY2hhcnMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnB1dF9hcmdzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnVmZmVyX2Zyb21hcmdzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaXNfYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pc19kYXRhdmlldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2lzX3R5cGVkYXJyYXkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pc19nZW5lcmF0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pc18oICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3R5cGVkYXJyYXlfY29uc3RydWN0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190eXBlZGFycmF5X25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4kgIEpTQ0Nsb3N1cmVSZWNvcmQgOyDigJQgdHlwZWRlZgrigJTikrvigJMganNfY2Nsb3N1cmVfZGF0YSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2NjbG9zdXJlX2RhdGEyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfY2Nsb3N1cmVfY2FsbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2NjbG9zdXJlX2ZpbmFsaXplciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2Z1bmN0aW9uX2NjbG9zdXJlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgAAAAAAAAAAFBEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					193,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/jsutils.c",
						"symkeys":
						[
							[
								8,
								19
							],
							[
								169,
								181
							],
							[
								371,
								392
							],
							[
								568,
								587
							],
							[
								1076,
								1090
							],
							[
								1347,
								1364
							],
							[
								1829,
								1845
							],
							[
								2180,
								2198
							],
							[
								2312,
								2333
							],
							[
								2472,
								2495
							],
							[
								3107,
								3123
							],
							[
								3882,
								3903
							],
							[
								4058,
								4076
							],
							[
								4315,
								4331
							],
							[
								5638,
								5656
							],
							[
								6013,
								6035
							],
							[
								6358,
								6372
							],
							[
								6497,
								6510
							],
							[
								6920,
								6939
							],
							[
								7076,
								7090
							],
							[
								7257,
								7272
							],
							[
								7464,
								7476
							],
							[
								7594,
								7607
							],
							[
								7843,
								7858
							],
							[
								7930,
								7945
							],
							[
								8102,
								8116
							],
							[
								8261,
								8278
							],
							[
								8437,
								8451
							],
							[
								8537,
								8551
							],
							[
								8933,
								8947
							],
							[
								9146,
								9167
							],
							[
								9384,
								9405
							],
							[
								9612,
								9634
							],
							[
								9846,
								9865
							],
							[
								10235,
								10253
							],
							[
								10456,
								10470
							],
							[
								10539,
								10552
							],
							[
								10764,
								10776
							],
							[
								10841,
								10850
							],
							[
								11033,
								11047
							],
							[
								11329,
								11344
							],
							[
								11581,
								11594
							],
							[
								11876,
								11893
							],
							[
								12439,
								12456
							],
							[
								12918,
								12934
							],
							[
								13162,
								13187
							],
							[
								13292,
								13320
							],
							[
								13443,
								13468
							],
							[
								13738,
								13752
							],
							[
								14035,
								14046
							],
							[
								14136,
								14145
							],
							[
								14390,
								14407
							],
							[
								14544,
								14559
							],
							[
								14720,
								14738
							],
							[
								14903,
								14921
							],
							[
								15115,
								15132
							],
							[
								15322,
								15337
							],
							[
								15409,
								15427
							],
							[
								15516,
								15531
							],
							[
								15622,
								15637
							],
							[
								15766,
								15782
							],
							[
								15909,
								15922
							],
							[
								16126,
								16138
							],
							[
								16418,
								16432
							],
							[
								17485,
								17497
							],
							[
								17732,
								17755
							],
							[
								18006,
								18030
							],
							[
								18250,
								18275
							],
							[
								18493,
								18511
							],
							[
								18709,
								18723
							],
							[
								19077,
								19089
							],
							[
								19339,
								19353
							],
							[
								19625,
								19641
							],
							[
								19838,
								19859
							],
							[
								20546,
								20562
							],
							[
								20628,
								20649
							],
							[
								20845,
								20860
							],
							[
								21199,
								21215
							],
							[
								21579,
								21600
							],
							[
								21735,
								21751
							],
							[
								22313,
								22329
							],
							[
								22552,
								22568
							],
							[
								23168,
								23190
							],
							[
								23374,
								23391
							],
							[
								23485,
								23502
							],
							[
								23678,
								23695
							],
							[
								23875,
								23890
							],
							[
								25135,
								25149
							],
							[
								25550,
								25563
							],
							[
								25775,
								25793
							],
							[
								26067,
								26084
							],
							[
								26250,
								26264
							],
							[
								26698,
								26714
							],
							[
								26853,
								26868
							],
							[
								27246,
								27257
							],
							[
								27578,
								27603
							],
							[
								27863,
								27880
							],
							[
								28465,
								28481
							],
							[
								28569,
								28585
							],
							[
								28695,
								28712
							],
							[
								28827,
								28843
							],
							[
								29482,
								29503
							],
							[
								29855,
								29875
							]
						],
						"symlist":
						[
							" Ⓜ  _GNU_SOURCE … — macro object",
							"—Ⓕ– vector2array ( ) { … } — function",
							"—Ⓕ– js_object_constructor ( ) { … } — function",
							"—Ⓕ– js_object_classname ( ) { … } — function",
							"—Ⓕ– js_console_log ( ) { … } — function",
							"—Ⓕ– js_function_bound ( ) { … } — function",
							"—Ⓕ– js_function_bind ( ) { … } — function",
							"—Ⓕ– js_function_bind_1 ( ) { … } — function",
							"—Ⓕ– js_function_bind_this ( ) { … } — function",
							"—Ⓕ– js_function_bind_this_1 ( ) { … } — function",
							"—Ⓕ– js_function_name ( ) { … } — function",
							"—Ⓕ– js_function_prototype ( ) { … } — function",
							"—Ⓕ– js_iterator_result ( ) { … } — function",
							"—Ⓕ– js_iterator_next ( ) { … } — function",
							"—Ⓕ– js_copy_properties ( ) { … } — function",
							"—Ⓕ– js_buffer_free_default ( ) { … } — function",
							"—Ⓕ– js_buffer_from ( ) { … } — function",
							"—Ⓕ– js_buffer_new ( ) { … } — function",
							"—Ⓕ– js_buffer_fromblock ( ) { … } — function",
							"—Ⓕ– js_buffer_data ( ) { … } — function",
							"—Ⓕ– js_buffer_alloc ( ) { … } — function",
							"—Ⓕ– js_buffer_to ( ) { … } — function",
							"—Ⓕ– js_buffer_to3 ( ) { … } — function",
							"—Ⓕ– js_buffer_valid ( ) { … } — function",
							"—Ⓕ– js_buffer_clone ( ) { … } — function",
							"—Ⓕ– js_buffer_dump ( ) { … } — function",
							"—Ⓕ– js_buffer_free_rt ( ) { … } — function",
							"—Ⓕ– js_buffer_free ( ) { … } — function",
							"—Ⓕ– js_is_iterable ( ) { … } — function",
							"—Ⓕ– js_is_iterator ( ) { … } — function",
							"—Ⓕ– js_is_async_generator ( ) { … } — function",
							"—Ⓕ– js_symbol_static_atom ( ) { … } — function",
							"—Ⓕ– js_symbol_static_value ( ) { … } — function",
							"—Ⓕ– js_symbol_for_value ( ) { … } — function",
							"—Ⓕ– js_symbol_for_atom ( ) { … } — function",
							"—Ⓕ– js_symbol_ctor ( ) { … } — function",
							"—Ⓕ– js_global_get ( ) { … } — function",
							"—Ⓕ– js_global_os ( ) { … } — function",
							"—Ⓕ– js_os_get ( ) { … } — function",
							"—Ⓕ– js_timer_start ( ) { … } — function",
							"—Ⓕ– js_timer_cancel ( ) { … } — function",
							"—Ⓕ– js_timer_free ( ) { … } — function",
							"—Ⓕ– js_timer_callback ( ) { … } — function",
							"—Ⓕ– js_timer_interval ( ) { … } — function",
							"—Ⓕ– js_timer_restart ( ) { … } — function",
							"—Ⓕ– js_resolve_functions_zero ( ) { … } — function",
							"—Ⓕ– js_resolve_functions_is_null ( ) { … } — function",
							"—Ⓕ– js_resolve_functions_call ( ) { … } — function",
							"—Ⓕ– js_tostringlen ( ) { … } — function",
							"—Ⓕ– js_tostring ( ) { … } — function",
							"—Ⓕ– js_invoke ( ) { … } — function",
							"—Ⓕ– js_promise_create ( ) { … } — function",
							"—Ⓕ– js_promise_free ( ) { … } — function",
							"—Ⓕ– js_promise_free_rt ( ) { … } — function",
							"—Ⓕ– js_promise_resolve ( ) { … } — function",
							"—Ⓕ– js_promise_reject ( ) { … } — function",
							"—Ⓕ– js_promise_zero ( ) { … } — function",
							"—Ⓕ– js_promise_pending ( ) { … } — function",
							"—Ⓕ– js_promise_done ( ) { … } — function",
							"—Ⓕ– js_promise_then ( ) { … } — function",
							"—Ⓕ– js_promise_catch ( ) { … } — function",
							"—Ⓕ– js_is_promise ( ) { … } — function",
							"—Ⓕ– js_error_new ( ) { … } — function",
							"—Ⓕ– js_error_print ( ) { … } — function",
							"—Ⓕ– js_toptrsize ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_bool ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_int64 ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_uint32 ( ) { … } — function",
							"—Ⓕ– js_has_propertystr ( ) { … } — function",
							"—Ⓕ– js_module_list ( ) { … } — function",
							"—Ⓕ– js_module_at ( ) { … } — function",
							"—Ⓕ– js_module_find ( ) { … } — function",
							"—Ⓕ– js_module_find_s ( ) { … } — function",
							"—Ⓕ– js_module_export_find ( ) { … } — function",
							"—Ⓕ– js_module_loader ( ) { … } — function",
							"—Ⓕ– js_module_import_meta ( ) { … } — function",
							"—Ⓕ– js_array_length ( ) { … } — function",
							"—Ⓕ– js_array_to_argv ( ) { … } — function",
							"—Ⓕ– js_arraybuffer_length ( ) { … } — function",
							"—Ⓕ– js_offset_length ( ) { … } — function",
							"—Ⓕ– js_argv_to_array ( ) { … } — function",
							"—Ⓕ– js_atom_is_index ( ) { … } — function",
							"—Ⓕ– js_atom_compare_string ( ) { … } — function",
							"—Ⓕ– js_atom_is_length ( ) { … } — function",
							"—Ⓕ– js_atom_is_symbol ( ) { … } — function",
							"—Ⓕ– js_atom_is_string ( ) { … } — function",
							"—Ⓕ– js_input_buffer ( ) { … } — function",
							"—Ⓕ– js_input_chars ( ) { … } — function",
							"—Ⓕ– js_input_args ( ) { … } — function",
							"—Ⓕ– js_buffer_fromargs ( ) { … } — function",
							"—Ⓕ– js_is_arraybuffer ( ) { … } — function",
							"—Ⓕ– js_is_dataview ( ) { … } — function",
							"—Ⓕ– js_is_typedarray ( ) { … } — function",
							"—Ⓕ– js_is_generator ( ) { … } — function",
							"—Ⓕ– js_is_async ( ) { … } — function",
							"—Ⓕ– js_typedarray_constructor ( ) { … } — function",
							"—Ⓕ– js_typedarray_new ( ) { … } — function",
							" Ⓣ  JSCClosureRecord ; — typedef",
							"—Ⓕ– js_cclosure_data ( ) { … } — function",
							"—Ⓕ– js_cclosure_data2 ( ) { … } — function",
							"—Ⓕ– js_cclosure_call ( ) { … } — function",
							"—Ⓕ– js_cclosure_finalizer ( ) { … } — function",
							"—Ⓕ– js_function_cclosure ( ) { … } — function"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					194,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/jsutils.c",
						"symkeys":
						[
							[
								8,
								19
							],
							[
								169,
								181
							],
							[
								371,
								392
							],
							[
								568,
								587
							],
							[
								1076,
								1090
							],
							[
								1347,
								1364
							],
							[
								1829,
								1845
							],
							[
								2180,
								2198
							],
							[
								2312,
								2333
							],
							[
								2472,
								2495
							],
							[
								3107,
								3123
							],
							[
								3882,
								3903
							],
							[
								4058,
								4076
							],
							[
								4315,
								4331
							],
							[
								5638,
								5656
							],
							[
								6013,
								6035
							],
							[
								6358,
								6372
							],
							[
								6497,
								6510
							],
							[
								6920,
								6939
							],
							[
								7076,
								7090
							],
							[
								7257,
								7272
							],
							[
								7464,
								7476
							],
							[
								7594,
								7607
							],
							[
								7843,
								7858
							],
							[
								7930,
								7945
							],
							[
								8102,
								8116
							],
							[
								8261,
								8278
							],
							[
								8437,
								8451
							],
							[
								8537,
								8551
							],
							[
								8933,
								8947
							],
							[
								9146,
								9167
							],
							[
								9384,
								9405
							],
							[
								9612,
								9634
							],
							[
								9846,
								9865
							],
							[
								10235,
								10253
							],
							[
								10456,
								10470
							],
							[
								10539,
								10552
							],
							[
								10764,
								10776
							],
							[
								10841,
								10850
							],
							[
								11033,
								11047
							],
							[
								11329,
								11344
							],
							[
								11581,
								11594
							],
							[
								11876,
								11893
							],
							[
								12439,
								12456
							],
							[
								12918,
								12934
							],
							[
								13162,
								13187
							],
							[
								13292,
								13320
							],
							[
								13443,
								13468
							],
							[
								13738,
								13752
							],
							[
								14035,
								14046
							],
							[
								14136,
								14145
							],
							[
								14390,
								14407
							],
							[
								14544,
								14559
							],
							[
								14720,
								14738
							],
							[
								14903,
								14921
							],
							[
								15115,
								15132
							],
							[
								15322,
								15337
							],
							[
								15409,
								15427
							],
							[
								15516,
								15531
							],
							[
								15622,
								15637
							],
							[
								15766,
								15782
							],
							[
								15909,
								15922
							],
							[
								16126,
								16138
							],
							[
								16418,
								16432
							],
							[
								17485,
								17497
							],
							[
								17732,
								17755
							],
							[
								18006,
								18030
							],
							[
								18250,
								18275
							],
							[
								18493,
								18511
							],
							[
								18709,
								18723
							],
							[
								19077,
								19089
							],
							[
								19339,
								19353
							],
							[
								19625,
								19641
							],
							[
								19838,
								19859
							],
							[
								20546,
								20562
							],
							[
								20628,
								20649
							],
							[
								20845,
								20860
							],
							[
								21199,
								21215
							],
							[
								21579,
								21600
							],
							[
								21735,
								21751
							],
							[
								22313,
								22329
							],
							[
								22552,
								22568
							],
							[
								23168,
								23190
							],
							[
								23374,
								23391
							],
							[
								23485,
								23502
							],
							[
								23678,
								23695
							],
							[
								23875,
								23890
							],
							[
								25135,
								25149
							],
							[
								25550,
								25563
							],
							[
								25775,
								25793
							],
							[
								26067,
								26084
							],
							[
								26250,
								26264
							],
							[
								26698,
								26714
							],
							[
								26853,
								26868
							],
							[
								27246,
								27257
							],
							[
								27578,
								27603
							],
							[
								27863,
								27880
							],
							[
								28465,
								28481
							],
							[
								28569,
								28585
							],
							[
								28695,
								28712
							],
							[
								28827,
								28843
							],
							[
								29482,
								29503
							],
							[
								29855,
								29875
							]
						],
						"symlist":
						[
							" Ⓜ  _GNU_SOURCE … — macro object",
							"—Ⓕ– vector2array ( ) { … } — function",
							"—Ⓕ– js_object_constructor ( ) { … } — function",
							"—Ⓕ– js_object_classname ( ) { … } — function",
							"—Ⓕ– js_console_log ( ) { … } — function",
							"—Ⓕ– js_function_bound ( ) { … } — function",
							"—Ⓕ– js_function_bind ( ) { … } — function",
							"—Ⓕ– js_function_bind_1 ( ) { … } — function",
							"—Ⓕ– js_function_bind_this ( ) { … } — function",
							"—Ⓕ– js_function_bind_this_1 ( ) { … } — function",
							"—Ⓕ– js_function_name ( ) { … } — function",
							"—Ⓕ– js_function_prototype ( ) { … } — function",
							"—Ⓕ– js_iterator_result ( ) { … } — function",
							"—Ⓕ– js_iterator_next ( ) { … } — function",
							"—Ⓕ– js_copy_properties ( ) { … } — function",
							"—Ⓕ– js_buffer_free_default ( ) { … } — function",
							"—Ⓕ– js_buffer_from ( ) { … } — function",
							"—Ⓕ– js_buffer_new ( ) { … } — function",
							"—Ⓕ– js_buffer_fromblock ( ) { … } — function",
							"—Ⓕ– js_buffer_data ( ) { … } — function",
							"—Ⓕ– js_buffer_alloc ( ) { … } — function",
							"—Ⓕ– js_buffer_to ( ) { … } — function",
							"—Ⓕ– js_buffer_to3 ( ) { … } — function",
							"—Ⓕ– js_buffer_valid ( ) { … } — function",
							"—Ⓕ– js_buffer_clone ( ) { … } — function",
							"—Ⓕ– js_buffer_dump ( ) { … } — function",
							"—Ⓕ– js_buffer_free_rt ( ) { … } — function",
							"—Ⓕ– js_buffer_free ( ) { … } — function",
							"—Ⓕ– js_is_iterable ( ) { … } — function",
							"—Ⓕ– js_is_iterator ( ) { … } — function",
							"—Ⓕ– js_is_async_generator ( ) { … } — function",
							"—Ⓕ– js_symbol_static_atom ( ) { … } — function",
							"—Ⓕ– js_symbol_static_value ( ) { … } — function",
							"—Ⓕ– js_symbol_for_value ( ) { … } — function",
							"—Ⓕ– js_symbol_for_atom ( ) { … } — function",
							"—Ⓕ– js_symbol_ctor ( ) { … } — function",
							"—Ⓕ– js_global_get ( ) { … } — function",
							"—Ⓕ– js_global_os ( ) { … } — function",
							"—Ⓕ– js_os_get ( ) { … } — function",
							"—Ⓕ– js_timer_start ( ) { … } — function",
							"—Ⓕ– js_timer_cancel ( ) { … } — function",
							"—Ⓕ– js_timer_free ( ) { … } — function",
							"—Ⓕ– js_timer_callback ( ) { … } — function",
							"—Ⓕ– js_timer_interval ( ) { … } — function",
							"—Ⓕ– js_timer_restart ( ) { … } — function",
							"—Ⓕ– js_resolve_functions_zero ( ) { … } — function",
							"—Ⓕ– js_resolve_functions_is_null ( ) { … } — function",
							"—Ⓕ– js_resolve_functions_call ( ) { … } — function",
							"—Ⓕ– js_tostringlen ( ) { … } — function",
							"—Ⓕ– js_tostring ( ) { … } — function",
							"—Ⓕ– js_invoke ( ) { … } — function",
							"—Ⓕ– js_promise_create ( ) { … } — function",
							"—Ⓕ– js_promise_free ( ) { … } — function",
							"—Ⓕ– js_promise_free_rt ( ) { … } — function",
							"—Ⓕ– js_promise_resolve ( ) { … } — function",
							"—Ⓕ– js_promise_reject ( ) { … } — function",
							"—Ⓕ– js_promise_zero ( ) { … } — function",
							"—Ⓕ– js_promise_pending ( ) { … } — function",
							"—Ⓕ– js_promise_done ( ) { … } — function",
							"—Ⓕ– js_promise_then ( ) { … } — function",
							"—Ⓕ– js_promise_catch ( ) { … } — function",
							"—Ⓕ– js_is_promise ( ) { … } — function",
							"—Ⓕ– js_error_new ( ) { … } — function",
							"—Ⓕ– js_error_print ( ) { … } — function",
							"—Ⓕ– js_toptrsize ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_bool ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_int64 ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_uint32 ( ) { … } — function",
							"—Ⓕ– js_has_propertystr ( ) { … } — function",
							"—Ⓕ– js_module_list ( ) { … } — function",
							"—Ⓕ– js_module_at ( ) { … } — function",
							"—Ⓕ– js_module_find ( ) { … } — function",
							"—Ⓕ– js_module_find_s ( ) { … } — function",
							"—Ⓕ– js_module_export_find ( ) { … } — function",
							"—Ⓕ– js_module_loader ( ) { … } — function",
							"—Ⓕ– js_module_import_meta ( ) { … } — function",
							"—Ⓕ– js_array_length ( ) { … } — function",
							"—Ⓕ– js_array_to_argv ( ) { … } — function",
							"—Ⓕ– js_arraybuffer_length ( ) { … } — function",
							"—Ⓕ– js_offset_length ( ) { … } — function",
							"—Ⓕ– js_argv_to_array ( ) { … } — function",
							"—Ⓕ– js_atom_is_index ( ) { … } — function",
							"—Ⓕ– js_atom_compare_string ( ) { … } — function",
							"—Ⓕ– js_atom_is_length ( ) { … } — function",
							"—Ⓕ– js_atom_is_symbol ( ) { … } — function",
							"—Ⓕ– js_atom_is_string ( ) { … } — function",
							"—Ⓕ– js_input_buffer ( ) { … } — function",
							"—Ⓕ– js_input_chars ( ) { … } — function",
							"—Ⓕ– js_input_args ( ) { … } — function",
							"—Ⓕ– js_buffer_fromargs ( ) { … } — function",
							"—Ⓕ– js_is_arraybuffer ( ) { … } — function",
							"—Ⓕ– js_is_dataview ( ) { … } — function",
							"—Ⓕ– js_is_typedarray ( ) { … } — function",
							"—Ⓕ– js_is_generator ( ) { … } — function",
							"—Ⓕ– js_is_async ( ) { … } — function",
							"—Ⓕ– js_typedarray_constructor ( ) { … } — function",
							"—Ⓕ– js_typedarray_new ( ) { … } — function",
							" Ⓣ  JSCClosureRecord ; — typedef",
							"—Ⓕ– js_cclosure_data ( ) { … } — function",
							"—Ⓕ– js_cclosure_data2 ( ) { … } — function",
							"—Ⓕ– js_cclosure_call ( ) { … } — function",
							"—Ⓕ– js_cclosure_finalizer ( ) { … } — function",
							"—Ⓕ– js_function_cclosure ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAQFQAAICDik4IgIF9HTlVfU09VUkNFIOKApiDigJQgbWFjcm8gb2JqZWN0CuKAlOKSu+KAkyB2ZWN0b3IyYXJyYXkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vYmplY3RfY29uc3RydWN0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vYmplY3RfY2xhc3NuYW1lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfY29uc29sZV9sb2cgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9ib3VuZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2Z1bmN0aW9uX2JpbmQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9iaW5kXzEgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9iaW5kX3RoaXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9iaW5kX3RoaXNfMSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2Z1bmN0aW9uX25hbWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19mdW5jdGlvbl9wcm90b3R5cGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pdGVyYXRvcl9yZXN1bHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pdGVyYXRvcl9uZXh0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfY29weV9wcm9wZXJ0aWVzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnVmZmVyX2ZyZWVfZGVmYXVsdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl9mcm9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnVmZmVyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl9mcm9tYmxvY2sgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19idWZmZXJfZGF0YSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl9hbGxvYyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl90byAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl90bzMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19idWZmZXJfdmFsaWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19idWZmZXJfY2xvbmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19idWZmZXJfZHVtcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J1ZmZlcl9mcmVlX3J0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnVmZmVyX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pc19pdGVyYWJsZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2lzX2l0ZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaXNfYXN5bmNfZ2VuZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc3ltYm9sX3N0YXRpY19hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc3ltYm9sX3N0YXRpY192YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3N5bWJvbF9mb3JfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zeW1ib2xfZm9yX2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zeW1ib2xfY3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2dsb2JhbF9nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19nbG9iYWxfb3MgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vc19nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190aW1lcl9zdGFydCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RpbWVyX2NhbmNlbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RpbWVyX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190aW1lcl9jYWxsYmFjayAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RpbWVyX2ludGVydmFsICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdGltZXJfcmVzdGFydCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Jlc29sdmVfZnVuY3Rpb25zX3plcm8gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19yZXNvbHZlX2Z1bmN0aW9uc19pc19udWxsICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcmVzb2x2ZV9mdW5jdGlvbnNfY2FsbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Rvc3RyaW5nbGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnZva2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcm9taXNlX2NyZWF0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Byb21pc2VfZnJlZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Byb21pc2VfZnJlZV9ydCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Byb21pc2VfcmVzb2x2ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Byb21pc2VfcmVqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV96ZXJvICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV9wZW5kaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV9kb25lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV90aGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJvbWlzZV9jYXRjaCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2lzX3Byb21pc2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19lcnJvcl9uZXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19lcnJvcl9wcmludCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RvcHRyc2l6ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2dldF9wcm9wZXJ0eXN0cl9ib29sICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfZ2V0X3Byb3BlcnR5c3RyX2ludDY0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfZ2V0X3Byb3BlcnR5c3RyX3VpbnQzMiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2hhc19wcm9wZXJ0eXN0ciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21vZHVsZV9saXN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbW9kdWxlX2F0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbW9kdWxlX2ZpbmQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19tb2R1bGVfZmluZF9zICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbW9kdWxlX2V4cG9ydF9maW5kICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbW9kdWxlX2xvYWRlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21vZHVsZV9pbXBvcnRfbWV0YSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2FycmF5X2xlbmd0aCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2FycmF5X3RvX2FyZ3YgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hcnJheWJ1ZmZlcl9sZW5ndGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vZmZzZXRfbGVuZ3RoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJndl90b19hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2F0b21faXNfaW5kZXggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hdG9tX2NvbXBhcmVfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXRvbV9pc19sZW5ndGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hdG9tX2lzX3N5bWJvbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2F0b21faXNfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5wdXRfYnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5wdXRfY2hhcnMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnB1dF9hcmdzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnVmZmVyX2Zyb21hcmdzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaXNfYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pc19kYXRhdmlldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2lzX3R5cGVkYXJyYXkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pc19nZW5lcmF0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pc18oICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3R5cGVkYXJyYXlfY29uc3RydWN0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190eXBlZGFycmF5X25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4kgIEpTQ0Nsb3N1cmVSZWNvcmQgOyDigJQgdHlwZWRlZgrigJTikrvigJMganNfY2Nsb3N1cmVfZGF0YSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2NjbG9zdXJlX2RhdGEyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfY2Nsb3N1cmVfY2FsbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2NjbG9zdXJlX2ZpbmFsaXplciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2Z1bmN0aW9uX2NjbG9zdXJlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgAAAAAAAAAAFBEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "src/minnet-server-http.c",
			"settings":
			{
				"buffer_size": 35292,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAALlUAAAAAAAAwVQAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAALlUAAAAAAAAwVQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/minnet.c",
			"settings":
			{
				"buffer_size": 16661,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"",
					null,
					"AQAAAA8KAAAAAAAAHwoAAAAAAAAPAAAASlNfTmV3Q0Nsb3N1cmUo",
					"AQAAAAAAAAABAAAARg4AAAAAAABNDgAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAARw4AAAAAAABODgAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAARw4AAAAAAABODgAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAVQQAAI2RlZmluZSBfR05VX1NPVVJDRQojaW5jbHVkZSAibWlubmV0LXNlcnZlci5oIgojaW5jbHVkZSAibWlubmV0LWNsaWVudC5oIgojaW5jbHVkZSAibWlubmV0LXJlcXVlc3QuaCIKI2luY2x1ZGUgIm1pbm5ldC1yZXNwb25zZS5oIgojaW5jbHVkZSAibWlubmV0LXdlYnNvY2tldC5oIgojaW5jbHVkZSAibWlubmV0LXJpbmdidWZmZXIuaCIKI2luY2x1ZGUgIm1pbm5ldC1nZW5lcmF0b3IuaCIKI2luY2x1ZGUgIm1pbm5ldC1mb3JtLXBhcnNlci5oIgojaW5jbHVkZSAibWlubmV0LWhhc2guaCIKI2luY2x1ZGUgIm1pbm5ldC1mZXRjaC5oIgojaW5jbHVkZSAianN1dGlscy5oIgojaW5jbHVkZSAidXRpbHMuaCIKI2luY2x1ZGUgImJ1ZmZlci5oIgojaW5jbHVkZSA8bGlid2Vic29ja2V0cy5oPgojaW5jbHVkZSA8YXNzZXJ0Lmg+CiNpbmNsdWRlIDxlcnJuby5oPgojaW5jbHVkZSA8c3RyaW5nLmg+CiNpbmNsdWRlIDxzdHJpbmdzLmg+CiNpbmNsdWRlIDxjdHlwZS5oPgojaW5jbHVkZSA8c3lzL3RpbWUuaD4KI2luY2x1ZGUgPHN0ZGFyZy5oPgoKLyojaWZkZWYgX1dJTjMyCiNpbmNsdWRlICJwb2xsLmgiCiNlbmRpZiovCgpzdGF0aWMgVEhSRUFEX0xPQ0FMIEpTVmFsdWUgbWlubmV0X2xvZ19jYiwgbWlubmV0X2xvZ190aGlzOwpzdGF0aWMgVEhSRUFEX0xPQ0FMIGludDMyX3QgbWlubmV0X2xvZ19sZXZlbCA9IDA7CnN0YXRpYyBUSFJFQURfTE9DQUwgSlNDb250ZXh0KiBtaW5uZXRfbG9nX2N0eCA9IDA7CnN0cnVjdCBsd3NfcHJvdG9jb2xzICptaW5uZXRfY2xpZW50X3Byb3RvY29scyA9IDAsICptaW5uZXRfc2VydmVyX3Byb3RvY29scyA9IDA7CgojaWZuZGVmIFBPTExJTgojZGVmaW5lIFBPTExJTiAxCiNlbmRpZgojaWZuZGVmIFBPTExPVVQKI2RlZmluZSBQT0xMT1VUIDQKI2VuZGlmCiNpZm5kZWYgUE9MTEVSUgojZGVmaW5lIFBPTExFUlIgOAojZW5kaWYKI2lmbmRlZiBQT0xMSFVQCiNkZWZpbmUgUE9MTEhVUCAxNgojZW5kaWYKCiNkZWZpbmUgUElPIChQT0xMSU4gfCBQT0xMT1VUIHwgUE9MTEVSUikKCnR5cGVkZWYgc3RydWN0IHsKICBKU0NvbnRleHQqIGN0eDsKICBzdHJ1Y3QgbHdzKiBsd3NpOwogIHN0cnVjdCB3c2lfb3BhcXVlX3VzZXJfZGF0YSogb3BhcXVlOwp9IExXU0lPSGFuZGxlcjsKCnR5cGVkZWYgZW51bSB7IFJFQURfSEFORExFUiA9IDAsIFdSSVRFX0hBTkRMRVIgfSBKU0lPSGFuZGxlcjsKCnN0YXRpYyB2b2lkCmx3c19pb2hhbmRsZXJfZnJlZSh2b2lkKiBwdHIpIHsKICBMV1NJT0hhbmRsZXIqIGNsb3N1cmUgPSBwdHI7CiAgSlNDb250ZXh0KiBjdHggPSBjbG9zdXJlLT5jdHg7CiAganNfZnJlZShjdHgsIGNsb3N1cmUpOwp9OwoKc3RhdGljIEpTVmFsdWUKbHdzX2lvaGFuZGxlcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljLCB2b2lkKiBwdHIpIHsKICBMV1NJT0hhbmRsZXIqIGNsb3N1cmUgPSBwdHI7CiAgc3RydWN0IHBvbGxmZCogcDsKICBpbnQzMl90IHdyOwogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEOwoKICBhc3NlcnQoY2xvc3VyZS0+b3BhcXVlKTsKICBwID0gJmNsb3N1cmUtPm9wYXF1ZS0+cG9sbDsKCiAgSlNfVG9JbnQzMihjdHgsICZ3ciwgYXJndlswXSk7CgogIHAtPnJldmVudHMgPSBtYWdpYyAmICh3ciA9PSBXUklURV9IQU5ETEVSID8gUE9MTE9VVCA6IFBPTExJTik7CgogIGlmKChwLT5yZXZlbnRzICYgUElPKSAhPSBtYWdpYykgewogICAgaWYocG9sbChwLCAxLCAwKSA8IDApCiAgICAgIGx3c2xfZXJyKCJwb2xsIGVycm9yOiAlc1xuIiwgc3RyZXJyb3IoZXJybm8pKTsKICB9CgogIGlmKHAtPnJldmVudHMgJiBQSU8pIHsKICAgIHN0cnVjdCBsd3NfcG9sbGZkIHggPSB7cC0+ZmQsIG1hZ2ljLCBwLT5yZXZlbnRzICYgUElPfTsKCiAgICBpZihwLT5yZXZlbnRzICYgKFBPTExFUlIgfCBQT0xMSFVQKSkgewogICAgICBjbG9zdXJlLT5vcGFxdWUtPnBvbGwgPSAqcDsKICAgICAgLy8gY2xvc3VyZS0+b3BhcXVlLT5lcnJvciA9IGVycm5vOwogICAgfQogICAgLyppZih4LnJldmVudHMgJiBQT0xMT1VUKQogICAgICBpZih4LnJldmVudHMgJiBQT0xMSU4pCiAgICAgICAgeC5yZXZlbnRzICY9IH4oUE9MTE9VVCk7Ki8KICAgIC8vIGVycm5vID0gMDsKCiAgICByZXQgPSBKU19OZXdJbnQzMihjdHgsIGx3c19zZXJ2aWNlX2ZkKGx3c19nZXRfY29udGV4dChjbG9zdXJlLT5sd3NpKSwgJngpKTsKICB9CgogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCm1pbm5ldF9pb19oYW5kbGVyKEpTQ29udGV4dCogY3R4LCBpbnQgZmQsIGludCBldmVudHMsIHN0cnVjdCBsd3MqIHdzaSkgewogIExXU0lPSGFuZGxlciogaDsKCiAgaWYoIShoID0ganNfbWFsbG9jeihjdHgsIHNpemVvZihMV1NJT0hhbmRsZXIpKSkpCiAgICByZXR1cm4gSlNfVGhyb3dPdXRPZk1lbW9yeShjdHgpOwoKICAqaCA9IChMV1NJT0hhbmRsZXIpe2N0eCwgd3NpLCBsd3Nfb3BhcXVlKHdzaSwgY3R4KX07CgogIGgtPm9wYXF1ZS0+cG9sbCA9IChzdHJ1Y3QgcG9sbGZkKXtmZCwgZXZlbnRzLCAwfTsKCiAgcmV0dXJuIGpzX2Z1bmN0aW9uX2NjbG9zdXJlKGN0eCwgbHdzX2lvaGFuZGxlciwgMSwgZXZlbnRzLCBoLCBsd3NfaW9oYW5kbGVyX2ZyZWUpOwp9Cgp2b2lkCm1pbm5ldF9pb19oYW5kbGVycyhKU0NvbnRleHQqIGN0eCwgc3RydWN0IGx3cyogd3NpLCBzdHJ1Y3QgbHdzX3BvbGxhcmdzIGFyZ3MsIEpTVmFsdWUgb3V0WzJdKSB7CiAgSlNWYWx1ZSBmdW5jID0gSlNfTlVMTDsKICBpbnQgZXZlbnRzID0gYXJncy5ldmVudHMgJiAoUE9MTElOIHwgUE9MTE9VVCk7CgogIGlmKGV2ZW50cykKICAgIGZ1bmMgPSBtaW5uZXRfaW9faGFuZGxlcihjdHgsIGFyZ3MuZmQsIGV2ZW50cywgd3NpKTsKCiAgb3V0WzBdID0gKGV2ZW50cyAmIFBPTExJTikgPyBqc19mdW5jdGlvbl9iaW5kXzEoY3R4LCBmdW5jLCBKU19OZXdJbnQzMihjdHgsIFJFQURfSEFORExFUikpIDogSlNfTlVMTDsKICBvdXRbMV0gPSAoZXZlbnRzICYgUE9MTE9VVCkgPyBqc19mdW5jdGlvbl9iaW5kXzEoY3R4LCBmdW5jLCBKU19OZXdJbnQzMihjdHgsIFdSSVRFX0hBTkRMRVIpKSA6IEpTX05VTEw7CgogIEpTX0ZyZWVWYWx1ZShjdHgsIGZ1bmMpOwp9Cgp2b2lkCm1pbm5ldF9sb2dfY2FsbGJhY2soaW50IGxldmVsLCBjb25zdCBjaGFyKiBsaW5lKSB7CiAgaWYobWlubmV0X2xvZ19jdHgpIHsKICAgIHNpemVfdCBuID0gMCwgbGVuID0gc3RybGVuKGxpbmUpOwoKICAgIGlmKEpTX0lzRnVuY3Rpb24obWlubmV0X2xvZ19jdHgsIG1pbm5ldF9sb2dfY2IpKSB7CgogICAgICBuID0gc2tpcF9icmFja2V0cyhsaW5lLCBsZW4pOwogICAgICBsaW5lICs9IG47CiAgICAgIGxlbiAtPSBuOwogICAgICBuID0gc2tpcF9kaXJlY3RvcnkobGluZSwgbGVuKTsKICAgICAgbGluZSArPSBuOwogICAgICBsZW4gLT0gbjsKCiAgICAgIHN0cmlwX3RyYWlsaW5nX25ld2xpbmUobGluZSwgJmxlbik7CgogICAgICBKU1ZhbHVlQ29uc3QgYXJndlsyXSA9IHsKICAgICAgICAgIEpTX05ld0ludDMyKG1pbm5ldF9sb2dfY3R4LCBsZXZlbCksCiAgICAgICAgICBKU19OZXdTdHJpbmdMZW4obWlubmV0X2xvZ19jdHgsIGxpbmUsIGxlbiksCiAgICAgIH07CiAgICAgIEpTVmFsdWUgcmV0ID0gSlNfQ2FsbChtaW5uZXRfbG9nX2N0eCwgbWlubmV0X2xvZ19jYiwgbWlubmV0X2xvZ190aGlzLCAyLCBhcmd2KTsKCiAgICAgIGlmKEpTX0lzRXhjZXB0aW9uKHJldCkpIHsKICAgICAgICBKU1ZhbHVlIGV4Y2VwdGlvbiA9IEpTX0dldEV4Y2VwdGlvbihtaW5uZXRfbG9nX2N0eCk7CiAgICAgICAgSlNfRnJlZVZhbHVlKG1pbm5ldF9sb2dfY3R4LCBleGNlcHRpb24pOwogICAgICB9CgogICAgICBKU19GcmVlVmFsdWUobWlubmV0X2xvZ19jdHgsIGFyZ3ZbMF0pOwogICAgICBKU19GcmVlVmFsdWUobWlubmV0X2xvZ19jdHgsIGFyZ3ZbMV0pOwogICAgICBKU19GcmVlVmFsdWUobWlubmV0X2xvZ19jdHgsIHJldCk7CiAgICB9IGVsc2UgewogICAgICBqc19jb25zb2xlX2xvZyhtaW5uZXRfbG9nX2N0eCwgJm1pbm5ldF9sb2dfdGhpcywgJm1pbm5ldF9sb2dfY2IpOwogICAgfQogIH0KfQoKc3RhdGljIGludAp3c2lfaW9oYW5kbGVyKHN0cnVjdCBsd3MqIHdzaSwgc3RydWN0IGpzX2NhbGxiYWNrKiBjYiwgc3RydWN0IGx3c19wb2xsYXJncyBhcmdzKSB7CiAgSlNWYWx1ZSBhcmd2WzNdID0gewogICAgICBKU19OZXdJbnQzMihjYi0+Y3R4LCBhcmdzLmZkKSwKICAgICAgSlNfTlVMTCwKICAgICAgSlNfTlVMTCwKICB9OwoKICBtaW5uZXRfaW9faGFuZGxlcnMoY2ItPmN0eCwgd3NpLCBhcmdzLCAmYXJndlsxXSk7CiAgY2FsbGJhY2tfZW1pdChjYiwgY291bnRvZihhcmd2KSwgYXJndik7CgogIGpzX3ZlY3Rvcl9mcmVlKGNiLT5jdHgsIGNvdW50b2YoYXJndiksIGFyZ3YpOwogIHJldHVybiAwOwp9CgppbnQKd3NpX2hhbmRsZV9wb2xsKHN0cnVjdCBsd3MqIHdzaSwgZW51bSBsd3NfY2FsbGJhY2tfcmVhc29ucyByZWFzb24sIHN0cnVjdCBqc19jYWxsYmFjayogY2IsIHN0cnVjdCBsd3NfcG9sbGFyZ3MqIGFyZ3MpIHsKICBzd2l0Y2gocmVhc29uKSB7CiAgICBjYXNlIExXU19DQUxMQkFDS19MT0NLX1BPTEw6CiAgICBjYXNlIExXU19DQUxMQkFDS19VTkxPQ0tfUE9MTDogYnJlYWs7CiAgICBjYXNlIExXU19DQUxMQkFDS19BRERfUE9MTF9GRDoKICAgICAgaWYoY2ItPmN0eCkKICAgICAgICB3c2lfaW9oYW5kbGVyKHdzaSwgY2IsICphcmdzKTsKICAgICAgYnJlYWs7CiAgICBjYXNlIExXU19DQUxMQkFDS19ERUxfUE9MTF9GRDoKICAgICAgaWYoY2ItPmN0eCkKICAgICAgICB3c2lfaW9oYW5kbGVyKHdzaSwgY2IsICphcmdzKTsKICAgICAgYnJlYWs7CiAgICBjYXNlIExXU19DQUxMQkFDS19DSEFOR0VfTU9ERV9QT0xMX0ZEOgogICAgICBpZihjYi0+Y3R4KQogICAgICAgIGlmKGFyZ3MtPmV2ZW50cyAhPSBhcmdzLT5wcmV2X2V2ZW50cykKICAgICAgICAgIHdzaV9pb2hhbmRsZXIod3NpLCBjYiwgKmFyZ3MpOwogICAgICBicmVhazsKICAgIGRlZmF1bHQ6IHJldHVybiAtMTsKICB9CiAgcmV0dXJuIDA7Cn0KCmludAptaW5uZXRfbHdzX3VuaGFuZGxlZChjb25zdCBjaGFyKiBoYW5kbGVyLCBpbnQgcmVhc29uKSB7CiAgbHdzbF93YXJuKCJVbmhhbmRsZWQgXHgxYlsxOzMxbSVzXHgxYlswbSBldmVudDogJWkgJXNcbiIsIGhhbmRsZXIsIHJlYXNvbiwgbHdzX2NhbGxiYWNrX25hbWUocmVhc29uKSk7CiAgYXNzZXJ0KDApOwogIHJldHVybiAtMTsKfQoKc3RhdGljIEpTVmFsdWUKc2V0X2xvZyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBKU1ZhbHVlQ29uc3QgdmFsdWUsIEpTVmFsdWVDb25zdCB0aGlzT2JqKSB7CiAgSlNWYWx1ZSByZXQgPSBKU19WQUxVRV9HRVRfVEFHKG1pbm5ldF9sb2dfY2IpID09IDAgPyBKU19VTkRFRklORUQgOiBtaW5uZXRfbG9nX2NiOwoKICBtaW5uZXRfbG9nX2N0eCA9IGN0eDsKICBtaW5uZXRfbG9nX2NiID0gSlNfRHVwVmFsdWUoY3R4LCB2YWx1ZSk7CgogIGlmKCFKU19Jc1VuZGVmaW5lZChtaW5uZXRfbG9nX3RoaXMpICYmICFKU19Jc051bGwobWlubmV0X2xvZ190aGlzKSAmJiBKU19WQUxVRV9HRVRfVEFHKG1pbm5ldF9sb2dfdGhpcykgIT0gMCkKICAgIEpTX0ZyZWVWYWx1ZShjdHgsIG1pbm5ldF9sb2dfdGhpcyk7CgogIG1pbm5ldF9sb2dfdGhpcyA9IEpTX0R1cFZhbHVlKGN0eCwgdGhpc09iaik7CgogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCm1pbm5ldF9zZXRfbG9nKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdKSB7CiAgSlNWYWx1ZSByZXQ7CiAgaWYoYXJnYyA+PSAxICYmIEpTX0lzTnVtYmVyKGFyZ3ZbMF0pKSB7CiAgICBKU19Ub0ludDMyKGN0eCwgJm1pbm5ldF9sb2dfbGV2ZWwsIGFyZ3ZbMF0pOwogICAgYXJnYy0tOwogICAgYXJndisrOwogIH0KCiAgcmV0ID0gc2V0X2xvZyhjdHgsIHRoaXNfdmFsLCBhcmd2WzBdLCBhcmdjID4gMSA/IGFyZ3ZbMV0gOiBKU19OVUxMKTsKICBsd3Nfc2V0X2xvZ19sZXZlbCgoKHVuc2lnbmVkKW1pbm5ldF9sb2dfbGV2ZWwgJiAoKDF1IDw8IExMTF9DT1VOVCkgLSAxKSksIG1pbm5ldF9sb2dfY2FsbGJhY2spOwogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKbWlubmV0X2dldF9zZXNzaW9ucyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSkgewogIHN0cnVjdCBsaXN0X2hlYWQqIGVsOwogIEpTVmFsdWUgcmV0OwogIHVpbnQzMl90IGkgPSAwOwoKICByZXQgPSBKU19OZXdBcnJheShjdHgpOwoKICBsaXN0X2Zvcl9lYWNoX3ByZXYoZWwsICZvcGFxdWVfbGlzdCkgewogICAgc3RydWN0IHdzaV9vcGFxdWVfdXNlcl9kYXRhKiBvcGFxdWUgPSBsaXN0X2VudHJ5KGVsLCBzdHJ1Y3Qgd3NpX29wYXF1ZV91c2VyX2RhdGEsIGxpbmspOwogICAgREVCVUcoIiVzIEAldSAjJSIgUFJJZDY0ICIgJXBcbiIsIF9fZnVuY19fLCBpLCBvcGFxdWUtPnNlcmlhbCwgb3BhcXVlKTsKCiAgICBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIHJldCwgaSsrLCBvcGFxdWUtPnNlc3MgPyBzZXNzaW9uX29iamVjdChvcGFxdWUtPnNlc3MsIGN0eCkgOiBKU19OZXdJbnQ2NChjdHgsIG9wYXF1ZS0+c2VyaWFsKSk7CiAgfQogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBjb25zdCBKU0NGdW5jdGlvbkxpc3RFbnRyeSBtaW5uZXRfbG9nbGV2ZWxzW10gPSB7CiAgICBKU19JTkRFWF9TVFJJTkdfREVGKDEsICJFUlIiKSwKICAgIEpTX0lOREVYX1NUUklOR19ERUYoMiwgIldBUk4iKSwKICAgIEpTX0lOREVYX1NUUklOR19ERUYoNCwgIk5PVElDRSIpLAogICAgSlNfSU5ERVhfU1RSSU5HX0RFRig4LCAiSU5GTyIpLAogICAgSlNfSU5ERVhfU1RSSU5HX0RFRigxNiwgIkRFQlVHIiksCiAgICBKU19JTkRFWF9TVFJJTkdfREVGKDMyLCAiUEFSU0VSIiksCiAgICBKU19JTkRFWF9TVFJJTkdfREVGKDY0LCAiSEVBREVSIiksCiAgICBKU19JTkRFWF9TVFJJTkdfREVGKDEyOCwgIkVYVCIpLAogICAgSlNfSU5ERVhfU1RSSU5HX0RFRigyNTYsICJDTElFTlQiKSwKICAgIEpTX0lOREVYX1NUUklOR19ERUYoNTEyLCAiTEFURU5DWSIpLAogICAgSlNfSU5ERVhfU1RSSU5HX0RFRigxMDI0LCAiVVNFUiIpLAogICAgSlNfSU5ERVhfU1RSSU5HX0RFRigyMDQ4LCAiVEhSRUFEIiksCiAgICBKU19JTkRFWF9TVFJJTkdfREVGKDQwOTUsICJBTEwiKSwKfTsKCnN0YXRpYyBjb25zdCBKU0NGdW5jdGlvbkxpc3RFbnRyeSBtaW5uZXRfZnVuY3NbXSA9IHsKICAgIEpTX0NGVU5DX0RFRigic2VydmVyIiwgMSwgbWlubmV0X3NlcnZlciksCiAgICBKU19DRlVOQ19ERUYoImNsaWVudCIsIDEsIG1pbm5ldF9jbGllbnQpLAogICAgSlNfQ0ZVTkNfREVGKCJmZXRjaCIsIDEsIG1pbm5ldF9mZXRjaCksCiAgICAvLyBKU19DRlVOQ19TUEVDSUFMX0RFRigiZm9ybVBhcnNlciIsIDAsIGNvbnN0cnVjdG9yLCBtaW5uZXRfZm9ybV9wYXJzZXJfY29uc3RydWN0b3IpLAogICAgLy8gSlNfQ0ZVTkNfU1BFQ0lBTF9ERUYoImdlbmVyYXRvciIsIDAsIGNvbnN0cnVjdG9yLCBtaW5uZXRfZ2VuZXJhdG9yX2NvbnN0cnVjdG9yKSwKICAgIC8vIEpTX0NGVU5DX1NQRUNJQUxfREVGKCJoYXNoIiwgMCwgY29uc3RydWN0b3IsIG1pbm5ldF9oYXNoX2NvbnN0cnVjdG9yKSwKICAgIC8vIEpTX0NGVU5DX1NQRUNJQUxfREVGKCJyZXF1ZXN0IiwgMCwgY29uc3RydWN0b3IsIG1pbm5ldF9yZXF1ZXN0X2NvbnN0cnVjdG9yKSwKICAgIC8vIEpTX0NGVU5DX1NQRUNJQUxfREVGKCJyZXNwb25zZSIsIDAsIGNvbnN0cnVjdG9yLCBtaW5uZXRfcmVzcG9uc2VfY29uc3RydWN0b3IpLAogICAgLy8gSlNfQ0ZVTkNfU1BFQ0lBTF9ERUYoInJpbmdidWZmZXIiLCAwLCBjb25zdHJ1Y3RvciwgbWlubmV0X3JpbmdidWZmZXJfY29uc3RydWN0b3IpLAogICAgLy8gSlNfQ0ZVTkNfU1BFQ0lBTF9ERUYoInVybCIsIDAsIGNvbnN0cnVjdG9yLCBtaW5uZXRfdXJsX2NvbnN0cnVjdG9yKSwKICAgIC8vIEpTX0NGVU5DX1NQRUNJQUxfREVGKCJzb2NrZXQiLCAwLCBjb25zdHJ1Y3RvciwgbWlubmV0X3dzX2NvbnN0cnVjdG9yKSwKICAgIEpTX0NGVU5DX0RFRigiZ2V0U2Vzc2lvbnMiLCAwLCBtaW5uZXRfZ2V0X3Nlc3Npb25zKSwKICAgIEpTX0NGVU5DX0RFRigic2V0TG9nIiwgMSwgbWlubmV0X3NldF9sb2cpLAogICAgSlNfUFJPUF9JTlQzMl9ERUYoIk1FVEhPRF9HRVQiLCBNRVRIT0RfR0VULCAwKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJNRVRIT0RfUE9TVCIsIE1FVEhPRF9QT1NULCAwKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJNRVRIT0RfT1BUSU9OUyIsIE1FVEhPRF9PUFRJT05TLCAwKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJNRVRIT0RfUFVUIiwgTUVUSE9EX1BVVCwgMCksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiTUVUSE9EX1BBVENIIiwgTUVUSE9EX1BBVENILCAwKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJNRVRIT0RfREVMRVRFIiwgTUVUSE9EX0RFTEVURSwgMCksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiTUVUSE9EX0hFQUQiLCBNRVRIT0RfSEVBRCwgMCksCgogICAgSlNfUFJPUF9JTlQzMl9ERUYoIkxMTF9FUlIiLCBMTExfRVJSLCAwKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJMTExfV0FSTiIsIExMTF9XQVJOLCAwKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJMTExfTk9USUNFIiwgTExMX05PVElDRSwgMCksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiTExMX0lORk8iLCBMTExfSU5GTywgMCksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiTExMX0RFQlVHIiwgTExMX0RFQlVHLCAwKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJMTExfUEFSU0VSIiwgTExMX1BBUlNFUiwgMCksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiTExMX0hFQURFUiIsIExMTF9IRUFERVIsIDApLAogICAgSlNfUFJPUF9JTlQzMl9ERUYoIkxMTF9FWFQiLCBMTExfRVhULCAwKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJMTExfQ0xJRU5UIiwgTExMX0NMSUVOVCwgMCksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiTExMX0xBVEVOQ1kiLCBMTExfTEFURU5DWSwgMCksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiTExMX1VTRVIiLCBMTExfVVNFUiwgMCksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiTExMX1RIUkVBRCIsIExMTF9USFJFQUQsIDApLAogICAgSlNfUFJPUF9JTlQzMl9ERUYoIkxMTF9BTEwiLCB+KCh+MHUpIDw8IExMTF9DT1VOVCksIDApLAogICAgSlNfT0JKRUNUX0RFRigibG9nTGV2ZWxzIiwgbWlubmV0X2xvZ2xldmVscywgY291bnRvZihtaW5uZXRfbG9nbGV2ZWxzKSwgSlNfUFJPUF9DT05GSUdVUkFCTEUpLAp9OwoKc3RhdGljIGludApqc19taW5uZXRfaW5pdChKU0NvbnRleHQqIGN0eCwgSlNNb2R1bGVEZWYqIG0pIHsKCiAgLy8gbWlubmV0X2pzX21vZHVsZSA9IEpTX1JlYWRPYmplY3QoY3R4LCBxanNjX21pbm5ldCwgcWpzY19taW5uZXRfc2l6ZSwgSlNfUkVBRF9PQkpfQllURUNPREUpOwoKICBKU19TZXRNb2R1bGVFeHBvcnRMaXN0KGN0eCwgbSwgbWlubmV0X2Z1bmNzLCBjb3VudG9mKG1pbm5ldF9mdW5jcykpOwoKICAvLyBBZGQgY2xhc3MgUmVzcG9uc2UKICBKU19OZXdDbGFzc0lEKCZtaW5uZXRfcmVzcG9uc2VfY2xhc3NfaWQpOwogIEpTX05ld0NsYXNzKEpTX0dldFJ1bnRpbWUoY3R4KSwgbWlubmV0X3Jlc3BvbnNlX2NsYXNzX2lkLCAmbWlubmV0X3Jlc3BvbnNlX2NsYXNzKTsKCiAgbWlubmV0X3Jlc3BvbnNlX3Byb3RvID0gSlNfTmV3T2JqZWN0KGN0eCk7CiAgSlNfU2V0UHJvcGVydHlGdW5jdGlvbkxpc3QoY3R4LCBtaW5uZXRfcmVzcG9uc2VfcHJvdG8sIG1pbm5ldF9yZXNwb25zZV9wcm90b19mdW5jcywgbWlubmV0X3Jlc3BvbnNlX3Byb3RvX2Z1bmNzX3NpemUpOwogIEpTX1NldENsYXNzUHJvdG8oY3R4LCBtaW5uZXRfcmVzcG9uc2VfY2xhc3NfaWQsIG1pbm5ldF9yZXNwb25zZV9wcm90byk7CgogIG1pbm5ldF9yZXNwb25zZV9jdG9yID0gSlNfTmV3Q0Z1bmN0aW9uMihjdHgsIG1pbm5ldF9yZXNwb25zZV9jb25zdHJ1Y3RvciwgIk1pbm5ldFJlc3BvbnNlIiwgMCwgSlNfQ0ZVTkNfY29uc3RydWN0b3IsIDApOwogIEpTX1NldENvbnN0cnVjdG9yKGN0eCwgbWlubmV0X3Jlc3BvbnNlX2N0b3IsIG1pbm5ldF9yZXNwb25zZV9wcm90byk7CgogIGlmKG0pCiAgICBKU19TZXRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiUmVzcG9uc2UiLCBtaW5uZXRfcmVzcG9uc2VfY3Rvcik7CgogIC8vIEFkZCBjbGFzcyBSZXF1ZXN0CiAgSlNfTmV3Q2xhc3NJRCgmbWlubmV0X3JlcXVlc3RfY2xhc3NfaWQpOwoKICBKU19OZXdDbGFzcyhKU19HZXRSdW50aW1lKGN0eCksIG1pbm5ldF9yZXF1ZXN0X2NsYXNzX2lkLCAmbWlubmV0X3JlcXVlc3RfY2xhc3MpOwogIG1pbm5ldF9yZXF1ZXN0X3Byb3RvID0gSlNfTmV3T2JqZWN0KGN0eCk7CiAgSlNfU2V0UHJvcGVydHlGdW5jdGlvbkxpc3QoY3R4LCBtaW5uZXRfcmVxdWVzdF9wcm90bywgbWlubmV0X3JlcXVlc3RfcHJvdG9fZnVuY3MsIG1pbm5ldF9yZXF1ZXN0X3Byb3RvX2Z1bmNzX3NpemUpOwogIEpTX1NldENsYXNzUHJvdG8oY3R4LCBtaW5uZXRfcmVxdWVzdF9jbGFzc19pZCwgbWlubmV0X3JlcXVlc3RfcHJvdG8pOwoKICBtaW5uZXRfcmVxdWVzdF9jdG9yID0gSlNfTmV3Q0Z1bmN0aW9uMihjdHgsIG1pbm5ldF9yZXF1ZXN0X2NvbnN0cnVjdG9yLCAiTWlubmV0UmVxdWVzdCIsIDAsIEpTX0NGVU5DX2NvbnN0cnVjdG9yLCAwKTsKICBKU19TZXRDb25zdHJ1Y3RvcihjdHgsIG1pbm5ldF9yZXF1ZXN0X2N0b3IsIG1pbm5ldF9yZXF1ZXN0X3Byb3RvKTsKCiAgaWYobSkKICAgIEpTX1NldE1vZHVsZUV4cG9ydChjdHgsIG0sICJSZXF1ZXN0IiwgbWlubmV0X3JlcXVlc3RfY3Rvcik7CgogIC8vIEFkZCBjbGFzcyBSaW5nYnVmZmVyCiAgSlNfTmV3Q2xhc3NJRCgmbWlubmV0X3JpbmdidWZmZXJfY2xhc3NfaWQpOwoKICBKU19OZXdDbGFzcyhKU19HZXRSdW50aW1lKGN0eCksIG1pbm5ldF9yaW5nYnVmZmVyX2NsYXNzX2lkLCAmbWlubmV0X3JpbmdidWZmZXJfY2xhc3MpOwogIG1pbm5ldF9yaW5nYnVmZmVyX3Byb3RvID0gSlNfTmV3T2JqZWN0KGN0eCk7CiAgSlNfU2V0UHJvcGVydHlGdW5jdGlvbkxpc3QoY3R4LCBtaW5uZXRfcmluZ2J1ZmZlcl9wcm90bywgbWlubmV0X3JpbmdidWZmZXJfcHJvdG9fZnVuY3MsIG1pbm5ldF9yaW5nYnVmZmVyX3Byb3RvX2Z1bmNzX3NpemUpOwogIEpTX1NldENsYXNzUHJvdG8oY3R4LCBtaW5uZXRfcmluZ2J1ZmZlcl9jbGFzc19pZCwgbWlubmV0X3JpbmdidWZmZXJfcHJvdG8pOwoKICBtaW5uZXRfcmluZ2J1ZmZlcl9jdG9yID0gSlNfTmV3Q0Z1bmN0aW9uMihjdHgsIG1pbm5ldF9yaW5nYnVmZmVyX2NvbnN0cnVjdG9yLCAiTWlubmV0UmluZ2J1ZmZlciIsIDAsIEpTX0NGVU5DX2NvbnN0cnVjdG9yLCAwKTsKICBKU19TZXRDb25zdHJ1Y3RvcihjdHgsIG1pbm5ldF9yaW5nYnVmZmVyX2N0b3IsIG1pbm5ldF9yaW5nYnVmZmVyX3Byb3RvKTsKCiAgaWYobSkKICAgIEpTX1NldE1vZHVsZUV4cG9ydChjdHgsIG0sICJSaW5nYnVmZmVyIiwgbWlubmV0X3JpbmdidWZmZXJfY3Rvcik7CgogIC8vIEFkZCBjbGFzcyBHZW5lcmF0b3IKICBKU19OZXdDbGFzc0lEKCZtaW5uZXRfZ2VuZXJhdG9yX2NsYXNzX2lkKTsKCiAgSlNfTmV3Q2xhc3MoSlNfR2V0UnVudGltZShjdHgpLCBtaW5uZXRfZ2VuZXJhdG9yX2NsYXNzX2lkLCAmbWlubmV0X2dlbmVyYXRvcl9jbGFzcyk7CiAgbWlubmV0X2dlbmVyYXRvcl9wcm90byA9IEpTX05ld09iamVjdChjdHgpOwogIC8vIEpTX1NldFByb3BlcnR5RnVuY3Rpb25MaXN0KGN0eCwgbWlubmV0X2dlbmVyYXRvcl9wcm90bywgbWlubmV0X2dlbmVyYXRvcl9wcm90b19mdW5jcywgbWlubmV0X2dlbmVyYXRvcl9wcm90b19mdW5jc19zaXplKTsKICBKU19TZXRDbGFzc1Byb3RvKGN0eCwgbWlubmV0X2dlbmVyYXRvcl9jbGFzc19pZCwgbWlubmV0X2dlbmVyYXRvcl9wcm90byk7CgogIG1pbm5ldF9nZW5lcmF0b3JfY3RvciA9IEpTX05ld0NGdW5jdGlvbjIoY3R4LCBtaW5uZXRfZ2VuZXJhdG9yX2NvbnN0cnVjdG9yLCAiTWlubmV0R2VuZXJhdG9yIiwgMCwgSlNfQ0ZVTkNfY29uc3RydWN0b3IsIDApOwogIEpTX1NldENvbnN0cnVjdG9yKGN0eCwgbWlubmV0X2dlbmVyYXRvcl9jdG9yLCBtaW5uZXRfZ2VuZXJhdG9yX3Byb3RvKTsKCiAgaWYobSkKICAgIEpTX1NldE1vZHVsZUV4cG9ydChjdHgsIG0sICJHZW5lcmF0b3IiLCBtaW5uZXRfZ2VuZXJhdG9yX2N0b3IpOwoKICAvLyBBZGQgY2xhc3MgVVJMCiAgbWlubmV0X3VybF9pbml0KGN0eCwgbSk7CgogIC8vIEFkZCBjbGFzcyBXZWJTb2NrZXQKICBKU19OZXdDbGFzc0lEKCZtaW5uZXRfd3NfY2xhc3NfaWQpOwogIEpTX05ld0NsYXNzKEpTX0dldFJ1bnRpbWUoY3R4KSwgbWlubmV0X3dzX2NsYXNzX2lkLCAmbWlubmV0X3dzX2NsYXNzKTsKICBtaW5uZXRfd3NfcHJvdG8gPSBKU19OZXdPYmplY3QoY3R4KTsKICBKU19TZXRQcm9wZXJ0eUZ1bmN0aW9uTGlzdChjdHgsIG1pbm5ldF93c19wcm90bywgbWlubmV0X3dzX3Byb3RvX2Z1bmNzLCBtaW5uZXRfd3NfcHJvdG9fZnVuY3Nfc2l6ZSk7CiAgSlNfU2V0UHJvcGVydHlGdW5jdGlvbkxpc3QoY3R4LCBtaW5uZXRfd3NfcHJvdG8sIG1pbm5ldF93c19wcm90b19kZWZzLCBtaW5uZXRfd3NfcHJvdG9fZGVmc19zaXplKTsKCiAgbWlubmV0X3dzX2N0b3IgPSBKU19OZXdDRnVuY3Rpb24yKGN0eCwgbWlubmV0X3dzX2NvbnN0cnVjdG9yLCAiTWlubmV0V2Vic29ja2V0IiwgMCwgSlNfQ0ZVTkNfY29uc3RydWN0b3IsIDApOwogIEpTX1NldFByb3BlcnR5RnVuY3Rpb25MaXN0KGN0eCwgbWlubmV0X3dzX2N0b3IsIG1pbm5ldF93c19zdGF0aWNfZnVuY3MsIG1pbm5ldF93c19zdGF0aWNfZnVuY3Nfc2l6ZSk7CgogIEpTX1NldENvbnN0cnVjdG9yKGN0eCwgbWlubmV0X3dzX2N0b3IsIG1pbm5ldF93c19wcm90byk7CgogIEpTX1NldFByb3BlcnR5RnVuY3Rpb25MaXN0KGN0eCwgbWlubmV0X3dzX2N0b3IsIG1pbm5ldF93c19wcm90b19kZWZzLCBtaW5uZXRfd3NfcHJvdG9fZGVmc19zaXplKTsKCiAgaWYobSkKICAgIEpTX1NldE1vZHVsZUV4cG9ydChjdHgsIG0sICJTb2NrZXQiLCBtaW5uZXRfd3NfY3Rvcik7CgogIC8vIEFkZCBjbGFzcyBGb3JtUGFyc2VyCiAgSlNfTmV3Q2xhc3NJRCgmbWlubmV0X2Zvcm1fcGFyc2VyX2NsYXNzX2lkKTsKCiAgSlNfTmV3Q2xhc3MoSlNfR2V0UnVudGltZShjdHgpLCBtaW5uZXRfZm9ybV9wYXJzZXJfY2xhc3NfaWQsICZtaW5uZXRfZm9ybV9wYXJzZXJfY2xhc3MpOwogIG1pbm5ldF9mb3JtX3BhcnNlcl9wcm90byA9IEpTX05ld09iamVjdChjdHgpOwogIEpTX1NldFByb3BlcnR5RnVuY3Rpb25MaXN0KGN0eCwgbWlubmV0X2Zvcm1fcGFyc2VyX3Byb3RvLCBtaW5uZXRfZm9ybV9wYXJzZXJfcHJvdG9fZnVuY3MsIG1pbm5ldF9mb3JtX3BhcnNlcl9wcm90b19mdW5jc19zaXplKTsKICBKU19TZXRDbGFzc1Byb3RvKGN0eCwgbWlubmV0X2Zvcm1fcGFyc2VyX2NsYXNzX2lkLCBtaW5uZXRfZm9ybV9wYXJzZXJfcHJvdG8pOwoKICBtaW5uZXRfZm9ybV9wYXJzZXJfY3RvciA9IEpTX05ld0NGdW5jdGlvbjIoY3R4LCBtaW5uZXRfZm9ybV9wYXJzZXJfY29uc3RydWN0b3IsICJNaW5uZXRGb3JtUGFyc2VyIiwgMCwgSlNfQ0ZVTkNfY29uc3RydWN0b3IsIDApOwogIEpTX1NldENvbnN0cnVjdG9yKGN0eCwgbWlubmV0X2Zvcm1fcGFyc2VyX2N0b3IsIG1pbm5ldF9mb3JtX3BhcnNlcl9wcm90byk7CgogIGlmKG0pCiAgICBKU19TZXRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiRm9ybVBhcnNlciIsIG1pbm5ldF9mb3JtX3BhcnNlcl9jdG9yKTsKCiAgLy8gQWRkIGNsYXNzIEhhc2gKICBKU19OZXdDbGFzc0lEKCZtaW5uZXRfaGFzaF9jbGFzc19pZCk7CgogIEpTX05ld0NsYXNzKEpTX0dldFJ1bnRpbWUoY3R4KSwgbWlubmV0X2hhc2hfY2xhc3NfaWQsICZtaW5uZXRfaGFzaF9jbGFzcyk7CiAgbWlubmV0X2hhc2hfcHJvdG8gPSBKU19OZXdPYmplY3QoY3R4KTsKICBKU19TZXRQcm9wZXJ0eUZ1bmN0aW9uTGlzdChjdHgsIG1pbm5ldF9oYXNoX3Byb3RvLCBtaW5uZXRfaGFzaF9wcm90b19mdW5jcywgbWlubmV0X2hhc2hfcHJvdG9fZnVuY3Nfc2l6ZSk7CiAgSlNfU2V0Q2xhc3NQcm90byhjdHgsIG1pbm5ldF9oYXNoX2NsYXNzX2lkLCBtaW5uZXRfaGFzaF9wcm90byk7CgogIG1pbm5ldF9oYXNoX2N0b3IgPSBKU19OZXdDRnVuY3Rpb24yKGN0eCwgbWlubmV0X2hhc2hfY29uc3RydWN0b3IsICJNaW5uZXRIYXNoIiwgMCwgSlNfQ0ZVTkNfY29uc3RydWN0b3IsIDApOwogIEpTX1NldENvbnN0cnVjdG9yKGN0eCwgbWlubmV0X2hhc2hfY3RvciwgbWlubmV0X2hhc2hfcHJvdG8pOwogIEpTX1NldFByb3BlcnR5RnVuY3Rpb25MaXN0KGN0eCwgbWlubmV0X2hhc2hfY3RvciwgbWlubmV0X2hhc2hfc3RhdGljX2Z1bmNzLCBtaW5uZXRfaGFzaF9zdGF0aWNfZnVuY3Nfc2l6ZSk7CgogIGlmKG0pCiAgICBKU19TZXRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiSGFzaCIsIG1pbm5ldF9oYXNoX2N0b3IpOwoKICB7CiAgICBKU1ZhbHVlIG1pbm5ldF9kZWZhdWx0ID0gSlNfTmV3T2JqZWN0KGN0eCk7CiAgICBKU19TZXRQcm9wZXJ0eUZ1bmN0aW9uTGlzdChjdHgsIG1pbm5ldF9kZWZhdWx0LCBtaW5uZXRfZnVuY3MsIGNvdW50b2YobWlubmV0X2Z1bmNzKSk7CiAgICBKU19TZXRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiZGVmYXVsdCIsIG1pbm5ldF9kZWZhdWx0KTsKICB9CgogIHJldHVybiAwOwp9CgpfX2F0dHJpYnV0ZV9fKCh2aXNpYmlsaXR5KCJkZWZhdWx0IikpKSBKU01vZHVsZURlZioKSlNfSU5JVF9NT0RVTEUoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIG1vZHVsZV9uYW1lKSB7CiAgSlNNb2R1bGVEZWYqIG07CiAgbSA9IEpTX05ld0NNb2R1bGUoY3R4LCBtb2R1bGVfbmFtZSwganNfbWlubmV0X2luaXQpOwogIGlmKCFtKQogICAgcmV0dXJuIE5VTEw7CiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIlJlc3BvbnNlIik7CiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIlJlcXVlc3QiKTsKICBKU19BZGRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiUmluZ2J1ZmZlciIpOwogIEpTX0FkZE1vZHVsZUV4cG9ydChjdHgsIG0sICJHZW5lcmF0b3IiKTsKICBKU19BZGRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiU29ja2V0Iik7CiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIkZvcm1QYXJzZXIiKTsKICBKU19BZGRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiSGFzaCIpOwogIEpTX0FkZE1vZHVsZUV4cG9ydChjdHgsIG0sICJVUkwiKTsKICBKU19BZGRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiZGVmYXVsdCIpOwogIEpTX0FkZE1vZHVsZUV4cG9ydExpc3QoY3R4LCBtLCBtaW5uZXRfZnVuY3MsIGNvdW50b2YobWlubmV0X2Z1bmNzKSk7CgogIG1pbm5ldF9sb2dfY3R4ID0gY3R4OwoKICBsd3Nfc2V0X2xvZ19sZXZlbChtaW5uZXRfbG9nX2xldmVsLCBtaW5uZXRfbG9nX2NhbGxiYWNrKTsKCiAgcmV0dXJuIG07Cn0KCnZvaWQKbWlubmV0X2RlYnVnKGNvbnN0IGNoYXIqIGZvcm1hdCwgLi4uKSB7CiAgaW50IG47CiAgdmFfbGlzdCBhcDsKICBjaGFyIGJ1ZlsxMDI0XTsKICB2YV9zdGFydChhcCwgZm9ybWF0KTsKICBuID0gdnNucHJpbnRmKGJ1Ziwgc2l6ZW9mKGJ1ZiksIGZvcm1hdCwgYXApOwogIHZhX2VuZChhcCk7CgogIGlmKG4gPCBzaXplb2YoYnVmKSkgewogICAgaWYoYnVmW24gLSAxXSAhPSAnXG4nKQogICAgICBidWZbbisrXSA9ICdcbic7CiAgfQoKICBmb3IoaW50IGkgPSAwOyBpIDwgbjsgaSsrKSB7CiAgICBpZihpICsgMSAhPSBuKSB7CiAgICAgIGlmKGJ1ZltpXSA9PSAnXG4nKSB7CiAgICAgICAgZnB1dHMoIlxcbiIsIHN0ZG91dCk7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgaWYoYnVmW2ldID09ICdccicpIHsKICAgICAgICBmcHV0cygiXFxyIiwgc3Rkb3V0KTsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgfQogICAgZnB1dGMoYnVmW2ldLCBzdGRvdXQpOwogIH0KICBmZmx1c2goc3Rkb3V0KTsKfQoKaW50Cm1pbm5ldF9wcm90b2NvbF9jb3VudChNaW5uZXRQcm90b2NvbHMqKiBwbGlzdCkgewogIGludCBpOwoKICBpZighKnBsaXN0KQogICAgcmV0dXJuIDA7CgogIGZvcihpID0gMDs7IGkrKykgewogICAgaWYoKCpwbGlzdClbaV0ubmFtZSA9PSBOVUxMKQogICAgICBicmVhazsKICB9CiAgcmV0dXJuIGk7Cn0KCmludAptaW5uZXRfcHJvdG9jb2xfYWRkKE1pbm5ldFByb3RvY29scyoqIHBsaXN0LCBzdHJ1Y3QgbHdzX3Byb3RvY29scyBwcm90b2NvbCkgewogIHNpemVfdCBwb3MgPSBtaW5uZXRfcHJvdG9jb2xfY291bnQocGxpc3QpOwoKICBpZighKCpwbGlzdCA9IHJlYWxsb2MoKnBsaXN0LCAocG9zICsgMSkgKiBzaXplb2Yoc3RydWN0IGx3c19wcm90b2NvbHMpKSkpCiAgICByZXR1cm4gLTE7CgogIG1lbWNweSgmKCpwbGlzdClbcG9zXSwgJnByb3RvY29sLCBzaXplb2Yoc3RydWN0IGx3c19wcm90b2NvbHMpKTsKICBtZW1zZXQoJigqcGxpc3QpW3BvcyArIDFdLCAwLCBzaXplb2Yoc3RydWN0IGx3c19wcm90b2NvbHMpKTsKCiAgcmV0dXJuIHBvczsKfQoAAAAAAAAAABVBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARw4AAAAAAABODgAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAARw4AAAAAAABODgAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAARw4AAAAAAABODgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/ws.c",
			"settings":
			{
				"buffer_size": 3023,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"",
					null,
					"AQAAAIIJAAAAAAAAkgkAAAAAAAAPAAAASlNfTmV3Q0Nsb3N1cmUo",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADKCwAAI2luY2x1ZGUgIndzLmgiCiNpbmNsdWRlICJidWZmZXIuaCIKI2luY2x1ZGUgImpzdXRpbHMuaCIKI2luY2x1ZGUgIm9wYXF1ZS5oIgojaW5jbHVkZSAic2Vzc2lvbi5oIgojaW5jbHVkZSAicmluZ2J1ZmZlci5oIgojaW5jbHVkZSA8c3RyaW5ncy5oPgojaW5jbHVkZSA8YXNzZXJ0Lmg+CiNpbmNsdWRlIDxsaWJ3ZWJzb2NrZXRzLmg+CgpzdHJ1Y3Qgc29ja2V0Kgp3c19uZXcoc3RydWN0IGx3cyogd3NpLCBKU0NvbnRleHQqIGN0eCkgewogIHN0cnVjdCBzb2NrZXQqIHdzOwogIHN0cnVjdCB3c2lfb3BhcXVlX3VzZXJfZGF0YSogb3BhcXVlOwoKICBpZighKHdzID0ganNfbWFsbG9jeihjdHgsIHNpemVvZihzdHJ1Y3Qgc29ja2V0KSkpKQogICAgcmV0dXJuIDA7CgogIHdzLT5sd3NpID0gd3NpOwogIHdzLT5yZWZfY291bnQgPSAyOwogIC8vIHJpbmdidWZmZXJfaW5pdDIoJndzLT5zZW5kcSwgc2l6ZW9mKEJ5dGVCbG9jayksIDY1NTM2ICogMik7CgogIGlmKChvcGFxdWUgPSBsd3Nfb3BhcXVlKHdzaSwgY3R4KSkpIHsKICAgIG9wYXF1ZS0+d3MgPSB3czsKICAgIG9wYXF1ZS0+c3RhdHVzID0gMDsKICB9CgogIHJldHVybiB3czsKfQoKdm9pZAp3c19jbGVhcl9ydChzdHJ1Y3Qgc29ja2V0KiB3cywgSlNSdW50aW1lKiBydCkgewogIHN0cnVjdCBsd3MqIHdzaSA9IHdzLT5sd3NpOwoKICB3cy0+bHdzaSA9IDA7CgogIGlmKHdzaSkgewogICAgc3RydWN0IHdzaV9vcGFxdWVfdXNlcl9kYXRhKiBvcGFxdWU7CgogICAgaWYoKG9wYXF1ZSA9IGx3c19nZXRfb3BhcXVlX3VzZXJfZGF0YSh3c2kpKSkgewogICAgICBsd3Nfc2V0X29wYXF1ZV91c2VyX2RhdGEod3NpLCAwKTsKICAgICAgb3BhcXVlX2ZyZWVfcnQob3BhcXVlLCBydCk7CgogICAgICAvKiAgaWYoc3RhdHVzIDwgQ0xPU0lORykKICAgICAgICAgIGx3c19jbG9zZV9mcmVlX3dzaSh3c2ksIExXU19DTE9TRV9TVEFUVVNfTk9TVEFUVVMsIF9fZnVuY19fKTsqLwogICAgfQogIH0KCiAgLy8gcmluZ2J1ZmZlcl96ZXJvKCZ3cy0+c2VuZHEpOwp9Cgp2b2lkCndzX2NsZWFyKHN0cnVjdCBzb2NrZXQqIHdzLCBKU0NvbnRleHQqIGN0eCkgewogIHdzX2NsZWFyX3J0KHdzLCBKU19HZXRSdW50aW1lKGN0eCkpOwp9Cgp2b2lkCndzX2ZyZWVfcnQoc3RydWN0IHNvY2tldCogd3MsIEpTUnVudGltZSogcnQpIHsKICBpZigtLXdzLT5yZWZfY291bnQgPT0gMCkgewogICAgd3NfY2xlYXJfcnQod3MsIHJ0KTsKICAgIGpzX2ZyZWVfcnQocnQsIHdzKTsKICB9Cn0KCnZvaWQKd3NfZnJlZShzdHJ1Y3Qgc29ja2V0KiB3cywgSlNDb250ZXh0KiBjdHgpIHsKICBpZigtLXdzLT5yZWZfY291bnQgPT0gMCkgewogICAgd3NfY2xlYXIod3MsIGN0eCk7CiAgICBqc19mcmVlKGN0eCwgd3MpOwogIH0KfQoKc3RydWN0IHNvY2tldCoKd3NfZHVwKHN0cnVjdCBzb2NrZXQqIHdzKSB7CiAgKyt3cy0+cmVmX2NvdW50OwogIHJldHVybiB3czsKfQoKaW50CndzX3dyaXRhYmxlKHN0cnVjdCBzb2NrZXQqIHdzLCBCT09MIGJpbmFyeSwgSlNDb250ZXh0KiBjdHgpIHsKICBzdHJ1Y3Qgd3NpX29wYXF1ZV91c2VyX2RhdGEqIG9wYXF1ZTsKICBpbnQgcmV0ID0gMDsKCiAgaWYoKG9wYXF1ZSA9IGx3c19nZXRfb3BhcXVlX3VzZXJfZGF0YSh3cy0+bHdzaSkpKSB7CiAgICBzdHJ1Y3Qgc2Vzc2lvbl9kYXRhKiBzZXNzaW9uID0gb3BhcXVlLT5zZXNzOwoKICAgIHJldCA9IHNlc3Npb25fd3JpdGFibGUoc2Vzc2lvbiwgYmluYXJ5LCBjdHgpOwogIH0KICByZXR1cm4gcmV0Owp9Cgp0eXBlZGVmIHN0cnVjdCB7CiAgSlNDb250ZXh0KiBjdHg7CiAgc3RydWN0IHNvY2tldCogd3M7Cn0gV1NXYW50V3JpdGU7CgpzdGF0aWMgdm9pZAp3c193YW50X3dyaXRlX2ZyZWUodm9pZCogcHRyKSB7CiAgV1NXYW50V3JpdGUqIGNsb3N1cmUgPSBwdHI7CiAgSlNDb250ZXh0KiBjdHggPSBjbG9zdXJlLT5jdHg7CgogIHdzX2ZyZWUoY2xvc3VyZS0+d3MsIGN0eCk7CiAganNfZnJlZShjdHgsIGNsb3N1cmUpOwp9OwoKc3RhdGljIEpTVmFsdWUKd2FudF93cml0ZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljLCB2b2lkKiBwdHIpIHsKICBXU1dhbnRXcml0ZSogY2xvc3VyZSA9IHB0cjsKCiAgbHdzX2NhbGxiYWNrX29uX3dyaXRhYmxlKGNsb3N1cmUtPndzLT5sd3NpKTsKICByZXR1cm4gSlNfVU5ERUZJTkVEOwp9CgpKU1ZhbHVlCndzX3dhbnRfd3JpdGUoc3RydWN0IHNvY2tldCogd3MsIEpTQ29udGV4dCogY3R4KSB7CiAgV1NXYW50V3JpdGUqIGg7CgogIGlmKCEoaCA9IGpzX21hbGxvY3ooY3R4LCBzaXplb2YoV1NXYW50V3JpdGUpKSkpCiAgICByZXR1cm4gSlNfVGhyb3dPdXRPZk1lbW9yeShjdHgpOwoKICAqaCA9IChXU1dhbnRXcml0ZSl7Y3R4LCB3c19kdXAod3MpfTsKCiAgcmV0dXJuIGpzX2NjbG9zdXJlX25ldyhjdHgsIHdhbnRfd3JpdGUsIDAsIDAsIGgsIHdzX3dhbnRfd3JpdGVfZnJlZSk7Cn0KClF1ZXVlSXRlbSoKd3NfZW5xdWV1ZShzdHJ1Y3Qgc29ja2V0KiB3cywgQnl0ZUJsb2NrIGNodW5rKSB7CiAgc3RydWN0IHdzaV9vcGFxdWVfdXNlcl9kYXRhKiBvcGFxdWU7CiAgUXVldWVJdGVtKiBpdGVtID0gMDsKCiAgaWYoKG9wYXF1ZSA9IGx3c19nZXRfb3BhcXVlX3VzZXJfZGF0YSh3cy0+bHdzaSkpKSB7CiAgICBzdHJ1Y3Qgc2Vzc2lvbl9kYXRhKiBzZXNzaW9uID0gb3BhcXVlLT5zZXNzOwoKICAgIGlmKChpdGVtID0gcXVldWVfYWRkKCZzZXNzaW9uLT5zZW5kcSwgY2h1bmspKSkgewoKICAgICAgbHdzX2NhbGxiYWNrX29uX3dyaXRhYmxlKHdzLT5sd3NpKTsKICAgIH0KICB9CgogIHJldHVybiBpdGVtOwp9CgpRdWV1ZUl0ZW0qCndzX3NlbmQoc3RydWN0IHNvY2tldCogd3MsIGNvbnN0IHZvaWQqIGRhdGEsIHNpemVfdCBzaXplLCBKU0NvbnRleHQqIGN0eCkgewogIEJ5dGVCbG9jayBjaHVuayA9IGJsb2NrX2NvcHkoZGF0YSwgc2l6ZSk7CgogIHJldHVybiB3c19lbnF1ZXVlKHdzLCBjaHVuayk7Cn0KAAAAAAAAAADKCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADKCwAAI2luY2x1ZGUgIndzLmgiCiNpbmNsdWRlICJidWZmZXIuaCIKI2luY2x1ZGUgImpzdXRpbHMuaCIKI2luY2x1ZGUgIm9wYXF1ZS5oIgojaW5jbHVkZSAic2Vzc2lvbi5oIgojaW5jbHVkZSAicmluZ2J1ZmZlci5oIgojaW5jbHVkZSA8c3RyaW5ncy5oPgojaW5jbHVkZSA8YXNzZXJ0Lmg+CiNpbmNsdWRlIDxsaWJ3ZWJzb2NrZXRzLmg+CgpzdHJ1Y3Qgc29ja2V0Kgp3c19uZXcoc3RydWN0IGx3cyogd3NpLCBKU0NvbnRleHQqIGN0eCkgewogIHN0cnVjdCBzb2NrZXQqIHdzOwogIHN0cnVjdCB3c2lfb3BhcXVlX3VzZXJfZGF0YSogb3BhcXVlOwoKICBpZighKHdzID0ganNfbWFsbG9jeihjdHgsIHNpemVvZihzdHJ1Y3Qgc29ja2V0KSkpKQogICAgcmV0dXJuIDA7CgogIHdzLT5sd3NpID0gd3NpOwogIHdzLT5yZWZfY291bnQgPSAyOwogIC8vIHJpbmdidWZmZXJfaW5pdDIoJndzLT5zZW5kcSwgc2l6ZW9mKEJ5dGVCbG9jayksIDY1NTM2ICogMik7CgogIGlmKChvcGFxdWUgPSBsd3Nfb3BhcXVlKHdzaSwgY3R4KSkpIHsKICAgIG9wYXF1ZS0+d3MgPSB3czsKICAgIG9wYXF1ZS0+c3RhdHVzID0gMDsKICB9CgogIHJldHVybiB3czsKfQoKdm9pZAp3c19jbGVhcl9ydChzdHJ1Y3Qgc29ja2V0KiB3cywgSlNSdW50aW1lKiBydCkgewogIHN0cnVjdCBsd3MqIHdzaSA9IHdzLT5sd3NpOwoKICB3cy0+bHdzaSA9IDA7CgogIGlmKHdzaSkgewogICAgc3RydWN0IHdzaV9vcGFxdWVfdXNlcl9kYXRhKiBvcGFxdWU7CgogICAgaWYoKG9wYXF1ZSA9IGx3c19nZXRfb3BhcXVlX3VzZXJfZGF0YSh3c2kpKSkgewogICAgICBsd3Nfc2V0X29wYXF1ZV91c2VyX2RhdGEod3NpLCAwKTsKICAgICAgb3BhcXVlX2ZyZWVfcnQob3BhcXVlLCBydCk7CgogICAgICAvKiAgaWYoc3RhdHVzIDwgQ0xPU0lORykKICAgICAgICAgIGx3c19jbG9zZV9mcmVlX3dzaSh3c2ksIExXU19DTE9TRV9TVEFUVVNfTk9TVEFUVVMsIF9fZnVuY19fKTsqLwogICAgfQogIH0KCiAgLy8gcmluZ2J1ZmZlcl96ZXJvKCZ3cy0+c2VuZHEpOwp9Cgp2b2lkCndzX2NsZWFyKHN0cnVjdCBzb2NrZXQqIHdzLCBKU0NvbnRleHQqIGN0eCkgewogIHdzX2NsZWFyX3J0KHdzLCBKU19HZXRSdW50aW1lKGN0eCkpOwp9Cgp2b2lkCndzX2ZyZWVfcnQoc3RydWN0IHNvY2tldCogd3MsIEpTUnVudGltZSogcnQpIHsKICBpZigtLXdzLT5yZWZfY291bnQgPT0gMCkgewogICAgd3NfY2xlYXJfcnQod3MsIHJ0KTsKICAgIGpzX2ZyZWVfcnQocnQsIHdzKTsKICB9Cn0KCnZvaWQKd3NfZnJlZShzdHJ1Y3Qgc29ja2V0KiB3cywgSlNDb250ZXh0KiBjdHgpIHsKICBpZigtLXdzLT5yZWZfY291bnQgPT0gMCkgewogICAgd3NfY2xlYXIod3MsIGN0eCk7CiAgICBqc19mcmVlKGN0eCwgd3MpOwogIH0KfQoKc3RydWN0IHNvY2tldCoKd3NfZHVwKHN0cnVjdCBzb2NrZXQqIHdzKSB7CiAgKyt3cy0+cmVmX2NvdW50OwogIHJldHVybiB3czsKfQoKaW50CndzX3dyaXRhYmxlKHN0cnVjdCBzb2NrZXQqIHdzLCBCT09MIGJpbmFyeSwgSlNDb250ZXh0KiBjdHgpIHsKICBzdHJ1Y3Qgd3NpX29wYXF1ZV91c2VyX2RhdGEqIG9wYXF1ZTsKICBpbnQgcmV0ID0gMDsKCiAgaWYoKG9wYXF1ZSA9IGx3c19nZXRfb3BhcXVlX3VzZXJfZGF0YSh3cy0+bHdzaSkpKSB7CiAgICBzdHJ1Y3Qgc2Vzc2lvbl9kYXRhKiBzZXNzaW9uID0gb3BhcXVlLT5zZXNzOwoKICAgIHJldCA9IHNlc3Npb25fd3JpdGFibGUoc2Vzc2lvbiwgYmluYXJ5LCBjdHgpOwogIH0KICByZXR1cm4gcmV0Owp9Cgp0eXBlZGVmIHN0cnVjdCB7CiAgSlNDb250ZXh0KiBjdHg7CiAgc3RydWN0IHNvY2tldCogd3M7Cn0gV1NXYW50V3JpdGU7CgpzdGF0aWMgdm9pZAp3c193YW50X3dyaXRlX2ZyZWUodm9pZCogcHRyKSB7CiAgV1NXYW50V3JpdGUqIGNsb3N1cmUgPSBwdHI7CiAgSlNDb250ZXh0KiBjdHggPSBjbG9zdXJlLT5jdHg7CgogIHdzX2ZyZWUoY2xvc3VyZS0+d3MsIGN0eCk7CiAganNfZnJlZShjdHgsIGNsb3N1cmUpOwp9OwoKc3RhdGljIEpTVmFsdWUKd2FudF93cml0ZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljLCB2b2lkKiBwdHIpIHsKICBXU1dhbnRXcml0ZSogY2xvc3VyZSA9IHB0cjsKCiAgbHdzX2NhbGxiYWNrX29uX3dyaXRhYmxlKGNsb3N1cmUtPndzLT5sd3NpKTsKICByZXR1cm4gSlNfVU5ERUZJTkVEOwp9CgpKU1ZhbHVlCndzX3dhbnRfd3JpdGUoc3RydWN0IHNvY2tldCogd3MsIEpTQ29udGV4dCogY3R4KSB7CiAgV1NXYW50V3JpdGUqIGg7CgogIGlmKCEoaCA9IGpzX21hbGxvY3ooY3R4LCBzaXplb2YoV1NXYW50V3JpdGUpKSkpCiAgICByZXR1cm4gSlNfVGhyb3dPdXRPZk1lbW9yeShjdHgpOwoKICAqaCA9IChXU1dhbnRXcml0ZSl7Y3R4LCB3c19kdXAod3MpfTsKCiAgcmV0dXJuIGpzX2NjbG9zdXJlX25ldyhjdHgsIHdhbnRfd3JpdGUsIDAsIDAsIGgsIHdzX3dhbnRfd3JpdGVfZnJlZSk7Cn0KClF1ZXVlSXRlbSoKd3NfZW5xdWV1ZShzdHJ1Y3Qgc29ja2V0KiB3cywgQnl0ZUJsb2NrIGNodW5rKSB7CiAgc3RydWN0IHdzaV9vcGFxdWVfdXNlcl9kYXRhKiBvcGFxdWU7CiAgUXVldWVJdGVtKiBpdGVtID0gMDsKCiAgaWYoKG9wYXF1ZSA9IGx3c19nZXRfb3BhcXVlX3VzZXJfZGF0YSh3cy0+bHdzaSkpKSB7CiAgICBzdHJ1Y3Qgc2Vzc2lvbl9kYXRhKiBzZXNzaW9uID0gb3BhcXVlLT5zZXNzOwoKICAgIGlmKChpdGVtID0gcXVldWVfYWRkKCZzZXNzaW9uLT5zZW5kcSwgY2h1bmspKSkgewoKICAgICAgbHdzX2NhbGxiYWNrX29uX3dyaXRhYmxlKHdzLT5sd3NpKTsKICAgIH0KICB9CgogIHJldHVybiBpdGVtOwp9CgpRdWV1ZUl0ZW0qCndzX3NlbmQoc3RydWN0IHNvY2tldCogd3MsIGNvbnN0IHZvaWQqIGRhdGEsIHNpemVfdCBzaXplLCBKU0NvbnRleHQqIGN0eCkgewogIEJ5dGVCbG9jayBjaHVuayA9IGJsb2NrX2NvcHkoZGF0YSwgc2l6ZSk7CgogIHJldHVybiB3c19lbnF1ZXVlKHdzLCBjaHVuayk7Cn0KAAAAAAAAAADPCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADPCwAAI2luY2x1ZGUgIndzLmgiCiNpbmNsdWRlICJidWZmZXIuaCIKI2luY2x1ZGUgImpzdXRpbHMuaCIKI2luY2x1ZGUgIm9wYXF1ZS5oIgojaW5jbHVkZSAic2Vzc2lvbi5oIgojaW5jbHVkZSAicmluZ2J1ZmZlci5oIgojaW5jbHVkZSA8c3RyaW5ncy5oPgojaW5jbHVkZSA8YXNzZXJ0Lmg+CiNpbmNsdWRlIDxsaWJ3ZWJzb2NrZXRzLmg+CgpzdHJ1Y3Qgc29ja2V0Kgp3c19uZXcoc3RydWN0IGx3cyogd3NpLCBKU0NvbnRleHQqIGN0eCkgewogIHN0cnVjdCBzb2NrZXQqIHdzOwogIHN0cnVjdCB3c2lfb3BhcXVlX3VzZXJfZGF0YSogb3BhcXVlOwoKICBpZighKHdzID0ganNfbWFsbG9jeihjdHgsIHNpemVvZihzdHJ1Y3Qgc29ja2V0KSkpKQogICAgcmV0dXJuIDA7CgogIHdzLT5sd3NpID0gd3NpOwogIHdzLT5yZWZfY291bnQgPSAyOwogIC8vIHJpbmdidWZmZXJfaW5pdDIoJndzLT5zZW5kcSwgc2l6ZW9mKEJ5dGVCbG9jayksIDY1NTM2ICogMik7CgogIGlmKChvcGFxdWUgPSBsd3Nfb3BhcXVlKHdzaSwgY3R4KSkpIHsKICAgIG9wYXF1ZS0+d3MgPSB3czsKICAgIG9wYXF1ZS0+c3RhdHVzID0gMDsKICB9CgogIHJldHVybiB3czsKfQoKdm9pZAp3c19jbGVhcl9ydChzdHJ1Y3Qgc29ja2V0KiB3cywgSlNSdW50aW1lKiBydCkgewogIHN0cnVjdCBsd3MqIHdzaSA9IHdzLT5sd3NpOwoKICB3cy0+bHdzaSA9IDA7CgogIGlmKHdzaSkgewogICAgc3RydWN0IHdzaV9vcGFxdWVfdXNlcl9kYXRhKiBvcGFxdWU7CgogICAgaWYoKG9wYXF1ZSA9IGx3c19nZXRfb3BhcXVlX3VzZXJfZGF0YSh3c2kpKSkgewogICAgICBsd3Nfc2V0X29wYXF1ZV91c2VyX2RhdGEod3NpLCAwKTsKICAgICAgb3BhcXVlX2ZyZWVfcnQob3BhcXVlLCBydCk7CgogICAgICAvKiAgaWYoc3RhdHVzIDwgQ0xPU0lORykKICAgICAgICAgIGx3c19jbG9zZV9mcmVlX3dzaSh3c2ksIExXU19DTE9TRV9TVEFUVVNfTk9TVEFUVVMsIF9fZnVuY19fKTsqLwogICAgfQogIH0KCiAgLy8gcmluZ2J1ZmZlcl96ZXJvKCZ3cy0+c2VuZHEpOwp9Cgp2b2lkCndzX2NsZWFyKHN0cnVjdCBzb2NrZXQqIHdzLCBKU0NvbnRleHQqIGN0eCkgewogIHdzX2NsZWFyX3J0KHdzLCBKU19HZXRSdW50aW1lKGN0eCkpOwp9Cgp2b2lkCndzX2ZyZWVfcnQoc3RydWN0IHNvY2tldCogd3MsIEpTUnVudGltZSogcnQpIHsKICBpZigtLXdzLT5yZWZfY291bnQgPT0gMCkgewogICAgd3NfY2xlYXJfcnQod3MsIHJ0KTsKICAgIGpzX2ZyZWVfcnQocnQsIHdzKTsKICB9Cn0KCnZvaWQKd3NfZnJlZShzdHJ1Y3Qgc29ja2V0KiB3cywgSlNDb250ZXh0KiBjdHgpIHsKICBpZigtLXdzLT5yZWZfY291bnQgPT0gMCkgewogICAgd3NfY2xlYXIod3MsIGN0eCk7CiAgICBqc19mcmVlKGN0eCwgd3MpOwogIH0KfQoKc3RydWN0IHNvY2tldCoKd3NfZHVwKHN0cnVjdCBzb2NrZXQqIHdzKSB7CiAgKyt3cy0+cmVmX2NvdW50OwogIHJldHVybiB3czsKfQoKaW50CndzX3dyaXRhYmxlKHN0cnVjdCBzb2NrZXQqIHdzLCBCT09MIGJpbmFyeSwgSlNDb250ZXh0KiBjdHgpIHsKICBzdHJ1Y3Qgd3NpX29wYXF1ZV91c2VyX2RhdGEqIG9wYXF1ZTsKICBpbnQgcmV0ID0gMDsKCiAgaWYoKG9wYXF1ZSA9IGx3c19nZXRfb3BhcXVlX3VzZXJfZGF0YSh3cy0+bHdzaSkpKSB7CiAgICBzdHJ1Y3Qgc2Vzc2lvbl9kYXRhKiBzZXNzaW9uID0gb3BhcXVlLT5zZXNzOwoKICAgIHJldCA9IHNlc3Npb25fd3JpdGFibGUoc2Vzc2lvbiwgYmluYXJ5LCBjdHgpOwogIH0KICByZXR1cm4gcmV0Owp9Cgp0eXBlZGVmIHN0cnVjdCB7CiAgSlNDb250ZXh0KiBjdHg7CiAgc3RydWN0IHNvY2tldCogd3M7Cn0gV1NXYW50V3JpdGU7CgpzdGF0aWMgdm9pZAp3c193YW50X3dyaXRlX2ZyZWUodm9pZCogcHRyKSB7CiAgV1NXYW50V3JpdGUqIGNsb3N1cmUgPSBwdHI7CiAgSlNDb250ZXh0KiBjdHggPSBjbG9zdXJlLT5jdHg7CgogIHdzX2ZyZWUoY2xvc3VyZS0+d3MsIGN0eCk7CiAganNfZnJlZShjdHgsIGNsb3N1cmUpOwp9OwoKc3RhdGljIEpTVmFsdWUKd2FudF93cml0ZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljLCB2b2lkKiBwdHIpIHsKICBXU1dhbnRXcml0ZSogY2xvc3VyZSA9IHB0cjsKCiAgbHdzX2NhbGxiYWNrX29uX3dyaXRhYmxlKGNsb3N1cmUtPndzLT5sd3NpKTsKICByZXR1cm4gSlNfVU5ERUZJTkVEOwp9CgpKU1ZhbHVlCndzX3dhbnRfd3JpdGUoc3RydWN0IHNvY2tldCogd3MsIEpTQ29udGV4dCogY3R4KSB7CiAgV1NXYW50V3JpdGUqIGg7CgogIGlmKCEoaCA9IGpzX21hbGxvY3ooY3R4LCBzaXplb2YoV1NXYW50V3JpdGUpKSkpCiAgICByZXR1cm4gSlNfVGhyb3dPdXRPZk1lbW9yeShjdHgpOwoKICAqaCA9IChXU1dhbnRXcml0ZSl7Y3R4LCB3c19kdXAod3MpfTsKCiAgcmV0dXJuIGpzX2Z1bmN0aW9uX2NjbG9zdXJlKGN0eCwgd2FudF93cml0ZSwgMCwgMCwgaCwgd3Nfd2FudF93cml0ZV9mcmVlKTsKfQoKUXVldWVJdGVtKgp3c19lbnF1ZXVlKHN0cnVjdCBzb2NrZXQqIHdzLCBCeXRlQmxvY2sgY2h1bmspIHsKICBzdHJ1Y3Qgd3NpX29wYXF1ZV91c2VyX2RhdGEqIG9wYXF1ZTsKICBRdWV1ZUl0ZW0qIGl0ZW0gPSAwOwoKICBpZigob3BhcXVlID0gbHdzX2dldF9vcGFxdWVfdXNlcl9kYXRhKHdzLT5sd3NpKSkpIHsKICAgIHN0cnVjdCBzZXNzaW9uX2RhdGEqIHNlc3Npb24gPSBvcGFxdWUtPnNlc3M7CgogICAgaWYoKGl0ZW0gPSBxdWV1ZV9hZGQoJnNlc3Npb24tPnNlbmRxLCBjaHVuaykpKSB7CgogICAgICBsd3NfY2FsbGJhY2tfb25fd3JpdGFibGUod3MtPmx3c2kpOwogICAgfQogIH0KCiAgcmV0dXJuIGl0ZW07Cn0KClF1ZXVlSXRlbSoKd3Nfc2VuZChzdHJ1Y3Qgc29ja2V0KiB3cywgY29uc3Qgdm9pZCogZGF0YSwgc2l6ZV90IHNpemUsIEpTQ29udGV4dCogY3R4KSB7CiAgQnl0ZUJsb2NrIGNodW5rID0gYmxvY2tfY29weShkYXRhLCBzaXplKTsKCiAgcmV0dXJuIHdzX2VucXVldWUod3MsIGNodW5rKTsKfQoAAAAAAAAAAM8LAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADPCwAAI2luY2x1ZGUgIndzLmgiCiNpbmNsdWRlICJidWZmZXIuaCIKI2luY2x1ZGUgImpzdXRpbHMuaCIKI2luY2x1ZGUgIm9wYXF1ZS5oIgojaW5jbHVkZSAic2Vzc2lvbi5oIgojaW5jbHVkZSAicmluZ2J1ZmZlci5oIgojaW5jbHVkZSA8c3RyaW5ncy5oPgojaW5jbHVkZSA8YXNzZXJ0Lmg+CiNpbmNsdWRlIDxsaWJ3ZWJzb2NrZXRzLmg+CgpzdHJ1Y3Qgc29ja2V0Kgp3c19uZXcoc3RydWN0IGx3cyogd3NpLCBKU0NvbnRleHQqIGN0eCkgewogIHN0cnVjdCBzb2NrZXQqIHdzOwogIHN0cnVjdCB3c2lfb3BhcXVlX3VzZXJfZGF0YSogb3BhcXVlOwoKICBpZighKHdzID0ganNfbWFsbG9jeihjdHgsIHNpemVvZihzdHJ1Y3Qgc29ja2V0KSkpKQogICAgcmV0dXJuIDA7CgogIHdzLT5sd3NpID0gd3NpOwogIHdzLT5yZWZfY291bnQgPSAyOwogIC8vIHJpbmdidWZmZXJfaW5pdDIoJndzLT5zZW5kcSwgc2l6ZW9mKEJ5dGVCbG9jayksIDY1NTM2ICogMik7CgogIGlmKChvcGFxdWUgPSBsd3Nfb3BhcXVlKHdzaSwgY3R4KSkpIHsKICAgIG9wYXF1ZS0+d3MgPSB3czsKICAgIG9wYXF1ZS0+c3RhdHVzID0gMDsKICB9CgogIHJldHVybiB3czsKfQoKdm9pZAp3c19jbGVhcl9ydChzdHJ1Y3Qgc29ja2V0KiB3cywgSlNSdW50aW1lKiBydCkgewogIHN0cnVjdCBsd3MqIHdzaSA9IHdzLT5sd3NpOwoKICB3cy0+bHdzaSA9IDA7CgogIGlmKHdzaSkgewogICAgc3RydWN0IHdzaV9vcGFxdWVfdXNlcl9kYXRhKiBvcGFxdWU7CgogICAgaWYoKG9wYXF1ZSA9IGx3c19nZXRfb3BhcXVlX3VzZXJfZGF0YSh3c2kpKSkgewogICAgICBsd3Nfc2V0X29wYXF1ZV91c2VyX2RhdGEod3NpLCAwKTsKICAgICAgb3BhcXVlX2ZyZWVfcnQob3BhcXVlLCBydCk7CgogICAgICAvKiAgaWYoc3RhdHVzIDwgQ0xPU0lORykKICAgICAgICAgIGx3c19jbG9zZV9mcmVlX3dzaSh3c2ksIExXU19DTE9TRV9TVEFUVVNfTk9TVEFUVVMsIF9fZnVuY19fKTsqLwogICAgfQogIH0KCiAgLy8gcmluZ2J1ZmZlcl96ZXJvKCZ3cy0+c2VuZHEpOwp9Cgp2b2lkCndzX2NsZWFyKHN0cnVjdCBzb2NrZXQqIHdzLCBKU0NvbnRleHQqIGN0eCkgewogIHdzX2NsZWFyX3J0KHdzLCBKU19HZXRSdW50aW1lKGN0eCkpOwp9Cgp2b2lkCndzX2ZyZWVfcnQoc3RydWN0IHNvY2tldCogd3MsIEpTUnVudGltZSogcnQpIHsKICBpZigtLXdzLT5yZWZfY291bnQgPT0gMCkgewogICAgd3NfY2xlYXJfcnQod3MsIHJ0KTsKICAgIGpzX2ZyZWVfcnQocnQsIHdzKTsKICB9Cn0KCnZvaWQKd3NfZnJlZShzdHJ1Y3Qgc29ja2V0KiB3cywgSlNDb250ZXh0KiBjdHgpIHsKICBpZigtLXdzLT5yZWZfY291bnQgPT0gMCkgewogICAgd3NfY2xlYXIod3MsIGN0eCk7CiAgICBqc19mcmVlKGN0eCwgd3MpOwogIH0KfQoKc3RydWN0IHNvY2tldCoKd3NfZHVwKHN0cnVjdCBzb2NrZXQqIHdzKSB7CiAgKyt3cy0+cmVmX2NvdW50OwogIHJldHVybiB3czsKfQoKaW50CndzX3dyaXRhYmxlKHN0cnVjdCBzb2NrZXQqIHdzLCBCT09MIGJpbmFyeSwgSlNDb250ZXh0KiBjdHgpIHsKICBzdHJ1Y3Qgd3NpX29wYXF1ZV91c2VyX2RhdGEqIG9wYXF1ZTsKICBpbnQgcmV0ID0gMDsKCiAgaWYoKG9wYXF1ZSA9IGx3c19nZXRfb3BhcXVlX3VzZXJfZGF0YSh3cy0+bHdzaSkpKSB7CiAgICBzdHJ1Y3Qgc2Vzc2lvbl9kYXRhKiBzZXNzaW9uID0gb3BhcXVlLT5zZXNzOwoKICAgIHJldCA9IHNlc3Npb25fd3JpdGFibGUoc2Vzc2lvbiwgYmluYXJ5LCBjdHgpOwogIH0KICByZXR1cm4gcmV0Owp9Cgp0eXBlZGVmIHN0cnVjdCB7CiAgSlNDb250ZXh0KiBjdHg7CiAgc3RydWN0IHNvY2tldCogd3M7Cn0gV1NXYW50V3JpdGU7CgpzdGF0aWMgdm9pZAp3c193YW50X3dyaXRlX2ZyZWUodm9pZCogcHRyKSB7CiAgV1NXYW50V3JpdGUqIGNsb3N1cmUgPSBwdHI7CiAgSlNDb250ZXh0KiBjdHggPSBjbG9zdXJlLT5jdHg7CgogIHdzX2ZyZWUoY2xvc3VyZS0+d3MsIGN0eCk7CiAganNfZnJlZShjdHgsIGNsb3N1cmUpOwp9OwoKc3RhdGljIEpTVmFsdWUKd2FudF93cml0ZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljLCB2b2lkKiBwdHIpIHsKICBXU1dhbnRXcml0ZSogY2xvc3VyZSA9IHB0cjsKCiAgbHdzX2NhbGxiYWNrX29uX3dyaXRhYmxlKGNsb3N1cmUtPndzLT5sd3NpKTsKICByZXR1cm4gSlNfVU5ERUZJTkVEOwp9CgpKU1ZhbHVlCndzX3dhbnRfd3JpdGUoc3RydWN0IHNvY2tldCogd3MsIEpTQ29udGV4dCogY3R4KSB7CiAgV1NXYW50V3JpdGUqIGg7CgogIGlmKCEoaCA9IGpzX21hbGxvY3ooY3R4LCBzaXplb2YoV1NXYW50V3JpdGUpKSkpCiAgICByZXR1cm4gSlNfVGhyb3dPdXRPZk1lbW9yeShjdHgpOwoKICAqaCA9IChXU1dhbnRXcml0ZSl7Y3R4LCB3c19kdXAod3MpfTsKCiAgcmV0dXJuIGpzX2Z1bmN0aW9uX2NjbG9zdXJlKGN0eCwgd2FudF93cml0ZSwgMCwgMCwgaCwgd3Nfd2FudF93cml0ZV9mcmVlKTsKfQoKUXVldWVJdGVtKgp3c19lbnF1ZXVlKHN0cnVjdCBzb2NrZXQqIHdzLCBCeXRlQmxvY2sgY2h1bmspIHsKICBzdHJ1Y3Qgd3NpX29wYXF1ZV91c2VyX2RhdGEqIG9wYXF1ZTsKICBRdWV1ZUl0ZW0qIGl0ZW0gPSAwOwoKICBpZigob3BhcXVlID0gbHdzX2dldF9vcGFxdWVfdXNlcl9kYXRhKHdzLT5sd3NpKSkpIHsKICAgIHN0cnVjdCBzZXNzaW9uX2RhdGEqIHNlc3Npb24gPSBvcGFxdWUtPnNlc3M7CgogICAgaWYoKGl0ZW0gPSBxdWV1ZV9hZGQoJnNlc3Npb24tPnNlbmRxLCBjaHVuaykpKSB7CgogICAgICBsd3NfY2FsbGJhY2tfb25fd3JpdGFibGUod3MtPmx3c2kpOwogICAgfQogIH0KCiAgcmV0dXJuIGl0ZW07Cn0KClF1ZXVlSXRlbSoKd3Nfc2VuZChzdHJ1Y3Qgc29ja2V0KiB3cywgY29uc3Qgdm9pZCogZGF0YSwgc2l6ZV90IHNpemUsIEpTQ29udGV4dCogY3R4KSB7CiAgQnl0ZUJsb2NrIGNodW5rID0gYmxvY2tfY29weShkYXRhLCBzaXplKTsKCiAgcmV0dXJuIHdzX2VucXVldWUod3MsIGNodW5rKTsKfQoAAAAAAAAAAMkLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADJCwAAI2luY2x1ZGUgIndzLmgiCiNpbmNsdWRlICJidWZmZXIuaCIKI2luY2x1ZGUgImpzdXRpbHMuaCIKI2luY2x1ZGUgIm9wYXF1ZS5oIgojaW5jbHVkZSAic2Vzc2lvbi5oIgojaW5jbHVkZSAicmluZ2J1ZmZlci5oIgojaW5jbHVkZSA8c3RyaW5ncy5oPgojaW5jbHVkZSA8YXNzZXJ0Lmg+CiNpbmNsdWRlIDxsaWJ3ZWJzb2NrZXRzLmg+CgpzdHJ1Y3Qgc29ja2V0Kgp3c19uZXcoc3RydWN0IGx3cyogd3NpLCBKU0NvbnRleHQqIGN0eCkgewogIHN0cnVjdCBzb2NrZXQqIHdzOwogIHN0cnVjdCB3c2lfb3BhcXVlX3VzZXJfZGF0YSogb3BhcXVlOwoKICBpZighKHdzID0ganNfbWFsbG9jeihjdHgsIHNpemVvZihzdHJ1Y3Qgc29ja2V0KSkpKQogICAgcmV0dXJuIDA7CgogIHdzLT5sd3NpID0gd3NpOwogIHdzLT5yZWZfY291bnQgPSAyOwogIC8vIHJpbmdidWZmZXJfaW5pdDIoJndzLT5zZW5kcSwgc2l6ZW9mKEJ5dGVCbG9jayksIDY1NTM2ICogMik7CgogIGlmKChvcGFxdWUgPSBsd3Nfb3BhcXVlKHdzaSwgY3R4KSkpIHsKICAgIG9wYXF1ZS0+d3MgPSB3czsKICAgIG9wYXF1ZS0+c3RhdHVzID0gMDsKICB9CgogIHJldHVybiB3czsKfQoKdm9pZAp3c19jbGVhcl9ydChzdHJ1Y3Qgc29ja2V0KiB3cywgSlNSdW50aW1lKiBydCkgewogIHN0cnVjdCBsd3MqIHdzaSA9IHdzLT5sd3NpOwoKICB3cy0+bHdzaSA9IDA7CgogIGlmKHdzaSkgewogICAgc3RydWN0IHdzaV9vcGFxdWVfdXNlcl9kYXRhKiBvcGFxdWU7CgogICAgaWYoKG9wYXF1ZSA9IGx3c19nZXRfb3BhcXVlX3VzZXJfZGF0YSh3c2kpKSkgewogICAgICBsd3Nfc2V0X29wYXF1ZV91c2VyX2RhdGEod3NpLCAwKTsKICAgICAgb3BhcXVlX2ZyZWVfcnQob3BhcXVlLCBydCk7CgogICAgICAvKiAgaWYoc3RhdHVzIDwgQ0xPU0lORykKICAgICAgICAgIGx3c19jbG9zZV9mcmVlX3dzaSh3c2ksIExXU19DTE9TRV9TVEFUVVNfTk9TVEFUVVMsIF9fZnVuY19fKTsqLwogICAgfQogIH0KCiAgLy8gcmluZ2J1ZmZlcl96ZXJvKCZ3cy0+c2VuZHEpOwp9Cgp2b2lkCndzX2NsZWFyKHN0cnVjdCBzb2NrZXQqIHdzLCBKU0NvbnRleHQqIGN0eCkgewogIHdzX2NsZWFyX3J0KHdzLCBKU19HZXRSdW50aW1lKGN0eCkpOwp9Cgp2b2lkCndzX2ZyZWVfcnQoc3RydWN0IHNvY2tldCogd3MsIEpTUnVudGltZSogcnQpIHsKICBpZigtLXdzLT5yZWZfY291bnQgPT0gMCkgewogICAgd3NfY2xlYXJfcnQod3MsIHJ0KTsKICAgIGpzX2ZyZWVfcnQocnQsIHdzKTsKICB9Cn0KCnZvaWQKd3NfZnJlZShzdHJ1Y3Qgc29ja2V0KiB3cywgSlNDb250ZXh0KiBjdHgpIHsKICBpZigtLXdzLT5yZWZfY291bnQgPT0gMCkgewogICAgd3NfY2xlYXIod3MsIGN0eCk7CiAgICBqc19mcmVlKGN0eCwgd3MpOwogIH0KfQoKc3RydWN0IHNvY2tldCoKd3NfZHVwKHN0cnVjdCBzb2NrZXQqIHdzKSB7CiAgKyt3cy0+cmVmX2NvdW50OwogIHJldHVybiB3czsKfQoKaW50CndzX3dyaXRhYmxlKHN0cnVjdCBzb2NrZXQqIHdzLCBCT09MIGJpbmFyeSwgSlNDb250ZXh0KiBjdHgpIHsKICBzdHJ1Y3Qgd3NpX29wYXF1ZV91c2VyX2RhdGEqIG9wYXF1ZTsKICBpbnQgcmV0ID0gMDsKCiAgaWYoKG9wYXF1ZSA9IGx3c19nZXRfb3BhcXVlX3VzZXJfZGF0YSh3cy0+bHdzaSkpKSB7CiAgICBzdHJ1Y3Qgc2Vzc2lvbl9kYXRhKiBzZXNzaW9uID0gb3BhcXVlLT5zZXNzOwoKICAgIHJldCA9IHNlc3Npb25fd3JpdGFibGUoc2Vzc2lvbiwgYmluYXJ5LCBjdHgpOwogIH0KICByZXR1cm4gcmV0Owp9Cgp0eXBlZGVmIHN0cnVjdCB7CiAgSlNDb250ZXh0KiBjdHg7CiAgc3RydWN0IHNvY2tldCogd3M7Cn0gV1NXYW50V3JpdGU7CgpzdGF0aWMgdm9pZAp3c193YW50X3dyaXRlX2ZyZWUodm9pZCogcHRyKSB7CiAgV1NXYW50V3JpdGUqIGNsb3N1cmUgPSBwdHI7CiAgSlNDb250ZXh0KiBjdHggPSBjbG9zdXJlLT5jdHg7CgogIHdzX2ZyZWUoY2xvc3VyZS0+d3MsIGN0eCk7CiAganNfZnJlZShjdHgsIGNsb3N1cmUpOwp9OwoKc3RhdGljIEpTVmFsdWUKd2FudF93cml0ZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljLCB2b2lkKiBwdHIpIHsKICBXU1dhbnRXcml0ZSogY2xvc3VyZSA9IHB0cjsKCiAgbHdzX2NhbGxiYWNrX29uX3dyaXRhYmxlKGNsb3N1cmUtPndzLT5sd3NpKTsKICByZXR1cm4gSlNfVU5ERUZJTkVEOwp9CgpKU1ZhbHVlCndzX3dhbnRfd3JpdGUoc3RydWN0IHNvY2tldCogd3MsIEpTQ29udGV4dCogY3R4KSB7CiAgV1NXYW50V3JpdGUqIGg7CgogIGlmKCEoaCA9IGpzX21hbGxvY3ooY3R4LCBzaXplb2YoV1NXYW50V3JpdGUpKSkpCiAgICByZXR1cm4gSlNfVGhyb3dPdXRPZk1lbW9yeShjdHgpOwoKICAqaCA9IChXU1dhbnRXcml0ZSl7Y3R4LCB3c19kdXAod3MpfTsKCiAgcmV0dXJuIEpTX05ld0NDbG9zdXJlKGN0eCwgd2FudF93cml0ZSwgMCwgMCwgaCwgd3Nfd2FudF93cml0ZV9mcmVlKTsKfQoKUXVldWVJdGVtKgp3c19lbnF1ZXVlKHN0cnVjdCBzb2NrZXQqIHdzLCBCeXRlQmxvY2sgY2h1bmspIHsKICBzdHJ1Y3Qgd3NpX29wYXF1ZV91c2VyX2RhdGEqIG9wYXF1ZTsKICBRdWV1ZUl0ZW0qIGl0ZW0gPSAwOwoKICBpZigob3BhcXVlID0gbHdzX2dldF9vcGFxdWVfdXNlcl9kYXRhKHdzLT5sd3NpKSkpIHsKICAgIHN0cnVjdCBzZXNzaW9uX2RhdGEqIHNlc3Npb24gPSBvcGFxdWUtPnNlc3M7CgogICAgaWYoKGl0ZW0gPSBxdWV1ZV9hZGQoJnNlc3Npb24tPnNlbmRxLCBjaHVuaykpKSB7CgogICAgICBsd3NfY2FsbGJhY2tfb25fd3JpdGFibGUod3MtPmx3c2kpOwogICAgfQogIH0KCiAgcmV0dXJuIGl0ZW07Cn0KClF1ZXVlSXRlbSoKd3Nfc2VuZChzdHJ1Y3Qgc29ja2V0KiB3cywgY29uc3Qgdm9pZCogZGF0YSwgc2l6ZV90IHNpemUsIEpTQ29udGV4dCogY3R4KSB7CiAgQnl0ZUJsb2NrIGNodW5rID0gYmxvY2tfY29weShkYXRhLCBzaXplKTsKCiAgcmV0dXJuIHdzX2VucXVldWUod3MsIGNodW5rKTsKfQoAAAAAAAAAAM8LAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/deferred.c",
			"settings":
			{
				"buffer_size": 3259,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"",
					null,
					"AQAAAEwMAAAAAAAAXAwAAAAAAAAPAAAASlNfTmV3Q0Nsb3N1cmUo",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"cut",
					null,
					"AQAAABQAAAAAAAAAFAAAAAAAAAAWAAAAI2luY2x1ZGUgImRlZmVycmVkLmgiCg",
					"AQAAAAAAAAABAAAAFAAAAAAAAAAqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					2,
					"paste",
					null,
					"AgAAABQAAAAAAAAAKgAAAAAAAAAAAAAAKgAAAAAAAABAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAAAAAAAAAAUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "ks"
					},
					"AwAAADQAAAAAAAAANQAAAAAAAAAAAAAANQAAAAAAAAA1AAAAAAAAAAgAAABkZWZlcnJlZDUAAAAAAAAANgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAAAAAAAAAA8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					2,
					"left_delete",
					null,
					"AgAAADUAAAAAAAAANQAAAAAAAAABAAAAczQAAAAAAAAANAAAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAANgAAAAAAAAA2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "js-utils"
					},
					"CAAAADQAAAAAAAAANQAAAAAAAAAAAAAANQAAAAAAAAA2AAAAAAAAAAAAAAA2AAAAAAAAADcAAAAAAAAAAAAAADcAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA5AAAAAAAAAAAAAAA5AAAAAAAAADoAAAAAAAAAAAAAADoAAAAAAAAAOwAAAAAAAAAAAAAAOwAAAAAAAAA8AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAAAAAAAAAA0AAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"left_delete",
					null,
					"AQAAADYAAAAAAAAANgAAAAAAAAABAAAALQ",
					"AQAAAAAAAAABAAAANwAAAAAAAAA3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC2DAAAI2luY2x1ZGUgPGFzc2VydC5oPgojaW5jbHVkZSAiZGVmZXJyZWQuaCIKI2luY2x1ZGUgImpzdXRpbHMuaCIKCnZvaWQKZGVmZXJyZWRfY2xlYXIoRGVmZXJyZWQqIGRlZikgewogIGRlZi0+bnVtX2NhbGxzID0gMDsKICBkZWYtPm9ubHlfb25jZSA9IEZBTFNFOwogIGRlZi0+ZnVuYyA9IDA7CgogIGZvcihpbnQgaSA9IDA7IGkgPCA4OyBpKyspIHsgZGVmLT5hcmd2W2ldID0gMDsgfQp9Cgp2b2lkCmRlZmVycmVkX2ZyZWUoRGVmZXJyZWQqIGRlZikgewogIGlmKGRlZi0+bmV4dCkKICAgIGRlZmVycmVkX2Rlc3RydWN0b3IoZGVmLT5uZXh0KTsKCiAgaWYoLS1kZWYtPnJlZl9jb3VudCA9PSAwKSB7CiAgICBkZWZlcnJlZF9jbGVhcihkZWYpOwogICAgZnJlZShkZWYpOwogIH0KfQoKRGVmZXJyZWQqCmRlZmVycmVkX25ld3YocHRyX3QgZm4sIGludCBhcmdjLCBwdHJfdCBhcmd2W10pIHsKICBEZWZlcnJlZCogZGVmOwoKICBpZighKGRlZiA9IG1hbGxvYyhzaXplb2YoRGVmZXJyZWQpKSkpCiAgICByZXR1cm4gMDsKCiAgZGVmZXJyZWRfaW5pdChkZWYsIGZuLCBhcmdjLCBhcmd2KTsKCiAgZGVmLT5yZWZfY291bnQgPSAxOwogIGRlZi0+bnVtX2NhbGxzID0gMDsKICBkZWYtPm9ubHlfb25jZSA9IEZBTFNFOwoKICByZXR1cm4gZGVmOwp9CgovKnN0YXRpYyB2b2lkCmRlZmVycmVkX2ZyZWVqcyhEZWZlcnJlZCogZGVmKSB7CiAgSlNWYWx1ZSB2YWx1ZSA9IGRlZmVycmVkX2dldGpzKGRlZik7CgogIEpTX0ZyZWVWYWx1ZShkZWYtPmFyZ3ZbMF0sIHZhbHVlKTsKfQoKc3RhdGljIHZvaWQKZGVmZXJyZWRfZnJlZWpzX3J0KERlZmVycmVkKiBkZWYpIHsKICBKU1ZhbHVlIHZhbHVlID0gZGVmZXJyZWRfZ2V0anMoZGVmKTsKCiAgSlNfRnJlZVZhbHVlUlQoZGVmLT5hcmd2WzBdLCB2YWx1ZSk7Cn0qLwoKRGVmZXJyZWQqCmRlZmVycmVkX25ld2pzKEpTVmFsdWUgZnVuYywgSlNDb250ZXh0KiBjdHgpIHsKICBEZWZlcnJlZCogZGVmOwogIC8qcHRyX3QgYXJnc1tdID0gewogICAgICBjdHgsCiAgICAgICgocHRyX3QqKSZ2KVswXSwKICAgICAgKChwdHJfdCopJnYpWzFdLAogIH07CiAgZGVmID0gZGVmZXJyZWRfbmV3dihmbiwgMywgYXJncyk7Ki8KICBkZWYgPSBkZWZlcnJlZF9uZXcoJkpTX0NhbGwsIGN0eCwgZnVuYywgSlNfVU5ERUZJTkVEKTsKCiAgZGVmLT5uZXh0ID0gZGVmZXJyZWRfbmV3KCZKU19GcmVlVmFsdWUsIGN0eCwgZnVuYyk7CiAgcmV0dXJuIGRlZjsKfQoKRGVmZXJyZWQqCmRlZmVycmVkX2R1cGpzKEpTVmFsdWVDb25zdCB2YWx1ZSwgSlNDb250ZXh0KiBjdHgpIHsKICBKU1ZhbHVlIHYgPSBKU19EdXBWYWx1ZShjdHgsIHZhbHVlKTsKICByZXR1cm4gZGVmZXJyZWRfbmV3anModiwgY3R4KTsKfQoKLypEZWZlcnJlZCoKZGVmZXJyZWRfbmV3anNfcnQoICBKU1ZhbHVlIHZhbHVlLCBKU0NvbnRleHQqIGN0eCkgewogIERlZmVycmVkKiBkZWY7CgogIGlmKChkZWYgPSBkZWZlcnJlZF9uZXcoZm4sIEpTX0dldFJ1bnRpbWUoY3R4KSwgdmFsdWUpKSkKICAgIGRlZi0+bmV4dCA9IGRlZmVycmVkX25ldyhkZWZlcnJlZF9mcmVlanNfcnQsIGRlZik7CgogIHJldHVybiBkZWY7Cn0KKi8Kdm9pZApkZWZlcnJlZF9pbml0KERlZmVycmVkKiBkZWYsIHB0cl90IGZuLCBpbnQgYXJnYywgcHRyX3QgYXJndltdKSB7CiAgaW50IGk7CgogIGRlZi0+cmVmX2NvdW50ID0gMDsKICBkZWYtPmZ1bmMgPSBmbjsKCiAgZm9yKGkgPSAwOyBpIDwgODsgaSsrKSB7IGRlZi0+YXJndltpXSA9IGkgPCBhcmdjID8gYXJndltpXSA6IDA7IH0KCiAgZGVmLT5hcmdjID0gYXJnYzsKICBkZWYtPm51bV9jYWxscyA9IDA7CiAgZGVmLT5vbmx5X29uY2UgPSBGQUxTRTsKICBkZWYtPm5leHQgPSAwOwp9CgpEb3VibGVXb3JkCmRlZmVycmVkX2NhbGxfeChEZWZlcnJlZCogZGVmLCAuLi4pIHsKICBwdHJfdCBjb25zdCogYXYgPSBkZWYtPmFyZ3Y7CiAgRG91YmxlV29yZCByZXQgPSB7ezAsIDB9fTsKICB2YV9saXN0IGE7CiAgaW50IGFyZ2MgPSBkZWYtPmFyZ2M7CiAgc2l6ZV90IGFyZzsKCiAgdmFfc3RhcnQoYSwgZGVmKTsKCiAgd2hpbGUoYXJnYyA8IGNvdW50b2YoZGVmLT5hcmd2KSAmJiAoYXJnID0gdmFfYXJnKGEsIHNpemVfdCkpKSB7CiAgICBpZihhcmcgPT0gREVGRVJSRURfU0VOVElORUwpCiAgICAgIGJyZWFrOwogICAgZGVmLT5hcmd2W2FyZ2MrK10gPSAocHRyX3QpYXJnOwogIH0KCiAgdmFfZW5kKGEpOwoKICBhc3NlcnQoIWRlZi0+b25seV9vbmNlIHx8IGRlZi0+bnVtX2NhbGxzIDwgMSk7CgogIGlmKCFkZWYtPm9ubHlfb25jZSB8fCBkZWYtPm51bV9jYWxscyA8IDEpIHsKCiAgICBpZihkZWYtPmZ1bmMgPT0gKHZvaWQqKSZKU19DYWxsKQogICAgICByZXQgPSBkZWYtPmZ1bmMoYXZbMF0sIGF2WzFdLCBhdlsyXSwgYXZbM10sIGF2WzRdLCAocHRyX3QpKHNpemVfdCkoKGFyZ2MgLSBkZWYtPmFyZ2MpID4gMCA/IDEgOiAwKSwgKHB0cl90KSZhdltkZWYtPmFyZ2NdLCAwKTsKICAgIGVsc2UKICAgICAgcmV0ID0gZGVmLT5mdW5jKGF2WzBdLCBhdlsxXSwgYXZbMl0sIGF2WzNdLCBhdls0XSwgYXZbNV0sIGF2WzZdLCBhdls3XSk7CgogICAgKytkZWYtPm51bV9jYWxsczsKICB9CgogIHJldHVybiByZXQ7Cn0KCnZvaWQKZGVmZXJyZWRfZGVzdHJ1Y3Rvcih2b2lkKiBwdHIpIHsKICBEZWZlcnJlZCogZGVmID0gcHRyOwoKICBkbyB7CiAgICBwdHIgPSBkZWYtPm5leHQ7CiAgICBkZWYtPm5leHQgPSBOVUxMOwogICAgZGVmZXJyZWRfY2FsbChkZWYpOwogICAgZGVmZXJyZWRfZnJlZShkZWYpOwogIH0gd2hpbGUoKGRlZiA9IHB0cikpOwp9Cgp2b2lkCmRlZmVycmVkX2ZpbmFsaXplcihKU1J1bnRpbWUqIHJ0LCB2b2lkKiBvcGFxdWUsIHZvaWQqIHB0cikgewogIGRlZmVycmVkX2Rlc3RydWN0b3Iob3BhcXVlKTsKfQoKc3RhdGljIEpTVmFsdWUKZGVmZXJyZWRfanNfY2FsbChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljLCBwdHJfdCBwdHIpIHsKICBEZWZlcnJlZCogZGVmID0gcHRyOwoKICByZXR1cm4gZGVmZXJyZWRfY2FsbChkZWYpLmpzOwp9CgpKU1ZhbHVlCmRlZmVycmVkX3RvanMoRGVmZXJyZWQqIGRlZiwgSlNDb250ZXh0KiBjdHgpIHsKICBkZWZlcnJlZF9kdXAoZGVmKTsKCiAgcmV0dXJuIGpzX2NjbG9zdXJlX25ldyhjdHgsIGRlZmVycmVkX2pzX2NhbGwsIDAsIDAsIGRlZiwgKHZvaWQgKCopKHB0cl90KSlkZWZlcnJlZF9mcmVlKTsKfQoAAAAAAAAAALYMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANgAAAAAAAAA2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC2DAAAI2luY2x1ZGUgPGFzc2VydC5oPgojaW5jbHVkZSAiZGVmZXJyZWQuaCIKI2luY2x1ZGUgImpzdXRpbHMuaCIKCnZvaWQKZGVmZXJyZWRfY2xlYXIoRGVmZXJyZWQqIGRlZikgewogIGRlZi0+bnVtX2NhbGxzID0gMDsKICBkZWYtPm9ubHlfb25jZSA9IEZBTFNFOwogIGRlZi0+ZnVuYyA9IDA7CgogIGZvcihpbnQgaSA9IDA7IGkgPCA4OyBpKyspIHsgZGVmLT5hcmd2W2ldID0gMDsgfQp9Cgp2b2lkCmRlZmVycmVkX2ZyZWUoRGVmZXJyZWQqIGRlZikgewogIGlmKGRlZi0+bmV4dCkKICAgIGRlZmVycmVkX2Rlc3RydWN0b3IoZGVmLT5uZXh0KTsKCiAgaWYoLS1kZWYtPnJlZl9jb3VudCA9PSAwKSB7CiAgICBkZWZlcnJlZF9jbGVhcihkZWYpOwogICAgZnJlZShkZWYpOwogIH0KfQoKRGVmZXJyZWQqCmRlZmVycmVkX25ld3YocHRyX3QgZm4sIGludCBhcmdjLCBwdHJfdCBhcmd2W10pIHsKICBEZWZlcnJlZCogZGVmOwoKICBpZighKGRlZiA9IG1hbGxvYyhzaXplb2YoRGVmZXJyZWQpKSkpCiAgICByZXR1cm4gMDsKCiAgZGVmZXJyZWRfaW5pdChkZWYsIGZuLCBhcmdjLCBhcmd2KTsKCiAgZGVmLT5yZWZfY291bnQgPSAxOwogIGRlZi0+bnVtX2NhbGxzID0gMDsKICBkZWYtPm9ubHlfb25jZSA9IEZBTFNFOwoKICByZXR1cm4gZGVmOwp9CgovKnN0YXRpYyB2b2lkCmRlZmVycmVkX2ZyZWVqcyhEZWZlcnJlZCogZGVmKSB7CiAgSlNWYWx1ZSB2YWx1ZSA9IGRlZmVycmVkX2dldGpzKGRlZik7CgogIEpTX0ZyZWVWYWx1ZShkZWYtPmFyZ3ZbMF0sIHZhbHVlKTsKfQoKc3RhdGljIHZvaWQKZGVmZXJyZWRfZnJlZWpzX3J0KERlZmVycmVkKiBkZWYpIHsKICBKU1ZhbHVlIHZhbHVlID0gZGVmZXJyZWRfZ2V0anMoZGVmKTsKCiAgSlNfRnJlZVZhbHVlUlQoZGVmLT5hcmd2WzBdLCB2YWx1ZSk7Cn0qLwoKRGVmZXJyZWQqCmRlZmVycmVkX25ld2pzKEpTVmFsdWUgZnVuYywgSlNDb250ZXh0KiBjdHgpIHsKICBEZWZlcnJlZCogZGVmOwogIC8qcHRyX3QgYXJnc1tdID0gewogICAgICBjdHgsCiAgICAgICgocHRyX3QqKSZ2KVswXSwKICAgICAgKChwdHJfdCopJnYpWzFdLAogIH07CiAgZGVmID0gZGVmZXJyZWRfbmV3dihmbiwgMywgYXJncyk7Ki8KICBkZWYgPSBkZWZlcnJlZF9uZXcoJkpTX0NhbGwsIGN0eCwgZnVuYywgSlNfVU5ERUZJTkVEKTsKCiAgZGVmLT5uZXh0ID0gZGVmZXJyZWRfbmV3KCZKU19GcmVlVmFsdWUsIGN0eCwgZnVuYyk7CiAgcmV0dXJuIGRlZjsKfQoKRGVmZXJyZWQqCmRlZmVycmVkX2R1cGpzKEpTVmFsdWVDb25zdCB2YWx1ZSwgSlNDb250ZXh0KiBjdHgpIHsKICBKU1ZhbHVlIHYgPSBKU19EdXBWYWx1ZShjdHgsIHZhbHVlKTsKICByZXR1cm4gZGVmZXJyZWRfbmV3anModiwgY3R4KTsKfQoKLypEZWZlcnJlZCoKZGVmZXJyZWRfbmV3anNfcnQoICBKU1ZhbHVlIHZhbHVlLCBKU0NvbnRleHQqIGN0eCkgewogIERlZmVycmVkKiBkZWY7CgogIGlmKChkZWYgPSBkZWZlcnJlZF9uZXcoZm4sIEpTX0dldFJ1bnRpbWUoY3R4KSwgdmFsdWUpKSkKICAgIGRlZi0+bmV4dCA9IGRlZmVycmVkX25ldyhkZWZlcnJlZF9mcmVlanNfcnQsIGRlZik7CgogIHJldHVybiBkZWY7Cn0KKi8Kdm9pZApkZWZlcnJlZF9pbml0KERlZmVycmVkKiBkZWYsIHB0cl90IGZuLCBpbnQgYXJnYywgcHRyX3QgYXJndltdKSB7CiAgaW50IGk7CgogIGRlZi0+cmVmX2NvdW50ID0gMDsKICBkZWYtPmZ1bmMgPSBmbjsKCiAgZm9yKGkgPSAwOyBpIDwgODsgaSsrKSB7IGRlZi0+YXJndltpXSA9IGkgPCBhcmdjID8gYXJndltpXSA6IDA7IH0KCiAgZGVmLT5hcmdjID0gYXJnYzsKICBkZWYtPm51bV9jYWxscyA9IDA7CiAgZGVmLT5vbmx5X29uY2UgPSBGQUxTRTsKICBkZWYtPm5leHQgPSAwOwp9CgpEb3VibGVXb3JkCmRlZmVycmVkX2NhbGxfeChEZWZlcnJlZCogZGVmLCAuLi4pIHsKICBwdHJfdCBjb25zdCogYXYgPSBkZWYtPmFyZ3Y7CiAgRG91YmxlV29yZCByZXQgPSB7ezAsIDB9fTsKICB2YV9saXN0IGE7CiAgaW50IGFyZ2MgPSBkZWYtPmFyZ2M7CiAgc2l6ZV90IGFyZzsKCiAgdmFfc3RhcnQoYSwgZGVmKTsKCiAgd2hpbGUoYXJnYyA8IGNvdW50b2YoZGVmLT5hcmd2KSAmJiAoYXJnID0gdmFfYXJnKGEsIHNpemVfdCkpKSB7CiAgICBpZihhcmcgPT0gREVGRVJSRURfU0VOVElORUwpCiAgICAgIGJyZWFrOwogICAgZGVmLT5hcmd2W2FyZ2MrK10gPSAocHRyX3QpYXJnOwogIH0KCiAgdmFfZW5kKGEpOwoKICBhc3NlcnQoIWRlZi0+b25seV9vbmNlIHx8IGRlZi0+bnVtX2NhbGxzIDwgMSk7CgogIGlmKCFkZWYtPm9ubHlfb25jZSB8fCBkZWYtPm51bV9jYWxscyA8IDEpIHsKCiAgICBpZihkZWYtPmZ1bmMgPT0gKHZvaWQqKSZKU19DYWxsKQogICAgICByZXQgPSBkZWYtPmZ1bmMoYXZbMF0sIGF2WzFdLCBhdlsyXSwgYXZbM10sIGF2WzRdLCAocHRyX3QpKHNpemVfdCkoKGFyZ2MgLSBkZWYtPmFyZ2MpID4gMCA/IDEgOiAwKSwgKHB0cl90KSZhdltkZWYtPmFyZ2NdLCAwKTsKICAgIGVsc2UKICAgICAgcmV0ID0gZGVmLT5mdW5jKGF2WzBdLCBhdlsxXSwgYXZbMl0sIGF2WzNdLCBhdls0XSwgYXZbNV0sIGF2WzZdLCBhdls3XSk7CgogICAgKytkZWYtPm51bV9jYWxsczsKICB9CgogIHJldHVybiByZXQ7Cn0KCnZvaWQKZGVmZXJyZWRfZGVzdHJ1Y3Rvcih2b2lkKiBwdHIpIHsKICBEZWZlcnJlZCogZGVmID0gcHRyOwoKICBkbyB7CiAgICBwdHIgPSBkZWYtPm5leHQ7CiAgICBkZWYtPm5leHQgPSBOVUxMOwogICAgZGVmZXJyZWRfY2FsbChkZWYpOwogICAgZGVmZXJyZWRfZnJlZShkZWYpOwogIH0gd2hpbGUoKGRlZiA9IHB0cikpOwp9Cgp2b2lkCmRlZmVycmVkX2ZpbmFsaXplcihKU1J1bnRpbWUqIHJ0LCB2b2lkKiBvcGFxdWUsIHZvaWQqIHB0cikgewogIGRlZmVycmVkX2Rlc3RydWN0b3Iob3BhcXVlKTsKfQoKc3RhdGljIEpTVmFsdWUKZGVmZXJyZWRfanNfY2FsbChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljLCBwdHJfdCBwdHIpIHsKICBEZWZlcnJlZCogZGVmID0gcHRyOwoKICByZXR1cm4gZGVmZXJyZWRfY2FsbChkZWYpLmpzOwp9CgpKU1ZhbHVlCmRlZmVycmVkX3RvanMoRGVmZXJyZWQqIGRlZiwgSlNDb250ZXh0KiBjdHgpIHsKICBkZWZlcnJlZF9kdXAoZGVmKTsKCiAgcmV0dXJuIGpzX2NjbG9zdXJlX25ldyhjdHgsIGRlZmVycmVkX2pzX2NhbGwsIDAsIDAsIGRlZiwgKHZvaWQgKCopKHB0cl90KSlkZWZlcnJlZF9mcmVlKTsKfQoAAAAAAAAAALsMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANgAAAAAAAAA2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC7DAAAI2luY2x1ZGUgPGFzc2VydC5oPgojaW5jbHVkZSAiZGVmZXJyZWQuaCIKI2luY2x1ZGUgImpzdXRpbHMuaCIKCnZvaWQKZGVmZXJyZWRfY2xlYXIoRGVmZXJyZWQqIGRlZikgewogIGRlZi0+bnVtX2NhbGxzID0gMDsKICBkZWYtPm9ubHlfb25jZSA9IEZBTFNFOwogIGRlZi0+ZnVuYyA9IDA7CgogIGZvcihpbnQgaSA9IDA7IGkgPCA4OyBpKyspIHsgZGVmLT5hcmd2W2ldID0gMDsgfQp9Cgp2b2lkCmRlZmVycmVkX2ZyZWUoRGVmZXJyZWQqIGRlZikgewogIGlmKGRlZi0+bmV4dCkKICAgIGRlZmVycmVkX2Rlc3RydWN0b3IoZGVmLT5uZXh0KTsKCiAgaWYoLS1kZWYtPnJlZl9jb3VudCA9PSAwKSB7CiAgICBkZWZlcnJlZF9jbGVhcihkZWYpOwogICAgZnJlZShkZWYpOwogIH0KfQoKRGVmZXJyZWQqCmRlZmVycmVkX25ld3YocHRyX3QgZm4sIGludCBhcmdjLCBwdHJfdCBhcmd2W10pIHsKICBEZWZlcnJlZCogZGVmOwoKICBpZighKGRlZiA9IG1hbGxvYyhzaXplb2YoRGVmZXJyZWQpKSkpCiAgICByZXR1cm4gMDsKCiAgZGVmZXJyZWRfaW5pdChkZWYsIGZuLCBhcmdjLCBhcmd2KTsKCiAgZGVmLT5yZWZfY291bnQgPSAxOwogIGRlZi0+bnVtX2NhbGxzID0gMDsKICBkZWYtPm9ubHlfb25jZSA9IEZBTFNFOwoKICByZXR1cm4gZGVmOwp9CgovKnN0YXRpYyB2b2lkCmRlZmVycmVkX2ZyZWVqcyhEZWZlcnJlZCogZGVmKSB7CiAgSlNWYWx1ZSB2YWx1ZSA9IGRlZmVycmVkX2dldGpzKGRlZik7CgogIEpTX0ZyZWVWYWx1ZShkZWYtPmFyZ3ZbMF0sIHZhbHVlKTsKfQoKc3RhdGljIHZvaWQKZGVmZXJyZWRfZnJlZWpzX3J0KERlZmVycmVkKiBkZWYpIHsKICBKU1ZhbHVlIHZhbHVlID0gZGVmZXJyZWRfZ2V0anMoZGVmKTsKCiAgSlNfRnJlZVZhbHVlUlQoZGVmLT5hcmd2WzBdLCB2YWx1ZSk7Cn0qLwoKRGVmZXJyZWQqCmRlZmVycmVkX25ld2pzKEpTVmFsdWUgZnVuYywgSlNDb250ZXh0KiBjdHgpIHsKICBEZWZlcnJlZCogZGVmOwogIC8qcHRyX3QgYXJnc1tdID0gewogICAgICBjdHgsCiAgICAgICgocHRyX3QqKSZ2KVswXSwKICAgICAgKChwdHJfdCopJnYpWzFdLAogIH07CiAgZGVmID0gZGVmZXJyZWRfbmV3dihmbiwgMywgYXJncyk7Ki8KICBkZWYgPSBkZWZlcnJlZF9uZXcoJkpTX0NhbGwsIGN0eCwgZnVuYywgSlNfVU5ERUZJTkVEKTsKCiAgZGVmLT5uZXh0ID0gZGVmZXJyZWRfbmV3KCZKU19GcmVlVmFsdWUsIGN0eCwgZnVuYyk7CiAgcmV0dXJuIGRlZjsKfQoKRGVmZXJyZWQqCmRlZmVycmVkX2R1cGpzKEpTVmFsdWVDb25zdCB2YWx1ZSwgSlNDb250ZXh0KiBjdHgpIHsKICBKU1ZhbHVlIHYgPSBKU19EdXBWYWx1ZShjdHgsIHZhbHVlKTsKICByZXR1cm4gZGVmZXJyZWRfbmV3anModiwgY3R4KTsKfQoKLypEZWZlcnJlZCoKZGVmZXJyZWRfbmV3anNfcnQoICBKU1ZhbHVlIHZhbHVlLCBKU0NvbnRleHQqIGN0eCkgewogIERlZmVycmVkKiBkZWY7CgogIGlmKChkZWYgPSBkZWZlcnJlZF9uZXcoZm4sIEpTX0dldFJ1bnRpbWUoY3R4KSwgdmFsdWUpKSkKICAgIGRlZi0+bmV4dCA9IGRlZmVycmVkX25ldyhkZWZlcnJlZF9mcmVlanNfcnQsIGRlZik7CgogIHJldHVybiBkZWY7Cn0KKi8Kdm9pZApkZWZlcnJlZF9pbml0KERlZmVycmVkKiBkZWYsIHB0cl90IGZuLCBpbnQgYXJnYywgcHRyX3QgYXJndltdKSB7CiAgaW50IGk7CgogIGRlZi0+cmVmX2NvdW50ID0gMDsKICBkZWYtPmZ1bmMgPSBmbjsKCiAgZm9yKGkgPSAwOyBpIDwgODsgaSsrKSB7IGRlZi0+YXJndltpXSA9IGkgPCBhcmdjID8gYXJndltpXSA6IDA7IH0KCiAgZGVmLT5hcmdjID0gYXJnYzsKICBkZWYtPm51bV9jYWxscyA9IDA7CiAgZGVmLT5vbmx5X29uY2UgPSBGQUxTRTsKICBkZWYtPm5leHQgPSAwOwp9CgpEb3VibGVXb3JkCmRlZmVycmVkX2NhbGxfeChEZWZlcnJlZCogZGVmLCAuLi4pIHsKICBwdHJfdCBjb25zdCogYXYgPSBkZWYtPmFyZ3Y7CiAgRG91YmxlV29yZCByZXQgPSB7ezAsIDB9fTsKICB2YV9saXN0IGE7CiAgaW50IGFyZ2MgPSBkZWYtPmFyZ2M7CiAgc2l6ZV90IGFyZzsKCiAgdmFfc3RhcnQoYSwgZGVmKTsKCiAgd2hpbGUoYXJnYyA8IGNvdW50b2YoZGVmLT5hcmd2KSAmJiAoYXJnID0gdmFfYXJnKGEsIHNpemVfdCkpKSB7CiAgICBpZihhcmcgPT0gREVGRVJSRURfU0VOVElORUwpCiAgICAgIGJyZWFrOwogICAgZGVmLT5hcmd2W2FyZ2MrK10gPSAocHRyX3QpYXJnOwogIH0KCiAgdmFfZW5kKGEpOwoKICBhc3NlcnQoIWRlZi0+b25seV9vbmNlIHx8IGRlZi0+bnVtX2NhbGxzIDwgMSk7CgogIGlmKCFkZWYtPm9ubHlfb25jZSB8fCBkZWYtPm51bV9jYWxscyA8IDEpIHsKCiAgICBpZihkZWYtPmZ1bmMgPT0gKHZvaWQqKSZKU19DYWxsKQogICAgICByZXQgPSBkZWYtPmZ1bmMoYXZbMF0sIGF2WzFdLCBhdlsyXSwgYXZbM10sIGF2WzRdLCAocHRyX3QpKHNpemVfdCkoKGFyZ2MgLSBkZWYtPmFyZ2MpID4gMCA/IDEgOiAwKSwgKHB0cl90KSZhdltkZWYtPmFyZ2NdLCAwKTsKICAgIGVsc2UKICAgICAgcmV0ID0gZGVmLT5mdW5jKGF2WzBdLCBhdlsxXSwgYXZbMl0sIGF2WzNdLCBhdls0XSwgYXZbNV0sIGF2WzZdLCBhdls3XSk7CgogICAgKytkZWYtPm51bV9jYWxsczsKICB9CgogIHJldHVybiByZXQ7Cn0KCnZvaWQKZGVmZXJyZWRfZGVzdHJ1Y3Rvcih2b2lkKiBwdHIpIHsKICBEZWZlcnJlZCogZGVmID0gcHRyOwoKICBkbyB7CiAgICBwdHIgPSBkZWYtPm5leHQ7CiAgICBkZWYtPm5leHQgPSBOVUxMOwogICAgZGVmZXJyZWRfY2FsbChkZWYpOwogICAgZGVmZXJyZWRfZnJlZShkZWYpOwogIH0gd2hpbGUoKGRlZiA9IHB0cikpOwp9Cgp2b2lkCmRlZmVycmVkX2ZpbmFsaXplcihKU1J1bnRpbWUqIHJ0LCB2b2lkKiBvcGFxdWUsIHZvaWQqIHB0cikgewogIGRlZmVycmVkX2Rlc3RydWN0b3Iob3BhcXVlKTsKfQoKc3RhdGljIEpTVmFsdWUKZGVmZXJyZWRfanNfY2FsbChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljLCBwdHJfdCBwdHIpIHsKICBEZWZlcnJlZCogZGVmID0gcHRyOwoKICByZXR1cm4gZGVmZXJyZWRfY2FsbChkZWYpLmpzOwp9CgpKU1ZhbHVlCmRlZmVycmVkX3RvanMoRGVmZXJyZWQqIGRlZiwgSlNDb250ZXh0KiBjdHgpIHsKICBkZWZlcnJlZF9kdXAoZGVmKTsKCiAgcmV0dXJuIGpzX2Z1bmN0aW9uX2NjbG9zdXJlKGN0eCwgZGVmZXJyZWRfanNfY2FsbCwgMCwgMCwgZGVmLCAodm9pZCAoKikocHRyX3QpKWRlZmVycmVkX2ZyZWUpOwp9CgAAAAAAAAAAuwwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANgAAAAAAAAA2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC7DAAAI2luY2x1ZGUgPGFzc2VydC5oPgojaW5jbHVkZSAiZGVmZXJyZWQuaCIKI2luY2x1ZGUgImpzdXRpbHMuaCIKCnZvaWQKZGVmZXJyZWRfY2xlYXIoRGVmZXJyZWQqIGRlZikgewogIGRlZi0+bnVtX2NhbGxzID0gMDsKICBkZWYtPm9ubHlfb25jZSA9IEZBTFNFOwogIGRlZi0+ZnVuYyA9IDA7CgogIGZvcihpbnQgaSA9IDA7IGkgPCA4OyBpKyspIHsgZGVmLT5hcmd2W2ldID0gMDsgfQp9Cgp2b2lkCmRlZmVycmVkX2ZyZWUoRGVmZXJyZWQqIGRlZikgewogIGlmKGRlZi0+bmV4dCkKICAgIGRlZmVycmVkX2Rlc3RydWN0b3IoZGVmLT5uZXh0KTsKCiAgaWYoLS1kZWYtPnJlZl9jb3VudCA9PSAwKSB7CiAgICBkZWZlcnJlZF9jbGVhcihkZWYpOwogICAgZnJlZShkZWYpOwogIH0KfQoKRGVmZXJyZWQqCmRlZmVycmVkX25ld3YocHRyX3QgZm4sIGludCBhcmdjLCBwdHJfdCBhcmd2W10pIHsKICBEZWZlcnJlZCogZGVmOwoKICBpZighKGRlZiA9IG1hbGxvYyhzaXplb2YoRGVmZXJyZWQpKSkpCiAgICByZXR1cm4gMDsKCiAgZGVmZXJyZWRfaW5pdChkZWYsIGZuLCBhcmdjLCBhcmd2KTsKCiAgZGVmLT5yZWZfY291bnQgPSAxOwogIGRlZi0+bnVtX2NhbGxzID0gMDsKICBkZWYtPm9ubHlfb25jZSA9IEZBTFNFOwoKICByZXR1cm4gZGVmOwp9CgovKnN0YXRpYyB2b2lkCmRlZmVycmVkX2ZyZWVqcyhEZWZlcnJlZCogZGVmKSB7CiAgSlNWYWx1ZSB2YWx1ZSA9IGRlZmVycmVkX2dldGpzKGRlZik7CgogIEpTX0ZyZWVWYWx1ZShkZWYtPmFyZ3ZbMF0sIHZhbHVlKTsKfQoKc3RhdGljIHZvaWQKZGVmZXJyZWRfZnJlZWpzX3J0KERlZmVycmVkKiBkZWYpIHsKICBKU1ZhbHVlIHZhbHVlID0gZGVmZXJyZWRfZ2V0anMoZGVmKTsKCiAgSlNfRnJlZVZhbHVlUlQoZGVmLT5hcmd2WzBdLCB2YWx1ZSk7Cn0qLwoKRGVmZXJyZWQqCmRlZmVycmVkX25ld2pzKEpTVmFsdWUgZnVuYywgSlNDb250ZXh0KiBjdHgpIHsKICBEZWZlcnJlZCogZGVmOwogIC8qcHRyX3QgYXJnc1tdID0gewogICAgICBjdHgsCiAgICAgICgocHRyX3QqKSZ2KVswXSwKICAgICAgKChwdHJfdCopJnYpWzFdLAogIH07CiAgZGVmID0gZGVmZXJyZWRfbmV3dihmbiwgMywgYXJncyk7Ki8KICBkZWYgPSBkZWZlcnJlZF9uZXcoJkpTX0NhbGwsIGN0eCwgZnVuYywgSlNfVU5ERUZJTkVEKTsKCiAgZGVmLT5uZXh0ID0gZGVmZXJyZWRfbmV3KCZKU19GcmVlVmFsdWUsIGN0eCwgZnVuYyk7CiAgcmV0dXJuIGRlZjsKfQoKRGVmZXJyZWQqCmRlZmVycmVkX2R1cGpzKEpTVmFsdWVDb25zdCB2YWx1ZSwgSlNDb250ZXh0KiBjdHgpIHsKICBKU1ZhbHVlIHYgPSBKU19EdXBWYWx1ZShjdHgsIHZhbHVlKTsKICByZXR1cm4gZGVmZXJyZWRfbmV3anModiwgY3R4KTsKfQoKLypEZWZlcnJlZCoKZGVmZXJyZWRfbmV3anNfcnQoICBKU1ZhbHVlIHZhbHVlLCBKU0NvbnRleHQqIGN0eCkgewogIERlZmVycmVkKiBkZWY7CgogIGlmKChkZWYgPSBkZWZlcnJlZF9uZXcoZm4sIEpTX0dldFJ1bnRpbWUoY3R4KSwgdmFsdWUpKSkKICAgIGRlZi0+bmV4dCA9IGRlZmVycmVkX25ldyhkZWZlcnJlZF9mcmVlanNfcnQsIGRlZik7CgogIHJldHVybiBkZWY7Cn0KKi8Kdm9pZApkZWZlcnJlZF9pbml0KERlZmVycmVkKiBkZWYsIHB0cl90IGZuLCBpbnQgYXJnYywgcHRyX3QgYXJndltdKSB7CiAgaW50IGk7CgogIGRlZi0+cmVmX2NvdW50ID0gMDsKICBkZWYtPmZ1bmMgPSBmbjsKCiAgZm9yKGkgPSAwOyBpIDwgODsgaSsrKSB7IGRlZi0+YXJndltpXSA9IGkgPCBhcmdjID8gYXJndltpXSA6IDA7IH0KCiAgZGVmLT5hcmdjID0gYXJnYzsKICBkZWYtPm51bV9jYWxscyA9IDA7CiAgZGVmLT5vbmx5X29uY2UgPSBGQUxTRTsKICBkZWYtPm5leHQgPSAwOwp9CgpEb3VibGVXb3JkCmRlZmVycmVkX2NhbGxfeChEZWZlcnJlZCogZGVmLCAuLi4pIHsKICBwdHJfdCBjb25zdCogYXYgPSBkZWYtPmFyZ3Y7CiAgRG91YmxlV29yZCByZXQgPSB7ezAsIDB9fTsKICB2YV9saXN0IGE7CiAgaW50IGFyZ2MgPSBkZWYtPmFyZ2M7CiAgc2l6ZV90IGFyZzsKCiAgdmFfc3RhcnQoYSwgZGVmKTsKCiAgd2hpbGUoYXJnYyA8IGNvdW50b2YoZGVmLT5hcmd2KSAmJiAoYXJnID0gdmFfYXJnKGEsIHNpemVfdCkpKSB7CiAgICBpZihhcmcgPT0gREVGRVJSRURfU0VOVElORUwpCiAgICAgIGJyZWFrOwogICAgZGVmLT5hcmd2W2FyZ2MrK10gPSAocHRyX3QpYXJnOwogIH0KCiAgdmFfZW5kKGEpOwoKICBhc3NlcnQoIWRlZi0+b25seV9vbmNlIHx8IGRlZi0+bnVtX2NhbGxzIDwgMSk7CgogIGlmKCFkZWYtPm9ubHlfb25jZSB8fCBkZWYtPm51bV9jYWxscyA8IDEpIHsKCiAgICBpZihkZWYtPmZ1bmMgPT0gKHZvaWQqKSZKU19DYWxsKQogICAgICByZXQgPSBkZWYtPmZ1bmMoYXZbMF0sIGF2WzFdLCBhdlsyXSwgYXZbM10sIGF2WzRdLCAocHRyX3QpKHNpemVfdCkoKGFyZ2MgLSBkZWYtPmFyZ2MpID4gMCA/IDEgOiAwKSwgKHB0cl90KSZhdltkZWYtPmFyZ2NdLCAwKTsKICAgIGVsc2UKICAgICAgcmV0ID0gZGVmLT5mdW5jKGF2WzBdLCBhdlsxXSwgYXZbMl0sIGF2WzNdLCBhdls0XSwgYXZbNV0sIGF2WzZdLCBhdls3XSk7CgogICAgKytkZWYtPm51bV9jYWxsczsKICB9CgogIHJldHVybiByZXQ7Cn0KCnZvaWQKZGVmZXJyZWRfZGVzdHJ1Y3Rvcih2b2lkKiBwdHIpIHsKICBEZWZlcnJlZCogZGVmID0gcHRyOwoKICBkbyB7CiAgICBwdHIgPSBkZWYtPm5leHQ7CiAgICBkZWYtPm5leHQgPSBOVUxMOwogICAgZGVmZXJyZWRfY2FsbChkZWYpOwogICAgZGVmZXJyZWRfZnJlZShkZWYpOwogIH0gd2hpbGUoKGRlZiA9IHB0cikpOwp9Cgp2b2lkCmRlZmVycmVkX2ZpbmFsaXplcihKU1J1bnRpbWUqIHJ0LCB2b2lkKiBvcGFxdWUsIHZvaWQqIHB0cikgewogIGRlZmVycmVkX2Rlc3RydWN0b3Iob3BhcXVlKTsKfQoKc3RhdGljIEpTVmFsdWUKZGVmZXJyZWRfanNfY2FsbChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljLCBwdHJfdCBwdHIpIHsKICBEZWZlcnJlZCogZGVmID0gcHRyOwoKICByZXR1cm4gZGVmZXJyZWRfY2FsbChkZWYpLmpzOwp9CgpKU1ZhbHVlCmRlZmVycmVkX3RvanMoRGVmZXJyZWQqIGRlZiwgSlNDb250ZXh0KiBjdHgpIHsKICBkZWZlcnJlZF9kdXAoZGVmKTsKCiAgcmV0dXJuIGpzX2Z1bmN0aW9uX2NjbG9zdXJlKGN0eCwgZGVmZXJyZWRfanNfY2FsbCwgMCwgMCwgZGVmLCAodm9pZCAoKikocHRyX3QpKWRlZmVycmVkX2ZyZWUpOwp9CgAAAAAAAAAAtQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANgAAAAAAAAA2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC1DAAAI2luY2x1ZGUgPGFzc2VydC5oPgojaW5jbHVkZSAiZGVmZXJyZWQuaCIKI2luY2x1ZGUgImpzdXRpbHMuaCIKCnZvaWQKZGVmZXJyZWRfY2xlYXIoRGVmZXJyZWQqIGRlZikgewogIGRlZi0+bnVtX2NhbGxzID0gMDsKICBkZWYtPm9ubHlfb25jZSA9IEZBTFNFOwogIGRlZi0+ZnVuYyA9IDA7CgogIGZvcihpbnQgaSA9IDA7IGkgPCA4OyBpKyspIHsgZGVmLT5hcmd2W2ldID0gMDsgfQp9Cgp2b2lkCmRlZmVycmVkX2ZyZWUoRGVmZXJyZWQqIGRlZikgewogIGlmKGRlZi0+bmV4dCkKICAgIGRlZmVycmVkX2Rlc3RydWN0b3IoZGVmLT5uZXh0KTsKCiAgaWYoLS1kZWYtPnJlZl9jb3VudCA9PSAwKSB7CiAgICBkZWZlcnJlZF9jbGVhcihkZWYpOwogICAgZnJlZShkZWYpOwogIH0KfQoKRGVmZXJyZWQqCmRlZmVycmVkX25ld3YocHRyX3QgZm4sIGludCBhcmdjLCBwdHJfdCBhcmd2W10pIHsKICBEZWZlcnJlZCogZGVmOwoKICBpZighKGRlZiA9IG1hbGxvYyhzaXplb2YoRGVmZXJyZWQpKSkpCiAgICByZXR1cm4gMDsKCiAgZGVmZXJyZWRfaW5pdChkZWYsIGZuLCBhcmdjLCBhcmd2KTsKCiAgZGVmLT5yZWZfY291bnQgPSAxOwogIGRlZi0+bnVtX2NhbGxzID0gMDsKICBkZWYtPm9ubHlfb25jZSA9IEZBTFNFOwoKICByZXR1cm4gZGVmOwp9CgovKnN0YXRpYyB2b2lkCmRlZmVycmVkX2ZyZWVqcyhEZWZlcnJlZCogZGVmKSB7CiAgSlNWYWx1ZSB2YWx1ZSA9IGRlZmVycmVkX2dldGpzKGRlZik7CgogIEpTX0ZyZWVWYWx1ZShkZWYtPmFyZ3ZbMF0sIHZhbHVlKTsKfQoKc3RhdGljIHZvaWQKZGVmZXJyZWRfZnJlZWpzX3J0KERlZmVycmVkKiBkZWYpIHsKICBKU1ZhbHVlIHZhbHVlID0gZGVmZXJyZWRfZ2V0anMoZGVmKTsKCiAgSlNfRnJlZVZhbHVlUlQoZGVmLT5hcmd2WzBdLCB2YWx1ZSk7Cn0qLwoKRGVmZXJyZWQqCmRlZmVycmVkX25ld2pzKEpTVmFsdWUgZnVuYywgSlNDb250ZXh0KiBjdHgpIHsKICBEZWZlcnJlZCogZGVmOwogIC8qcHRyX3QgYXJnc1tdID0gewogICAgICBjdHgsCiAgICAgICgocHRyX3QqKSZ2KVswXSwKICAgICAgKChwdHJfdCopJnYpWzFdLAogIH07CiAgZGVmID0gZGVmZXJyZWRfbmV3dihmbiwgMywgYXJncyk7Ki8KICBkZWYgPSBkZWZlcnJlZF9uZXcoJkpTX0NhbGwsIGN0eCwgZnVuYywgSlNfVU5ERUZJTkVEKTsKCiAgZGVmLT5uZXh0ID0gZGVmZXJyZWRfbmV3KCZKU19GcmVlVmFsdWUsIGN0eCwgZnVuYyk7CiAgcmV0dXJuIGRlZjsKfQoKRGVmZXJyZWQqCmRlZmVycmVkX2R1cGpzKEpTVmFsdWVDb25zdCB2YWx1ZSwgSlNDb250ZXh0KiBjdHgpIHsKICBKU1ZhbHVlIHYgPSBKU19EdXBWYWx1ZShjdHgsIHZhbHVlKTsKICByZXR1cm4gZGVmZXJyZWRfbmV3anModiwgY3R4KTsKfQoKLypEZWZlcnJlZCoKZGVmZXJyZWRfbmV3anNfcnQoICBKU1ZhbHVlIHZhbHVlLCBKU0NvbnRleHQqIGN0eCkgewogIERlZmVycmVkKiBkZWY7CgogIGlmKChkZWYgPSBkZWZlcnJlZF9uZXcoZm4sIEpTX0dldFJ1bnRpbWUoY3R4KSwgdmFsdWUpKSkKICAgIGRlZi0+bmV4dCA9IGRlZmVycmVkX25ldyhkZWZlcnJlZF9mcmVlanNfcnQsIGRlZik7CgogIHJldHVybiBkZWY7Cn0KKi8Kdm9pZApkZWZlcnJlZF9pbml0KERlZmVycmVkKiBkZWYsIHB0cl90IGZuLCBpbnQgYXJnYywgcHRyX3QgYXJndltdKSB7CiAgaW50IGk7CgogIGRlZi0+cmVmX2NvdW50ID0gMDsKICBkZWYtPmZ1bmMgPSBmbjsKCiAgZm9yKGkgPSAwOyBpIDwgODsgaSsrKSB7IGRlZi0+YXJndltpXSA9IGkgPCBhcmdjID8gYXJndltpXSA6IDA7IH0KCiAgZGVmLT5hcmdjID0gYXJnYzsKICBkZWYtPm51bV9jYWxscyA9IDA7CiAgZGVmLT5vbmx5X29uY2UgPSBGQUxTRTsKICBkZWYtPm5leHQgPSAwOwp9CgpEb3VibGVXb3JkCmRlZmVycmVkX2NhbGxfeChEZWZlcnJlZCogZGVmLCAuLi4pIHsKICBwdHJfdCBjb25zdCogYXYgPSBkZWYtPmFyZ3Y7CiAgRG91YmxlV29yZCByZXQgPSB7ezAsIDB9fTsKICB2YV9saXN0IGE7CiAgaW50IGFyZ2MgPSBkZWYtPmFyZ2M7CiAgc2l6ZV90IGFyZzsKCiAgdmFfc3RhcnQoYSwgZGVmKTsKCiAgd2hpbGUoYXJnYyA8IGNvdW50b2YoZGVmLT5hcmd2KSAmJiAoYXJnID0gdmFfYXJnKGEsIHNpemVfdCkpKSB7CiAgICBpZihhcmcgPT0gREVGRVJSRURfU0VOVElORUwpCiAgICAgIGJyZWFrOwogICAgZGVmLT5hcmd2W2FyZ2MrK10gPSAocHRyX3QpYXJnOwogIH0KCiAgdmFfZW5kKGEpOwoKICBhc3NlcnQoIWRlZi0+b25seV9vbmNlIHx8IGRlZi0+bnVtX2NhbGxzIDwgMSk7CgogIGlmKCFkZWYtPm9ubHlfb25jZSB8fCBkZWYtPm51bV9jYWxscyA8IDEpIHsKCiAgICBpZihkZWYtPmZ1bmMgPT0gKHZvaWQqKSZKU19DYWxsKQogICAgICByZXQgPSBkZWYtPmZ1bmMoYXZbMF0sIGF2WzFdLCBhdlsyXSwgYXZbM10sIGF2WzRdLCAocHRyX3QpKHNpemVfdCkoKGFyZ2MgLSBkZWYtPmFyZ2MpID4gMCA/IDEgOiAwKSwgKHB0cl90KSZhdltkZWYtPmFyZ2NdLCAwKTsKICAgIGVsc2UKICAgICAgcmV0ID0gZGVmLT5mdW5jKGF2WzBdLCBhdlsxXSwgYXZbMl0sIGF2WzNdLCBhdls0XSwgYXZbNV0sIGF2WzZdLCBhdls3XSk7CgogICAgKytkZWYtPm51bV9jYWxsczsKICB9CgogIHJldHVybiByZXQ7Cn0KCnZvaWQKZGVmZXJyZWRfZGVzdHJ1Y3Rvcih2b2lkKiBwdHIpIHsKICBEZWZlcnJlZCogZGVmID0gcHRyOwoKICBkbyB7CiAgICBwdHIgPSBkZWYtPm5leHQ7CiAgICBkZWYtPm5leHQgPSBOVUxMOwogICAgZGVmZXJyZWRfY2FsbChkZWYpOwogICAgZGVmZXJyZWRfZnJlZShkZWYpOwogIH0gd2hpbGUoKGRlZiA9IHB0cikpOwp9Cgp2b2lkCmRlZmVycmVkX2ZpbmFsaXplcihKU1J1bnRpbWUqIHJ0LCB2b2lkKiBvcGFxdWUsIHZvaWQqIHB0cikgewogIGRlZmVycmVkX2Rlc3RydWN0b3Iob3BhcXVlKTsKfQoKc3RhdGljIEpTVmFsdWUKZGVmZXJyZWRfanNfY2FsbChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljLCBwdHJfdCBwdHIpIHsKICBEZWZlcnJlZCogZGVmID0gcHRyOwoKICByZXR1cm4gZGVmZXJyZWRfY2FsbChkZWYpLmpzOwp9CgpKU1ZhbHVlCmRlZmVycmVkX3RvanMoRGVmZXJyZWQqIGRlZiwgSlNDb250ZXh0KiBjdHgpIHsKICBkZWZlcnJlZF9kdXAoZGVmKTsKCiAgcmV0dXJuIEpTX05ld0NDbG9zdXJlKGN0eCwgZGVmZXJyZWRfanNfY2FsbCwgMCwgMCwgZGVmLCAodm9pZCAoKikocHRyX3QpKWRlZmVycmVkX2ZyZWUpOwp9CgAAAAAAAAAAuwwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANgAAAAAAAAA2AAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "tests/test-client-http.js",
			"settings":
			{
				"buffer_size": 2058,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					34,
					1,
					"insert",
					{
						"characters": ",sda"
					},
					"BAAAAGkBAAAAAAAAagEAAAAAAAAAAAAAagEAAAAAAABrAQAAAAAAAAAAAABrAQAAAAAAAGwBAAAAAAAAAAAAAGwBAAAAAAAAbQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpAQAAAAAAAGkBAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					2,
					"left_delete",
					null,
					"AgAAAGwBAAAAAAAAbAEAAAAAAAABAAAAYWsBAAAAAAAAawEAAAAAAAABAAAAZA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtAQAAAAAAAG0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "ave"
					},
					"AwAAAGsBAAAAAAAAbAEAAAAAAAAAAAAAbAEAAAAAAABtAQAAAAAAAAAAAABtAQAAAAAAAG4BAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrAQAAAAAAAGsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "\n\n\n\n"
					},
					"CwAAAIMFAAAAAAAAhAUAAAAAAAAAAAAAhAUAAAAAAACIBQAAAAAAAAAAAACIBQAAAAAAAIkFAAAAAAAAAAAAAIkFAAAAAAAAjQUAAAAAAAAAAAAAhAUAAAAAAACEBQAAAAAAAAQAAAAgICAgiQUAAAAAAACKBQAAAAAAAAAAAACKBQAAAAAAAI4FAAAAAAAAAAAAAIUFAAAAAAAAhQUAAAAAAAAEAAAAICAgIIoFAAAAAAAAiwUAAAAAAAAAAAAAiwUAAAAAAACPBQAAAAAAAAAAAACGBQAAAAAAAIYFAAAAAAAABAAAACAgICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACDBQAAAAAAAIMFAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "save"
					},
					"BQAAAIYFAAAAAAAAhwUAAAAAAAAAAAAAiAUAAAAAAACIBQAAAAAAAAQAAAAgICAghwUAAAAAAACIBQAAAAAAAAAAAACIBQAAAAAAAIkFAAAAAAAAAAAAAIkFAAAAAAAAigUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACGBQAAAAAAAIYFAAAAAAAAAAAAAAAAQEA"
				],
				[
					46,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIoFAAAAAAAAjAUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKBQAAAAAAAIoFAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAIsFAAAAAAAAjQUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACLBQAAAAAAAIsFAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAIwFAAAAAAAAjQUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMBQAAAAAAAIwFAAAAAAAAAAAAAAAA8L8"
				],
				[
					49,
					1,
					"left_delete",
					null,
					"AQAAAIwFAAAAAAAAjAUAAAAAAAABAAAAMA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNBQAAAAAAAI0FAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "output.txt"
					},
					"CgAAAIwFAAAAAAAAjQUAAAAAAAAAAAAAjQUAAAAAAACOBQAAAAAAAAAAAACOBQAAAAAAAI8FAAAAAAAAAAAAAI8FAAAAAAAAkAUAAAAAAAAAAAAAkAUAAAAAAACRBQAAAAAAAAAAAACRBQAAAAAAAJIFAAAAAAAAAAAAAJIFAAAAAAAAkwUAAAAAAAAAAAAAkwUAAAAAAACUBQAAAAAAAAAAAACUBQAAAAAAAJUFAAAAAAAAAAAAAJUFAAAAAAAAlgUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMBQAAAAAAAIwFAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"left_delete",
					null,
					"AQAAAJYFAAAAAAAAlgUAAAAAAAABAAAAJw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXBQAAAAAAAJcFAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJYFAAAAAAAAlwUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWBQAAAAAAAJYFAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJcFAAAAAAAAmAUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXBQAAAAAAAJcFAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					2,
					"left_delete",
					null,
					"AgAAAJcFAAAAAAAAlwUAAAAAAAABAAAAIJYFAAAAAAAAlgUAAAAAAAABAAAALA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACYBQAAAAAAAJgFAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "',"
					},
					"AgAAAJYFAAAAAAAAlwUAAAAAAAAAAAAAlwUAAAAAAACYBQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWBQAAAAAAAJYFAAAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": " cli.readable"
					},
					"DQAAAJgFAAAAAAAAmQUAAAAAAAAAAAAAmQUAAAAAAACaBQAAAAAAAAAAAACaBQAAAAAAAJsFAAAAAAAAAAAAAJsFAAAAAAAAnAUAAAAAAAAAAAAAnAUAAAAAAACdBQAAAAAAAAAAAACdBQAAAAAAAJ4FAAAAAAAAAAAAAJ4FAAAAAAAAnwUAAAAAAAAAAAAAnwUAAAAAAACgBQAAAAAAAAAAAACgBQAAAAAAAKEFAAAAAAAAAAAAAKEFAAAAAAAAogUAAAAAAAAAAAAAogUAAAAAAACjBQAAAAAAAAAAAACjBQAAAAAAAKQFAAAAAAAAAAAAAKQFAAAAAAAApQUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACYBQAAAAAAAJgFAAAAAAAAAAAAAAAA8L8"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKYFAAAAAAAApwUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmBQAAAAAAAKYFAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAKEGAAAAAAAAowYAAAAAAAAAAAAArQUAAAAAAACvBQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChBgAAAAAAAK0FAAAAAAAAAAAAAAAA8L8"
				],
				[
					82,
					1,
					"cut",
					null,
					"AQAAAJkFAAAAAAAAmQUAAAAAAAAMAAAAY2xpLnJlYWRhYmxl",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZBQAAAAAAAKUFAAAAAAAAAAAAAAAA8L8"
				],
				[
					85,
					1,
					"paste",
					null,
					"AQAAAIsFAAAAAAAAlwUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACLBQAAAAAAAIsFAAAAAAAAAAAAAAAA8L8"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJcFAAAAAAAAmAUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXBQAAAAAAAJcFAAAAAAAAAAAAAAAA8L8"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJgFAAAAAAAAmQUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACYBQAAAAAAAJgFAAAAAAAAAAAAAAAA8L8"
				],
				[
					89,
					2,
					"right_delete",
					null,
					"AgAAAKUFAAAAAAAApQUAAAAAAAABAAAALKUFAAAAAAAApQUAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClBQAAAAAAAKUFAAAAAAAAAAAAAAAA8L8"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAKUFAAAAAAAApgUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClBQAAAAAAAKUFAAAAAAAAAAAAAAAA8L8"
				],
				[
					91,
					1,
					"left_delete",
					null,
					"AQAAAKUFAAAAAAAApQUAAAAAAAABAAAAcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmBQAAAAAAAKYFAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAGCAAAaW1wb3J0IHsgZXhpdCwgcHV0cyB9IGZyb20gJ3N0ZCc7CmltcG9ydCB7IFVSTCwgTExMX0lORk8sIExMTF9VU0VSLCBzZXRMb2cgfSBmcm9tICduZXQnOwppbXBvcnQgQ2xpZW50IGZyb20gJy4vY2xpZW50LmpzJzsKaW1wb3J0IHsga2lsbCwgY2xvc2UsIGV4ZWMsIG9wZW4sIE9fUkRXUiwgc2V0UmVhZEhhbmRsZXIsIHNldFdyaXRlSGFuZGxlciwgV29ya2VyLCB0dHlTZXRSYXcsIHNsZWVwIH0gZnJvbSAnb3MnOwppbXBvcnQgeyBpbiBhcyBzdGRpbiwgb3V0IGFzIHN0ZG91dCwgZXJyIGFzIHN0ZGVyciB9IGZyb20gJ3N0ZCc7CmltcG9ydCB7IGFzc2VydCwgZ2V0cGlkLCBleGlzdHMsIHJhbmRTdHIsIGFiYnJldmlhdGUsIGVzY2FwZSxzYXZlIH0gZnJvbSAnLi9jb21tb24uanMnOwppbXBvcnQgeyBzcGF3biwgd2FpdDQgfSBmcm9tICcuL3NwYXduLmpzJzsKaW1wb3J0IHsgbG9nIH0gZnJvbSAnLi9sb2cuanMnOwoKYXN5bmMgZnVuY3Rpb24gbWFpbiguLi5hcmdzKSB7CiAgY29uc3QgZGVidWcgPSBhcmdzLmluZGV4T2YoJy14JykgIT0gLTE7CiAgYXJncyA9IGFyZ3MuZmlsdGVyKGFyZyA9PiAhL14tW3hdLy50ZXN0KGFyZykpOwogIGxldCBwaWQ7CgogIGlmKGFyZ3MubGVuZ3RoID09IDApIHsKICAgIHBpZCA9IHNwYXduKCdzZXJ2ZXIuanMnLCBbJ2xvY2FsaG9zdCcsIDMwMDAwXSwgbnVsbCAvKnNjcmlwdEFyZ3NbMF0ucmVwbGFjZSgvLipcLy9nLCAnJykucmVwbGFjZSgnLmpzJywgJy5sb2cnKSovKTsKICAgIHNsZWVwKDEwMDApOwogICAgYXJncy5wdXNoKCdodHRwczovL2xvY2FsaG9zdDozMDAwMC9zcmMvbWlubmV0LmgnKTsKICB9CgogIGZvcihsZXQgYXJnIG9mIGFyZ3MpIHsKICAgIGxldCBjbGk7CgogICAgY2xpID0gQ2xpZW50KAogICAgICBhcmcsCiAgICAgIHsKICAgICAgICBibG9jazogZmFsc2UsCiAgICAgICAgb25IdHRwKHJlcSwgcmVzcCkgewogICAgICAgICAgbG9nKCdvbkh0dHAnLCB7IHJlcSwgcmVzcCB9KTsKCiAgICAgICAgICAvKiAgbGV0IGJvZHkgPSByZXNwLnRleHQoKTsKICAgICAgICAgIHB1dHMoYm9keSk7Ki8KICAgICAgICAgIGxvZyhgSGVhZGVyczpgLCByZXNwLmhlYWRlcnMpOwogICAgICAgIH0sCiAgICAgICAgb25NZXNzYWdlKC4uLmFyZ3MpIHsKICAgICAgICAgIGxvZygnb25NZXNzYWdlJywgeyBhcmdzIH0pOwogICAgICAgICAgLyogc3Rkb3V0LnB1dHMoYFxyXHgxYlsxOzM0bTwgJHtlc2NhcGUobXNnKX1ceDFiWzBtXG5gKTsKICAgICAgICAgICAgc3Rkb3V0LmZsdXNoKCk7Ki8KICAgICAgICB9CiAgICAgIH0sCiAgICAgIDEgLy8gZGVidWcgPyBMTExfSU5GTyAtIDEgOiBMTExfVVNFUgogICAgKTsKCiAgICBjb25zb2xlLmxvZygnY2xpJywgY2xpKTsKICAgIGNvbnNvbGUubG9nKCdjbGkucmVhZGFibGUnLCBjbGkucmVhZGFibGUpOwoKCnNhdmUoY2xpLnJlYWRhYmxlLCAnb3V0cHV0LnR4dCcpOwoKICAgIC8qZm9yIGF3YWl0KGxldCBjaHVuayBvZiBjbGkucmVhZGFibGUpIHsKICAgICAgY29uc29sZS5sb2coCiAgICAgICAgJ0RBVEE6ICcgKwogICAgICAgICAgY2h1bmsKICAgICAgICAgICAgLnJlcGxhY2UoL1xuL2csICdcbiAgICAgICcpCiAgICAgICAgICAgIC5zcGxpdCgnXG4nKQogICAgICAgICAgICAubWFwKGxpbmUgPT4gbGluZS5zdWJzdHJpbmcoMCwgODApKQogICAgICAgICAgICAuam9pbignXG4nKQogICAgICApOwogICAgfSovCiAgfQoKICBmdW5jdGlvbiB0ZXJtaW5hdGUoY29kZSA9IDAsIGV4ID0gdHJ1ZSkgewogICAgbGV0IHN0YXR1czsKICAgIGtpbGwocGlkLCA5KTsKICAgIHdhaXQ0KHBpZCwgc3QgPT4gKChzdGF0dXMgPSBzdCksIGNvbnNvbGUubG9nKGBleGl0ZWQ6IHN0YXR1cz0ke3N0YXR1c31gKSkpOwogICAgaWYoZXgpIGV4aXQoY29kZSk7CiAgICBlbHNlIHJldHVybiBzdGF0dXM7CiAgfQp9Cgp0cnkgewogIG1haW4oLi4uc2NyaXB0QXJncy5zbGljZSgxKSk7Cn0gY2F0Y2goZXJyb3IpIHsKICBsb2coYEZBSUw6ICR7ZXJyb3IgJiYgZXJyb3IubWVzc2FnZX1cbiR7ZXJyb3IgJiYgZXJyb3Iuc3RhY2t9YCk7CiAgZXhpdCgxKTsKfQoAAAAAAAAAAAoIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQUAAAAAAADWBQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "tests/fetch.js",
			"settings":
			{
				"buffer_size": 1210,
				"line_ending": "Unix"
			}
		},
		{
			"file": "tests/test-fetch.js",
			"settings":
			{
				"buffer_size": 4454,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					50,
					1,
					"cut",
					null,
					"AQAAABMKAAAAAAAAEwoAAAAAAAAnAAAAICAgICAgICAgICAgbG9nKCdmaWxlbmFtZScsIGZpbGVuYW1lKTsK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATCgAAAAAAADoKAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					2,
					"paste",
					null,
					"AgAAABMKAAAAAAAAOgoAAAAAAAAAAAAAOgoAAAAAAABhCgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATCgAAAAAAABMKAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "console."
					},
					"CAAAAB8KAAAAAAAAIAoAAAAAAAAAAAAAIAoAAAAAAAAhCgAAAAAAAAAAAAAhCgAAAAAAACIKAAAAAAAAAAAAACIKAAAAAAAAIwoAAAAAAAAAAAAAIwoAAAAAAAAkCgAAAAAAAAAAAAAkCgAAAAAAACUKAAAAAAAAAAAAACUKAAAAAAAAJgoAAAAAAAAAAAAAJgoAAAAAAAAnCgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfCgAAAAAAAB8KAAAAAAAAAAAAAAAA8L8"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAB8KAAAAAAAAIAoAAAAAAAAAAAAAIAoAAAAAAAAsCgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfCgAAAAAAAB8KAAAAAAAAAAAAAAAAWEA"
				],
				[
					70,
					1,
					"cut",
					null,
					"AQAAACwKAAAAAAAALAoAAAAAAAAvAAAAY29uc29sZS5sb2coJ2ZpbGVuYW1lJywgZmlsZW5hbWUpOwogICAgICAgICAgICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsCgAAAAAAAFsKAAAAAAAAAAAAAAAAWEA"
				],
				[
					76,
					1,
					"paste",
					null,
					"AQAAAHQJAAAAAAAAowkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB0CQAAAAAAAHQJAAAAAAAAAAAAAAAA8L8"
				],
				[
					89,
					1,
					"paste",
					null,
					"AgAAAIEJAAAAAAAAhQkAAAAAAAAAAAAAhQkAAAAAAACFCQAAAAAAAAgAAABmaWxlbmFtZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBCQAAAAAAAIkJAAAAAAAAAAAAAAAA8L8"
				],
				[
					94,
					1,
					"paste",
					null,
					"AgAAAIgJAAAAAAAAjAkAAAAAAAAAAAAAjAkAAAAAAACMCQAAAAAAAAgAAABmaWxlbmFtZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACICQAAAAAAAJAJAAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					1,
					"cut",
					null,
					"AQAAAGoJAAAAAAAAagkAAAAAAAAlAAAAICAgICAgICAgIGNvbnNvbGUubG9nKCdwcm9tJywgcHJvbSk7Cg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqCQAAAAAAAI8JAAAAAAAAAAAAAAAA8L8"
				],
				[
					107,
					1,
					"paste",
					null,
					"AQAAAGoJAAAAAAAAjwkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqCQAAAAAAAGoJAAAAAAAAAAAAAAAA8L8"
				],
				[
					110,
					1,
					"paste",
					null,
					"AQAAAEoJAAAAAAAAbwkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABKCQAAAAAAAEoJAAAAAAAAAAAAAAAA8L8"
				],
				[
					125,
					1,
					"paste",
					null,
					"AgAAAGEJAAAAAAAAZAkAAAAAAAAAAAAAZAkAAAAAAABkCQAAAAAAAAQAAABwcm9t",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhCQAAAAAAAGUJAAAAAAAAAAAAAAAA8L8"
				],
				[
					130,
					1,
					"paste",
					null,
					"AgAAAGcJAAAAAAAAagkAAAAAAAAAAAAAagkAAAAAAABqCQAAAAAAAAQAAABwcm9t",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABnCQAAAAAAAGsJAAAAAAAAAAAAAAAA8L8"
				],
				[
					136,
					1,
					"cut",
					null,
					"AQAAAEQJAAAAAAAARAkAAAAAAAApAAAAICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdidWYnLCBidWYpOwo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABECQAAAAAAAG0JAAAAAAAAAAAAAAAAAAA"
				],
				[
					137,
					1,
					"paste",
					null,
					"AQAAAEQJAAAAAAAAbQkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABECQAAAAAAAEQJAAAAAAAAAAAAAAAA8L8"
				],
				[
					139,
					1,
					"paste",
					null,
					"AQAAAKEIAAAAAAAAyggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChCAAAAAAAAKEIAAAAAAAAAAAAAAAAAAA"
				],
				[
					150,
					1,
					"paste",
					null,
					"AgAAAL4IAAAAAAAAxQgAAAAAAAAAAAAAxQgAAAAAAADFCAAAAAAAAAMAAABidWY",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+CAAAAAAAAMEIAAAAAAAAAAAAAAAA8L8"
				],
				[
					155,
					1,
					"paste",
					null,
					"AgAAAMgIAAAAAAAAzwgAAAAAAAAAAAAAzwgAAAAAAADPCAAAAAAAAAMAAABidWY",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADICAAAAAAAAMsIAAAAAAAAAAAAAAAA8L8"
				],
				[
					160,
					1,
					"cut",
					null,
					"AQAAALEIAAAAAAAAsQgAAAAAAAAgAAAAY29uc29sZS5sb2coJ3Byb21pc2UnLCBwcm9taXNlKTs",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxCAAAAAAAANEIAAAAAAAA////////738"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAM4IAAAAAAAAzwgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADOCAAAAAAAAM4IAAAAAAAAAAAAAAAAYEA"
				],
				[
					164,
					1,
					"left_delete",
					null,
					"AQAAAM4IAAAAAAAAzggAAAAAAAABAAAAMQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPCAAAAAAAAM8IAAAAAAAAAAAAAAAA8L8"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAANcIAAAAAAAA2AgAAAAAAAAAAAAA2AgAAAAAAADeCAAAAAAAAAAAAADeCAAAAAAAAOAIAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXCAAAAAAAANcIAAAAAAAA////////738"
				],
				[
					167,
					1,
					"paste",
					null,
					"AQAAAOAIAAAAAAAAAAkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgCAAAAAAAAOAIAAAAAAAAAAAAAAAA8L8"
				],
				[
					179,
					1,
					"paste",
					null,
					"AgAAAO0IAAAAAAAA9QgAAAAAAAAAAAAA9QgAAAAAAAD1CAAAAAAAAAcAAABwcm9taXNl",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtCAAAAAAAAPQIAAAAAAAAAAAAAAAA8L8"
				],
				[
					184,
					1,
					"paste",
					null,
					"AgAAAPgIAAAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACQAAAAAAAAcAAABwcm9taXNl",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4CAAAAAAAAP8IAAAAAAAAAAAAAAAA8L8"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": "8"
					},
					"AQAAAMQIAAAAAAAAxQgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADECAAAAAAAAMQIAAAAAAAAAAAAAAAA8L8"
				],
				[
					195,
					2,
					"left_delete",
					null,
					"AgAAAKAIAAAAAAAAoAgAAAAAAAAlAAAACiAgICAgICAgICAgICAgICAKICAgIHByb21pc2UKICAgICAgOJ8IAAAAAAAAnwgAAAAAAAABAAAAOw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFCAAAAAAAAKAIAAAAAAAA////////738"
				],
				[
					199,
					1,
					"cut",
					null,
					"AQAAAH8IAAAAAAAAfwgAAAAAAAAOAAAAbGV0IHByb21pc2UgPSA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNCAAAAAAAAH8IAAAAAAAAAAAAAAAAQEA"
				],
				[
					228,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAGwQAAAAAAAAbRAAAAAAAAAAAAAAbRAAAAAAAABtEAAAAAAAACoAAAA7CiAgICBsb2coJ3Byb21pc2UnLCBwcm9taXNlKTsKICAgIHByb21pc2U",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWEAAAAAAAAGwQAAAAAAAAAAAAAAAA8L8"
				],
				[
					231,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAEwQAAAAAAAATRAAAAAAAAAAAAAATRAAAAAAAABNEAAAAAAAABAAAAAgICBsZXQgcHJvbWlzZSA9",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcEAAAAAAAAEwQAAAAAAAAAAAAAAAA8L8"
				],
				[
					236,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAABtEQAAaW1wb3J0IHsgZXhpdCwgcHV0cywgb3BlbiB9IGZyb20gJ3N0ZCc7CmltcG9ydCB7IGZldGNoLCBSZXF1ZXN0LCBSZXNwb25zZSwgc2V0TG9nLCBsb2dMZXZlbHMsIExMTF9ERUJVRywgTExMX0lORk8sIExMTF9VU0VSIH0gZnJvbSAnbmV0JzsKaW1wb3J0IHsgbG9nIH0gZnJvbSAnLi9sb2cuanMnOwoKZnVuY3Rpb24gV3JpdGVGaWxlKG5hbWUsIGRhdGEpIHsKICB0cnkgewogICAgbGV0IGYgPSBvcGVuKG5hbWUsICd3KycpOwogICAgbG9nKGBXcml0ZUZpbGUgXHgxYlsxOzMxbSR7bmFtZX1ceDFiWzBtID1gLCBmKTsKCiAgICBsZXQgciA9IGYud3JpdGUoZGF0YSwgMCwgZGF0YS5ieXRlTGVuZ3RoKTsKICAgIGYuY2xvc2UoKTsKICAgIHJldHVybiByOwogIH0gY2F0Y2goZXJyKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkbid0IHdyaXRlIHRvICcke25hbWV9JzogJHtlcnIubWVzc2FnZX1gKTsKICB9Cn0KCmZ1bmN0aW9uIEZldGNoTmV4dChhcnJheSkgewogIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgICBsZXQgdXJsID0gYXJyYXkuc2hpZnQoKTsKICAgIGxldCByZXFPYmo7CiAgICBsZXQgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KAogICAgICB1cmwsCiAgICAgIChyZXFPYmogPSB7CiAgICAgICAgaGVhZGVyczogewogICAgICAgICAgYWNjZXB0OgogICAgICAgICAgICAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45JywKICAgICAgICAgICdhY2NlcHQtbGFuZ3VhZ2UnOiAnZW4tVVMsZW47cT0wLjknLAogICAgICAgICAgcHJhZ21hOiAnbm8tY2FjaGUnLAogICAgICAgICAgJ2NhY2hlLWNvbnRyb2wnOiAnbm8tY2FjaGUnLAogICAgICAgICAgYXV0aG9yaXR5OiAnd3d3LmRpc2NvZ3MuY29tJywKICAgICAgICAgICd1c2VyLWFnZW50JzoKICAgICAgICAgICAgJ01vemlsbGEvNS4wIChYMTE7IExpbnV4IHg4Nl82NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzk5LjAuNDg0NC4yNyBTYWZhcmkvNTM3LjM2JywKICAgICAgICAgICd1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzJzogJzEnLAogICAgICAgICAgY29va2llOgogICAgICAgICAgICAnc2lkPWRlYjE0MzMwZjg5OTk1NTk4YjRjZDM3ZWNkOGYwYzNkOyBsYW5ndWFnZTI9ZW47IG1wX3Nlc3Npb249ZWQ1NzAwZjI1ZmFjM2M2NDNiODcyMTkxOyBPcHRhbm9uQ29uc2VudD1pc0lBQkdsb2JhbD1mYWxzZSZkYXRlc3RhbXA9TW9uK0ZlYisxNCsyMDIyKzA5JTNBMTUlM0E1OStHTVQlMkIwMTAwKyhDZW50cmFsK0V1cm9wZWFuK1N0YW5kYXJkK1RpbWUpJnZlcnNpb249Ni4yMC4wJmhvc3RzPSZjb25zZW50SWQ9MTZmNmIyMjYtYTBmZC00MjlkLWJhMzQtMGJkYWQ1N2QzOGYxJmludGVyYWN0aW9uQ291bnQ9MSZsYW5kaW5nUGF0aD1odHRwcyUzQSUyRiUyRnd3dy5kaXNjb2dzLmNvbSUyRnNlbGwlMkZ1bmRlZmluZWQmZ3JvdXBzPUMwMDAxJTNBMSUyQ0MwMDA0JTNBMSUyQ0MwMDAzJTNBMSUyQ0MwMDAyJTNBMSUyQ1NUQUNLOCUzQTA7IGN1cnJlbmN5PVVTRDsgY2tfdXNlcm5hbWU9ZGlza29zZW5uOyBwcGNfb25ib2FyZF9wcm9tcHQ9c2Vlbjsgc2Vzc2lvbj0iNVYwby9EMUxtMnYzT1l6MzJkUU52a1RlQWtFPT9fZXhwaXJlcz1NVFkyTWpNM05EWTRNUT09JmF1dGhfdG9rZW49SWt0Q1owdFdhV2R4V2twM2NXZHVielprWTBSb01YcEViMDlFSWc9PSZjcmVhdGVkX2F0PUlqSXdNakl0TURNdE1EbFVNVEE2TkRRNk5ERXVNamMzTURreElnPT0maWRwJTNBdXNlcl9pZD1PRE0yT1RBeU1nPT0iOyBfX2NmX2JtPXdvMXZiY3NIZFJMZFAxZC4wVEdFWjRuTlo0Q3JFXzNLMmo2RW11Ym9hYTgtMTY0NzA2NzUyNi0wLUFWTDEvc0hrb1JoRjcvUUlYdU1DNW5zVFdRR285SGVGdlYrdW5OMkF6S2RwUll4NzVmZ1FjTytvLzhtcVdWdVArQ0ZCekNvVlgraUdhUVcyejNlZGZOcz0nCiAgICAgICAgfQogICAgICB9KQogICAgKTsKICAgIGxvZyhgZmV0Y2hpbmcgXHgxYlsxOzMzbSR7dXJsfVx4MWJbMG1gKTsKICAgIGxvZyhjb25zb2xlLmNvbmZpZyh7IGNvbXBhY3Q6IDAgfSksICdyZXF1ZXN0OicsIHJlcXVlc3QpOwogICAgZmV0Y2godXJsLCByZXFPYmopLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgIGNvbnNvbGUubG9nKCdyZXNwb25zZScsIHJlc3BvbnNlKTsKICAgICAgICBsb2coY29uc29sZS5jb25maWcoeyBjb21wYWN0OiAwIH0pLCByZXNwb25zZSk7CiAgICAgICAgbGV0IHByb20gPSByZXNwb25zZS5hcnJheUJ1ZmZlcigpOwogICAgICAgIHByb20udGhlbihidWYgPT4gewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2J1ZicsIGJ1Zik7CiAgICBsZXQgcHJvbSA9IHJlc3BvbnNlLnRleHQoKTsKICAgICAgICAgIGNvbnNvbGUubG9nKCdwcm9tJywgcHJvbSk7CiAgICAgICAgICAgIHByb20udGhlbih0ZXh0ID0+IHsKICAgICAgICAgICAgbG9nKCdhcnJheUJ1ZmZlcigpJywgY29uc29sZS5jb25maWcoeyBjb21wYWN0OiAyIH0pLCBidWYpOwoKICAgICAgICAgICAgbGV0IGZpbGVuYW1lID0gcmVzcG9uc2UudXJsLnBhdGgucmVwbGFjZSgvLipcLy9nLCAnJyk7CiAgICAgICAgICAgIAogICAgICAgICAgICBsb2coJ2ZpbGVuYW1lJywgZmlsZW5hbWUpOwogICAgICAgICAgICBXcml0ZUZpbGUoZmlsZW5hbWUsIGJ1Zik7CgogICAgICAgICAgICBhcnJheS5sZW5ndGggPyBGZXRjaE5leHQoYXJyYXkpIDogcmVzb2x2ZSgpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pCiAgICAgIC5jYXRjaChlcnJvciA9PiAobG9nKCdlcnJvcicsIGVycm9yKSwgcmVqZWN0KGVycm9yKSkpOwogIH0pOwp9CgpmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBpZihhcmdzLmxlbmd0aCA9PSAwKQogICAgLy9hcmdzID0gWydodHRwOi8vd3d3LnczLm9yZy9Ib21lLmh0bWwnXTsKICAgIGFyZ3MgPQogICAgICAnQXNzaXMsQXV0b3JlbixCYWNrZ3JvdW5kcyxCZWtsYWdlbnN3ZXJ0LEJld2VndW5nTWF0ZXJpZSxCb2R5TWFzc0luZGV4LEJyaWVmQmVueixDRVJOX0F1ZmZhc3N1bmdlbixEZWFkRW5kQmlnQmFuZyxFbGVtZW50YXJ0ZWlsY2hlbixHT01BbnR3b3J0LEdPTVByb2pla3QsR2xhdWJlLEdyYXZpdGF0aW9uLEhpbnRlcmdydWVuZGUsSGl4LEpvb3NzLEthcGlsbGFyZSxLcnVlZ2VyLExldHRlckJlbnosTWFzc2VFbmVyZ2llRmVobGVyMSxNYXRlcmllLE1hdGVyaWVkZWZpbml0aW9uLE5ldWVzQ0VSTixOZXV0cmlub3MsTm9iZWxwcmVpcyxQTV9VcmtuYWxsLFBoeXNpa0ZlaGxlcixQaHlzaWtfaGV1dGUsUGh5c2lrZXJQaHlzaWssUGlzdG9yUG9obCxTYWNrZ2Fzc2VVcmtuYWxsLFRlZ21hcmssVGhlb3JpZVByYXhpcyxVcmtuYWxsLFVya25hbGxiZXNjaHJlaWJ1bmcsV2FzSXN0TG9zLFdlbHRyYXVtdGVsZXNrb3AsV2hhdElzR29pbmcsV2lraXBlZGlhUGh5c2lrX0VpbmxlaXR1bmcnCiAgICAgICAgLnNwbGl0KCcsJykKICAgICAgICAubWFwKG4gPT4gYGh0dHA6Ly9oYXVwdHBsYXR6LnVuaXBvaGwuZGUvV2lzc2Vuc2NoYWZ0LyR7bn0uaHRtYCk7CgogIHNldExvZygKICAgIC0xLAogICAgKCgpID0+IHsKICAgICAgbGV0IGxmID0gb3BlbigndGVzdC1mZXRjaC5sb2cnLCAndycpOwogICAgICByZXR1cm4gKGxldmVsLCBtc2cpID0+IHsKICAgICAgICAvLyAgbG9nKGxvZ0xldmVsc1tsZXZlbF0ucGFkRW5kKDEwKSArIG1zZyk7CiAgICAgICAgbGYucHV0cyhsb2dMZXZlbHNbbGV2ZWxdLnBhZEVuZCgxMCkgKyBtc2cgKyAnXG4nKTsKICAgICAgICBsZi5mbHVzaCgpOwogICAgICB9OwogICAgfSkoKQogICk7CgogIGltcG9ydCgnY29uc29sZScpCiAgICAudGhlbigKICAgICAgKHsgQ29uc29sZSB9KSA9PiAoCiAgICAgICAgKGdsb2JhbFRoaXMuY29uc29sZSA9IG5ldyBDb25zb2xlKHsKICAgICAgICAgIGluc3BlY3RPcHRpb25zOiB7IGNvbXBhY3Q6IDEsIGRlcHRoOiAyLCBtYXhBcnJheUxlbmd0aDogMTAsIG1heFN0cmluZ0xlbmd0aDogNjQsIHJlcGFyc2VhYmxlOiBmYWxzZSB9CiAgICAgICAgfSkpLAogICAgICAgIHJ1bigpCiAgICAgICkKICAgICkKICAgIC5jYXRjaChydW4pOwoKICBmdW5jdGlvbiBydW4oKSB7CiAgIEZldGNoTmV4dChhcmdzKSAKICAgICAgLnRoZW4oKCkgPT4gewogICAgICAgIGxvZygnU1VDQ0VFREVEJyk7CiAgICAgIH0pCiAgICAgIC5jYXRjaChlcnIgPT4gewogICAgICAgIGxvZygnRkFJTEVEOicsIHR5cGVvZiBlcnIsIGVycik7CiAgICAgIH0pOwogIH0KfQoKdHJ5IHsKICBtYWluKC4uLnNjcmlwdEFyZ3Muc2xpY2UoMSkpOwp9IGNhdGNoKGVycm9yKSB7CiAgbG9nKGBGQUlMOiAke2Vycm9yICYmIGVycm9yLm1lc3NhZ2V9XG4ke2Vycm9yICYmIGVycm9yLnN0YWNrfWApOwogIGV4aXQoMSk7Cn0KAAAAAAAAAABmEQAAAAAAAAAAAAAAAAAAAAAAAGYRAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNEAAAAAAAAE0QAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "tests/test-client.js",
			"settings":
			{
				"buffer_size": 4096,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					9,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAFEDAAAAAAAAUgMAAAAAAAAAAAAAUgMAAAAAAABUAwAAAAAAAAAAAABUAwAAAAAAAFUDAAAAAAAAAAAAAFUDAAAAAAAAVwMAAAAAAAAAAAAAUgMAAAAAAABSAwAAAAAAAAIAAAAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRAwAAAAAAAFEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"paste",
					null,
					"AQAAAFUDAAAAAAAAVwQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABVAwAAAAAAAFUDAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAABMAAAAAAAAAFAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATAAAAAAAAABMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"left_delete",
					null,
					"AQAAABMAAAAAAAAAEwAAAAAAAAABAAAALg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAUAAAAAAAAABQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABMAAAAAAAAAFAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATAAAAAAAAABMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " open"
					},
					"BQAAABQAAAAAAAAAFQAAAAAAAAAAAAAAFQAAAAAAAAAWAAAAAAAAAAAAAAAWAAAAAAAAABcAAAAAAAAAAAAAABcAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAZAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAUAAAAAAAAABQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					3,
					"left_delete",
					null,
					"AwAAAJcAAAAAAAAAlwAAAAAAAAAEAAAAb3BlbpYAAAAAAAAAlgAAAAAAAAABAAAAIJUAAAAAAAAAlQAAAAAAAAABAAAALA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXAAAAAAAAAJsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "client"
					},
					"BwAAAI0DAAAAAAAAjgMAAAAAAAAAAAAAjgMAAAAAAACOAwAAAAAAAAUAAABmZXRjaI4DAAAAAAAAjwMAAAAAAAAAAAAAjwMAAAAAAACQAwAAAAAAAAAAAACQAwAAAAAAAJEDAAAAAAAAAAAAAJEDAAAAAAAAkgMAAAAAAAAAAAAAkgMAAAAAAACTAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNAwAAAAAAAJIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAHsDAAAAAAAAfAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7AwAAAAAAAHsDAAAAAAAAAAAAAAAAUEA"
				],
				[
					97,
					1,
					"left_delete",
					null,
					"AQAAAHsDAAAAAAAAewMAAAAAAAABAAAAMQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8AwAAAAAAAHwDAAAAAAAAAAAAAAAA8L8"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAADYEAAAAAAAANwQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2BAAAAAAAADYEAAAAAAAAAAAAAAAAUEA"
				],
				[
					104,
					1,
					"left_delete",
					null,
					"AQAAADYEAAAAAAAANgQAAAAAAAABAAAAMQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3BAAAAAAAADcEAAAAAAAAAAAAAAAA8L8"
				],
				[
					115,
					2,
					"left_delete",
					null,
					"AgAAAMgDAAAAAAAAyAMAAAAAAAABAAAAL8cDAAAAAAAAxwMAAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADJAwAAAAAAAMkDAAAAAAAAAAAAAAAA8L8"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": "console.-"
					},
					"CQAAAMcDAAAAAAAAyAMAAAAAAAAAAAAAyAMAAAAAAADJAwAAAAAAAAAAAADJAwAAAAAAAMoDAAAAAAAAAAAAAMoDAAAAAAAAywMAAAAAAAAAAAAAywMAAAAAAADMAwAAAAAAAAAAAADMAwAAAAAAAM0DAAAAAAAAAAAAAM0DAAAAAAAAzgMAAAAAAAAAAAAAzgMAAAAAAADPAwAAAAAAAAAAAADPAwAAAAAAANADAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADHAwAAAAAAAMcDAAAAAAAAAAAAAAAA8L8"
				],
				[
					119,
					2,
					"left_delete",
					null,
					"AgAAAM8DAAAAAAAAzwMAAAAAAAABAAAALc4DAAAAAAAAzgMAAAAAAAABAAAALg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADQAwAAAAAAANADAAAAAAAAAAAAAAAA8L8"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAM4DAAAAAAAAzwMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADOAwAAAAAAAM4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					121,
					1,
					"left_delete",
					null,
					"AQAAAM4DAAAAAAAAzgMAAAAAAAABAAAALA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPAwAAAAAAAM8DAAAAAAAAAAAAAAAA8L8"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAM4DAAAAAAAAzwMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADOAwAAAAAAAM4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					123,
					2,
					"right_delete",
					null,
					"AgAAAM8DAAAAAAAAzwMAAAAAAAABAAAAIM8DAAAAAAAAzwMAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPAwAAAAAAAM8DAAAAAAAAAAAAAAAA8L8"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPYDAAAAAAAA9wMAAAAAAAAAAAAA9wMAAAAAAAD/AwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2AwAAAAAAAPYDAAAAAAAA////////738"
				],
				[
					130,
					1,
					"insert",
					{
						"characters": "std.puts"
					},
					"CAAAAP8DAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAABBAAAAAAAAAAAAAABBAAAAAAAAAIEAAAAAAAAAAAAAAIEAAAAAAAAAwQAAAAAAAAAAAAAAwQAAAAAAAAEBAAAAAAAAAAAAAAEBAAAAAAAAAUEAAAAAAAAAAAAAAUEAAAAAAAABgQAAAAAAAAAAAAABgQAAAAAAAAHBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/AwAAAAAAAP8DAAAAAAAAAAAAAAAAUEA"
				],
				[
					131,
					8,
					"left_delete",
					null,
					"CAAAAAYEAAAAAAAABgQAAAAAAAABAAAAcwUEAAAAAAAABQQAAAAAAAABAAAAdAQEAAAAAAAABAQAAAAAAAABAAAAdQMEAAAAAAAAAwQAAAAAAAABAAAAcAIEAAAAAAAAAgQAAAAAAAABAAAALgEEAAAAAAAAAQQAAAAAAAABAAAAZAAEAAAAAAAAAAQAAAAAAAABAAAAdP8DAAAAAAAA/wMAAAAAAAABAAAAcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHBAAAAAAAAAcEAAAAAAAAAAAAAAAA8L8"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": "püut"
					},
					"BAAAAP8DAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAABBAAAAAAAAAAAAAABBAAAAAAAAAIEAAAAAAAAAAAAAAIEAAAAAAAAAwQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/AwAAAAAAAP8DAAAAAAAAAAAAAAAA8L8"
				],
				[
					133,
					3,
					"left_delete",
					null,
					"AwAAAAIEAAAAAAAAAgQAAAAAAAABAAAAdAEEAAAAAAAAAQQAAAAAAAABAAAAdQAEAAAAAAAAAAQAAAAAAAACAAAAw7w",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAADBAAAAAAAAAMEAAAAAAAAAAAAAAAA8L8"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": "uts"
					},
					"AwAAAAAEAAAAAAAAAQQAAAAAAAAAAAAAAQQAAAAAAAACBAAAAAAAAAAAAAACBAAAAAAAAAMEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAA8L8"
				],
				[
					135,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAMEAAAAAAAABQQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAADBAAAAAAAAAMEAAAAAAAAAAAAAAAA8L8"
				],
				[
					136,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAAQEAAAAAAAABgQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEBAAAAAAAAAQEAAAAAAAAAAAAAAAA8L8"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": "LOG:"
					},
					"BAAAAAUEAAAAAAAABgQAAAAAAAAAAAAABgQAAAAAAAAHBAAAAAAAAAAAAAAHBAAAAAAAAAgEAAAAAAAAAAAAAAgEAAAAAAAACQQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAFBAAAAAAAAAUEAAAAAAAAAAAAAAAA8L8"
				],
				[
					139,
					1,
					"left_delete",
					null,
					"AQAAAAkEAAAAAAAACQQAAAAAAAABAAAAIg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKBAAAAAAAAAoEAAAAAAAAAAAAAAAA8L8"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAkEAAAAAAAACgQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJBAAAAAAAAAkEAAAAAAAAAAAAAAAA8L8"
				],
				[
					141,
					1,
					"left_delete",
					null,
					"AQAAAAkEAAAAAAAACQQAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKBAAAAAAAAAoEAAAAAAAAAAAAAAAA8L8"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": " \"+msg"
					},
					"BgAAAAkEAAAAAAAACgQAAAAAAAAAAAAACgQAAAAAAAALBAAAAAAAAAAAAAALBAAAAAAAAAwEAAAAAAAAAAAAAAwEAAAAAAAADQQAAAAAAAAAAAAADQQAAAAAAAAOBAAAAAAAAAAAAAAOBAAAAAAAAA8EAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJBAAAAAAAAAkEAAAAAAAAAAAAAAAA8L8"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABAEAAAAAAAAEQQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQBAAAAAAAABAEAAAAAAAAAAAAAAAA8L8"
				],
				[
					174,
					1,
					"cut",
					null,
					"AQAAADUAAAAAAAAANQAAAAAAAAAKAAAAIExMTF9JTkZPLA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1AAAAAAAAAD8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					175,
					2,
					"paste",
					null,
					"AgAAADUAAAAAAAAAPwAAAAAAAAAAAAAAPwAAAAAAAABJAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1AAAAAAAAADUAAAAAAAAAAAAAAAAA8L8"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": "ALL"
					},
					"BAAAADoAAAAAAAAAOwAAAAAAAAAAAAAAOwAAAAAAAAA7AAAAAAAAAAQAAABJTkZPOwAAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAAD0AAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6AAAAAAAAAD4AAAAAAAAAAAAAAAAA8L8"
				],
				[
					196,
					1,
					"paste",
					null,
					"AgAAAGoDAAAAAAAAcQMAAAAAAAAAAAAAcQMAAAAAAABxAwAAAAAAAAMAAAAgLTE",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtAwAAAAAAAGoDAAAAAAAAAAAAAAAA8L8"
				],
				[
					207,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABfDwAAaW1wb3J0IHsgZXhpdCwgcHV0cywgb3BlbiB9IGZyb20gJ3N0ZCc7CmltcG9ydCB7IFVSTCwgTExMX0FMTCwgTExMX0lORk8sIExMTF9VU0VSLCBzZXRMb2cgfSBmcm9tICduZXQnOwppbXBvcnQgQ2xpZW50IGZyb20gJy4vY2xpZW50LmpzJzsKaW1wb3J0IHsgY2xvc2UsIGV4ZWMsIE9fUkRXUiwgc2V0UmVhZEhhbmRsZXIsIHNldFdyaXRlSGFuZGxlciwgV29ya2VyLCB0dHlTZXRSYXcsIHNsZWVwLCBraWxsLCBzaWduYWwsIFNJR0lOVCB9IGZyb20gJ29zJzsKaW1wb3J0IHsgaW4gYXMgc3RkaW4sIG91dCBhcyBzdGRvdXQsIGVyciBhcyBzdGRlcnIgfSBmcm9tICdzdGQnOwppbXBvcnQgeyBhc3NlcnQsIGdldHBpZCwgZXhpc3RzLCByYW5kU3RyLCBhYmJyZXZpYXRlLCBlc2NhcGUgfSBmcm9tICcuL2NvbW1vbi5qcyc7CmltcG9ydCB7IHNwYXduLCB3YWl0NCwgV05PSEFORyB9IGZyb20gJy4vc3Bhd24uanMnOwppbXBvcnQgeyBsb2cgfSBmcm9tICcuL2xvZy5qcyc7CgpmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBjb25zdCBkZWJ1ZyA9IGFyZ3MuaW5kZXhPZignLXgnKSAhPSAtMTsKICBhcmdzID0gYXJncy5maWx0ZXIoYXJnID0+ICEvXi1beF0vLnRlc3QoYXJnKSk7CiAgbGV0IHBpZDsKCiAgaWYoYXJncy5sZW5ndGggPT0gMCkgewogICAgcGlkID0gc3Bhd24oCiAgICAgICdzZXJ2ZXIuanMnLAogICAgICBbJ2xvY2FsaG9zdCcsIDMwMDAwXSwKICAgICAgbnVsbCAvLyAgICAgIHNjcmlwdEFyZ3NbMF0ucmVwbGFjZSgvLipcLy9nLCAnJykucmVwbGFjZSgnLmpzJywgJy5sb2cnKQogICAgKTsKICAgIHNsZWVwKDEwMDApOwogICAgYXJncy5wdXNoKCd3c3M6Ly9sb2NhbGhvc3Q6MzAwMDAvd3MnKTsKICB9CgogICBzZXRMb2coCiAgIExMTF9BTEwsCiAgICAoKCkgPT4gewogICAgICBsZXQgbGYgPSBvcGVuKCd0ZXN0LWNsaWVudC5sb2cnLCAndycpOwogICAgICByZXR1cm4gKGxldmVsLCBtc2cpID0+IHsKICAgICAgICBjb25zb2xlLmxvZyhsb2dMZXZlbHNbbGV2ZWxdLnBhZEVuZCgxMCkgKyBtc2cpOwogICAgICAgIHB1dHMoIkxPRzogIittc2cpOwogICAgICAgIGxmLnB1dHMobG9nTGV2ZWxzW2xldmVsXS5wYWRFbmQoMTApICsgbXNnICsgJ1xuJyk7CiAgICAgICAgbGYuZmx1c2goKTsKICAgICAgfTsKICAgIH0pKCkKICApOwoKICAoYXN5bmMgZnVuY3Rpb24oKSB7CiAgICBmb3IobGV0IGFyZyBvZiBhcmdzKSB7CiAgICAgIGxldCBwciwgZ2VuOwoKICAgICAgcHIgPSBDbGllbnQoCiAgICAgICAgYXJnLAogICAgICAgIHsKICAgICAgICAgIGJsb2NrOiBmYWxzZSwKICAgICAgICAgIG9uQ29ubmVjdCh3cywgcmVxKSB7CiAgICAgICAgICAgIGxvZygnb25Db25uZWN0JywgeyB3cywgcmVxIH0pOwoKICAgICAgICAgICAgaWYocmVxPy51cmw/LnByb3RvY29sKSB7CiAgICAgICAgICAgICAgY29uc3QgeyBwcm90b2NvbCB9ID0gcmVxLnVybDsKICAgICAgICAgICAgICBsb2coJ3Byb3RvY29sJywgcHJvdG9jb2wpOwoKICAgICAgICAgICAgICBpZighcHJvdG9jb2wuc3RhcnRzV2l0aCgnaHR0cCcpKSB7CiAgICAgICAgICAgICAgICBpZihwcm90b2NvbC5zdGFydHNXaXRoKCd3cycpKSB7CiAgICAgICAgICAgICAgICAgIHNldFJlYWRIYW5kbGVyKDAsICgpID0+IHsKICAgICAgICAgICAgICAgICAgICBzdGRvdXQucHV0cyhgXHJceDFiWzA7MzdtPmApOwogICAgICAgICAgICAgICAgICAgIHN0ZG91dC5mbHVzaCgpOwogICAgICAgICAgICAgICAgICAgIGxldCBsaW5lID0gc3RkaW4uZ2V0bGluZSgpOwoKICAgICAgICAgICAgICAgICAgICBpZihsaW5lLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgbGV0IHMgPSBsaW5lOwogICAgICAgICAgICAgICAgICAgICAgbGV0IHByID0gd3Muc2VuZChsaW5lKTsKICAgICAgICAgICAgICAgICAgICAgIGxvZygncHI6JywgeyBwciwgcyB9KTsKICAgICAgICAgICAgICAgICAgICAgIHByLnRoZW4oKCkgPT4gbG9nKCdTZW50OicsIHsgcyB9KSk7CiAgICAgICAgICAgICAgICAgICAgICBzdGRvdXQucHV0cyhgXHgxYlswbVxuYCk7CiAgICAgICAgICAgICAgICAgICAgICBzdGRvdXQuZmx1c2goKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgdHR5U2V0UmF3KDApOwogICAgICAgICAgICAgICAgICBzZXRSZWFkSGFuZGxlcigwLCAoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgbGV0IGIgPSBzdGRpbi5nZXRCeXRlKCk7CiAgICAgICAgICAgICAgICAgICAgaWYoYiA9PSAxMykgYiA9IDEwOwogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoYiA9PSAxMjcpIGIgPSA4OwogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoYiA8IDMyIHx8IGIgPiAneicuY2hhckNvZGVBdCgwKSkgc3Rkb3V0LnB1dHMoJ2NoYXI6ICcgKyBiKTsKICAgICAgICAgICAgICAgICAgICBzdGRvdXQucHV0Qnl0ZShiKTsKICAgICAgICAgICAgICAgICAgICBzdGRvdXQuZmx1c2goKTsKCiAgICAgICAgICAgICAgICAgICAgd3Muc2VuZChTdHJpbmcuZnJvbUNoYXJDb2RlKGIpKTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBzaWduYWwoU0lHSU5ULCAoKSA9PiB7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1NJR0lOVCcsIHRlcm1pbmF0ZSgwLCBmYWxzZSkpOwogICAgICAgICAgICAgIHdzLmNsb3NlKCk7CiAgICAgICAgICAgICAgZXhpdCgwKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9LAogICAgICAgICAgb25DbG9zZSh3cywgc3RhdHVzLCByZWFzb24sIGVycm9yKSB7CiAgICAgICAgICAgIGxvZygnb25DbG9zZScsIHsgd3MsIHN0YXR1cywgcmVhc29uLCBlcnJvciB9KTsKICAgICAgICAgICAgdGVybWluYXRlKDApOwogICAgICAgICAgfSwKICAgICAgICAgIG9uRXJyb3Iod3MsIGVycm9yKSB7CiAgICAgICAgICAgIGxvZygnb25FcnJvcicsIHsgd3MsIGVycm9yIH0pOwogICAgICAgICAgICB0ZXJtaW5hdGUoMSk7CiAgICAgICAgICB9LAogICAgICAgICAgb25NZXNzYWdlKHdzLCBtc2cpIHsKICAgICAgICAgICAgbG9nKCdvbk1lc3NhZ2UnLCB7IHdzLCBtc2cgfSk7CiAgICAgICAgICAgIHN0ZG91dC5wdXRzKGBcclx4MWJbMTszNG08ICR7ZXNjYXBlKG1zZyl9XHgxYlswbVxuYCk7CiAgICAgICAgICAgIHN0ZG91dC5mbHVzaCgpOwogICAgICAgICAgICAvLyB3cy5jbG9zZSgxMDAwKTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGRlYnVnID8gTExMX0lORk8gLSAxIDogTExMX1VTRVIKICAgICAgKTsKCiAgICAgIGNvbnNvbGUubG9nKCdwcicsIHByKTsKICAgICAgY29uc29sZS5sb2coJ3ByW1N5bWJvbC5hc3luY0l0ZXJhdG9yXScsIHByW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSk7CgogICAgICBmb3IgYXdhaXQobGV0IGNodW5rIG9mIHByKSB7CiAgICAgICAgY29uc29sZS5sb2coJ2NodW5rJywgY2h1bmspOwogICAgICB9CiAgICAgIC8vICAgIGF3YWl0IHByOwogICAgfQogIH0pKCk7CgogIGZ1bmN0aW9uIHRlcm1pbmF0ZShjb2RlID0gMCwgZXggPSB0cnVlKSB7CiAgICBsZXQgc3RhdHVzOwogICAgaWYocGlkID4gMCkgewogICAgICBraWxsKHBpZCwgOSk7CiAgICAgIHdhaXQ0KHBpZCwgc3QgPT4gKChzdGF0dXMgPSBzdCksIGNvbnNvbGUubG9nKGBleGl0ZWQ6IHN0YXR1cz0ke3N0YXR1c31gKSkpOwogICAgfQogICAgaWYoZXgpIGV4aXQoY29kZSk7CiAgICBlbHNlIHJldHVybiBzdGF0dXM7CiAgfQp9Cgp0cnkgewogIG1haW4oLi4uc2NyaXB0QXJncy5zbGljZSgxKSk7Cn0gY2F0Y2goZXJyb3IpIHsKICBsb2coYEZBSUw6ICR7ZXJyb3IgJiYgZXJyb3IubWVzc2FnZX1cbiR7ZXJyb3IgJiYgZXJyb3Iuc3RhY2t9YCk7CiAgZXhpdCgxKTsKfQoAAAAAAAAAAGEPAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxAwAAAAAAAHEDAAAAAAAAAAAAAAAAVEA"
				],
				[
					234,
					2,
					"right_delete",
					null,
					"AgAAANQDAAAAAAAA1AMAAAAAAAAHAAAAY29uc29sZdQDAAAAAAAA1AMAAAAAAAABAAAALg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADUAwAAAAAAANsDAAAAAAAAAAAAAAAA8L8"
				],
				[
					242,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAH4EAAAAAAAAgAQAAAAAAAAAAAAAXgMAAAAAAABgAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+BAAAAAAAAF4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					283,
					2,
					"right_delete",
					null,
					"AgAAABANAAAAAAAAEA0AAAAAAAAHAAAAY29uc29sZRANAAAAAAAAEA0AAAAAAAABAAAALg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQDQAAAAAAABcNAAAAAAAAAAAAAAAA8L8"
				],
				[
					288,
					2,
					"right_delete",
					null,
					"AgAAACUNAAAAAAAAJQ0AAAAAAAAHAAAAY29uc29sZSUNAAAAAAAAJQ0AAAAAAAABAAAALg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlDQAAAAAAACwNAAAAAAAAAAAAAAAA8L8"
				],
				[
					293,
					2,
					"right_delete",
					null,
					"AgAAAIwNAAAAAAAAjA0AAAAAAAAHAAAAY29uc29sZYwNAAAAAAAAjA0AAAAAAAABAAAALg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMDQAAAAAAAJMNAAAAAAAAAAAAAAAA8L8"
				],
				[
					298,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAF8NAAAAAAAAYQ0AAAAAAAAAAAAAEA0AAAAAAAASDQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQDQAAAAAAAF8NAAAAAAAAAAAAAAAA8L8"
				],
				[
					311,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAA4NAAAAAAAADw0AAAAAAAAAAAAADw0AAAAAAAAPDQAAAAAAAAQAAAAgIC8q",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASDQAAAAAAAA4NAAAAAAAAAAAAAAAA8L8"
				],
				[
					314,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAF4NAAAAAAAAXw0AAAAAAAAAAAAAXw0AAAAAAABfDQAAAAAAAAIAAAAqLw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeDQAAAAAAAGANAAAAAAAAAAAAAAAA8L8"
				],
				[
					319,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABFDwAAaW1wb3J0IHsgZXhpdCwgcHV0cywgb3BlbiB9IGZyb20gJ3N0ZCc7CmltcG9ydCB7IFVSTCwgTExMX0FMTCwgTExMX0lORk8sIExMTF9VU0VSLCBzZXRMb2cgfSBmcm9tICduZXQnOwppbXBvcnQgQ2xpZW50IGZyb20gJy4vY2xpZW50LmpzJzsKaW1wb3J0IHsgY2xvc2UsIGV4ZWMsIE9fUkRXUiwgc2V0UmVhZEhhbmRsZXIsIHNldFdyaXRlSGFuZGxlciwgV29ya2VyLCB0dHlTZXRSYXcsIHNsZWVwLCBraWxsLCBzaWduYWwsIFNJR0lOVCB9IGZyb20gJ29zJzsKaW1wb3J0IHsgaW4gYXMgc3RkaW4sIG91dCBhcyBzdGRvdXQsIGVyciBhcyBzdGRlcnIgfSBmcm9tICdzdGQnOwppbXBvcnQgeyBhc3NlcnQsIGdldHBpZCwgZXhpc3RzLCByYW5kU3RyLCBhYmJyZXZpYXRlLCBlc2NhcGUgfSBmcm9tICcuL2NvbW1vbi5qcyc7CmltcG9ydCB7IHNwYXduLCB3YWl0NCwgV05PSEFORyB9IGZyb20gJy4vc3Bhd24uanMnOwppbXBvcnQgeyBsb2cgfSBmcm9tICcuL2xvZy5qcyc7CgpmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBjb25zdCBkZWJ1ZyA9IGFyZ3MuaW5kZXhPZignLXgnKSAhPSAtMTsKICBhcmdzID0gYXJncy5maWx0ZXIoYXJnID0+ICEvXi1beF0vLnRlc3QoYXJnKSk7CiAgbGV0IHBpZDsKCiAgaWYoYXJncy5sZW5ndGggPT0gMCkgewogICAgcGlkID0gc3Bhd24oCiAgICAgICdzZXJ2ZXIuanMnLAogICAgICBbJ2xvY2FsaG9zdCcsIDMwMDAwXSwKICAgICAgbnVsbCAvLyAgICAgIHNjcmlwdEFyZ3NbMF0ucmVwbGFjZSgvLipcLy9nLCAnJykucmVwbGFjZSgnLmpzJywgJy5sb2cnKQogICAgKTsKICAgIHNsZWVwKDEwMDApOwogICAgYXJncy5wdXNoKCd3c3M6Ly9sb2NhbGhvc3Q6MzAwMDAvd3MnKTsKICB9CgogIC8qc2V0TG9nKAogICAgTExMX0FMTCwKICAgICgoKSA9PiB7CiAgICAgIGxldCBsZiA9IG9wZW4oJ3Rlc3QtY2xpZW50LmxvZycsICd3Jyk7CiAgICAgIHJldHVybiAobGV2ZWwsIG1zZykgPT4gewogICAgICAgIGxvZyhsb2dMZXZlbHNbbGV2ZWxdLnBhZEVuZCgxMCkgKyBtc2cpOwogICAgICAgIHB1dHMoJ0xPRzogJyArIG1zZyk7CiAgICAgICAgbGYucHV0cyhsb2dMZXZlbHNbbGV2ZWxdLnBhZEVuZCgxMCkgKyBtc2cgKyAnXG4nKTsKICAgICAgICBsZi5mbHVzaCgpOwogICAgICB9OwogICAgfSkoKQogICk7Ki8KCiAgKGFzeW5jIGZ1bmN0aW9uKCkgewogICAgZm9yKGxldCBhcmcgb2YgYXJncykgewogICAgICBsZXQgcHIsIGdlbjsKCiAgICAgIHByID0gQ2xpZW50KAogICAgICAgIGFyZywKICAgICAgICB7CiAgICAgICAgICBibG9jazogZmFsc2UsCiAgICAgICAgICBvbkNvbm5lY3Qod3MsIHJlcSkgewogICAgICAgICAgICBsb2coJ29uQ29ubmVjdCcsIHsgd3MsIHJlcSB9KTsKCiAgICAgICAgICAgIGlmKHJlcT8udXJsPy5wcm90b2NvbCkgewogICAgICAgICAgICAgIGNvbnN0IHsgcHJvdG9jb2wgfSA9IHJlcS51cmw7CiAgICAgICAgICAgICAgbG9nKCdwcm90b2NvbCcsIHByb3RvY29sKTsKCiAgICAgICAgICAgICAgaWYoIXByb3RvY29sLnN0YXJ0c1dpdGgoJ2h0dHAnKSkgewogICAgICAgICAgICAgICAgaWYocHJvdG9jb2wuc3RhcnRzV2l0aCgnd3MnKSkgewogICAgICAgICAgICAgICAgICBzZXRSZWFkSGFuZGxlcigwLCAoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgc3Rkb3V0LnB1dHMoYFxyXHgxYlswOzM3bT5gKTsKICAgICAgICAgICAgICAgICAgICBzdGRvdXQuZmx1c2goKTsKICAgICAgICAgICAgICAgICAgICBsZXQgbGluZSA9IHN0ZGluLmdldGxpbmUoKTsKCiAgICAgICAgICAgICAgICAgICAgaWYobGluZS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgIGxldCBzID0gbGluZTsKICAgICAgICAgICAgICAgICAgICAgIGxldCBwciA9IHdzLnNlbmQobGluZSk7CiAgICAgICAgICAgICAgICAgICAgICBsb2coJ3ByOicsIHsgcHIsIHMgfSk7CiAgICAgICAgICAgICAgICAgICAgICBwci50aGVuKCgpID0+IGxvZygnU2VudDonLCB7IHMgfSkpOwogICAgICAgICAgICAgICAgICAgICAgc3Rkb3V0LnB1dHMoYFx4MWJbMG1cbmApOwogICAgICAgICAgICAgICAgICAgICAgc3Rkb3V0LmZsdXNoKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIHR0eVNldFJhdygwKTsKICAgICAgICAgICAgICAgICAgc2V0UmVhZEhhbmRsZXIoMCwgKCkgPT4gewogICAgICAgICAgICAgICAgICAgIGxldCBiID0gc3RkaW4uZ2V0Qnl0ZSgpOwogICAgICAgICAgICAgICAgICAgIGlmKGIgPT0gMTMpIGIgPSAxMDsKICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGIgPT0gMTI3KSBiID0gODsKICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGIgPCAzMiB8fCBiID4gJ3onLmNoYXJDb2RlQXQoMCkpIHN0ZG91dC5wdXRzKCdjaGFyOiAnICsgYik7CiAgICAgICAgICAgICAgICAgICAgc3Rkb3V0LnB1dEJ5dGUoYik7CiAgICAgICAgICAgICAgICAgICAgc3Rkb3V0LmZsdXNoKCk7CgogICAgICAgICAgICAgICAgICAgIHdzLnNlbmQoU3RyaW5nLmZyb21DaGFyQ29kZShiKSk7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgc2lnbmFsKFNJR0lOVCwgKCkgPT4gewogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTSUdJTlQnLCB0ZXJtaW5hdGUoMCwgZmFsc2UpKTsKICAgICAgICAgICAgICB3cy5jbG9zZSgpOwogICAgICAgICAgICAgIGV4aXQoMCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSwKICAgICAgICAgIG9uQ2xvc2Uod3MsIHN0YXR1cywgcmVhc29uLCBlcnJvcikgewogICAgICAgICAgICBsb2coJ29uQ2xvc2UnLCB7IHdzLCBzdGF0dXMsIHJlYXNvbiwgZXJyb3IgfSk7CiAgICAgICAgICAgIHRlcm1pbmF0ZSgwKTsKICAgICAgICAgIH0sCiAgICAgICAgICBvbkVycm9yKHdzLCBlcnJvcikgewogICAgICAgICAgICBsb2coJ29uRXJyb3InLCB7IHdzLCBlcnJvciB9KTsKICAgICAgICAgICAgdGVybWluYXRlKDEpOwogICAgICAgICAgfSwKICAgICAgICAgIG9uTWVzc2FnZSh3cywgbXNnKSB7CiAgICAgICAgICAgIGxvZygnb25NZXNzYWdlJywgeyB3cywgbXNnIH0pOwogICAgICAgICAgICBzdGRvdXQucHV0cyhgXHJceDFiWzE7MzRtPCAke2VzY2FwZShtc2cpfVx4MWJbMG1cbmApOwogICAgICAgICAgICBzdGRvdXQuZmx1c2goKTsKICAgICAgICAgICAgLy8gd3MuY2xvc2UoMTAwMCk7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBkZWJ1ZyA/IExMTF9JTkZPIC0gMSA6IExMTF9VU0VSCiAgICAgICk7CgogICAgIGxvZygncHInLCBwcik7CiAgICAgIGxvZygncHJbU3ltYm9sLmFzeW5jSXRlcmF0b3JdJywgcHJbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKTsgCgogICAgICBmb3IgYXdhaXQobGV0IGNodW5rIG9mIHByKSB7CiAgICAgICAgbG9nKCdjaHVuaycsIGNodW5rKTsKICAgICAgfQogICAgICAvLyAgICBhd2FpdCBwcjsKICAgIH0KICB9KSgpOwoKICBmdW5jdGlvbiB0ZXJtaW5hdGUoY29kZSA9IDAsIGV4ID0gdHJ1ZSkgewogICAgbGV0IHN0YXR1czsKICAgIGlmKHBpZCA+IDApIHsKICAgICAga2lsbChwaWQsIDkpOwogICAgICB3YWl0NChwaWQsIHN0ID0+ICgoc3RhdHVzID0gc3QpLCBjb25zb2xlLmxvZyhgZXhpdGVkOiBzdGF0dXM9JHtzdGF0dXN9YCkpKTsKICAgIH0KICAgIGlmKGV4KSBleGl0KGNvZGUpOwogICAgZWxzZSByZXR1cm4gc3RhdHVzOwogIH0KfQoKdHJ5IHsKICBtYWluKC4uLnNjcmlwdEFyZ3Muc2xpY2UoMSkpOwp9IGNhdGNoKGVycm9yKSB7CiAgbG9nKGBGQUlMOiAke2Vycm9yICYmIGVycm9yLm1lc3NhZ2V9XG4ke2Vycm9yICYmIGVycm9yLnN0YWNrfWApOwogIGV4aXQoMSk7Cn0KAAAAAAAAAAB1DwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABfDQAAAAAAAF8NAAAAAAAAAAAAAAAA8L8"
				],
				[
					324,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB1DwAAaW1wb3J0IHsgZXhpdCwgcHV0cywgb3BlbiB9IGZyb20gJ3N0ZCc7CmltcG9ydCB7IFVSTCwgTExMX0FMTCwgTExMX0lORk8sIExMTF9VU0VSLCBzZXRMb2cgfSBmcm9tICduZXQnOwppbXBvcnQgQ2xpZW50IGZyb20gJy4vY2xpZW50LmpzJzsKaW1wb3J0IHsgY2xvc2UsIGV4ZWMsIE9fUkRXUiwgc2V0UmVhZEhhbmRsZXIsIHNldFdyaXRlSGFuZGxlciwgV29ya2VyLCB0dHlTZXRSYXcsIHNsZWVwLCBraWxsLCBzaWduYWwsIFNJR0lOVCB9IGZyb20gJ29zJzsKaW1wb3J0IHsgaW4gYXMgc3RkaW4sIG91dCBhcyBzdGRvdXQsIGVyciBhcyBzdGRlcnIgfSBmcm9tICdzdGQnOwppbXBvcnQgeyBhc3NlcnQsIGdldHBpZCwgZXhpc3RzLCByYW5kU3RyLCBhYmJyZXZpYXRlLCBlc2NhcGUgfSBmcm9tICcuL2NvbW1vbi5qcyc7CmltcG9ydCB7IHNwYXduLCB3YWl0NCwgV05PSEFORyB9IGZyb20gJy4vc3Bhd24uanMnOwppbXBvcnQgeyBsb2cgfSBmcm9tICcuL2xvZy5qcyc7CgpmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBjb25zdCBkZWJ1ZyA9IGFyZ3MuaW5kZXhPZignLXgnKSAhPSAtMTsKICBhcmdzID0gYXJncy5maWx0ZXIoYXJnID0+ICEvXi1beF0vLnRlc3QoYXJnKSk7CiAgbGV0IHBpZDsKCiAgaWYoYXJncy5sZW5ndGggPT0gMCkgewogICAgcGlkID0gc3Bhd24oCiAgICAgICdzZXJ2ZXIuanMnLAogICAgICBbJ2xvY2FsaG9zdCcsIDMwMDAwXSwKICAgICAgbnVsbCAvLyAgICAgIHNjcmlwdEFyZ3NbMF0ucmVwbGFjZSgvLipcLy9nLCAnJykucmVwbGFjZSgnLmpzJywgJy5sb2cnKQogICAgKTsKICAgIHNsZWVwKDEwMDApOwogICAgYXJncy5wdXNoKCd3c3M6Ly9sb2NhbGhvc3Q6MzAwMDAvd3MnKTsKICB9CgogIC8qc2V0TG9nKAogICAgTExMX0FMTCwKICAgICgoKSA9PiB7CiAgICAgIGxldCBsZiA9IG9wZW4oJ3Rlc3QtY2xpZW50LmxvZycsICd3Jyk7CiAgICAgIHJldHVybiAobGV2ZWwsIG1zZykgPT4gewogICAgICAgIGxvZyhsb2dMZXZlbHNbbGV2ZWxdLnBhZEVuZCgxMCkgKyBtc2cpOwogICAgICAgIHB1dHMoJ0xPRzogJyArIG1zZyk7CiAgICAgICAgbGYucHV0cyhsb2dMZXZlbHNbbGV2ZWxdLnBhZEVuZCgxMCkgKyBtc2cgKyAnXG4nKTsKICAgICAgICBsZi5mbHVzaCgpOwogICAgICB9OwogICAgfSkoKQogICk7Ki8KCiAgKGFzeW5jIGZ1bmN0aW9uKCkgewogICAgZm9yKGxldCBhcmcgb2YgYXJncykgewogICAgICBsZXQgcmVzdWx0LCBnZW47CgogICAgICByZXN1bHQgPSBDbGllbnQoCiAgICAgICAgYXJnLAogICAgICAgIHsKICAgICAgICAgIGJsb2NrOiBmYWxzZSwKICAgICAgICAgIG9uQ29ubmVjdCh3cywgcmVxKSB7CiAgICAgICAgICAgIGxvZygnb25Db25uZWN0JywgeyB3cywgcmVxIH0pOwoKICAgICAgICAgICAgaWYocmVxPy51cmw/LnByb3RvY29sKSB7CiAgICAgICAgICAgICAgY29uc3QgeyBwcm90b2NvbCB9ID0gcmVxLnVybDsKICAgICAgICAgICAgICBsb2coJ3Byb3RvY29sJywgcHJvdG9jb2wpOwoKICAgICAgICAgICAgICBpZighcHJvdG9jb2wuc3RhcnRzV2l0aCgnaHR0cCcpKSB7CiAgICAgICAgICAgICAgICBpZihwcm90b2NvbC5zdGFydHNXaXRoKCd3cycpKSB7CiAgICAgICAgICAgICAgICAgIHNldFJlYWRIYW5kbGVyKDAsICgpID0+IHsKICAgICAgICAgICAgICAgICAgICBzdGRvdXQucHV0cyhgXHJceDFiWzA7MzdtPmApOwogICAgICAgICAgICAgICAgICAgIHN0ZG91dC5mbHVzaCgpOwogICAgICAgICAgICAgICAgICAgIGxldCBsaW5lID0gc3RkaW4uZ2V0bGluZSgpOwoKICAgICAgICAgICAgICAgICAgICBpZihsaW5lLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgbGV0IHMgPSBsaW5lOwogICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHdzLnNlbmQobGluZSk7CiAgICAgICAgICAgICAgICAgICAgICBsb2coJ3Jlc3VsdDonLCB7IHJlc3VsdCwgcyB9KTsKICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC50aGVuKCgpID0+IGxvZygnU2VudDonLCB7IHMgfSkpOwogICAgICAgICAgICAgICAgICAgICAgc3Rkb3V0LnB1dHMoYFx4MWJbMG1cbmApOwogICAgICAgICAgICAgICAgICAgICAgc3Rkb3V0LmZsdXNoKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIHR0eVNldFJhdygwKTsKICAgICAgICAgICAgICAgICAgc2V0UmVhZEhhbmRsZXIoMCwgKCkgPT4gewogICAgICAgICAgICAgICAgICAgIGxldCBiID0gc3RkaW4uZ2V0Qnl0ZSgpOwogICAgICAgICAgICAgICAgICAgIGlmKGIgPT0gMTMpIGIgPSAxMDsKICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGIgPT0gMTI3KSBiID0gODsKICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGIgPCAzMiB8fCBiID4gJ3onLmNoYXJDb2RlQXQoMCkpIHN0ZG91dC5wdXRzKCdjaGFyOiAnICsgYik7CiAgICAgICAgICAgICAgICAgICAgc3Rkb3V0LnB1dEJ5dGUoYik7CiAgICAgICAgICAgICAgICAgICAgc3Rkb3V0LmZsdXNoKCk7CgogICAgICAgICAgICAgICAgICAgIHdzLnNlbmQoU3RyaW5nLmZyb21DaGFyQ29kZShiKSk7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgc2lnbmFsKFNJR0lOVCwgKCkgPT4gewogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTSUdJTlQnLCB0ZXJtaW5hdGUoMCwgZmFsc2UpKTsKICAgICAgICAgICAgICB3cy5jbG9zZSgpOwogICAgICAgICAgICAgIGV4aXQoMCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSwKICAgICAgICAgIG9uQ2xvc2Uod3MsIHN0YXR1cywgcmVhc29uLCBlcnJvcikgewogICAgICAgICAgICBsb2coJ29uQ2xvc2UnLCB7IHdzLCBzdGF0dXMsIHJlYXNvbiwgZXJyb3IgfSk7CiAgICAgICAgICAgIHRlcm1pbmF0ZSgwKTsKICAgICAgICAgIH0sCiAgICAgICAgICBvbkVycm9yKHdzLCBlcnJvcikgewogICAgICAgICAgICBsb2coJ29uRXJyb3InLCB7IHdzLCBlcnJvciB9KTsKICAgICAgICAgICAgdGVybWluYXRlKDEpOwogICAgICAgICAgfSwKICAgICAgICAgIG9uTWVzc2FnZSh3cywgbXNnKSB7CiAgICAgICAgICAgIGxvZygnb25NZXNzYWdlJywgeyB3cywgbXNnIH0pOwogICAgICAgICAgICBzdGRvdXQucHV0cyhgXHJceDFiWzE7MzRtPCAke2VzY2FwZShtc2cpfVx4MWJbMG1cbmApOwogICAgICAgICAgICBzdGRvdXQuZmx1c2goKTsKICAgICAgICAgICAgLy8gd3MuY2xvc2UoMTAwMCk7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBkZWJ1ZyA/IExMTF9JTkZPIC0gMSA6IExMTF9VU0VSCiAgICAgICk7CgogICAgIGxvZygncmVzdWx0JywgcmVzdWx0KTsKICAgICAgbG9nKCdyZXN1bHRbU3ltYm9sLmFzeW5jSXRlcmF0b3JdJywgcmVzdWx0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSk7IAoKICAgICAgZm9yIGF3YWl0KGxldCBjaHVuayBvZiByZXN1bHQpIHsKICAgICAgICBsb2coJ2NodW5rJywgY2h1bmspOwogICAgICB9CiAgICAgIC8vICAgIGF3YWl0IHJlc3VsdDsKICAgIH0KICB9KSgpOwoKICBmdW5jdGlvbiB0ZXJtaW5hdGUoY29kZSA9IDAsIGV4ID0gdHJ1ZSkgewogICAgbGV0IHN0YXR1czsKICAgIGlmKHBpZCA+IDApIHsKICAgICAga2lsbChwaWQsIDkpOwogICAgICB3YWl0NChwaWQsIHN0ID0+ICgoc3RhdHVzID0gc3QpLCBjb25zb2xlLmxvZyhgZXhpdGVkOiBzdGF0dXM9JHtzdGF0dXN9YCkpKTsKICAgIH0KICAgIGlmKGV4KSBleGl0KGNvZGUpOwogICAgZWxzZSByZXR1cm4gc3RhdHVzOwogIH0KfQoKdHJ5IHsKICBtYWluKC4uLnNjcmlwdEFyZ3Muc2xpY2UoMSkpOwp9IGNhdGNoKGVycm9yKSB7CiAgbG9nKGBGQUlMOiAke2Vycm9yICYmIGVycm9yLm1lc3NhZ2V9XG4ke2Vycm9yICYmIGVycm9yLnN0YWNrfWApOwogIGV4aXQoMSk7Cn0KAAAAAAAAAAB1DwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkDAAAAAAAAOQMAAAAAAAAAAAAAAAA8L8"
				],
				[
					338,
					1,
					"insert",
					{
						"characters": ".readable"
					},
					"CQAAAKwNAAAAAAAArQ0AAAAAAAAAAAAArQ0AAAAAAACuDQAAAAAAAAAAAACuDQAAAAAAAK8NAAAAAAAAAAAAAK8NAAAAAAAAsA0AAAAAAAAAAAAAsA0AAAAAAACxDQAAAAAAAAAAAACxDQAAAAAAALINAAAAAAAAAAAAALINAAAAAAAAsw0AAAAAAAAAAAAAsw0AAAAAAAC0DQAAAAAAAAAAAAC0DQAAAAAAALUNAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsDQAAAAAAAKwNAAAAAAAAAAAAAAAA8L8"
				],
				[
					346,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAANQNAAAAAAAA1Q0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADUDQAAAAAAANQNAAAAAAAAAAAAAAAA8L8"
				],
				[
					347,
					2,
					"left_delete",
					null,
					"AgAAANQNAAAAAAAA1A0AAAAAAAABAAAALtMNAAAAAAAA0w0AAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVDQAAAAAAANUNAAAAAAAAAAAAAAAA8L8"
				],
				[
					348,
					1,
					"insert",
					{
						"characters": ".length)"
					},
					"CAAAANMNAAAAAAAA1A0AAAAAAAAAAAAA1A0AAAAAAADVDQAAAAAAAAAAAADVDQAAAAAAANYNAAAAAAAAAAAAANYNAAAAAAAA1w0AAAAAAAAAAAAA1w0AAAAAAADYDQAAAAAAAAAAAADYDQAAAAAAANkNAAAAAAAAAAAAANkNAAAAAAAA2g0AAAAAAAAAAAAA2g0AAAAAAADbDQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTDQAAAAAAANMNAAAAAAAAAAAAAAAA8L8"
				],
				[
					372,
					1,
					"insert",
					{
						"characters": ",save"
					},
					"BQAAAIIBAAAAAAAAgwEAAAAAAAAAAAAAgwEAAAAAAACEAQAAAAAAAAAAAACEAQAAAAAAAIUBAAAAAAAAAAAAAIUBAAAAAAAAhgEAAAAAAAAAAAAAhgEAAAAAAACHAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCAQAAAAAAAIIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					380,
					1,
					"insert",
					{
						"characters": "\n\nsave"
					},
					"BgAAAI0NAAAAAAAAjg0AAAAAAAAAAAAAjg0AAAAAAACPDQAAAAAAAAAAAACPDQAAAAAAAJANAAAAAAAAAAAAAJANAAAAAAAAkQ0AAAAAAAAAAAAAkQ0AAAAAAACSDQAAAAAAAAAAAACSDQAAAAAAAJMNAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNDQAAAAAAAI0NAAAAAAAAAAAAAAAA8L8"
				],
				[
					381,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJMNAAAAAAAAlQ0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACTDQAAAAAAAJMNAAAAAAAAAAAAAAAA8L8"
				],
				[
					382,
					1,
					"insert",
					{
						"characters": "result.readea"
					},
					"DQAAAJQNAAAAAAAAlQ0AAAAAAAAAAAAAlQ0AAAAAAACWDQAAAAAAAAAAAACWDQAAAAAAAJcNAAAAAAAAAAAAAJcNAAAAAAAAmA0AAAAAAAAAAAAAmA0AAAAAAACZDQAAAAAAAAAAAACZDQAAAAAAAJoNAAAAAAAAAAAAAJoNAAAAAAAAmw0AAAAAAAAAAAAAmw0AAAAAAACcDQAAAAAAAAAAAACcDQAAAAAAAJ0NAAAAAAAAAAAAAJ0NAAAAAAAAng0AAAAAAAAAAAAAng0AAAAAAACfDQAAAAAAAAAAAACfDQAAAAAAAKANAAAAAAAAAAAAAKANAAAAAAAAoQ0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUDQAAAAAAAJQNAAAAAAAAAAAAAAAA8L8"
				],
				[
					383,
					2,
					"left_delete",
					null,
					"AgAAAKANAAAAAAAAoA0AAAAAAAABAAAAYZ8NAAAAAAAAnw0AAAAAAAABAAAAZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChDQAAAAAAAKENAAAAAAAAAAAAAAAA8L8"
				],
				[
					384,
					1,
					"insert",
					{
						"characters": "able,"
					},
					"BQAAAJ8NAAAAAAAAoA0AAAAAAAAAAAAAoA0AAAAAAAChDQAAAAAAAAAAAAChDQAAAAAAAKINAAAAAAAAAAAAAKINAAAAAAAAow0AAAAAAAAAAAAAow0AAAAAAACkDQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfDQAAAAAAAJ8NAAAAAAAAAAAAAAAA8L8"
				],
				[
					385,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAKQNAAAAAAAApg0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkDQAAAAAAAKQNAAAAAAAAAAAAAAAA8L8"
				],
				[
					386,
					1,
					"insert",
					{
						"characters": "output.txt"
					},
					"CgAAAKUNAAAAAAAApg0AAAAAAAAAAAAApg0AAAAAAACnDQAAAAAAAAAAAACnDQAAAAAAAKgNAAAAAAAAAAAAAKgNAAAAAAAAqQ0AAAAAAAAAAAAAqQ0AAAAAAACqDQAAAAAAAAAAAACqDQAAAAAAAKsNAAAAAAAAAAAAAKsNAAAAAAAArA0AAAAAAAAAAAAArA0AAAAAAACtDQAAAAAAAAAAAACtDQAAAAAAAK4NAAAAAAAAAAAAAK4NAAAAAAAArw0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClDQAAAAAAAKUNAAAAAAAAAAAAAAAA8L8"
				],
				[
					388,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALENAAAAAAAAsg0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxDQAAAAAAALENAAAAAAAAAAAAAAAA8L8"
				],
				[
					393,
					1,
					"left_delete",
					null,
					"AQAAAA4OAAAAAAAADg4AAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPDgAAAAAAAA8OAAAAAAAAAAAAAAAAAAA"
				],
				[
					394,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAA4OAAAAAAAADw4AAAAAAAAAAAAADw4AAAAAAAAVDgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAODgAAAAAAAA4OAAAAAAAAAAAAAAAA8L8"
				],
				[
					396,
					1,
					"cut",
					null,
					"AQAAABUOAAAAAAAAFQ4AAAAAAAAZAAAAICAgICAgLy8gICAgYXdhaXQgcmVzdWx0Ow",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVDgAAAAAAAC4OAAAAAAAA////////738"
				],
				[
					400,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACcDwAAaW1wb3J0IHsgZXhpdCwgcHV0cywgb3BlbiB9IGZyb20gJ3N0ZCc7CmltcG9ydCB7IFVSTCwgTExMX0FMTCwgTExMX0lORk8sIExMTF9VU0VSLCBzZXRMb2cgfSBmcm9tICduZXQnOwppbXBvcnQgQ2xpZW50IGZyb20gJy4vY2xpZW50LmpzJzsKaW1wb3J0IHsgY2xvc2UsIGV4ZWMsIE9fUkRXUiwgc2V0UmVhZEhhbmRsZXIsIHNldFdyaXRlSGFuZGxlciwgV29ya2VyLCB0dHlTZXRSYXcsIHNsZWVwLCBraWxsLCBzaWduYWwsIFNJR0lOVCB9IGZyb20gJ29zJzsKaW1wb3J0IHsgaW4gYXMgc3RkaW4sIG91dCBhcyBzdGRvdXQsIGVyciBhcyBzdGRlcnIgfSBmcm9tICdzdGQnOwppbXBvcnQgeyBhc3NlcnQsIGdldHBpZCwgZXhpc3RzLCByYW5kU3RyLCBhYmJyZXZpYXRlLCBlc2NhcGUsc2F2ZSB9IGZyb20gJy4vY29tbW9uLmpzJzsKaW1wb3J0IHsgc3Bhd24sIHdhaXQ0LCBXTk9IQU5HIH0gZnJvbSAnLi9zcGF3bi5qcyc7CmltcG9ydCB7IGxvZyB9IGZyb20gJy4vbG9nLmpzJzsKCmZ1bmN0aW9uIG1haW4oLi4uYXJncykgewogIGNvbnN0IGRlYnVnID0gYXJncy5pbmRleE9mKCcteCcpICE9IC0xOwogIGFyZ3MgPSBhcmdzLmZpbHRlcihhcmcgPT4gIS9eLVt4XS8udGVzdChhcmcpKTsKICBsZXQgcGlkOwoKICBpZihhcmdzLmxlbmd0aCA9PSAwKSB7CiAgICBwaWQgPSBzcGF3bigKICAgICAgJ3NlcnZlci5qcycsCiAgICAgIFsnbG9jYWxob3N0JywgMzAwMDBdLAogICAgICBudWxsIC8vICAgICAgc2NyaXB0QXJnc1swXS5yZXBsYWNlKC8uKlwvL2csICcnKS5yZXBsYWNlKCcuanMnLCAnLmxvZycpCiAgICApOwogICAgc2xlZXAoMTAwMCk7CiAgICBhcmdzLnB1c2goJ3dzczovL2xvY2FsaG9zdDozMDAwMC93cycpOwogIH0KCiAgLypzZXRMb2coCiAgICBMTExfQUxMLAogICAgKCgpID0+IHsKICAgICAgbGV0IGxmID0gb3BlbigndGVzdC1jbGllbnQubG9nJywgJ3cnKTsKICAgICAgcmV0dXJuIChsZXZlbCwgbXNnKSA9PiB7CiAgICAgICAgbG9nKGxvZ0xldmVsc1tsZXZlbF0ucGFkRW5kKDEwKSArIG1zZyk7CiAgICAgICAgcHV0cygnTE9HOiAnICsgbXNnKTsKICAgICAgICBsZi5wdXRzKGxvZ0xldmVsc1tsZXZlbF0ucGFkRW5kKDEwKSArIG1zZyArICdcbicpOwogICAgICAgIGxmLmZsdXNoKCk7CiAgICAgIH07CiAgICB9KSgpCiAgKTsqLwoKICAoYXN5bmMgZnVuY3Rpb24oKSB7CiAgICBmb3IobGV0IGFyZyBvZiBhcmdzKSB7CiAgICAgIGxldCByZXN1bHQsIGdlbjsKCiAgICAgIHJlc3VsdCA9IENsaWVudCgKICAgICAgICBhcmcsCiAgICAgICAgewogICAgICAgICAgYmxvY2s6IGZhbHNlLAogICAgICAgICAgb25Db25uZWN0KHdzLCByZXEpIHsKICAgICAgICAgICAgbG9nKCdvbkNvbm5lY3QnLCB7IHdzLCByZXEgfSk7CgogICAgICAgICAgICBpZihyZXE/LnVybD8ucHJvdG9jb2wpIHsKICAgICAgICAgICAgICBjb25zdCB7IHByb3RvY29sIH0gPSByZXEudXJsOwogICAgICAgICAgICAgIGxvZygncHJvdG9jb2wnLCBwcm90b2NvbCk7CgogICAgICAgICAgICAgIGlmKCFwcm90b2NvbC5zdGFydHNXaXRoKCdodHRwJykpIHsKICAgICAgICAgICAgICAgIGlmKHByb3RvY29sLnN0YXJ0c1dpdGgoJ3dzJykpIHsKICAgICAgICAgICAgICAgICAgc2V0UmVhZEhhbmRsZXIoMCwgKCkgPT4gewogICAgICAgICAgICAgICAgICAgIHN0ZG91dC5wdXRzKGBcclx4MWJbMDszN20+YCk7CiAgICAgICAgICAgICAgICAgICAgc3Rkb3V0LmZsdXNoKCk7CiAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmUgPSBzdGRpbi5nZXRsaW5lKCk7CgogICAgICAgICAgICAgICAgICAgIGlmKGxpbmUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICBsZXQgcyA9IGxpbmU7CiAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gd3Muc2VuZChsaW5lKTsKICAgICAgICAgICAgICAgICAgICAgIGxvZygncmVzdWx0OicsIHsgcmVzdWx0LCBzIH0pOwogICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnRoZW4oKCkgPT4gbG9nKCdTZW50OicsIHsgcyB9KSk7CiAgICAgICAgICAgICAgICAgICAgICBzdGRvdXQucHV0cyhgXHgxYlswbVxuYCk7CiAgICAgICAgICAgICAgICAgICAgICBzdGRvdXQuZmx1c2goKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgdHR5U2V0UmF3KDApOwogICAgICAgICAgICAgICAgICBzZXRSZWFkSGFuZGxlcigwLCAoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgbGV0IGIgPSBzdGRpbi5nZXRCeXRlKCk7CiAgICAgICAgICAgICAgICAgICAgaWYoYiA9PSAxMykgYiA9IDEwOwogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoYiA9PSAxMjcpIGIgPSA4OwogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoYiA8IDMyIHx8IGIgPiAneicuY2hhckNvZGVBdCgwKSkgc3Rkb3V0LnB1dHMoJ2NoYXI6ICcgKyBiKTsKICAgICAgICAgICAgICAgICAgICBzdGRvdXQucHV0Qnl0ZShiKTsKICAgICAgICAgICAgICAgICAgICBzdGRvdXQuZmx1c2goKTsKCiAgICAgICAgICAgICAgICAgICAgd3Muc2VuZChTdHJpbmcuZnJvbUNoYXJDb2RlKGIpKTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBzaWduYWwoU0lHSU5ULCAoKSA9PiB7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1NJR0lOVCcsIHRlcm1pbmF0ZSgwLCBmYWxzZSkpOwogICAgICAgICAgICAgIHdzLmNsb3NlKCk7CiAgICAgICAgICAgICAgZXhpdCgwKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9LAogICAgICAgICAgb25DbG9zZSh3cywgc3RhdHVzLCByZWFzb24sIGVycm9yKSB7CiAgICAgICAgICAgIGxvZygnb25DbG9zZScsIHsgd3MsIHN0YXR1cywgcmVhc29uLCBlcnJvciB9KTsKICAgICAgICAgICAgdGVybWluYXRlKDApOwogICAgICAgICAgfSwKICAgICAgICAgIG9uRXJyb3Iod3MsIGVycm9yKSB7CiAgICAgICAgICAgIGxvZygnb25FcnJvcicsIHsgd3MsIGVycm9yIH0pOwogICAgICAgICAgICB0ZXJtaW5hdGUoMSk7CiAgICAgICAgICB9LAogICAgICAgICAgb25NZXNzYWdlKHdzLCBtc2cpIHsKICAgICAgICAgICAgbG9nKCdvbk1lc3NhZ2UnLCB7IHdzLCBtc2cgfSk7CiAgICAgICAgICAgIHN0ZG91dC5wdXRzKGBcclx4MWJbMTszNG08ICR7ZXNjYXBlKG1zZyl9XHgxYlswbVxuYCk7CiAgICAgICAgICAgIHN0ZG91dC5mbHVzaCgpOwogICAgICAgICAgICAvLyB3cy5jbG9zZSgxMDAwKTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGRlYnVnID8gTExMX0lORk8gLSAxIDogTExMX1VTRVIKICAgICAgKTsKCiAgICAgIGxvZygncmVzdWx0JywgcmVzdWx0KTsKICAgICAgbG9nKCdyZXN1bHRbU3ltYm9sLmFzeW5jSXRlcmF0b3JdJywgcmVzdWx0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSk7CgoKc2F2ZShyZXN1bHQucmVhZGFibGUsJ291dHB1dC50eHQnKTsKICAgICAgZm9yIGF3YWl0KGxldCBjaHVuayBvZiByZXN1bHQucmVhZGFibGUpIHsKICAgICAgICBsb2coJ2NodW5rJywgY2h1bmsubGVuZ3RoKTsKICAgICAgfQogICAgICAKICAgIH0KICB9KSgpOwoKICBmdW5jdGlvbiB0ZXJtaW5hdGUoY29kZSA9IDAsIGV4ID0gdHJ1ZSkgewogICAgbGV0IHN0YXR1czsKICAgIGlmKHBpZCA+IDApIHsKICAgICAga2lsbChwaWQsIDkpOwogICAgICB3YWl0NChwaWQsIHN0ID0+ICgoc3RhdHVzID0gc3QpLCBjb25zb2xlLmxvZyhgZXhpdGVkOiBzdGF0dXM9JHtzdGF0dXN9YCkpKTsKICAgIH0KICAgIGlmKGV4KSBleGl0KGNvZGUpOwogICAgZWxzZSByZXR1cm4gc3RhdHVzOwogIH0KfQoKdHJ5IHsKICBtYWluKC4uLnNjcmlwdEFyZ3Muc2xpY2UoMSkpOwp9IGNhdGNoKGVycm9yKSB7CiAgbG9nKGBGQUlMOiAke2Vycm9yICYmIGVycm9yLm1lc3NhZ2V9XG4ke2Vycm9yICYmIGVycm9yLnN0YWNrfWApOwogIGV4aXQoMSk7Cn0KAAAAAAAAAACcDwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANDgAAAAAAAA0OAAAAAAAAAAAAAAAASEA"
				],
				[
					403,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALkNAAAAAAAAug0AAAAAAAAAAAAAug0AAAAAAADADQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5DQAAAAAAALkNAAAAAAAA////////738"
				],
				[
					409,
					2,
					"left_delete",
					null,
					"AwAAAO8NAAAAAAAA7w0AAAAAAAABAAAAe7oNAAAAAAAAug0AAAAAAAAGAAAAICAgICAg6A0AAAAAAADoDQAAAAAAAAEAAAAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwDQAAAAAAAPANAAAAAAAAAAAAAAAA8L8"
				],
				[
					411,
					2,
					"left_delete",
					null,
					"AgAAABMOAAAAAAAAEw4AAAAAAAABAAAAfREOAAAAAAAAEQ4AAAAAAAACAAAAICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAUDgAAAAAAABQOAAAAAAAAAAAAAACAdkA"
				],
				[
					416,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAAwOAAAAAAAADg4AAAAAAAAAAAAAwQ0AAAAAAADDDQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBDQAAAAAAAAwOAAAAAAAAAAAAAAAA8L8"
				],
				[
					419,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACcDwAAaW1wb3J0IHsgZXhpdCwgcHV0cywgb3BlbiB9IGZyb20gJ3N0ZCc7CmltcG9ydCB7IFVSTCwgTExMX0FMTCwgTExMX0lORk8sIExMTF9VU0VSLCBzZXRMb2cgfSBmcm9tICduZXQnOwppbXBvcnQgQ2xpZW50IGZyb20gJy4vY2xpZW50LmpzJzsKaW1wb3J0IHsgY2xvc2UsIGV4ZWMsIE9fUkRXUiwgc2V0UmVhZEhhbmRsZXIsIHNldFdyaXRlSGFuZGxlciwgV29ya2VyLCB0dHlTZXRSYXcsIHNsZWVwLCBraWxsLCBzaWduYWwsIFNJR0lOVCB9IGZyb20gJ29zJzsKaW1wb3J0IHsgaW4gYXMgc3RkaW4sIG91dCBhcyBzdGRvdXQsIGVyciBhcyBzdGRlcnIgfSBmcm9tICdzdGQnOwppbXBvcnQgeyBhc3NlcnQsIGdldHBpZCwgZXhpc3RzLCByYW5kU3RyLCBhYmJyZXZpYXRlLCBlc2NhcGUsIHNhdmUgfSBmcm9tICcuL2NvbW1vbi5qcyc7CmltcG9ydCB7IHNwYXduLCB3YWl0NCwgV05PSEFORyB9IGZyb20gJy4vc3Bhd24uanMnOwppbXBvcnQgeyBsb2cgfSBmcm9tICcuL2xvZy5qcyc7CgpmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBjb25zdCBkZWJ1ZyA9IGFyZ3MuaW5kZXhPZignLXgnKSAhPSAtMTsKICBhcmdzID0gYXJncy5maWx0ZXIoYXJnID0+ICEvXi1beF0vLnRlc3QoYXJnKSk7CiAgbGV0IHBpZDsKCiAgaWYoYXJncy5sZW5ndGggPT0gMCkgewogICAgcGlkID0gc3Bhd24oCiAgICAgICdzZXJ2ZXIuanMnLAogICAgICBbJ2xvY2FsaG9zdCcsIDMwMDAwXSwKICAgICAgbnVsbCAvLyAgICAgIHNjcmlwdEFyZ3NbMF0ucmVwbGFjZSgvLipcLy9nLCAnJykucmVwbGFjZSgnLmpzJywgJy5sb2cnKQogICAgKTsKICAgIHNsZWVwKDEwMDApOwogICAgYXJncy5wdXNoKCd3c3M6Ly9sb2NhbGhvc3Q6MzAwMDAvd3MnKTsKICB9CgogIC8qc2V0TG9nKAogICAgTExMX0FMTCwKICAgICgoKSA9PiB7CiAgICAgIGxldCBsZiA9IG9wZW4oJ3Rlc3QtY2xpZW50LmxvZycsICd3Jyk7CiAgICAgIHJldHVybiAobGV2ZWwsIG1zZykgPT4gewogICAgICAgIGxvZyhsb2dMZXZlbHNbbGV2ZWxdLnBhZEVuZCgxMCkgKyBtc2cpOwogICAgICAgIHB1dHMoJ0xPRzogJyArIG1zZyk7CiAgICAgICAgbGYucHV0cyhsb2dMZXZlbHNbbGV2ZWxdLnBhZEVuZCgxMCkgKyBtc2cgKyAnXG4nKTsKICAgICAgICBsZi5mbHVzaCgpOwogICAgICB9OwogICAgfSkoKQogICk7Ki8KCiAgKGFzeW5jIGZ1bmN0aW9uKCkgewogICAgZm9yKGxldCBhcmcgb2YgYXJncykgewogICAgICBsZXQgcmVzdWx0LCBnZW47CgogICAgICByZXN1bHQgPSBDbGllbnQoCiAgICAgICAgYXJnLAogICAgICAgIHsKICAgICAgICAgIGJsb2NrOiBmYWxzZSwKICAgICAgICAgIG9uQ29ubmVjdCh3cywgcmVxKSB7CiAgICAgICAgICAgIGxvZygnb25Db25uZWN0JywgeyB3cywgcmVxIH0pOwoKICAgICAgICAgICAgaWYocmVxPy51cmw/LnByb3RvY29sKSB7CiAgICAgICAgICAgICAgY29uc3QgeyBwcm90b2NvbCB9ID0gcmVxLnVybDsKICAgICAgICAgICAgICBsb2coJ3Byb3RvY29sJywgcHJvdG9jb2wpOwoKICAgICAgICAgICAgICBpZighcHJvdG9jb2wuc3RhcnRzV2l0aCgnaHR0cCcpKSB7CiAgICAgICAgICAgICAgICBpZihwcm90b2NvbC5zdGFydHNXaXRoKCd3cycpKSB7CiAgICAgICAgICAgICAgICAgIHNldFJlYWRIYW5kbGVyKDAsICgpID0+IHsKICAgICAgICAgICAgICAgICAgICBzdGRvdXQucHV0cyhgXHJceDFiWzA7MzdtPmApOwogICAgICAgICAgICAgICAgICAgIHN0ZG91dC5mbHVzaCgpOwogICAgICAgICAgICAgICAgICAgIGxldCBsaW5lID0gc3RkaW4uZ2V0bGluZSgpOwoKICAgICAgICAgICAgICAgICAgICBpZihsaW5lLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgbGV0IHMgPSBsaW5lOwogICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHdzLnNlbmQobGluZSk7CiAgICAgICAgICAgICAgICAgICAgICBsb2coJ3Jlc3VsdDonLCB7IHJlc3VsdCwgcyB9KTsKICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC50aGVuKCgpID0+IGxvZygnU2VudDonLCB7IHMgfSkpOwogICAgICAgICAgICAgICAgICAgICAgc3Rkb3V0LnB1dHMoYFx4MWJbMG1cbmApOwogICAgICAgICAgICAgICAgICAgICAgc3Rkb3V0LmZsdXNoKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIHR0eVNldFJhdygwKTsKICAgICAgICAgICAgICAgICAgc2V0UmVhZEhhbmRsZXIoMCwgKCkgPT4gewogICAgICAgICAgICAgICAgICAgIGxldCBiID0gc3RkaW4uZ2V0Qnl0ZSgpOwogICAgICAgICAgICAgICAgICAgIGlmKGIgPT0gMTMpIGIgPSAxMDsKICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGIgPT0gMTI3KSBiID0gODsKICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGIgPCAzMiB8fCBiID4gJ3onLmNoYXJDb2RlQXQoMCkpIHN0ZG91dC5wdXRzKCdjaGFyOiAnICsgYik7CiAgICAgICAgICAgICAgICAgICAgc3Rkb3V0LnB1dEJ5dGUoYik7CiAgICAgICAgICAgICAgICAgICAgc3Rkb3V0LmZsdXNoKCk7CgogICAgICAgICAgICAgICAgICAgIHdzLnNlbmQoU3RyaW5nLmZyb21DaGFyQ29kZShiKSk7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgc2lnbmFsKFNJR0lOVCwgKCkgPT4gewogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTSUdJTlQnLCB0ZXJtaW5hdGUoMCwgZmFsc2UpKTsKICAgICAgICAgICAgICB3cy5jbG9zZSgpOwogICAgICAgICAgICAgIGV4aXQoMCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSwKICAgICAgICAgIG9uQ2xvc2Uod3MsIHN0YXR1cywgcmVhc29uLCBlcnJvcikgewogICAgICAgICAgICBsb2coJ29uQ2xvc2UnLCB7IHdzLCBzdGF0dXMsIHJlYXNvbiwgZXJyb3IgfSk7CiAgICAgICAgICAgIHRlcm1pbmF0ZSgwKTsKICAgICAgICAgIH0sCiAgICAgICAgICBvbkVycm9yKHdzLCBlcnJvcikgewogICAgICAgICAgICBsb2coJ29uRXJyb3InLCB7IHdzLCBlcnJvciB9KTsKICAgICAgICAgICAgdGVybWluYXRlKDEpOwogICAgICAgICAgfSwKICAgICAgICAgIG9uTWVzc2FnZSh3cywgbXNnKSB7CiAgICAgICAgICAgIGxvZygnb25NZXNzYWdlJywgeyB3cywgbXNnIH0pOwogICAgICAgICAgICBzdGRvdXQucHV0cyhgXHJceDFiWzE7MzRtPCAke2VzY2FwZShtc2cpfVx4MWJbMG1cbmApOwogICAgICAgICAgICBzdGRvdXQuZmx1c2goKTsKICAgICAgICAgICAgLy8gd3MuY2xvc2UoMTAwMCk7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBkZWJ1ZyA/IExMTF9JTkZPIC0gMSA6IExMTF9VU0VSCiAgICAgICk7CgogICAgICBsb2coJ3Jlc3VsdCcsIHJlc3VsdCk7CiAgICAgIGxvZygncmVzdWx0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXScsIHJlc3VsdFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0pOwoKICAgICAgc2F2ZShyZXN1bHQucmVhZGFibGUsICdvdXRwdXQudHh0Jyk7CgogICAgICAvKmZvciBhd2FpdChsZXQgY2h1bmsgb2YgcmVzdWx0LnJlYWRhYmxlKQogICAgICAgIGxvZygnY2h1bmsnLCBjaHVuay5sZW5ndGgpOyovCiAgICAKICAgIH0KICB9KSgpOwoKICBmdW5jdGlvbiB0ZXJtaW5hdGUoY29kZSA9IDAsIGV4ID0gdHJ1ZSkgewogICAgbGV0IHN0YXR1czsKICAgIGlmKHBpZCA+IDApIHsKICAgICAga2lsbChwaWQsIDkpOwogICAgICB3YWl0NChwaWQsIHN0ID0+ICgoc3RhdHVzID0gc3QpLCBjb25zb2xlLmxvZyhgZXhpdGVkOiBzdGF0dXM9JHtzdGF0dXN9YCkpKTsKICAgIH0KICAgIGlmKGV4KSBleGl0KGNvZGUpOwogICAgZWxzZSByZXR1cm4gc3RhdHVzOwogIH0KfQoKdHJ5IHsKICBtYWluKC4uLnNjcmlwdEFyZ3Muc2xpY2UoMSkpOwp9IGNhdGNoKGVycm9yKSB7CiAgbG9nKGBGQUlMOiAke2Vycm9yICYmIGVycm9yLm1lc3NhZ2V9XG4ke2Vycm9yICYmIGVycm9yLnN0YWNrfWApOwogIGV4aXQoMSk7Cn0KAAAAAAAAAACXDwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDDQAAAAAAAA4OAAAAAAAAAAAAAAAA8L8"
				],
				[
					444,
					1,
					"insert",
					{
						"characters": "rea"
					},
					"AwAAAKsNAAAAAAAArA0AAAAAAAAAAAAArA0AAAAAAACtDQAAAAAAAAAAAACtDQAAAAAAAK4NAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrDQAAAAAAAKsNAAAAAAAAAAAAAAAA8L8"
				],
				[
					445,
					1,
					"left_delete",
					null,
					"AQAAAK0NAAAAAAAArQ0AAAAAAAABAAAAYQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuDQAAAAAAAK4NAAAAAAAAAAAAAAAA8L8"
				],
				[
					446,
					1,
					"insert",
					{
						"characters": "sult.remoteName"
					},
					"DwAAAK0NAAAAAAAArg0AAAAAAAAAAAAArg0AAAAAAACvDQAAAAAAAAAAAACvDQAAAAAAALANAAAAAAAAAAAAALANAAAAAAAAsQ0AAAAAAAAAAAAAsQ0AAAAAAACyDQAAAAAAAAAAAACyDQAAAAAAALMNAAAAAAAAAAAAALMNAAAAAAAAtA0AAAAAAAAAAAAAtA0AAAAAAAC1DQAAAAAAAAAAAAC1DQAAAAAAALYNAAAAAAAAAAAAALYNAAAAAAAAtw0AAAAAAAAAAAAAtw0AAAAAAAC4DQAAAAAAAAAAAAC4DQAAAAAAALkNAAAAAAAAAAAAALkNAAAAAAAAug0AAAAAAAAAAAAAug0AAAAAAAC7DQAAAAAAAAAAAAC7DQAAAAAAALwNAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtDQAAAAAAAK0NAAAAAAAAAAAAAAAA8L8"
				],
				[
					447,
					1,
					"insert",
					{
						"characters": " ??"
					},
					"AwAAALwNAAAAAAAAvQ0AAAAAAAAAAAAAvQ0AAAAAAAC+DQAAAAAAAAAAAAC+DQAAAAAAAL8NAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8DQAAAAAAALwNAAAAAAAAAAAAAAAA8L8"
				],
				[
					448,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAL8NAAAAAAAAwA0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/DQAAAAAAAL8NAAAAAAAAAAAAAAAA8L8"
				],
				[
					458,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAMwNAAAAAAAAzg0AAAAAAAAAAAAAvQ0AAAAAAAC/DQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9DQAAAAAAAMwNAAAAAAAAAAAAAAAA8L8"
				],
				[
					475,
					1,
					"insert",
					{
						"characters": "await"
					},
					"BQAAAKsNAAAAAAAArA0AAAAAAAAAAAAArA0AAAAAAACtDQAAAAAAAAAAAACtDQAAAAAAAK4NAAAAAAAAAAAAAK4NAAAAAAAArw0AAAAAAAAAAAAArw0AAAAAAACwDQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrDQAAAAAAAKsNAAAAAAAAAAAAAAAA8L8"
				],
				[
					476,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALANAAAAAAAAsQ0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwDQAAAAAAALANAAAAAAAAAAAAAAAA8L8"
				],
				[
					485,
					1,
					"cut",
					null,
					"AQAAAKoNAAAAAAAAqg0AAAAAAAAYAAAAIGF3YWl0IHJlc3VsdC5yZW1vdGVOYW1l",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACqDQAAAAAAAMINAAAAAAAAAAAAAAAA8L8"
				],
				[
					487,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BAAAAI4NAAAAAAAAjw0AAAAAAAAAAAAAjw0AAAAAAACQDQAAAAAAAAAAAACQDQAAAAAAAJENAAAAAAAAAAAAAJENAAAAAAAAkg0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACODQAAAAAAAI4NAAAAAAAAAAAAAAAAa0A"
				],
				[
					488,
					1,
					"insert",
					{
						"characters": " file="
					},
					"BgAAAJINAAAAAAAAkw0AAAAAAAAAAAAAkw0AAAAAAACUDQAAAAAAAAAAAACUDQAAAAAAAJUNAAAAAAAAAAAAAJUNAAAAAAAAlg0AAAAAAAAAAAAAlg0AAAAAAACXDQAAAAAAAAAAAACXDQAAAAAAAJgNAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACSDQAAAAAAAJINAAAAAAAAAAAAAAAA8L8"
				],
				[
					489,
					1,
					"paste",
					null,
					"AQAAAJgNAAAAAAAAsA0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACYDQAAAAAAAJgNAAAAAAAAAAAAAAAA8L8"
				],
				[
					490,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALANAAAAAAAAsQ0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwDQAAAAAAALANAAAAAAAAAAAAAAAA8L8"
				],
				[
					493,
					1,
					"insert",
					{
						"characters": "file"
					},
					"BAAAAM4NAAAAAAAAzw0AAAAAAAAAAAAAzw0AAAAAAADQDQAAAAAAAAAAAADQDQAAAAAAANENAAAAAAAAAAAAANENAAAAAAAA0g0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADODQAAAAAAAM4NAAAAAAAAAAAAAAAA8L8"
				],
				[
					499,
					1,
					"insert",
					{
						"characters": "\nlo"
					},
					"AwAAALENAAAAAAAAsg0AAAAAAAAAAAAAsg0AAAAAAACzDQAAAAAAAAAAAACzDQAAAAAAALQNAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxDQAAAAAAALENAAAAAAAA////////738"
				],
				[
					500,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALQNAAAAAAAAtg0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0DQAAAAAAALQNAAAAAAAAAAAAAAAA8L8"
				],
				[
					501,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAALQNAAAAAAAAtA0AAAAAAAABAAAAKLQNAAAAAAAAtA0AAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1DQAAAAAAALUNAAAAAAAAAAAAAAAA8L8"
				],
				[
					502,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAALQNAAAAAAAAtQ0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0DQAAAAAAALQNAAAAAAAAAAAAAAAA8L8"
				],
				[
					503,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALUNAAAAAAAAtw0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1DQAAAAAAALUNAAAAAAAAAAAAAAAA8L8"
				],
				[
					504,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAALYNAAAAAAAAuA0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2DQAAAAAAALYNAAAAAAAAAAAAAAAA8L8"
				],
				[
					505,
					1,
					"insert",
					{
						"characters": "file"
					},
					"BAAAALcNAAAAAAAAuA0AAAAAAAAAAAAAuA0AAAAAAAC5DQAAAAAAAAAAAAC5DQAAAAAAALoNAAAAAAAAAAAAALoNAAAAAAAAuw0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3DQAAAAAAALcNAAAAAAAAAAAAAAAA8L8"
				],
				[
					507,
					1,
					"insert",
					{
						"characters": ",file"
					},
					"BQAAALwNAAAAAAAAvQ0AAAAAAAAAAAAAvQ0AAAAAAAC+DQAAAAAAAAAAAAC+DQAAAAAAAL8NAAAAAAAAAAAAAL8NAAAAAAAAwA0AAAAAAAAAAAAAwA0AAAAAAADBDQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8DQAAAAAAALwNAAAAAAAAAAAAAAAA8L8"
				],
				[
					509,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMINAAAAAAAAww0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCDQAAAAAAAMINAAAAAAAAAAAAAAAA8L8"
				],
				[
					518,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMMNAAAAAAAAxA0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDDQAAAAAAAMMNAAAAAAAAAAAAAAAA8L8"
				],
				[
					522,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAALINAAAAAAAAsw0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyDQAAAAAAALINAAAAAAAAAAAAAAAAAAA"
				],
				[
					562,
					1,
					"insert",
					{
						"characters": " ??"
					},
					"AwAAALANAAAAAAAAsQ0AAAAAAAAAAAAAsQ0AAAAAAACyDQAAAAAAAAAAAACyDQAAAAAAALMNAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwDQAAAAAAALANAAAAAAAAAAAAAAAA8L8"
				],
				[
					563,
					1,
					"insert",
					{
						"characters": " '0"
					},
					"AwAAALMNAAAAAAAAtA0AAAAAAAAAAAAAtA0AAAAAAAC1DQAAAAAAAAAAAAC1DQAAAAAAALYNAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzDQAAAAAAALMNAAAAAAAAAAAAAAAA8L8"
				],
				[
					564,
					1,
					"left_delete",
					null,
					"AQAAALUNAAAAAAAAtQ0AAAAAAAABAAAAMA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2DQAAAAAAALYNAAAAAAAAAAAAAAAA8L8"
				],
				[
					565,
					1,
					"insert",
					{
						"characters": "output.txt'"
					},
					"CwAAALUNAAAAAAAAtg0AAAAAAAAAAAAAtg0AAAAAAAC3DQAAAAAAAAAAAAC3DQAAAAAAALgNAAAAAAAAAAAAALgNAAAAAAAAuQ0AAAAAAAAAAAAAuQ0AAAAAAAC6DQAAAAAAAAAAAAC6DQAAAAAAALsNAAAAAAAAAAAAALsNAAAAAAAAvA0AAAAAAAAAAAAAvA0AAAAAAAC9DQAAAAAAAAAAAAC9DQAAAAAAAL4NAAAAAAAAAAAAAL4NAAAAAAAAvw0AAAAAAAAAAAAAvw0AAAAAAADADQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1DQAAAAAAALUNAAAAAAAAAAAAAAAA8L8"
				],
				[
					567,
					2,
					"left_delete",
					null,
					"AgAAALINAAAAAAAAsg0AAAAAAAABAAAAP7ENAAAAAAAAsQ0AAAAAAAABAAAAPw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzDQAAAAAAALMNAAAAAAAAAAAAAAAA8L8"
				],
				[
					568,
					1,
					"insert",
					{
						"characters": "|"
					},
					"AQAAALENAAAAAAAAsg0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxDQAAAAAAALENAAAAAAAAAAAAAAAA8L8"
				],
				[
					569,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALINAAAAAAAAsw0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyDQAAAAAAALINAAAAAAAAAAAAAAAA8L8"
				],
				[
					570,
					1,
					"left_delete",
					null,
					"AQAAALINAAAAAAAAsg0AAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzDQAAAAAAALMNAAAAAAAAAAAAAAAA8L8"
				],
				[
					571,
					1,
					"insert",
					{
						"characters": "|"
					},
					"AQAAALINAAAAAAAAsw0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyDQAAAAAAALINAAAAAAAAAAAAAAAA8L8"
				],
				[
					594,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAFELAAAAAAAAUgsAAAAAAAAAAAAAUgsAAAAAAABTCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRCwAAAAAAAFELAAAAAAAAAAAAAAAA8L8"
				],
				[
					604,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADrDwAAaW1wb3J0IHsgZXhpdCwgcHV0cywgb3BlbiB9IGZyb20gJ3N0ZCc7CmltcG9ydCB7IFVSTCwgTExMX0FMTCwgTExMX0lORk8sIExMTF9VU0VSLCBzZXRMb2cgfSBmcm9tICduZXQnOwppbXBvcnQgQ2xpZW50IGZyb20gJy4vY2xpZW50LmpzJzsKaW1wb3J0IHsgY2xvc2UsIGV4ZWMsIE9fUkRXUiwgc2V0UmVhZEhhbmRsZXIsIHNldFdyaXRlSGFuZGxlciwgV29ya2VyLCB0dHlTZXRSYXcsIHNsZWVwLCBraWxsLCBzaWduYWwsIFNJR0lOVCB9IGZyb20gJ29zJzsKaW1wb3J0IHsgaW4gYXMgc3RkaW4sIG91dCBhcyBzdGRvdXQsIGVyciBhcyBzdGRlcnIgfSBmcm9tICdzdGQnOwppbXBvcnQgeyBhc3NlcnQsIGdldHBpZCwgZXhpc3RzLCByYW5kU3RyLCBhYmJyZXZpYXRlLCBlc2NhcGUsIHNhdmUgfSBmcm9tICcuL2NvbW1vbi5qcyc7CmltcG9ydCB7IHNwYXduLCB3YWl0NCwgV05PSEFORyB9IGZyb20gJy4vc3Bhd24uanMnOwppbXBvcnQgeyBsb2cgfSBmcm9tICcuL2xvZy5qcyc7CgpmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBjb25zdCBkZWJ1ZyA9IGFyZ3MuaW5kZXhPZignLXgnKSAhPSAtMTsKICBhcmdzID0gYXJncy5maWx0ZXIoYXJnID0+ICEvXi1beF0vLnRlc3QoYXJnKSk7CiAgbGV0IHBpZDsKCiAgaWYoYXJncy5sZW5ndGggPT0gMCkgewogICAgcGlkID0gc3Bhd24oCiAgICAgICdzZXJ2ZXIuanMnLAogICAgICBbJ2xvY2FsaG9zdCcsIDMwMDAwXSwKICAgICAgbnVsbCAvLyAgICAgIHNjcmlwdEFyZ3NbMF0ucmVwbGFjZSgvLipcLy9nLCAnJykucmVwbGFjZSgnLmpzJywgJy5sb2cnKQogICAgKTsKICAgIHNsZWVwKDEwMDApOwogICAgYXJncy5wdXNoKCd3c3M6Ly9sb2NhbGhvc3Q6MzAwMDAvd3MnKTsKICB9CgogIC8qc2V0TG9nKAogICAgTExMX0FMTCwKICAgICgoKSA9PiB7CiAgICAgIGxldCBsZiA9IG9wZW4oJ3Rlc3QtY2xpZW50LmxvZycsICd3Jyk7CiAgICAgIHJldHVybiAobGV2ZWwsIG1zZykgPT4gewogICAgICAgIGxvZyhsb2dMZXZlbHNbbGV2ZWxdLnBhZEVuZCgxMCkgKyBtc2cpOwogICAgICAgIHB1dHMoJ0xPRzogJyArIG1zZyk7CiAgICAgICAgbGYucHV0cyhsb2dMZXZlbHNbbGV2ZWxdLnBhZEVuZCgxMCkgKyBtc2cgKyAnXG4nKTsKICAgICAgICBsZi5mbHVzaCgpOwogICAgICB9OwogICAgfSkoKQogICk7Ki8KCiAgKGFzeW5jIGZ1bmN0aW9uKCkgewogICAgZm9yKGxldCBhcmcgb2YgYXJncykgewogICAgICBsZXQgcmVzdWx0LCBnZW47CgogICAgICByZXN1bHQgPSBDbGllbnQoCiAgICAgICAgYXJnLAogICAgICAgIHsKICAgICAgICAgIGJsb2NrOiBmYWxzZSwKICAgICAgICAgIG9uQ29ubmVjdCh3cywgcmVxKSB7CiAgICAgICAgICAgIGxvZygnb25Db25uZWN0JywgeyB3cywgcmVxIH0pOwoKICAgICAgICAgICAgaWYocmVxPy51cmw/LnByb3RvY29sKSB7CiAgICAgICAgICAgICAgY29uc3QgeyBwcm90b2NvbCB9ID0gcmVxLnVybDsKICAgICAgICAgICAgICBsb2coJ3Byb3RvY29sJywgcHJvdG9jb2wpOwoKICAgICAgICAgICAgICBpZighcHJvdG9jb2wuc3RhcnRzV2l0aCgnaHR0cCcpKSB7CiAgICAgICAgICAgICAgICBpZihwcm90b2NvbC5zdGFydHNXaXRoKCd3cycpKSB7CiAgICAgICAgICAgICAgICAgIHNldFJlYWRIYW5kbGVyKDAsICgpID0+IHsKICAgICAgICAgICAgICAgICAgICBzdGRvdXQucHV0cyhgXHJceDFiWzA7MzdtPmApOwogICAgICAgICAgICAgICAgICAgIHN0ZG91dC5mbHVzaCgpOwogICAgICAgICAgICAgICAgICAgIGxldCBsaW5lID0gc3RkaW4uZ2V0bGluZSgpOwoKICAgICAgICAgICAgICAgICAgICBpZihsaW5lLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgbGV0IHMgPSBsaW5lOwogICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHdzLnNlbmQobGluZSk7CiAgICAgICAgICAgICAgICAgICAgICBsb2coJ3Jlc3VsdDonLCB7IHJlc3VsdCwgcyB9KTsKICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC50aGVuKCgpID0+IGxvZygnU2VudDonLCB7IHMgfSkpOwogICAgICAgICAgICAgICAgICAgICAgc3Rkb3V0LnB1dHMoYFx4MWJbMG1cbmApOwogICAgICAgICAgICAgICAgICAgICAgc3Rkb3V0LmZsdXNoKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIHR0eVNldFJhdygwKTsKICAgICAgICAgICAgICAgICAgc2V0UmVhZEhhbmRsZXIoMCwgKCkgPT4gewogICAgICAgICAgICAgICAgICAgIGxldCBiID0gc3RkaW4uZ2V0Qnl0ZSgpOwogICAgICAgICAgICAgICAgICAgIGlmKGIgPT0gMTMpIGIgPSAxMDsKICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGIgPT0gMTI3KSBiID0gODsKICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGIgPCAzMiB8fCBiID4gJ3onLmNoYXJDb2RlQXQoMCkpIHN0ZG91dC5wdXRzKCdjaGFyOiAnICsgYik7CiAgICAgICAgICAgICAgICAgICAgc3Rkb3V0LnB1dEJ5dGUoYik7CiAgICAgICAgICAgICAgICAgICAgc3Rkb3V0LmZsdXNoKCk7CgogICAgICAgICAgICAgICAgICAgIHdzLnNlbmQoU3RyaW5nLmZyb21DaGFyQ29kZShiKSk7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgc2lnbmFsKFNJR0lOVCwgKCkgPT4gewogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTSUdJTlQnLCB0ZXJtaW5hdGUoMCwgZmFsc2UpKTsKICAgICAgICAgICAgICB3cy5jbG9zZSgpOwogICAgICAgICAgICAgIGV4aXQoMCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSwKICAgICAgICAgIG9uQ2xvc2Uod3MsIHN0YXR1cywgcmVhc29uLCBlcnJvcikgewogICAgICAgICAgICAvL2xvZygnb25DbG9zZScsIHsgd3MsIHN0YXR1cywgcmVhc29uLCBlcnJvciB9KTsKICAgICAgICAgICAgdGVybWluYXRlKDApOwogICAgICAgICAgfSwKICAgICAgICAgIG9uRXJyb3Iod3MsIGVycm9yKSB7CiAgICAgICAgICAgIGxvZygnb25FcnJvcicsIHsgd3MsIGVycm9yIH0pOwogICAgICAgICAgICB0ZXJtaW5hdGUoMSk7CiAgICAgICAgICB9LAogICAgICAgICAgb25NZXNzYWdlKHdzLCBtc2cpIHsKICAgICAgICAgICAgbG9nKCdvbk1lc3NhZ2UnLCB7IHdzLCBtc2cgfSk7CiAgICAgICAgICAgIHN0ZG91dC5wdXRzKGBcclx4MWJbMTszNG08ICR7ZXNjYXBlKG1zZyl9XHgxYlswbVxuYCk7CiAgICAgICAgICAgIHN0ZG91dC5mbHVzaCgpOwogICAgICAgICAgICAvLyB3cy5jbG9zZSgxMDAwKTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGRlYnVnID8gTExMX0lORk8gLSAxIDogTExMX1VTRVIKICAgICAgKTsKCiAgICAgIGxvZygncmVzdWx0JywgcmVzdWx0KTsKICAgICAgbG9nKCdyZXN1bHRbU3ltYm9sLmFzeW5jSXRlcmF0b3JdJywgcmVzdWx0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSk7CgpsZXQgZmlsZT0gYXdhaXQgcmVzdWx0LnJlbW90ZU5hbWUgfHwgJ291dHB1dC50eHQnOwoKbG9nKCdmaWxlJyxmaWxlKTsKCiAgICAgIHNhdmUocmVzdWx0LnJlYWRhYmxlLCBmaWxlLyo/PyAnb3V0cHV0LnR4dCcqLyk7CgogICAgICAvKmZvciBhd2FpdChsZXQgY2h1bmsgb2YgcmVzdWx0LnJlYWRhYmxlKQogICAgICAgIGxvZygnY2h1bmsnLCBjaHVuay5sZW5ndGgpOyovCiAgICB9CiAgfSkoKTsKCiAgZnVuY3Rpb24gdGVybWluYXRlKGNvZGUgPSAwLCBleCA9IHRydWUpIHsKICAgIGxldCBzdGF0dXM7CiAgICBpZihwaWQgPiAwKSB7CiAgICAgIGtpbGwocGlkLCA5KTsKICAgICAgd2FpdDQocGlkLCBzdCA9PiAoKHN0YXR1cyA9IHN0KSwgY29uc29sZS5sb2coYGV4aXRlZDogc3RhdHVzPSR7c3RhdHVzfWApKSk7CiAgICB9CiAgICBpZihleCkgZXhpdChjb2RlKTsKICAgIGVsc2UgcmV0dXJuIHN0YXR1czsKICB9Cn0KCnRyeSB7CiAgbWFpbiguLi5zY3JpcHRBcmdzLnNsaWNlKDEpKTsKfSBjYXRjaChlcnJvcikgewogIGxvZyhgRkFJTDogJHtlcnJvciAmJiBlcnJvci5tZXNzYWdlfVxuJHtlcnJvciAmJiBlcnJvci5zdGFja31gKTsKICBleGl0KDEpOwp9CgAAAAAAAAAA/A8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA0DQAAAAAAADsNAAAAAAAAAAAAAAAA8L8"
				],
				[
					607,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAI8NAAAAAAAAkQ0AAAAAAAAAAAAAMA0AAAAAAAAyDQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwDQAAAAAAAI8NAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "tests/client.js",
			"settings":
			{
				"buffer_size": 3556,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					47,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAACUEAAAAAAAAJwQAAAAAAAAAAAAATgMAAAAAAABQAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABOAwAAAAAAACUEAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABtDQAAaW1wb3J0IHsgZXJyLCBleGl0LCBwdXRzIH0gZnJvbSAnc3RkJzsKaW1wb3J0IHsgc2V0UmVhZEhhbmRsZXIsIHNldFdyaXRlSGFuZGxlciB9IGZyb20gJ29zJzsKaW1wb3J0IHsgY2xpZW50LCBzZXRMb2csIExMTF9XQVJOLCBMTExfQ0xJRU5ULCBMTExfVVNFUiwgVVJMLCBHZW5lcmF0b3IsIGxvZ0xldmVscyB9IGZyb20gJ25ldCc7CmltcG9ydCB7IExldmVscywgRGVmYXVsdExldmVscywgSW5pdCwgaXNEZWJ1ZywgbG9nIH0gZnJvbSAnLi9sb2cuanMnOwppbXBvcnQgeyBlc2NhcGUsIGFiYnJldmlhdGUgfSBmcm9tICcuL2NvbW1vbi5qcyc7Cgpjb25zdCBjb25uZWN0aW9ucyA9IG5ldyBTZXQoKTsKCmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENsaWVudCh1cmwsIG9wdGlvbnMsIGRlYnVnKSB7CiAgLy9jb25zb2xlLmxvZygnQ2xpZW50Jyx7dXJsLG9wdGlvbnMsZGVidWd9KTsKICBsb2coJ01pbm5ldENsaWVudCcsIHsgdXJsLCBvcHRpb25zIH0pOwogIEluaXQoJ2NsaWVudC5qcycsIHR5cGVvZiBkZWJ1ZyA9PSAnbnVtYmVyJyA/IGRlYnVnIDogTExMX0NMSUVOVCB8IChkZWJ1ZyA/IExMTF9VU0VSIDogMCkpOwoKICBsZXQgewogICAgb25Db25uZWN0LAogICAgb25DbG9zZSwKICAgIG9uRXJyb3IsCiAgICBvbkh0dHAsCiAgICBvbkZkLAogICAgb25NZXNzYWdlLAogICAgdGxzID0gdHJ1ZSwKICAgIHNzbENlcnQgPSAnbG9jYWxob3N0LmNydCcsCiAgICBzc2xQcml2YXRlS2V5ID0gJ2xvY2FsaG9zdC5rZXknLAogICAgaGVhZGVycyA9IHt9LAogICAgLi4ub3B0cwogIH0gPSBvcHRpb25zOwoKICBlcnIucHV0cyhgQ2xpZW50IGNvbm5lY3RpbmcgdG8gJHt1cmx9IC4uLlxuYCk7CgogLyogc2V0TG9nKAogICAgTExMX1dBUk4gfCAoZGVidWcgPyBMTExfVVNFUiA6IDApLAogICAgKGxldmVsLCBtZXNzYWdlKSA9PgogICAgICAhL0xPQURfRVhUUkF8VkhPU1RfQ0VSVF9BR0lORy8udGVzdChtZXNzYWdlKSAmJgogICAgICBsb2coYCR7bG9nTGV2ZWxzW2xldmVsXS5wYWRFbmQoMTApfSAke21lc3NhZ2UucmVwbGFjZSgvXG4vZywgJ1xcbicpLnRyaW0oKX1gKQogICk7CiovCiAgbGV0IHdyaXRhYmxlLCByZWFkYWJsZSwgYywgcHIsIHJlc29sdmUsIHJlamVjdDsKCiAgcmVhZGFibGUgPSBuZXcgR2VuZXJhdG9yKGFzeW5jIChwdXNoLCBzdG9wKSA9PiB7CiAgICBjID0gY2xpZW50KHVybCwgewogICAgICB0bHMsCiAgICAgIHNzbENlcnQsCiAgICAgIHNzbFByaXZhdGVLZXksCiAgICAgIGhlYWRlcnM6IHsKICAgICAgICAnVXNlci1BZ2VudCc6ICdtaW5uZXQnLAogICAgICAgIC4uLmhlYWRlcnMKICAgICAgfSwKICAgICAgLi4ub3B0cywKICAgICAgb25Db25uZWN0KHdzLCByZXEpIHsKICAgICAgICBjb25zb2xlLmxvZygnb25Db25uZWN0Jyk7CiAgICAgICAgY29ubmVjdGlvbnMuYWRkKHdzKTsKCiAgICAgICAgd3JpdGFibGUgPSB7CiAgICAgICAgICB3cml0ZShjaHVuaykgewogICAgICAgICAgICByZXR1cm4gd3Muc2VuZChjaHVuayk7CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb25Db25uZWN0ID8gb25Db25uZWN0KHdzLCByZXEpIDogY29uc29sZS5sb2coJ29uQ29ubmVjdCcsIHdzLCByZXEpOwogICAgICB9LAogICAgICBvbkNsb3NlKHdzLCBzdGF0dXMsIHJlYXNvbiwgZXJyb3IpIHsKICAgICAgICBjb25uZWN0aW9ucy5kZWxldGUod3MpOwoKICAgICAgICBpZihyZXNvbHZlKSByZXNvbHZlKHsgdmFsdWU6IHsgc3RhdHVzLCByZWFzb24sIGVycm9yIH0sIGRvbmU6IHRydWUgfSk7CgogICAgICAgIG9uQ2xvc2UKICAgICAgICAgID8gb25DbG9zZSh3cywgc3RhdHVzLCByZWFzb24sIGVycm9yKQogICAgICAgICAgOiAoY29uc29sZS5sb2coJ29uQ2xvc2UnLCB7IHdzLCByZWFzb24gfSksIGV4aXQocmVhc29uICE9IDEwMDAgJiYgcmVhc29uICE9IDAgPyAxIDogMCkpOwogICAgICAgIHByID0gcmVqZWN0ID0gcmVzb2x2ZSA9IG51bGw7CiAgICAgIH0sCiAgICAgIG9uRXJyb3Iod3MsIGVycm9yKSB7CiAgICAgICAgY29ubmVjdGlvbnMuZGVsZXRlKHdzKTsKCiAgICAgICAgb25FcnJvciA/IG9uRXJyb3Iod3MsIGVycm9yKSA6IChjb25zb2xlLmxvZygnb25FcnJvcicsIHsgd3MsIGVycm9yIH0pLCBleGl0KGVycm9yKSk7CiAgICAgIH0sCgogICAgICBvbkZkKGZkLCByZCwgd3IpIHsKICAgICAgICBzZXRSZWFkSGFuZGxlcihmZCwgcmQpOwogICAgICAgIHNldFdyaXRlSGFuZGxlcihmZCwgd3IpOwogICAgICB9LAogICAgICBvbk1lc3NhZ2Uod3MsIG1zZykgewogICAgICAgIG9uTWVzc2FnZQogICAgICAgICAgPyBvbk1lc3NhZ2Uod3MsIG1zZykKICAgICAgICAgIDogKGNvbnNvbGUubG9nKCdvbk1lc3NhZ2UnLCBjb25zb2xlLmNvbmZpZyh7IG1heFN0cmluZ0xlbjogMTAwIH0pLCB7IHdzLCBtc2cgfSksCiAgICAgICAgICAgIHB1dHMoZXNjYXBlKGFiYnJldmlhdGUobXNnKSkgKyAnXG4nKSk7CiAgICAgIH0sCiAgICAgIGFzeW5jIG9uSHR0cChyZXEsIHJlc3ApIHsKICAgICAgICBsZXQgdGV4dCA9IGF3YWl0IHJlc3AudGV4dCgpOwogICAgICAgIGNvbnNvbGUubG9nKCdvbkh0dHAoMiknLCB0ZXh0LnJlcGxhY2UoL1xuL2csICdcXG4nKS5zdWJzdHJpbmcoMCwgMTAwKSk7CiAgICAgICAgY29uc29sZS5sb2coJ3B1c2gnLCBhd2FpdCBwdXNoKHRleHQpKTsKICAgICAgICAvKmZvciBhd2FpdChsZXQgY2h1bmsgb2YgcmVzcC5ib2R5KSB7CiAgICAgICAgICBsZXQgcHNoOwogICAgICAgICAgY29uc29sZS5sb2coCiAgICAgICAgICAgICdceDFiWzE7MzNtb25IdHRwIGJvZHkgY2h1bmtceDFiWzE7MzZtOlx4MWJbMG0nLAogICAgICAgICAgICBjaHVuay5sZW5ndGgsCiAgICAgICAgICAgIGNodW5rLnJlcGxhY2UoL1xuL2csICdcXG4nKS5zdWJzdHJpbmcoMCwgMTAwKQogICAgICAgICAgKTsKICAgICAgICAgIGNvbnNvbGUubG9nKCdwdXNoJywgKHBzaCA9IHB1c2goY2h1bmspKSk7CiAgICAgICAgICBhd2FpdCBwc2g7CiAgICAgICAgfSovCiAgICAgIH0KICAgIH0pOwogIH0pOwoKICByZXR1cm4gewogICAgcmVhZGFibGU6IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKAogICAgICB7fSwKICAgICAgewogICAgICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl06IHsKICAgICAgICAgIHZhbHVlOiAoKSA9PiByZWFkYWJsZQogICAgICAgIH0sCiAgICAgICAgZ2V0UmVhZGVyOiB7CiAgICAgICAgICB2YWx1ZTogKCkgPT4gKHsgcmVhZDogKCkgPT4gcmVhZGFibGUubmV4dCgpIH0pCiAgICAgICAgfSwKICAgICAgICBbU3ltYm9sLnRvU3RyaW5nVGFnXTogeyB2YWx1ZTogJ1JlYWRhYmxlU3RyZWFtJyB9CiAgICAgIH0KICAgICksCiAgICB3cml0YWJsZQogIH07Cn0KCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShDbGllbnQsICdjb25uZWN0aW9ucycsIHsKICBnZXQoKSB7CiAgICByZXR1cm4gWy4uLmNvbm5lY3Rpb25zXTsKICB9Cn0pOwoAAAAAAAAAAG4NAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPAAAAAAAAANwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					130,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAOYBAAAAAAAA5wEAAAAAAAAAAAAA5wEAAAAAAADoAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmAQAAAAAAAOYBAAAAAAAAAAAAAAAA8L8"
				],
				[
					133,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABwDQAAaW1wb3J0IHsgZXJyLCBleGl0LCBwdXRzIH0gZnJvbSAnc3RkJzsKaW1wb3J0IHsgc2V0UmVhZEhhbmRsZXIsIHNldFdyaXRlSGFuZGxlciB9IGZyb20gJ29zJzsKaW1wb3J0IHsgY2xpZW50LCBzZXRMb2csIExMTF9XQVJOLCBMTExfQ0xJRU5ULCBMTExfVVNFUiwgVVJMLCBHZW5lcmF0b3IsIGxvZ0xldmVscyB9IGZyb20gJ25ldCc7CmltcG9ydCB7IExldmVscywgRGVmYXVsdExldmVscywgSW5pdCwgaXNEZWJ1ZywgbG9nIH0gZnJvbSAnLi9sb2cuanMnOwppbXBvcnQgeyBlc2NhcGUsIGFiYnJldmlhdGUgfSBmcm9tICcuL2NvbW1vbi5qcyc7Cgpjb25zdCBjb25uZWN0aW9ucyA9IG5ldyBTZXQoKTsKCmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENsaWVudCh1cmwsIG9wdGlvbnMsIGRlYnVnKSB7CiAgLy9jb25zb2xlLmxvZygnQ2xpZW50Jyx7dXJsLG9wdGlvbnMsZGVidWd9KTsKICBsb2coJ01pbm5ldENsaWVudCcsIHsgdXJsLCBvcHRpb25zIH0pOwogLy8gSW5pdCgnY2xpZW50LmpzJywgdHlwZW9mIGRlYnVnID09ICdudW1iZXInID8gZGVidWcgOiBMTExfQ0xJRU5UIHwgKGRlYnVnID8gTExMX1VTRVIgOiAwKSk7CgogIGxldCB7CiAgICBvbkNvbm5lY3QsCiAgICBvbkNsb3NlLAogICAgb25FcnJvciwKICAgIG9uSHR0cCwKICAgIG9uRmQsCiAgICBvbk1lc3NhZ2UsCiAgICB0bHMgPSB0cnVlLAogICAgc3NsQ2VydCA9ICdsb2NhbGhvc3QuY3J0JywKICAgIHNzbFByaXZhdGVLZXkgPSAnbG9jYWxob3N0LmtleScsCiAgICBoZWFkZXJzID0ge30sCiAgICAuLi5vcHRzCiAgfSA9IG9wdGlvbnM7CgogIGVyci5wdXRzKGBDbGllbnQgY29ubmVjdGluZyB0byAke3VybH0gLi4uXG5gKTsKCiAgLyogc2V0TG9nKAogICAgTExMX1dBUk4gfCAoZGVidWcgPyBMTExfVVNFUiA6IDApLAogICAgKGxldmVsLCBtZXNzYWdlKSA9PgogICAgICAhL0xPQURfRVhUUkF8VkhPU1RfQ0VSVF9BR0lORy8udGVzdChtZXNzYWdlKSAmJgogICAgICBsb2coYCR7bG9nTGV2ZWxzW2xldmVsXS5wYWRFbmQoMTApfSAke21lc3NhZ2UucmVwbGFjZSgvXG4vZywgJ1xcbicpLnRyaW0oKX1gKQogICk7CiovCiAgbGV0IHdyaXRhYmxlLCByZWFkYWJsZSwgYywgcHIsIHJlc29sdmUsIHJlamVjdDsKCiAgcmVhZGFibGUgPSBuZXcgR2VuZXJhdG9yKGFzeW5jIChwdXNoLCBzdG9wKSA9PiB7CiAgICBjID0gY2xpZW50KHVybCwgewogICAgICB0bHMsCiAgICAgIHNzbENlcnQsCiAgICAgIHNzbFByaXZhdGVLZXksCiAgICAgIGhlYWRlcnM6IHsKICAgICAgICAnVXNlci1BZ2VudCc6ICdtaW5uZXQnLAogICAgICAgIC4uLmhlYWRlcnMKICAgICAgfSwKICAgICAgLi4ub3B0cywKICAgICAgb25Db25uZWN0KHdzLCByZXEpIHsKICAgICAgICBjb25zb2xlLmxvZygnb25Db25uZWN0Jyk7CiAgICAgICAgY29ubmVjdGlvbnMuYWRkKHdzKTsKCiAgICAgICAgd3JpdGFibGUgPSB7CiAgICAgICAgICB3cml0ZShjaHVuaykgewogICAgICAgICAgICByZXR1cm4gd3Muc2VuZChjaHVuayk7CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb25Db25uZWN0ID8gb25Db25uZWN0KHdzLCByZXEpIDogY29uc29sZS5sb2coJ29uQ29ubmVjdCcsIHdzLCByZXEpOwogICAgICB9LAogICAgICBvbkNsb3NlKHdzLCBzdGF0dXMsIHJlYXNvbiwgZXJyb3IpIHsKICAgICAgICBjb25uZWN0aW9ucy5kZWxldGUod3MpOwoKICAgICAgICBpZihyZXNvbHZlKSByZXNvbHZlKHsgdmFsdWU6IHsgc3RhdHVzLCByZWFzb24sIGVycm9yIH0sIGRvbmU6IHRydWUgfSk7CgogICAgICAgIG9uQ2xvc2UKICAgICAgICAgID8gb25DbG9zZSh3cywgc3RhdHVzLCByZWFzb24sIGVycm9yKQogICAgICAgICAgOiAoY29uc29sZS5sb2coJ29uQ2xvc2UnLCB7IHdzLCByZWFzb24gfSksIGV4aXQocmVhc29uICE9IDEwMDAgJiYgcmVhc29uICE9IDAgPyAxIDogMCkpOwogICAgICAgIHByID0gcmVqZWN0ID0gcmVzb2x2ZSA9IG51bGw7CiAgICAgIH0sCiAgICAgIG9uRXJyb3Iod3MsIGVycm9yKSB7CiAgICAgICAgY29ubmVjdGlvbnMuZGVsZXRlKHdzKTsKCiAgICAgICAgb25FcnJvciA/IG9uRXJyb3Iod3MsIGVycm9yKSA6IChjb25zb2xlLmxvZygnb25FcnJvcicsIHsgd3MsIGVycm9yIH0pLCBleGl0KGVycm9yKSk7CiAgICAgIH0sCgogICAgICBvbkZkKGZkLCByZCwgd3IpIHsKICAgICAgICBzZXRSZWFkSGFuZGxlcihmZCwgcmQpOwogICAgICAgIHNldFdyaXRlSGFuZGxlcihmZCwgd3IpOwogICAgICB9LAogICAgICBvbk1lc3NhZ2Uod3MsIG1zZykgewogICAgICAgIG9uTWVzc2FnZQogICAgICAgICAgPyBvbk1lc3NhZ2Uod3MsIG1zZykKICAgICAgICAgIDogKGNvbnNvbGUubG9nKCdvbk1lc3NhZ2UnLCBjb25zb2xlLmNvbmZpZyh7IG1heFN0cmluZ0xlbjogMTAwIH0pLCB7IHdzLCBtc2cgfSksCiAgICAgICAgICAgIHB1dHMoZXNjYXBlKGFiYnJldmlhdGUobXNnKSkgKyAnXG4nKSk7CiAgICAgIH0sCiAgICAgIGFzeW5jIG9uSHR0cChyZXEsIHJlc3ApIHsKICAgICAgICBsZXQgdGV4dCA9IGF3YWl0IHJlc3AudGV4dCgpOwogICAgICAgIGNvbnNvbGUubG9nKCdvbkh0dHAoMiknLCB0ZXh0LnJlcGxhY2UoL1xuL2csICdcXG4nKS5zdWJzdHJpbmcoMCwgMTAwKSk7CiAgICAgICAgY29uc29sZS5sb2coJ3B1c2gnLCBhd2FpdCBwdXNoKHRleHQpKTsKICAgICAgICAvKmZvciBhd2FpdChsZXQgY2h1bmsgb2YgcmVzcC5ib2R5KSB7CiAgICAgICAgICBsZXQgcHNoOwogICAgICAgICAgY29uc29sZS5sb2coCiAgICAgICAgICAgICdceDFiWzE7MzNtb25IdHRwIGJvZHkgY2h1bmtceDFiWzE7MzZtOlx4MWJbMG0nLAogICAgICAgICAgICBjaHVuay5sZW5ndGgsCiAgICAgICAgICAgIGNodW5rLnJlcGxhY2UoL1xuL2csICdcXG4nKS5zdWJzdHJpbmcoMCwgMTAwKQogICAgICAgICAgKTsKICAgICAgICAgIGNvbnNvbGUubG9nKCdwdXNoJywgKHBzaCA9IHB1c2goY2h1bmspKSk7CiAgICAgICAgICBhd2FpdCBwc2g7CiAgICAgICAgfSovCiAgICAgIH0KICAgIH0pOwogIH0pOwoKICByZXR1cm4gewogICAgcmVhZGFibGU6IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKAogICAgICB7fSwKICAgICAgewogICAgICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl06IHsKICAgICAgICAgIHZhbHVlOiAoKSA9PiByZWFkYWJsZQogICAgICAgIH0sCiAgICAgICAgZ2V0UmVhZGVyOiB7CiAgICAgICAgICB2YWx1ZTogKCkgPT4gKHsgcmVhZDogKCkgPT4gcmVhZGFibGUubmV4dCgpIH0pCiAgICAgICAgfSwKICAgICAgICBbU3ltYm9sLnRvU3RyaW5nVGFnXTogeyB2YWx1ZTogJ1JlYWRhYmxlU3RyZWFtJyB9CiAgICAgIH0KICAgICksCiAgICB3cml0YWJsZQogIH07Cn0KCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShDbGllbnQsICdjb25uZWN0aW9ucycsIHsKICBnZXQoKSB7CiAgICByZXR1cm4gWy4uLmNvbm5lY3Rpb25zXTsKICB9Cn0pOwoAAAAAAAAAAHENAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADoAQAAAAAAAOgBAAAAAAAAAAAAAAAA8L8"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAOYBAAAAAAAA5wEAAAAAAAAAAAAA5wEAAAAAAADnAQAAAAAAAAQAAAAgLy8g",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADqAQAAAAAAAOYBAAAAAAAAAAAAAAAA8L8"
				],
				[
					199,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADYKAAAAAAAANwoAAAAAAAAAAAAANwoAAAAAAAA/CgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2CgAAAAAAADYKAAAAAAAAAAAAAAAA8L8"
				],
				[
					209,
					2,
					"right_delete",
					null,
					"AwAAAO8JAAAAAAAA7wkAAAAAAAAHAAAAY29uc29sZTAKAAAAAAAAMAoAAAAAAAAIAAAAICAgICAgICDvCQAAAAAAAO8JAAAAAAAAAQAAAC4",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvCQAAAAAAAPYJAAAAAAAAAAAAAAAA8L8"
				],
				[
					234,
					1,
					"cut",
					null,
					"AQAAABsDAAAAAAAAGwMAAAAAAAAxAAAAICBlcnIucHV0cyhgQ2xpZW50IGNvbm5lY3RpbmcgdG8gJHt1cmx9IC4uLlxuYCk7Cg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbAwAAAAAAAEwDAAAAAAAAAAAAAAAA8L8"
				],
				[
					235,
					2,
					"paste",
					null,
					"AgAAABsDAAAAAAAATAMAAAAAAAAAAAAATAMAAAAAAAB9AwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbAwAAAAAAABsDAAAAAAAAAAAAAAAA8L8"
				],
				[
					239,
					1,
					"insert",
					{
						"characters": "log"
					},
					"BAAAAE4DAAAAAAAATwMAAAAAAAAAAAAATwMAAAAAAABPAwAAAAAAAAgAAABlcnIucHV0c08DAAAAAAAAUAMAAAAAAAAAAAAAUAMAAAAAAABRAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABWAwAAAAAAAE4DAAAAAAAAAAAAAAAAMEA"
				],
				[
					244,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAB0DAAAAAAAAHgMAAAAAAAAAAAAAHgMAAAAAAAAfAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdAwAAAAAAAB0DAAAAAAAAAAAAAAAAMEA"
				],
				[
					312,
					1,
					"cut",
					null,
					"AQAAABUKAAAAAAAAFQoAAAAAAABIAAAAICAgICAgICBsb2coJ29uSHR0cCgyKScsIHRleHQucmVwbGFjZSgvXG4vZywgJ1xcbicpLnN1YnN0cmluZygwLCAxMDApKTsK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVCgAAAAAAAF0KAAAAAAAAAAAAAAAA8L8"
				],
				[
					313,
					2,
					"paste",
					null,
					"AgAAABUKAAAAAAAAXQoAAAAAAAAAAAAAXQoAAAAAAAClCgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVCgAAAAAAABUKAAAAAAAAAAAAAAAA8L8"
				],
				[
					318,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AgAAACkKAAAAAAAAKgoAAAAAAAAAAAAAKgoAAAAAAAAqCgAAAAAAAAEAAAAy",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAApCgAAAAAAACoKAAAAAAAAAAAAAAAA8L8"
				],
				[
					321,
					1,
					"insert",
					{
						"characters": "resp.headers"
					},
					"DQAAAC0KAAAAAAAALgoAAAAAAAAAAAAALgoAAAAAAAAuCgAAAAAAAC0AAAAgdGV4dC5yZXBsYWNlKC9cbi9nLCAnXFxuJykuc3Vic3RyaW5nKDAsIDEwMCkuCgAAAAAAAC8KAAAAAAAAAAAAAC8KAAAAAAAAMAoAAAAAAAAAAAAAMAoAAAAAAAAxCgAAAAAAAAAAAAAxCgAAAAAAADIKAAAAAAAAAAAAADIKAAAAAAAAMwoAAAAAAAAAAAAAMwoAAAAAAAA0CgAAAAAAAAAAAAA0CgAAAAAAADUKAAAAAAAAAAAAADUKAAAAAAAANgoAAAAAAAAAAAAANgoAAAAAAAA3CgAAAAAAAAAAAAA3CgAAAAAAADgKAAAAAAAAAAAAADgKAAAAAAAAOQoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtCgAAAAAAAFoKAAAAAAAAAAAAAAAA8L8"
				],
				[
					330,
					1,
					"insert",
					{
						"characters": "url"
					},
					"BAAAADIKAAAAAAAAMwoAAAAAAAAAAAAAMwoAAAAAAAAzCgAAAAAAAAcAAABoZWFkZXJzMwoAAAAAAAA0CgAAAAAAAAAAAAA0CgAAAAAAADUKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyCgAAAAAAADkKAAAAAAAAAAAAAAAA8L8"
				],
				[
					335,
					1,
					"insert",
					{
						"characters": ".path"
					},
					"BQAAADUKAAAAAAAANgoAAAAAAAAAAAAANgoAAAAAAAA3CgAAAAAAAAAAAAA3CgAAAAAAADgKAAAAAAAAAAAAADgKAAAAAAAAOQoAAAAAAAAAAAAAOQoAAAAAAAA6CgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1CgAAAAAAADUKAAAAAAAAAAAAAAAAcEA"
				],
				[
					354,
					1,
					"insert",
					{
						"characters": "\net"
					},
					"BAAAABQKAAAAAAAAFQoAAAAAAAAAAAAAFQoAAAAAAAAdCgAAAAAAAAAAAAAdCgAAAAAAAB4KAAAAAAAAAAAAAB4KAAAAAAAAHwoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAUCgAAAAAAABQKAAAAAAAAAAAAAAAA8L8"
				],
				[
					355,
					2,
					"left_delete",
					null,
					"AgAAAB4KAAAAAAAAHgoAAAAAAAABAAAAdB0KAAAAAAAAHQoAAAAAAAABAAAAZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfCgAAAAAAAB8KAAAAAAAAAAAAAAAA8L8"
				],
				[
					356,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAB0KAAAAAAAAHgoAAAAAAAAAAAAAHgoAAAAAAAAfCgAAAAAAAAAAAAAfCgAAAAAAACAKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdCgAAAAAAAB0KAAAAAAAAAAAAAAAA8L8"
				],
				[
					357,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACAKAAAAAAAAIQoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgCgAAAAAAACAKAAAAAAAAAAAAAAAA8L8"
				],
				[
					358,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAACEKAAAAAAAAIwoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhCgAAAAAAACEKAAAAAAAAAAAAAAAA8L8"
				],
				[
					359,
					1,
					"insert",
					{
						"characters": "path"
					},
					"BAAAACIKAAAAAAAAIwoAAAAAAAAAAAAAIwoAAAAAAAAkCgAAAAAAAAAAAAAkCgAAAAAAACUKAAAAAAAAAAAAACUKAAAAAAAAJgoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiCgAAAAAAACIKAAAAAAAAAAAAAAAA8L8"
				],
				[
					361,
					1,
					"insert",
					{
						"characters": "=resp.url;"
					},
					"CgAAACcKAAAAAAAAKAoAAAAAAAAAAAAAKAoAAAAAAAApCgAAAAAAAAAAAAApCgAAAAAAACoKAAAAAAAAAAAAACoKAAAAAAAAKwoAAAAAAAAAAAAAKwoAAAAAAAAsCgAAAAAAAAAAAAAsCgAAAAAAAC0KAAAAAAAAAAAAAC0KAAAAAAAALgoAAAAAAAAAAAAALgoAAAAAAAAvCgAAAAAAAAAAAAAvCgAAAAAAADAKAAAAAAAAAAAAADAKAAAAAAAAMQoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAnCgAAAAAAACcKAAAAAAAAAAAAAAAA8L8"
				],
				[
					362,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADEKAAAAAAAAMgoAAAAAAAAAAAAAMgoAAAAAAAA6CgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxCgAAAAAAADEKAAAAAAAAAAAAAAAA8L8"
				],
				[
					365,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAADoKAAAAAAAAOwoAAAAAAAAAAAAAOwoAAAAAAABDCgAAAAAAAAAAAAAyCgAAAAAAADIKAAAAAAAACAAAACAgICAgICAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6CgAAAAAAADoKAAAAAAAAAAAAAAAA8L8"
				],
				[
					368,
					1,
					"insert",
					{
						"characters": "path"
					},
					"BAAAADsKAAAAAAAAPAoAAAAAAAAAAAAAPAoAAAAAAAA9CgAAAAAAAAAAAAA9CgAAAAAAAD4KAAAAAAAAAAAAAD4KAAAAAAAAPwoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7CgAAAAAAADsKAAAAAAAAAAAAAAAA8L8"
				],
				[
					369,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAD8KAAAAAAAAQAoAAAAAAAAAAAAAQAoAAAAAAABBCgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/CgAAAAAAAD8KAAAAAAAAAAAAAAAA8L8"
				],
				[
					370,
					1,
					"insert",
					{
						"characters": " path.replace"
					},
					"DQAAAEEKAAAAAAAAQgoAAAAAAAAAAAAAQgoAAAAAAABDCgAAAAAAAAAAAABDCgAAAAAAAEQKAAAAAAAAAAAAAEQKAAAAAAAARQoAAAAAAAAAAAAARQoAAAAAAABGCgAAAAAAAAAAAABGCgAAAAAAAEcKAAAAAAAAAAAAAEcKAAAAAAAASAoAAAAAAAAAAAAASAoAAAAAAABJCgAAAAAAAAAAAABJCgAAAAAAAEoKAAAAAAAAAAAAAEoKAAAAAAAASwoAAAAAAAAAAAAASwoAAAAAAABMCgAAAAAAAAAAAABMCgAAAAAAAE0KAAAAAAAAAAAAAE0KAAAAAAAATgoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBCgAAAAAAAEEKAAAAAAAAAAAAAAAA8L8"
				],
				[
					371,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAE4KAAAAAAAAUAoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABOCgAAAAAAAE4KAAAAAAAAAAAAAAAA8L8"
				],
				[
					372,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAE8KAAAAAAAAUAoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABPCgAAAAAAAE8KAAAAAAAAAAAAAAAA8L8"
				],
				[
					373,
					1,
					"left_delete",
					null,
					"AQAAAE8KAAAAAAAATwoAAAAAAAABAAAAJg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQCgAAAAAAAFAKAAAAAAAAAAAAAAAA8L8"
				],
				[
					374,
					1,
					"insert",
					{
						"characters": "/.*\\/"
					},
					"BQAAAE8KAAAAAAAAUAoAAAAAAAAAAAAAUAoAAAAAAABRCgAAAAAAAAAAAABRCgAAAAAAAFIKAAAAAAAAAAAAAFIKAAAAAAAAUwoAAAAAAAAAAAAAUwoAAAAAAABUCgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABPCgAAAAAAAE8KAAAAAAAAAAAAAAAA8L8"
				],
				[
					375,
					1,
					"insert",
					{
						"characters": "/g,"
					},
					"AwAAAFQKAAAAAAAAVQoAAAAAAAAAAAAAVQoAAAAAAABWCgAAAAAAAAAAAABWCgAAAAAAAFcKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUCgAAAAAAAFQKAAAAAAAAAAAAAAAA8L8"
				],
				[
					376,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFcKAAAAAAAAWAoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABXCgAAAAAAAFcKAAAAAAAAAAAAAAAA8L8"
				],
				[
					377,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAFgKAAAAAAAAWgoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABYCgAAAAAAAFgKAAAAAAAAAAAAAAAA8L8"
				],
				[
					379,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFsKAAAAAAAAXAoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABbCgAAAAAAAFsKAAAAAAAAAAAAAAAA8L8"
				],
				[
					382,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BAAAAFwKAAAAAAAAXQoAAAAAAAAAAAAAXQoAAAAAAABlCgAAAAAAAAAAAABlCgAAAAAAAGYKAAAAAAAAAAAAAGYKAAAAAAAAZwoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcCgAAAAAAAFwKAAAAAAAAAAAAAAAA8L8"
				],
				[
					383,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGcKAAAAAAAAaQoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABnCgAAAAAAAGcKAAAAAAAAAAAAAAAA8L8"
				],
				[
					384,
					1,
					"insert",
					{
						"characters": "path=="
					},
					"BgAAAGgKAAAAAAAAaQoAAAAAAAAAAAAAaQoAAAAAAABqCgAAAAAAAAAAAABqCgAAAAAAAGsKAAAAAAAAAAAAAGsKAAAAAAAAbAoAAAAAAAAAAAAAbAoAAAAAAABtCgAAAAAAAAAAAABtCgAAAAAAAG4KAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoCgAAAAAAAGgKAAAAAAAAAAAAAAAA8L8"
				],
				[
					385,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAG4KAAAAAAAAcAoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuCgAAAAAAAG4KAAAAAAAAAAAAAAAA8L8"
				],
				[
					387,
					1,
					"insert",
					{
						"characters": "\npath="
					},
					"CQAAAHEKAAAAAAAAcgoAAAAAAAAAAAAAcgoAAAAAAAB6CgAAAAAAAAAAAAByCgAAAAAAAHIKAAAAAAAACAAAACAgICAgICAgcgoAAAAAAAB8CgAAAAAAAAAAAAB8CgAAAAAAAH0KAAAAAAAAAAAAAH0KAAAAAAAAfgoAAAAAAAAAAAAAfgoAAAAAAAB/CgAAAAAAAAAAAAB/CgAAAAAAAIAKAAAAAAAAAAAAAIAKAAAAAAAAgQoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxCgAAAAAAAHEKAAAAAAAAAAAAAAAA8L8"
				],
				[
					388,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAIEKAAAAAAAAgwoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBCgAAAAAAAIEKAAAAAAAAAAAAAAAA8L8"
				],
				[
					389,
					1,
					"insert",
					{
						"characters": "index.html"
					},
					"CgAAAIIKAAAAAAAAgwoAAAAAAAAAAAAAgwoAAAAAAACECgAAAAAAAAAAAACECgAAAAAAAIUKAAAAAAAAAAAAAIUKAAAAAAAAhgoAAAAAAAAAAAAAhgoAAAAAAACHCgAAAAAAAAAAAACHCgAAAAAAAIgKAAAAAAAAAAAAAIgKAAAAAAAAiQoAAAAAAAAAAAAAiQoAAAAAAACKCgAAAAAAAAAAAACKCgAAAAAAAIsKAAAAAAAAAAAAAIsKAAAAAAAAjAoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCCgAAAAAAAIIKAAAAAAAAAAAAAAAA8L8"
				],
				[
					391,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAI0KAAAAAAAAjgoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNCgAAAAAAAI0KAAAAAAAAAAAAAAAA8L8"
				],
				[
					392,
					1,
					"left_delete",
					null,
					"AQAAAI0KAAAAAAAAjQoAAAAAAAABAAAAMA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACOCgAAAAAAAI4KAAAAAAAAAAAAAAAA8L8"
				],
				[
					393,
					1,
					"insert",
					{
						"characters": ";:"
					},
					"AgAAAI0KAAAAAAAAjgoAAAAAAAAAAAAAjgoAAAAAAACPCgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNCgAAAAAAAI0KAAAAAAAAAAAAAAAA8L8"
				],
				[
					394,
					2,
					"left_delete",
					null,
					"AgAAAI4KAAAAAAAAjgoAAAAAAAABAAAAOo0KAAAAAAAAjQoAAAAAAAABAAAAOw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPCgAAAAAAAI8KAAAAAAAAAAAAAAAA8L8"
				],
				[
					395,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAI0KAAAAAAAAjgoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNCgAAAAAAAI0KAAAAAAAAAAAAAAAA8L8"
				],
				[
					396,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAI4KAAAAAAAAjwoAAAAAAAAAAAAAjwoAAAAAAACZCgAAAAAAAAAAAACPCgAAAAAAAI8KAAAAAAAACgAAACAgICAgICAgICCPCgAAAAAAAJcKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACOCgAAAAAAAI4KAAAAAAAAAAAAAAAA8L8"
				],
				[
					409,
					1,
					"insert",
					{
						"characters": ",remoteName"
					},
					"DAAAAIkEAAAAAAAAigQAAAAAAAAAAAAAkAoAAAAAAACQCgAAAAAAAAgAAAAgICAgICAgIIoEAAAAAAAAiwQAAAAAAAAAAAAAiwQAAAAAAACMBAAAAAAAAAAAAACMBAAAAAAAAI0EAAAAAAAAAAAAAI0EAAAAAAAAjgQAAAAAAAAAAAAAjgQAAAAAAACPBAAAAAAAAAAAAACPBAAAAAAAAJAEAAAAAAAAAAAAAJAEAAAAAAAAkQQAAAAAAAAAAAAAkQQAAAAAAACSBAAAAAAAAAAAAACSBAAAAAAAAJMEAAAAAAAAAAAAAJMEAAAAAAAAlAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJBAAAAAAAAIkEAAAAAAAAAAAAAAAA8L8"
				],
				[
					427,
					1,
					"paste",
					null,
					"AQAAAG0KAAAAAAAAdwoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtCgAAAAAAAG0KAAAAAAAAAAAAAAAA8L8"
				],
				[
					428,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAHcKAAAAAAAAeAoAAAAAAAAAAAAAeAoAAAAAAAB5CgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3CgAAAAAAAHcKAAAAAAAAAAAAAAAA8L8"
				],
				[
					429,
					1,
					"insert",
					{
						"characters": " path"
					},
					"BQAAAHkKAAAAAAAAegoAAAAAAAAAAAAAegoAAAAAAAB7CgAAAAAAAAAAAAB7CgAAAAAAAHwKAAAAAAAAAAAAAHwKAAAAAAAAfQoAAAAAAAAAAAAAfQoAAAAAAAB+CgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB5CgAAAAAAAHkKAAAAAAAAAAAAAAAA8L8"
				],
				[
					430,
					1,
					"insert",
					{
						"characters": " ??"
					},
					"AwAAAH4KAAAAAAAAfwoAAAAAAAAAAAAAfwoAAAAAAACACgAAAAAAAAAAAACACgAAAAAAAIEKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+CgAAAAAAAH4KAAAAAAAAAAAAAAAA8L8"
				],
				[
					431,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIEKAAAAAAAAggoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBCgAAAAAAAIEKAAAAAAAAAAAAAAAA8L8"
				],
				[
					435,
					1,
					"left_delete",
					null,
					"AQAAAIIKAAAAAAAAggoAAAAAAAAfAAAAICAgaWYocGF0aD09JycpCiAgICAgICAgICBwYXRoPQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCCgAAAAAAAKEKAAAAAAAAAAAAAAAA8L8"
				],
				[
					454,
					1,
					"insert",
					{
						"characters": "\nget"
					},
					"BgAAAJ0MAAAAAAAAngwAAAAAAAAAAAAAngwAAAAAAACgDAAAAAAAAAAAAACgDAAAAAAAAKIMAAAAAAAAAAAAAKIMAAAAAAAAowwAAAAAAAAAAAAAowwAAAAAAACkDAAAAAAAAAAAAACkDAAAAAAAAKUMAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdDAAAAAAAAJ0MAAAAAAAAAAAAAAAA8L8"
				],
				[
					455,
					1,
					"insert",
					{
						"characters": " remote"
					},
					"BwAAAKUMAAAAAAAApgwAAAAAAAAAAAAApgwAAAAAAACnDAAAAAAAAAAAAACnDAAAAAAAAKgMAAAAAAAAAAAAAKgMAAAAAAAAqQwAAAAAAAAAAAAAqQwAAAAAAACqDAAAAAAAAAAAAACqDAAAAAAAAKsMAAAAAAAAAAAAAKsMAAAAAAAArAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClDAAAAAAAAKUMAAAAAAAAAAAAAAAA8L8"
				],
				[
					456,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKwMAAAAAAAArgwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsDAAAAAAAAKwMAAAAAAAAAAAAAAAA8L8"
				],
				[
					464,
					2,
					"left_delete",
					null,
					"AgAAAK0MAAAAAAAArQwAAAAAAAABAAAAKawMAAAAAAAArAwAAAAAAAABAAAAKA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuDAAAAAAAAK4MAAAAAAAAAAAAAAAA8L8"
				],
				[
					465,
					1,
					"insert",
					{
						"characters": "F"
					},
					"AQAAAKwMAAAAAAAArQwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsDAAAAAAAAKwMAAAAAAAAAAAAAAAA8L8"
				],
				[
					466,
					1,
					"left_delete",
					null,
					"AQAAAKwMAAAAAAAArAwAAAAAAAABAAAARg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtDAAAAAAAAK0MAAAAAAAAAAAAAAAA8L8"
				],
				[
					467,
					1,
					"insert",
					{
						"characters": "Name"
					},
					"BAAAAKwMAAAAAAAArQwAAAAAAAAAAAAArQwAAAAAAACuDAAAAAAAAAAAAACuDAAAAAAAAK8MAAAAAAAAAAAAAK8MAAAAAAAAsAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsDAAAAAAAAKwMAAAAAAAAAAAAAAAA8L8"
				],
				[
					468,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALAMAAAAAAAAsgwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwDAAAAAAAALAMAAAAAAAAAAAAAAAA8L8"
				],
				[
					470,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALIMAAAAAAAAswwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyDAAAAAAAALIMAAAAAAAAAAAAAAAA8L8"
				],
				[
					471,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAALMMAAAAAAAAtQwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzDAAAAAAAALMMAAAAAAAAAAAAAAAA8L8"
				],
				[
					472,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAALQMAAAAAAAAtQwAAAAAAAAAAAAAtQwAAAAAAAC5DAAAAAAAAAAAAAC5DAAAAAAAALoMAAAAAAAAAAAAALoMAAAAAAAAvgwAAAAAAAAAAAAAtQwAAAAAAAC1DAAAAAAAAAQAAAAgICAgtQwAAAAAAAC7DAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0DAAAAAAAALQMAAAAAAAAAAAAAAAA8L8"
				],
				[
					474,
					1,
					"insert",
					{
						"characters": ","
					},
					"AgAAAMEMAAAAAAAAwgwAAAAAAAAAAAAAtQwAAAAAAAC1DAAAAAAAAAYAAAAgICAgICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBDAAAAAAAAMEMAAAAAAAAAAAAAAAASEA"
				],
				[
					478,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAALUMAAAAAAAAtgwAAAAAAAAAAAAAtgwAAAAAAAC3DAAAAAAAAAAAAAC3DAAAAAAAALgMAAAAAAAAAAAAALgMAAAAAAAAuQwAAAAAAAAAAAAAuQwAAAAAAAC6DAAAAAAAAAAAAAC6DAAAAAAAALsMAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1DAAAAAAAALUMAAAAAAAAAAAAAAAASEA"
				],
				[
					479,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALsMAAAAAAAAvAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7DAAAAAAAALsMAAAAAAAAAAAAAAAA8L8"
				],
				[
					480,
					1,
					"paste",
					null,
					"AQAAALwMAAAAAAAAxgwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8DAAAAAAAALwMAAAAAAAAAAAAAAAA8L8"
				],
				[
					481,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMYMAAAAAAAAxwwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGDAAAAAAAAMYMAAAAAAAAAAAAAAAA8L8"
				],
				[
					499,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAGgKAAAAAAAAagoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoCgAAAAAAAGgKAAAAAAAAAAAAAAAAAAA"
				],
				[
					504,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABsDgAAaW1wb3J0IHsgZXJyLCBleGl0LCBwdXRzIH0gZnJvbSAnc3RkJzsKaW1wb3J0IHsgc2V0UmVhZEhhbmRsZXIsIHNldFdyaXRlSGFuZGxlciB9IGZyb20gJ29zJzsKaW1wb3J0IHsgY2xpZW50LCBzZXRMb2csIExMTF9XQVJOLCBMTExfQ0xJRU5ULCBMTExfVVNFUiwgVVJMLCBHZW5lcmF0b3IsIGxvZ0xldmVscyB9IGZyb20gJ25ldCc7CmltcG9ydCB7IExldmVscywgRGVmYXVsdExldmVscywgSW5pdCwgaXNEZWJ1ZywgbG9nIH0gZnJvbSAnLi9sb2cuanMnOwppbXBvcnQgeyBlc2NhcGUsIGFiYnJldmlhdGUgfSBmcm9tICcuL2NvbW1vbi5qcyc7Cgpjb25zdCBjb25uZWN0aW9ucyA9IG5ldyBTZXQoKTsKCmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENsaWVudCh1cmwsIG9wdGlvbnMsIGRlYnVnKSB7CiAgLy9jb25zb2xlLmxvZygnQ2xpZW50Jyx7dXJsLG9wdGlvbnMsZGVidWd9KTsKICBsb2coJ01pbm5ldENsaWVudCcsIHsgdXJsLCBvcHRpb25zIH0pOwogIEluaXQoJ2NsaWVudC5qcycsIHR5cGVvZiBkZWJ1ZyA9PSAnbnVtYmVyJyA/IGRlYnVnIDogTExMX0NMSUVOVCB8IChkZWJ1ZyA/IExMTF9VU0VSIDogMCkpOwoKICBsZXQgewogICAgb25Db25uZWN0LAogICAgb25DbG9zZSwKICAgIG9uRXJyb3IsCiAgICBvbkh0dHAsCiAgICBvbkZkLAogICAgb25NZXNzYWdlLAogICAgdGxzID0gdHJ1ZSwKICAgIHNzbENlcnQgPSAnbG9jYWxob3N0LmNydCcsCiAgICBzc2xQcml2YXRlS2V5ID0gJ2xvY2FsaG9zdC5rZXknLAogICAgaGVhZGVycyA9IHt9LAogICAgLi4ub3B0cwogIH0gPSBvcHRpb25zOwoKICAvL2Vyci5wdXRzKGBDbGllbnQgY29ubmVjdGluZyB0byAke3VybH0gLi4uXG5gKTsKICBsb2coYENsaWVudCBjb25uZWN0aW5nIHRvICR7dXJsfSAuLi5cbmApOwoKICAvKiBzZXRMb2coCiAgICBMTExfV0FSTiB8IChkZWJ1ZyA/IExMTF9VU0VSIDogMCksCiAgICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgICAgICEvTE9BRF9FWFRSQXxWSE9TVF9DRVJUX0FHSU5HLy50ZXN0KG1lc3NhZ2UpICYmCiAgICAgIGxvZyhgJHtsb2dMZXZlbHNbbGV2ZWxdLnBhZEVuZCgxMCl9ICR7bWVzc2FnZS5yZXBsYWNlKC9cbi9nLCAnXFxuJykudHJpbSgpfWApCiAgKTsKKi8KICBsZXQgd3JpdGFibGUsIHJlYWRhYmxlLCBjLCBwciwgcmVzb2x2ZSwgcmVqZWN0LHJlbW90ZU5hbWU7CgogIHJlYWRhYmxlID0gbmV3IEdlbmVyYXRvcihhc3luYyAocHVzaCwgc3RvcCkgPT4gewogICAgYyA9IGNsaWVudCh1cmwsIHsKICAgICAgdGxzLAogICAgICBzc2xDZXJ0LAogICAgICBzc2xQcml2YXRlS2V5LAogICAgICBoZWFkZXJzOiB7CiAgICAgICAgJ1VzZXItQWdlbnQnOiAnbWlubmV0JywKICAgICAgICAuLi5oZWFkZXJzCiAgICAgIH0sCiAgICAgIC4uLm9wdHMsCiAgICAgIG9uQ29ubmVjdCh3cywgcmVxKSB7CiAgICAgICAgY29uc29sZS5sb2coJ29uQ29ubmVjdCcpOwogICAgICAgIGNvbm5lY3Rpb25zLmFkZCh3cyk7CgogICAgICAgIHdyaXRhYmxlID0gewogICAgICAgICAgd3JpdGUoY2h1bmspIHsKICAgICAgICAgICAgcmV0dXJuIHdzLnNlbmQoY2h1bmspOwogICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9uQ29ubmVjdCA/IG9uQ29ubmVjdCh3cywgcmVxKSA6IGNvbnNvbGUubG9nKCdvbkNvbm5lY3QnLCB3cywgcmVxKTsKICAgICAgfSwKICAgICAgb25DbG9zZSh3cywgc3RhdHVzLCByZWFzb24sIGVycm9yKSB7CiAgICAgICAgY29ubmVjdGlvbnMuZGVsZXRlKHdzKTsKCiAgICAgICAgaWYocmVzb2x2ZSkgcmVzb2x2ZSh7IHZhbHVlOiB7IHN0YXR1cywgcmVhc29uLCBlcnJvciB9LCBkb25lOiB0cnVlIH0pOwoKICAgICAgICBvbkNsb3NlCiAgICAgICAgICA/IG9uQ2xvc2Uod3MsIHN0YXR1cywgcmVhc29uLCBlcnJvcikKICAgICAgICAgIDogKGNvbnNvbGUubG9nKCdvbkNsb3NlJywgeyB3cywgcmVhc29uIH0pLCBleGl0KHJlYXNvbiAhPSAxMDAwICYmIHJlYXNvbiAhPSAwID8gMSA6IDApKTsKICAgICAgICBwciA9IHJlamVjdCA9IHJlc29sdmUgPSBudWxsOwogICAgICB9LAogICAgICBvbkVycm9yKHdzLCBlcnJvcikgewogICAgICAgIGNvbm5lY3Rpb25zLmRlbGV0ZSh3cyk7CgogICAgICAgIG9uRXJyb3IgPyBvbkVycm9yKHdzLCBlcnJvcikgOiAoY29uc29sZS5sb2coJ29uRXJyb3InLCB7IHdzLCBlcnJvciB9KSwgZXhpdChlcnJvcikpOwogICAgICB9LAoKICAgICAgb25GZChmZCwgcmQsIHdyKSB7CiAgICAgICAgc2V0UmVhZEhhbmRsZXIoZmQsIHJkKTsKICAgICAgICBzZXRXcml0ZUhhbmRsZXIoZmQsIHdyKTsKICAgICAgfSwKICAgICAgb25NZXNzYWdlKHdzLCBtc2cpIHsKICAgICAgICBvbk1lc3NhZ2UKICAgICAgICAgID8gb25NZXNzYWdlKHdzLCBtc2cpCiAgICAgICAgICA6IChjb25zb2xlLmxvZygnb25NZXNzYWdlJywgY29uc29sZS5jb25maWcoeyBtYXhTdHJpbmdMZW46IDEwMCB9KSwgeyB3cywgbXNnIH0pLAogICAgICAgICAgICBwdXRzKGVzY2FwZShhYmJyZXZpYXRlKG1zZykpICsgJ1xuJykpOwogICAgICB9LAogICAgICBhc3luYyBvbkh0dHAocmVxLCByZXNwKSB7CiAgICAgICAgbGV0IHRleHQgPSBhd2FpdCByZXNwLnRleHQoKTsKICAgICAgICBsZXQge3BhdGh9PXJlc3AudXJsOwoKICAgICAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC8uKlwvL2csICcnKTsKICAgICAgIHJlbW90ZU5hbWUgPSBwYXRoID8/ICdpbmRleC5odG1sJzsKCiAgICAgICAgbG9nKCdvbkh0dHAoMSknLHJlc3AudXJsLnBhdGgpOwogICAgICAgIGxvZygnb25IdHRwKDIpJywgdGV4dC5yZXBsYWNlKC9cbi9nLCAnXFxuJykuc3Vic3RyaW5nKDAsIDEwMCkpOwoKICAgICAgICBjb25zb2xlLmxvZygncHVzaCcsIGF3YWl0IHB1c2godGV4dCkpOwogICAgICAgIC8qZm9yIGF3YWl0KGxldCBjaHVuayBvZiByZXNwLmJvZHkpIHsKICAgICAgICAgIGxldCBwc2g7CiAgICAgICAgICBjb25zb2xlLmxvZygKICAgICAgICAgICAgJ1x4MWJbMTszM21vbkh0dHAgYm9keSBjaHVua1x4MWJbMTszNm06XHgxYlswbScsCiAgICAgICAgICAgIGNodW5rLmxlbmd0aCwKICAgICAgICAgICAgY2h1bmsucmVwbGFjZSgvXG4vZywgJ1xcbicpLnN1YnN0cmluZygwLCAxMDApCiAgICAgICAgICApOwogICAgICAgICAgY29uc29sZS5sb2coJ3B1c2gnLCAocHNoID0gcHVzaChjaHVuaykpKTsKICAgICAgICAgIGF3YWl0IHBzaDsKICAgICAgICB9Ki8KICAgICAgfQogICAgfSk7CiAgfSk7CgogIHJldHVybiB7CiAgICBnZXQgcmVtb3RlTmFtZSgpIHsKcmV0dXJuIHJlbW90ZU5hbWU7CiAgICB9LAogICAgcmVhZGFibGU6IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKAogICAgICB7fSwKICAgICAgewogICAgICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl06IHsKICAgICAgICAgIHZhbHVlOiAoKSA9PiByZWFkYWJsZQogICAgICAgIH0sCiAgICAgICAgZ2V0UmVhZGVyOiB7CiAgICAgICAgICB2YWx1ZTogKCkgPT4gKHsgcmVhZDogKCkgPT4gcmVhZGFibGUubmV4dCgpIH0pCiAgICAgICAgfSwKICAgICAgICBbU3ltYm9sLnRvU3RyaW5nVGFnXTogeyB2YWx1ZTogJ1JlYWRhYmxlU3RyZWFtJyB9CiAgICAgIH0KICAgICksCiAgICB3cml0YWJsZQogIH07Cn0KCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShDbGllbnQsICdjb25uZWN0aW9ucycsIHsKICBnZXQoKSB7CiAgICByZXR1cm4gWy4uLmNvbm5lY3Rpb25zXTsKICB9Cn0pOwoAAAAAAAAAAHkOAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqCgAAAAAAAGoKAAAAAAAAAAAAAAAA8L8"
				],
				[
					509,
					1,
					"insert",
					{
						"characters": "?"
					},
					"AQAAAJUEAAAAAAAAlgQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACVBAAAAAAAAJUEAAAAAAAAAAAAAAAA8L8"
				],
				[
					510,
					1,
					"left_delete",
					null,
					"AQAAAJUEAAAAAAAAlQQAAAAAAAABAAAAPw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWBAAAAAAAAJYEAAAAAAAAAAAAAAAA8L8"
				],
				[
					511,
					1,
					"insert",
					{
						"characters": "=new"
					},
					"BAAAAJUEAAAAAAAAlgQAAAAAAAAAAAAAlgQAAAAAAACXBAAAAAAAAAAAAACXBAAAAAAAAJgEAAAAAAAAAAAAAJgEAAAAAAAAmQQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACVBAAAAAAAAJUEAAAAAAAAAAAAAAAA8L8"
				],
				[
					512,
					1,
					"insert",
					{
						"characters": " Promise"
					},
					"CAAAAJkEAAAAAAAAmgQAAAAAAAAAAAAAmgQAAAAAAACbBAAAAAAAAAAAAACbBAAAAAAAAJwEAAAAAAAAAAAAAJwEAAAAAAAAnQQAAAAAAAAAAAAAnQQAAAAAAACeBAAAAAAAAAAAAACeBAAAAAAAAJ8EAAAAAAAAAAAAAJ8EAAAAAAAAoAQAAAAAAAAAAAAAoAQAAAAAAAChBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZBAAAAAAAAJkEAAAAAAAAAAAAAAAA8L8"
				],
				[
					513,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKEEAAAAAAAAowQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChBAAAAAAAAKEEAAAAAAAAAAAAAAAA8L8"
				],
				[
					515,
					1,
					"left_delete",
					null,
					"AQAAAKIEAAAAAAAAogQAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjBAAAAAAAAKMEAAAAAAAAAAAAAAAA8L8"
				],
				[
					518,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKIEAAAAAAAApAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACiBAAAAAAAAKIEAAAAAAAAAAAAAAAA8L8"
				],
				[
					519,
					1,
					"insert",
					{
						"characters": "accep"
					},
					"BQAAAKMEAAAAAAAApAQAAAAAAAAAAAAApAQAAAAAAAClBAAAAAAAAAAAAAClBAAAAAAAAKYEAAAAAAAAAAAAAKYEAAAAAAAApwQAAAAAAAAAAAAApwQAAAAAAACoBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjBAAAAAAAAKMEAAAAAAAAAAAAAAAA8L8"
				],
				[
					520,
					5,
					"left_delete",
					null,
					"BQAAAKcEAAAAAAAApwQAAAAAAAABAAAAcKYEAAAAAAAApgQAAAAAAAABAAAAZaUEAAAAAAAApQQAAAAAAAABAAAAY6QEAAAAAAAApAQAAAAAAAABAAAAY6MEAAAAAAAAowQAAAAAAAABAAAAYQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoBAAAAAAAAKgEAAAAAAAAAAAAAAAA8L8"
				],
				[
					521,
					1,
					"insert",
					{
						"characters": "resolve,reject"
					},
					"DgAAAKMEAAAAAAAApAQAAAAAAAAAAAAApAQAAAAAAAClBAAAAAAAAAAAAAClBAAAAAAAAKYEAAAAAAAAAAAAAKYEAAAAAAAApwQAAAAAAAAAAAAApwQAAAAAAACoBAAAAAAAAAAAAACoBAAAAAAAAKkEAAAAAAAAAAAAAKkEAAAAAAAAqgQAAAAAAAAAAAAAqgQAAAAAAACrBAAAAAAAAAAAAACrBAAAAAAAAKwEAAAAAAAAAAAAAKwEAAAAAAAArQQAAAAAAAAAAAAArQQAAAAAAACuBAAAAAAAAAAAAACuBAAAAAAAAK8EAAAAAAAAAAAAAK8EAAAAAAAAsAQAAAAAAAAAAAAAsAQAAAAAAACxBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjBAAAAAAAAKMEAAAAAAAAAAAAAAAA8L8"
				],
				[
					523,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAALIEAAAAAAAAswQAAAAAAAAAAAAAswQAAAAAAAC0BAAAAAAAAAAAAAC0BAAAAAAAALUEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyBAAAAAAAALIEAAAAAAAAAAAAAAAA8L8"
				],
				[
					524,
					1,
					"insert",
					{
						"characters": " {}"
					},
					"AwAAALUEAAAAAAAAtgQAAAAAAAAAAAAAtgQAAAAAAAC3BAAAAAAAAAAAAAC3BAAAAAAAALgEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1BAAAAAAAALUEAAAAAAAAAAAAAAAA8L8"
				],
				[
					525,
					1,
					"left_delete",
					null,
					"AQAAALcEAAAAAAAAtwQAAAAAAAABAAAAfQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4BAAAAAAAALgEAAAAAAAAAAAAAAAA8L8"
				],
				[
					526,
					1,
					"right_delete",
					null,
					"AQAAALcEAAAAAAAAtwQAAAAAAAABAAAAOw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3BAAAAAAAALcEAAAAAAAAAAAAAAAA8L8"
				],
				[
					533,
					1,
					"insert",
					{
						"characters": "\n});"
					},
					"BwAAALsMAAAAAAAAvAwAAAAAAAAAAAAAvAwAAAAAAAC+DAAAAAAAAAAAAAC+DAAAAAAAAL8MAAAAAAAAAAAAALwMAAAAAAAAvAwAAAAAAAACAAAAICC8DAAAAAAAALwMAAAAAAAAAAAAAL0MAAAAAAAAvgwAAAAAAAAAAAAAvgwAAAAAAAC/DAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7DAAAAAAAALsMAAAAAAAAAAAAAAAA8L8"
				],
				[
					536,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACeDgAAaW1wb3J0IHsgZXJyLCBleGl0LCBwdXRzIH0gZnJvbSAnc3RkJzsKaW1wb3J0IHsgc2V0UmVhZEhhbmRsZXIsIHNldFdyaXRlSGFuZGxlciB9IGZyb20gJ29zJzsKaW1wb3J0IHsgY2xpZW50LCBzZXRMb2csIExMTF9XQVJOLCBMTExfQ0xJRU5ULCBMTExfVVNFUiwgVVJMLCBHZW5lcmF0b3IsIGxvZ0xldmVscyB9IGZyb20gJ25ldCc7CmltcG9ydCB7IExldmVscywgRGVmYXVsdExldmVscywgSW5pdCwgaXNEZWJ1ZywgbG9nIH0gZnJvbSAnLi9sb2cuanMnOwppbXBvcnQgeyBlc2NhcGUsIGFiYnJldmlhdGUgfSBmcm9tICcuL2NvbW1vbi5qcyc7Cgpjb25zdCBjb25uZWN0aW9ucyA9IG5ldyBTZXQoKTsKCmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENsaWVudCh1cmwsIG9wdGlvbnMsIGRlYnVnKSB7CiAgLy9jb25zb2xlLmxvZygnQ2xpZW50Jyx7dXJsLG9wdGlvbnMsZGVidWd9KTsKICBsb2coJ01pbm5ldENsaWVudCcsIHsgdXJsLCBvcHRpb25zIH0pOwogIEluaXQoJ2NsaWVudC5qcycsIHR5cGVvZiBkZWJ1ZyA9PSAnbnVtYmVyJyA/IGRlYnVnIDogTExMX0NMSUVOVCB8IChkZWJ1ZyA/IExMTF9VU0VSIDogMCkpOwoKICBsZXQgewogICAgb25Db25uZWN0LAogICAgb25DbG9zZSwKICAgIG9uRXJyb3IsCiAgICBvbkh0dHAsCiAgICBvbkZkLAogICAgb25NZXNzYWdlLAogICAgdGxzID0gdHJ1ZSwKICAgIHNzbENlcnQgPSAnbG9jYWxob3N0LmNydCcsCiAgICBzc2xQcml2YXRlS2V5ID0gJ2xvY2FsaG9zdC5rZXknLAogICAgaGVhZGVycyA9IHt9LAogICAgLi4ub3B0cwogIH0gPSBvcHRpb25zOwoKICAvL2Vyci5wdXRzKGBDbGllbnQgY29ubmVjdGluZyB0byAke3VybH0gLi4uXG5gKTsKICBsb2coYENsaWVudCBjb25uZWN0aW5nIHRvICR7dXJsfSAuLi5cbmApOwoKICAvKiBzZXRMb2coCiAgICBMTExfV0FSTiB8IChkZWJ1ZyA/IExMTF9VU0VSIDogMCksCiAgICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgICAgICEvTE9BRF9FWFRSQXxWSE9TVF9DRVJUX0FHSU5HLy50ZXN0KG1lc3NhZ2UpICYmCiAgICAgIGxvZyhgJHtsb2dMZXZlbHNbbGV2ZWxdLnBhZEVuZCgxMCl9ICR7bWVzc2FnZS5yZXBsYWNlKC9cbi9nLCAnXFxuJykudHJpbSgpfWApCiAgKTsKKi8KICBsZXQgd3JpdGFibGUsIHJlYWRhYmxlLCBjLCBwciwgcmVzb2x2ZSwgcmVqZWN0LCByZW1vdGVOYW1lPW5ldyBQcm9taXNlKChyZXNvbHZlLHJlamVjdCkgPT4gewoKICByZWFkYWJsZSA9IG5ldyBHZW5lcmF0b3IoYXN5bmMgKHB1c2gsIHN0b3ApID0+IHsKICAgIGMgPSBjbGllbnQodXJsLCB7CiAgICAgIHRscywKICAgICAgc3NsQ2VydCwKICAgICAgc3NsUHJpdmF0ZUtleSwKICAgICAgaGVhZGVyczogewogICAgICAgICdVc2VyLUFnZW50JzogJ21pbm5ldCcsCiAgICAgICAgLi4uaGVhZGVycwogICAgICB9LAogICAgICAuLi5vcHRzLAogICAgICBvbkNvbm5lY3Qod3MsIHJlcSkgewogICAgICAgIGNvbnNvbGUubG9nKCdvbkNvbm5lY3QnKTsKICAgICAgICBjb25uZWN0aW9ucy5hZGQod3MpOwoKICAgICAgICB3cml0YWJsZSA9IHsKICAgICAgICAgIHdyaXRlKGNodW5rKSB7CiAgICAgICAgICAgIHJldHVybiB3cy5zZW5kKGNodW5rKTsKICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvbkNvbm5lY3QgPyBvbkNvbm5lY3Qod3MsIHJlcSkgOiBjb25zb2xlLmxvZygnb25Db25uZWN0Jywgd3MsIHJlcSk7CiAgICAgIH0sCiAgICAgIG9uQ2xvc2Uod3MsIHN0YXR1cywgcmVhc29uLCBlcnJvcikgewogICAgICAgIGNvbm5lY3Rpb25zLmRlbGV0ZSh3cyk7CgogICAgICAgIGlmKHJlc29sdmUpIHJlc29sdmUoeyB2YWx1ZTogeyBzdGF0dXMsIHJlYXNvbiwgZXJyb3IgfSwgZG9uZTogdHJ1ZSB9KTsKCiAgICAgICAgb25DbG9zZQogICAgICAgICAgPyBvbkNsb3NlKHdzLCBzdGF0dXMsIHJlYXNvbiwgZXJyb3IpCiAgICAgICAgICA6IChjb25zb2xlLmxvZygnb25DbG9zZScsIHsgd3MsIHJlYXNvbiB9KSwgZXhpdChyZWFzb24gIT0gMTAwMCAmJiByZWFzb24gIT0gMCA/IDEgOiAwKSk7CiAgICAgICAgcHIgPSByZWplY3QgPSByZXNvbHZlID0gbnVsbDsKICAgICAgfSwKICAgICAgb25FcnJvcih3cywgZXJyb3IpIHsKICAgICAgICBjb25uZWN0aW9ucy5kZWxldGUod3MpOwoKICAgICAgICBvbkVycm9yID8gb25FcnJvcih3cywgZXJyb3IpIDogKGNvbnNvbGUubG9nKCdvbkVycm9yJywgeyB3cywgZXJyb3IgfSksIGV4aXQoZXJyb3IpKTsKICAgICAgfSwKCiAgICAgIG9uRmQoZmQsIHJkLCB3cikgewogICAgICAgIHNldFJlYWRIYW5kbGVyKGZkLCByZCk7CiAgICAgICAgc2V0V3JpdGVIYW5kbGVyKGZkLCB3cik7CiAgICAgIH0sCiAgICAgIG9uTWVzc2FnZSh3cywgbXNnKSB7CiAgICAgICAgb25NZXNzYWdlCiAgICAgICAgICA/IG9uTWVzc2FnZSh3cywgbXNnKQogICAgICAgICAgOiAoY29uc29sZS5sb2coJ29uTWVzc2FnZScsIGNvbnNvbGUuY29uZmlnKHsgbWF4U3RyaW5nTGVuOiAxMDAgfSksIHsgd3MsIG1zZyB9KSwKICAgICAgICAgICAgcHV0cyhlc2NhcGUoYWJicmV2aWF0ZShtc2cpKSArICdcbicpKTsKICAgICAgfSwKICAgICAgYXN5bmMgb25IdHRwKHJlcSwgcmVzcCkgewogICAgICAgIGxldCB0ZXh0ID0gYXdhaXQgcmVzcC50ZXh0KCk7CiAgICAgICAgbGV0IHsgcGF0aCB9ID0gcmVzcC51cmw7CgogICAgICAgIHBhdGggPSBwYXRoLnJlcGxhY2UoLy4qXC8vZywgJycpOwogICAgICAgIHJlbW90ZU5hbWUgPSBwYXRoID8/ICdpbmRleC5odG1sJzsKCiAgICAgICAgbG9nKCdvbkh0dHAoMSknLCByZXNwLnVybC5wYXRoKTsKICAgICAgICBsb2coJ29uSHR0cCgyKScsIHRleHQucmVwbGFjZSgvXG4vZywgJ1xcbicpLnN1YnN0cmluZygwLCAxMDApKTsKCiAgICAgICAgY29uc29sZS5sb2coJ3B1c2gnLCBhd2FpdCBwdXNoKHRleHQpKTsKICAgICAgICAvKmZvciBhd2FpdChsZXQgY2h1bmsgb2YgcmVzcC5ib2R5KSB7CiAgICAgICAgICBsZXQgcHNoOwogICAgICAgICAgY29uc29sZS5sb2coCiAgICAgICAgICAgICdceDFiWzE7MzNtb25IdHRwIGJvZHkgY2h1bmtceDFiWzE7MzZtOlx4MWJbMG0nLAogICAgICAgICAgICBjaHVuay5sZW5ndGgsCiAgICAgICAgICAgIGNodW5rLnJlcGxhY2UoL1xuL2csICdcXG4nKS5zdWJzdHJpbmcoMCwgMTAwKQogICAgICAgICAgKTsKICAgICAgICAgIGNvbnNvbGUubG9nKCdwdXNoJywgKHBzaCA9IHB1c2goY2h1bmspKSk7CiAgICAgICAgICBhd2FpdCBwc2g7CiAgICAgICAgfSovCiAgICAgIH0KICAgIH0pOwogIH0pOwp9KTsKCiAgcmV0dXJuIHsKICAgIGdldCByZW1vdGVOYW1lKCkgewogICAgICByZXR1cm4gcmVtb3RlTmFtZTsKICAgIH0sCiAgICByZWFkYWJsZTogT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoCiAgICAgIHt9LAogICAgICB7CiAgICAgICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXTogewogICAgICAgICAgdmFsdWU6ICgpID0+IHJlYWRhYmxlCiAgICAgICAgfSwKICAgICAgICBnZXRSZWFkZXI6IHsKICAgICAgICAgIHZhbHVlOiAoKSA9PiAoeyByZWFkOiAoKSA9PiByZWFkYWJsZS5uZXh0KCkgfSkKICAgICAgICB9LAogICAgICAgIFtTeW1ib2wudG9TdHJpbmdUYWddOiB7IHZhbHVlOiAnUmVhZGFibGVTdHJlYW0nIH0KICAgICAgfQogICAgKSwKICAgIHdyaXRhYmxlCiAgfTsKfQoKT2JqZWN0LmRlZmluZVByb3BlcnR5KENsaWVudCwgJ2Nvbm5lY3Rpb25zJywgewogIGdldCgpIHsKICAgIHJldHVybiBbLi4uY29ubmVjdGlvbnNdOwogIH0KfSk7CgAAAAAAAAAAlA8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/DAAAAAAAAL8MAAAAAAAAAAAAAAAA8L8"
				],
				[
					554,
					1,
					"insert",
					{
						"characters": ".-"
					},
					"AgAAAHYLAAAAAAAAdwsAAAAAAAAAAAAAdwsAAAAAAAB4CwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB2CwAAAAAAAHYLAAAAAAAAAAAAAAAA8L8"
				],
				[
					555,
					1,
					"left_delete",
					null,
					"AQAAAHcLAAAAAAAAdwsAAAAAAAABAAAALQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4CwAAAAAAAHgLAAAAAAAAAAAAAAAA8L8"
				],
				[
					556,
					1,
					"insert",
					{
						"characters": "res"
					},
					"AwAAAHcLAAAAAAAAeAsAAAAAAAAAAAAAeAsAAAAAAAB5CwAAAAAAAAAAAAB5CwAAAAAAAHoLAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3CwAAAAAAAHcLAAAAAAAAAAAAAAAA8L8"
				],
				[
					557,
					4,
					"left_delete",
					null,
					"BAAAAHkLAAAAAAAAeQsAAAAAAAABAAAAc3gLAAAAAAAAeAsAAAAAAAABAAAAZXcLAAAAAAAAdwsAAAAAAAABAAAAcnYLAAAAAAAAdgsAAAAAAAABAAAALg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB6CwAAAAAAAHoLAAAAAAAAAAAAAAAA8L8"
				],
				[
					561,
					1,
					"insert",
					{
						"characters": "resolve("
					},
					"CAAAAGwLAAAAAAAAbQsAAAAAAAAAAAAAbQsAAAAAAABuCwAAAAAAAAAAAABuCwAAAAAAAG8LAAAAAAAAAAAAAG8LAAAAAAAAcAsAAAAAAAAAAAAAcAsAAAAAAABxCwAAAAAAAAAAAABxCwAAAAAAAHILAAAAAAAAAAAAAHILAAAAAAAAcwsAAAAAAAAAAAAAcwsAAAAAAAB0CwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsCwAAAAAAAGwLAAAAAAAAAAAAAAAAWEA"
				],
				[
					563,
					1,
					"left_delete",
					null,
					"AQAAAHQLAAAAAAAAdAsAAAAAAAANAAAAcmVtb3RlTmFtZSA9IA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB0CwAAAAAAAIELAAAAAAAAAAAAAAAA8L8"
				],
				[
					565,
					1,
					"left_delete",
					null,
					"AQAAAIgLAAAAAAAAiAsAAAAAAAABAAAAOw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJCwAAAAAAAIkLAAAAAAAA////////738"
				],
				[
					566,
					1,
					"insert",
					{
						"characters": ");"
					},
					"AgAAAIgLAAAAAAAAiQsAAAAAAAAAAAAAiQsAAAAAAACKCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACICwAAAAAAAIgLAAAAAAAAAAAAAAAA8L8"
				],
				[
					572,
					2,
					"left_delete",
					null,
					"AgAAAHoLAAAAAAAAegsAAAAAAAABAAAAP3kLAAAAAAAAeQsAAAAAAAABAAAAPw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7CwAAAAAAAHsLAAAAAAAAAAAAAAAA8L8"
				],
				[
					573,
					1,
					"insert",
					{
						"characters": "||"
					},
					"AgAAAHkLAAAAAAAAegsAAAAAAAAAAAAAegsAAAAAAAB7CwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB5CwAAAAAAAHkLAAAAAAAAAAAAAAAA8L8"
				],
				[
					588,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAACsMAAAAAAAALQwAAAAAAAAAAAAAJQwAAAAAAAAnDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlDAAAAAAAACsMAAAAAAAAAAAAAAAA8L8"
				],
				[
					591,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACUDwAAaW1wb3J0IHsgZXJyLCBleGl0LCBwdXRzIH0gZnJvbSAnc3RkJzsKaW1wb3J0IHsgc2V0UmVhZEhhbmRsZXIsIHNldFdyaXRlSGFuZGxlciB9IGZyb20gJ29zJzsKaW1wb3J0IHsgY2xpZW50LCBzZXRMb2csIExMTF9XQVJOLCBMTExfQ0xJRU5ULCBMTExfVVNFUiwgVVJMLCBHZW5lcmF0b3IsIGxvZ0xldmVscyB9IGZyb20gJ25ldCc7CmltcG9ydCB7IExldmVscywgRGVmYXVsdExldmVscywgSW5pdCwgaXNEZWJ1ZywgbG9nIH0gZnJvbSAnLi9sb2cuanMnOwppbXBvcnQgeyBlc2NhcGUsIGFiYnJldmlhdGUgfSBmcm9tICcuL2NvbW1vbi5qcyc7Cgpjb25zdCBjb25uZWN0aW9ucyA9IG5ldyBTZXQoKTsKCmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENsaWVudCh1cmwsIG9wdGlvbnMsIGRlYnVnKSB7CiAgLy9jb25zb2xlLmxvZygnQ2xpZW50Jyx7dXJsLG9wdGlvbnMsZGVidWd9KTsKICBsb2coJ01pbm5ldENsaWVudCcsIHsgdXJsLCBvcHRpb25zIH0pOwogIEluaXQoJ2NsaWVudC5qcycsIHR5cGVvZiBkZWJ1ZyA9PSAnbnVtYmVyJyA/IGRlYnVnIDogTExMX0NMSUVOVCB8IChkZWJ1ZyA/IExMTF9VU0VSIDogMCkpOwoKICBsZXQgewogICAgb25Db25uZWN0LAogICAgb25DbG9zZSwKICAgIG9uRXJyb3IsCiAgICBvbkh0dHAsCiAgICBvbkZkLAogICAgb25NZXNzYWdlLAogICAgdGxzID0gdHJ1ZSwKICAgIHNzbENlcnQgPSAnbG9jYWxob3N0LmNydCcsCiAgICBzc2xQcml2YXRlS2V5ID0gJ2xvY2FsaG9zdC5rZXknLAogICAgaGVhZGVycyA9IHt9LAogICAgLi4ub3B0cwogIH0gPSBvcHRpb25zOwoKICAvL2Vyci5wdXRzKGBDbGllbnQgY29ubmVjdGluZyB0byAke3VybH0gLi4uXG5gKTsKICBsb2coYENsaWVudCBjb25uZWN0aW5nIHRvICR7dXJsfSAuLi5cbmApOwoKICAvKiBzZXRMb2coCiAgICBMTExfV0FSTiB8IChkZWJ1ZyA/IExMTF9VU0VSIDogMCksCiAgICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgICAgICEvTE9BRF9FWFRSQXxWSE9TVF9DRVJUX0FHSU5HLy50ZXN0KG1lc3NhZ2UpICYmCiAgICAgIGxvZyhgJHtsb2dMZXZlbHNbbGV2ZWxdLnBhZEVuZCgxMCl9ICR7bWVzc2FnZS5yZXBsYWNlKC9cbi9nLCAnXFxuJykudHJpbSgpfWApCiAgKTsKKi8KICBsZXQgd3JpdGFibGUsCiAgICByZWFkYWJsZSwKICAgIGMsCiAgICBwciwKICAgIHJlc29sdmUsCiAgICByZWplY3QsCiAgICByZW1vdGVOYW1lID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgICByZWFkYWJsZSA9IG5ldyBHZW5lcmF0b3IoYXN5bmMgKHB1c2gsIHN0b3ApID0+IHsKICAgICAgICBjID0gY2xpZW50KHVybCwgewogICAgICAgICAgdGxzLAogICAgICAgICAgc3NsQ2VydCwKICAgICAgICAgIHNzbFByaXZhdGVLZXksCiAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICdVc2VyLUFnZW50JzogJ21pbm5ldCcsCiAgICAgICAgICAgIC4uLmhlYWRlcnMKICAgICAgICAgIH0sCiAgICAgICAgICAuLi5vcHRzLAogICAgICAgICAgb25Db25uZWN0KHdzLCByZXEpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ29uQ29ubmVjdCcpOwogICAgICAgICAgICBjb25uZWN0aW9ucy5hZGQod3MpOwoKICAgICAgICAgICAgd3JpdGFibGUgPSB7CiAgICAgICAgICAgICAgd3JpdGUoY2h1bmspIHsKICAgICAgICAgICAgICAgIHJldHVybiB3cy5zZW5kKGNodW5rKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CgogICAgICAgICAgICBvbkNvbm5lY3QgPyBvbkNvbm5lY3Qod3MsIHJlcSkgOiBjb25zb2xlLmxvZygnb25Db25uZWN0Jywgd3MsIHJlcSk7CiAgICAgICAgICB9LAogICAgICAgICAgb25DbG9zZSh3cywgc3RhdHVzLCByZWFzb24sIGVycm9yKSB7CiAgICAgICAgICAgIGNvbm5lY3Rpb25zLmRlbGV0ZSh3cyk7CgogICAgICAgICAgICBpZihyZXNvbHZlKSByZXNvbHZlKHsgdmFsdWU6IHsgc3RhdHVzLCByZWFzb24sIGVycm9yIH0sIGRvbmU6IHRydWUgfSk7CgogICAgICAgICAgICBvbkNsb3NlCiAgICAgICAgICAgICAgPyBvbkNsb3NlKHdzLCBzdGF0dXMsIHJlYXNvbiwgZXJyb3IpCiAgICAgICAgICAgICAgOiAoY29uc29sZS5sb2coJ29uQ2xvc2UnLCB7IHdzLCByZWFzb24gfSksIGV4aXQocmVhc29uICE9IDEwMDAgJiYgcmVhc29uICE9IDAgPyAxIDogMCkpOwogICAgICAgICAgICBwciA9IHJlamVjdCA9IHJlc29sdmUgPSBudWxsOwogICAgICAgICAgfSwKICAgICAgICAgIG9uRXJyb3Iod3MsIGVycm9yKSB7CiAgICAgICAgICAgIGNvbm5lY3Rpb25zLmRlbGV0ZSh3cyk7CgogICAgICAgICAgICBvbkVycm9yID8gb25FcnJvcih3cywgZXJyb3IpIDogKGNvbnNvbGUubG9nKCdvbkVycm9yJywgeyB3cywgZXJyb3IgfSksIGV4aXQoZXJyb3IpKTsKICAgICAgICAgIH0sCgogICAgICAgICAgb25GZChmZCwgcmQsIHdyKSB7CiAgICAgICAgICAgIHNldFJlYWRIYW5kbGVyKGZkLCByZCk7CiAgICAgICAgICAgIHNldFdyaXRlSGFuZGxlcihmZCwgd3IpOwogICAgICAgICAgfSwKICAgICAgICAgIG9uTWVzc2FnZSh3cywgbXNnKSB7CiAgICAgICAgICAgIG9uTWVzc2FnZQogICAgICAgICAgICAgID8gb25NZXNzYWdlKHdzLCBtc2cpCiAgICAgICAgICAgICAgOiAoY29uc29sZS5sb2coJ29uTWVzc2FnZScsIGNvbnNvbGUuY29uZmlnKHsgbWF4U3RyaW5nTGVuOiAxMDAgfSksIHsgd3MsIG1zZyB9KSwKICAgICAgICAgICAgICAgIHB1dHMoZXNjYXBlKGFiYnJldmlhdGUobXNnKSkgKyAnXG4nKSk7CiAgICAgICAgICB9LAogICAgICAgICAgYXN5bmMgb25IdHRwKHJlcSwgcmVzcCkgewogICAgICAgICAgICBsZXQgdGV4dCA9IGF3YWl0IHJlc3AudGV4dCgpOwogICAgICAgICAgICBsZXQgeyBwYXRoIH0gPSByZXNwLnVybDsKCiAgICAgICAgICAgIHBhdGggPSBwYXRoLnJlcGxhY2UoLy4qXC8vZywgJycpOwogICAgICAgICAgICByZXNvbHZlKHBhdGggfHwgJ2luZGV4Lmh0bWwnKTsKCiAgICAgICAgICAgIGxvZygnb25IdHRwKDEpJywgcmVzcC51cmwucGF0aCk7CiAgICAgICAgICAgIGxvZygnb25IdHRwKDIpJywgdGV4dC5yZXBsYWNlKC9cbi9nLCAnXFxuJykuc3Vic3RyaW5nKDAsIDEwMCkpOwoKICAgICAgICAgICAgY29uc29sZS5sb2coJ3B1c2gnLC8qIGF3YWl0Ki8gcHVzaCh0ZXh0KSk7CiAgICAgICAgICAgIC8qZm9yIGF3YWl0KGxldCBjaHVuayBvZiByZXNwLmJvZHkpIHsKICAgICAgICAgIGxldCBwc2g7CiAgICAgICAgICBjb25zb2xlLmxvZygKICAgICAgICAgICAgJ1x4MWJbMTszM21vbkh0dHAgYm9keSBjaHVua1x4MWJbMTszNm06XHgxYlswbScsCiAgICAgICAgICAgIGNodW5rLmxlbmd0aCwKICAgICAgICAgICAgY2h1bmsucmVwbGFjZSgvXG4vZywgJ1xcbicpLnN1YnN0cmluZygwLCAxMDApCiAgICAgICAgICApOwogICAgICAgICAgY29uc29sZS5sb2coJ3B1c2gnLCAocHNoID0gcHVzaChjaHVuaykpKTsKICAgICAgICAgIGF3YWl0IHBzaDsKICAgICAgICB9Ki8KICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KTsKCiAgcmV0dXJuIHsKICAgIGdldCByZW1vdGVOYW1lKCkgewogICAgICByZXR1cm4gcmVtb3RlTmFtZTsKICAgIH0sCiAgICByZWFkYWJsZTogT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoCiAgICAgIHt9LAogICAgICB7CiAgICAgICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXTogewogICAgICAgICAgdmFsdWU6ICgpID0+IHJlYWRhYmxlCiAgICAgICAgfSwKICAgICAgICBnZXRSZWFkZXI6IHsKICAgICAgICAgIHZhbHVlOiAoKSA9PiAoeyByZWFkOiAoKSA9PiByZWFkYWJsZS5uZXh0KCkgfSkKICAgICAgICB9LAogICAgICAgIFtTeW1ib2wudG9TdHJpbmdUYWddOiB7IHZhbHVlOiAnUmVhZGFibGVTdHJlYW0nIH0KICAgICAgfQogICAgKSwKICAgIHdyaXRhYmxlCiAgfTsKfQoKT2JqZWN0LmRlZmluZVByb3BlcnR5KENsaWVudCwgJ2Nvbm5lY3Rpb25zJywgewogIGdldCgpIHsKICAgIHJldHVybiBbLi4uY29ubmVjdGlvbnNdOwogIH0KfSk7CgAAAAAAAAAAlQ8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAnDAAAAAAAAC0MAAAAAAAAAAAAAAAA8L8"
				],
				[
					604,
					2,
					"indent",
					null,
					"EgAAAHAMAAAAAAAAcgwAAAAAAAAAAAAAhQwAAAAAAACHDAAAAAAAAAAAAACeDAAAAAAAAKAMAAAAAAAAAAAAAN0MAAAAAAAA3wwAAAAAAAAAAAAA+QwAAAAAAAD7DAAAAAAAAAAAAAA1DQAAAAAAADcNAAAAAAAAAAAAAEQNAAAAAAAARg0AAAAAAAAAAAAAeg0AAAAAAAB8DQAAAAAAAAAAAACRDQAAAAAAAJMNAAAAAAAAAAAAAHAMAAAAAAAAcgwAAAAAAAAAAAAAhwwAAAAAAACJDAAAAAAAAAAAAACiDAAAAAAAAKQMAAAAAAAAAAAAAOMMAAAAAAAA5QwAAAAAAAAAAAAAAQ0AAAAAAAADDQAAAAAAAAAAAAA/DQAAAAAAAEENAAAAAAAAAAAAAFANAAAAAAAAUg0AAAAAAAAAAAAAiA0AAAAAAACKDQAAAAAAAAAAAAChDQAAAAAAAKMNAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMDQAAAAAAAHAMAAAAAAAAAAAAAAAA8L8"
				],
				[
					637,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAL4BAAAAAAAAvwEAAAAAAAAAAAAAvwEAAAAAAADAAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+AQAAAAAAAL4BAAAAAAAAAAAAAAAA8L8"
				],
				[
					641,
					1,
					"left_delete",
					null,
					"AQAAAI8BAAAAAAAAjwEAAAAAAAAvAAAALy9jb25zb2xlLmxvZygnQ2xpZW50Jyx7dXJsLG9wdGlvbnMsZGVidWd9KTsKICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPAQAAAAAAAL4BAAAAAAAAAAAAAAAAMEA"
				],
				[
					656,
					1,
					"left_delete",
					null,
					"AQAAAEcDAAAAAAAARwMAAAAAAAABAAAAXA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABIAwAAAAAAAEgDAAAAAAAAAAAAAAAA8L8"
				],
				[
					657,
					1,
					"right_delete",
					null,
					"AQAAAEcDAAAAAAAARwMAAAAAAAABAAAAbg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABHAwAAAAAAAEcDAAAAAAAAAAAAAAAA8L8"
				],
				[
					667,
					1,
					"left_delete",
					null,
					"AQAAAO4CAAAAAAAA7gIAAAAAAAAzAAAAICAvL2Vyci5wdXRzKGBDbGllbnQgY29ubmVjdGluZyB0byAke3VybH0gLi4uXG5gKTsK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuAgAAAAAAACEDAAAAAAAAAAAAAAAAAAA"
				],
				[
					687,
					2,
					"left_delete",
					null,
					"AgAAANsLAAAAAAAA2wsAAAAAAABzAQAACiAgICAgICAgICAgIC8qZm9yIGF3YWl0KGxldCBjaHVuayBvZiByZXNwLmJvZHkpIHsKICAgICAgICAgICAgICBsZXQgcHNoOwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKAogICAgICAgICAgICAgICAgJ1x4MWJbMTszM21vbkh0dHAgYm9keSBjaHVua1x4MWJbMTszNm06XHgxYlswbScsCiAgICAgICAgICAgICAgICBjaHVuay5sZW5ndGgsCiAgICAgICAgICAgICAgICBjaHVuay5yZXBsYWNlKC9cbi9nLCAnXFxuJykuc3Vic3RyaW5nKDAsIDEwMCkKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwdXNoJywgKHBzaCA9IHB1c2goY2h1bmspKSk7CiAgICAgICAgICAgICAgYXdhaXQgcHNoOwogICAgICAgICAgICB9Ki/aCwAAAAAAANoLAAAAAAAAAQAAADs",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbCwAAAAAAAE4NAAAAAAAAAAAAAAAA8L8"
				],
				[
					688,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANoLAAAAAAAA2wsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaCwAAAAAAANoLAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "lib/jsutils.h",
			"settings":
			{
				"buffer_size": 13758,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					11,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJc0AAAAAAAAmDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlzQAAAAAAACXNAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"paste",
					null,
					"AQAAAJg0AAAAAAAA9TQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmDQAAAAAAACYNAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPU0AAAAAAAA9jQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9TQAAAAAAAD1NAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"left_delete",
					null,
					"AQAAAJc0AAAAAAAAlzQAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAmDQAAAAAAACYNAAAAAAAAAAAAAAAAAAA"
				],
				[
					45,
					1,
					"",
					null,
					"AQAAAKg0AAAAAAAAtTQAAAAAAAAQAAAAQ0Z1bmN0aW9uQ2xvc3VyZQ",
					"AQAAAAAAAAABAAAArgQAAAAAAADrBAAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAqDQAAAAAAAC1NAAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"",
					null,
					"AQAAAPU0AAAAAAAAeDUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9TQAAAAAAAD1NAAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPU0AAAAAAAA9jQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9TQAAAAAAAD1NAAAAAAAAAAAAAAAAAAA"
				],
				[
					74,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA9jQAAAAAAAD2NAAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAJUNAAAAAAAAlg0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQ0AAAAAAACVDQAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"left_delete",
					null,
					"AQAAAJUNAAAAAAAAlQ0AAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAlg0AAAAAAACWDQAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line.sublime-macro"
					},
					"AQAAAMoNAAAAAAAAyw0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyg0AAAAAAADKDQAAAAAAAP///////+9/"
				],
				[
					85,
					1,
					"paste",
					null,
					"AQAAAMsNAAAAAAAA+g0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyw0AAAAAAADLDQAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"left_delete",
					null,
					"AQAAAPkNAAAAAAAA+Q0AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA+g0AAAAAAAD6DQAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAPkNAAAAAAAA+g0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+Q0AAAAAAAD5DQAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"join_lines",
					null,
					"AgAAANMNAAAAAAAA0w0AAAAAAAABAAAACtMNAAAAAAAA1A0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0w0AAAAAAADTDQAAAAAAAAAAAAAAYHVA"
				],
				[
					91,
					1,
					"left_delete",
					null,
					"AQAAAMoNAAAAAAAAyg0AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAyw0AAAAAAADLDQAAAAAAAAAAAAAAAFJA"
				],
				[
					108,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAlQ0AAAAAAAClDQAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAcyYAAAAAAABzJgAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"cut",
					null,
					"AQAAAMY0AAAAAAAAxjQAAAAAAADaAAAACnR5cGVkZWYgSlNWYWx1ZSBqc19jY2xvc3VyZV9mdW5jKEpTQ29udGV4dCosIEpTVmFsdWVDb25zdCwgaW50LCBKU1ZhbHVlQ29uc3RbXSwgaW50LCB2b2lkKik7CgpKU1ZhbHVlIGpzX2Z1bmN0aW9uX2NjbG9zdXJlKEpTQ29udGV4dCosIGpzX2NjbG9zdXJlX2Z1bmMqLCBpbnQsIGludCBtYWdpYywgdm9pZCogb3BhcXVlLCB2b2lkICgqb3BhcXVlX2ZpbmFsaXplKSh2b2lkKikpOwo",
					"AQAAAAAAAAABAAAAxjQAAAAAAACgNQAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPkNAAAAAAAA+g0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+Q0AAAAAAAD5DQAAAAAAAP///////+9/"
				],
				[
					126,
					1,
					"paste",
					null,
					"AQAAAPoNAAAAAAAA1A4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+g0AAAAAAAD6DQAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANQOAAAAAAAA1Q4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1A4AAAAAAADUDgAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJULAAAAAAAAlgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQsAAAAAAACVCwAAAAAAAAAAAAAAAAAA"
				],
				[
					131,
					1,
					"left_delete",
					null,
					"AQAAANQOAAAAAAAA1A4AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA1Q4AAAAAAADVDgAAAAAAAAAAAAAAAAAA"
				],
				[
					138,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADGNQAAI2lmbmRlZiBRSlNORVRfTElCX0pTVVRJTFNfSAojZGVmaW5lIFFKU05FVF9MSUJfSlNVVElMU19ICgojaW5jbHVkZSA8cXVpY2tqcy5oPgojaW5jbHVkZSA8Y3V0aWxzLmg+CiNpbmNsdWRlIDxsaXN0Lmg+CiNpbmNsdWRlICJ1dGlscy5oIgoKI2lmZGVmIEpTX1NIQVJFRF9MSUJSQVJZCiNkZWZpbmUgSlNfSU5JVF9NT0RVTEUganNfaW5pdF9tb2R1bGUKI2Vsc2UKI2RlZmluZSBKU19JTklUX01PRFVMRSBqc19pbml0X21vZHVsZV9taW5uZXQKI2VuZGlmCgojZGVmaW5lIEpTX0NHRVRTRVRfTUFHSUNfRkxBR1NfREVGKHByb3BfbmFtZSwgZmdldHRlciwgZnNldHRlciwgbWFnaWNfbnVtLCBmbGFncykgXAogIHsgXAogICAgLm5hbWUgPSBwcm9wX25hbWUsIC5wcm9wX2ZsYWdzID0gZmxhZ3MsIC5kZWZfdHlwZSA9IEpTX0RFRl9DR0VUU0VUX01BR0lDLCAubWFnaWMgPSBtYWdpY19udW0sIC51ID0gey5nZXRzZXQgPSB7LmdldCA9IHsuZ2V0dGVyX21hZ2ljID0gZmdldHRlcn0sIC5zZXQgPSB7LnNldHRlcl9tYWdpYyA9IGZzZXR0ZXJ9fSB9IFwKICB9CiNkZWZpbmUgSlNfQ0dFVFNFVF9GTEFHU19ERUYocHJvcF9uYW1lLCBmZ2V0dGVyLCBmc2V0dGVyLCBmbGFncykgXAogIHsgXAogICAgLm5hbWUgPSBwcm9wX25hbWUsIC5wcm9wX2ZsYWdzID0gZmxhZ3MsIC5kZWZfdHlwZSA9IEpTX0RFRl9DR0VUU0VULCAudSA9IHsuZ2V0c2V0ID0gey5nZXQgPSB7LmdldHRlcl9tYWdpYyA9IGZnZXR0ZXJ9LCAuc2V0ID0gey5zZXR0ZXJfbWFnaWMgPSBmc2V0dGVyfX0gfSBcCiAgfQoKI2RlZmluZSBKU19JTkRFWF9TVFJJTkdfREVGKGluZGV4LCBjc3RyKSBcCiAgeyBcCiAgICAubmFtZSA9ICNpbmRleCwgLnByb3BfZmxhZ3MgPSBKU19QUk9QX0NPTkZJR1VSQUJMRSB8IEpTX1BST1BfRU5VTUVSQUJMRSwgLmRlZl90eXBlID0gSlNfREVGX1BST1BfU1RSSU5HLCAubWFnaWMgPSAwLCAudSA9IHsuc3RyID0gY3N0ciB9IFwKICB9CiNkZWZpbmUgSlNfQ0ZVTkNfRkxBR1NfREVGKHByb3BfbmFtZSwgbGVuZ3RoLCBmdW5jMSwgZmxhZ3MpIFwKICB7IFwKICAgIC5uYW1lID0gcHJvcF9uYW1lLCAucHJvcF9mbGFncyA9IChmbGFncyksIC5kZWZfdHlwZSA9IEpTX0RFRl9DRlVOQywgLm1hZ2ljID0gMCwgLnUgPSB7LmZ1bmMgPSB7bGVuZ3RoLCBKU19DRlVOQ19nZW5lcmljLCB7LmdlbmVyaWMgPSBmdW5jMX19IH0gXAogIH0KCnR5cGVkZWYgZW51bSB7IE9OX1JFU09MVkUgPSAwLCBPTl9SRUpFQ1QgfSBwcm9taXNlX2hhbmRsZXJfZTsKCnR5cGVkZWYgc3RydWN0IEpTVGhyZWFkU3RhdGUgewogIHN0cnVjdCBsaXN0X2hlYWQgb3NfcndfaGFuZGxlcnM7CiAgc3RydWN0IGxpc3RfaGVhZCBvc19zaWduYWxfaGFuZGxlcnM7CiAgc3RydWN0IGxpc3RfaGVhZCBvc190aW1lcnM7CiAgc3RydWN0IGxpc3RfaGVhZCBwb3J0X2xpc3Q7CiAgaW50IGV2YWxfc2NyaXB0X3JlY3Vyc2U7CiAgdm9pZCAqcmVjdl9waXBlLCAqc2VuZF9waXBlOwp9IEpTVGhyZWFkU3RhdGU7Cgp0eXBlZGVmIHN0cnVjdCBvZmZzZXRfbGVuZ3RoIHsKICBpbnQ2NF90IG9mZnNldCwgbGVuZ3RoOwp9IE9mZnNldExlbmd0aDsKCnR5cGVkZWYgc3RydWN0IGlucHV0X2J1ZmZlciB7CiAgdWludDhfdCogZGF0YTsKICBzaXplX3Qgc2l6ZTsKICBzaXplX3QgcG9zOwogIHZvaWQgKCpmcmVlKShKU1J1bnRpbWUqLCB2b2lkKiBvcGFxdWUsIHZvaWQqIHB0cik7CiAgSlNWYWx1ZSB2YWx1ZTsKICBPZmZzZXRMZW5ndGggcmFuZ2U7Cn0gSlNCdWZmZXI7CgojZGVmaW5lIEpTX0JVRkZFUl9ERUZBVUxUKCkgSlNfQlVGRkVSKDAsIDAsICZqc19idWZmZXJfZnJlZV9kZWZhdWx0KQoKI2RlZmluZSBKU19CVUZGRVJfMChmcmVlKSBKU19CVUZGRVIoMCwgMCwgKGZyZWUpKQoKI2RlZmluZSBKU19CVUZGRVIoZGF0YSwgc2l6ZSwgZnJlZSkgXAogIChKU0J1ZmZlcikgeyBcCiAgICAoZGF0YSksIChzaXplKSwgMCwgKGZyZWUpLCBKU19VTkRFRklORUQsIHsgMCwgLTEgfSBcCiAgfQoKI2RlZmluZSBKU19CVUZGRVJfVkFMVUUoZGF0YSwgc2l6ZSwgdmFsdWUpIFwKICAoSlNCdWZmZXIpIHsgXAogICAgKGRhdGEpLCAoc2l6ZSksIDAsICgmanNfYnVmZmVyX2ZyZWVfZGVmYXVsdCksICh2YWx1ZSksIHsgMCwgLTEgfSBcCiAgfQoKdHlwZWRlZiBzdHJ1Y3Qga2V5X3ZhbHVlIHsKICBKU0F0b20ga2V5OwogIEpTVmFsdWUgdmFsdWU7Cn0gSlNFbnRyeTsKCiNkZWZpbmUgSlNfRU5UUlkoKSBcCiAgKEpTRW50cnkpIHsgLTEsIEpTX1VOREVGSU5FRCB9Cgp0eXBlZGVmIHN0cnVjdCByZXNvbHZlX2Z1bmN0aW9ucyB7CiAgSlNWYWx1ZSByZXNvbHZlLCByZWplY3Q7Cn0gUmVzb2x2ZUZ1bmN0aW9uczsKCnN0cnVjdCBUaW1lckNsb3N1cmUgewogIGludCByZWZfY291bnQ7CiAgdWludDMyX3QgaW50ZXJ2YWw7CiAgSlNDb250ZXh0KiBjdHg7CiAgSlNWYWx1ZUNvbnN0IGlkLCBoYW5kbGVyLCBjYWxsYmFjazsKfTsKCiNkZWZpbmUgSlNfQklORF9USElTIDB4ODAwMAoKSlNWYWx1ZSB2ZWN0b3IyYXJyYXkoSlNDb250ZXh0KiBjdHgsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdKTsKc3RhdGljIGlubGluZSB2b2lkCmpzX3ZlY3Rvcl9mcmVlKEpTQ29udGV4dCogY3R4LCBpbnQgYXJnYywgSlNWYWx1ZSBhcmd2W10pIHsKICBmb3IoaW50IGkgPSAwOyBpIDwgYXJnYzsgaSsrKSB7CiAgICBKU19GcmVlVmFsdWUoY3R4LCBhcmd2W2ldKTsKICAgIGFyZ3ZbaV0gPSBKU19VTkRFRklORUQ7CiAgfQp9CgpzdHJ1Y3QgYnl0ZV9ibG9jazsKCkpTVmFsdWUganNfb2JqZWN0X2NvbnN0cnVjdG9yKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpOwpjaGFyKiBqc19vYmplY3RfY2xhc3NuYW1lKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpOwp2b2lkIGpzX2NvbnNvbGVfbG9nKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlKiBjb25zb2xlLCBKU1ZhbHVlKiBjb25zb2xlX2xvZyk7CgpKU1ZhbHVlIGpzX2Z1bmN0aW9uX2JvdW5kKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdLCBpbnQgbWFnaWMsIEpTVmFsdWUqIGZ1bmNfZGF0YSk7CkpTVmFsdWUganNfZnVuY3Rpb25fYmluZChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGZ1bmMsIGludCBmbGFncywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSk7CkpTVmFsdWUganNfZnVuY3Rpb25fYmluZF8xKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgZnVuYywgSlNWYWx1ZUNvbnN0IGFyZyk7CkpTVmFsdWUganNfZnVuY3Rpb25fYmluZF90aGlzKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgZnVuYywgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsKTsKSlNWYWx1ZSBqc19mdW5jdGlvbl9iaW5kX3RoaXNfMShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGZ1bmMsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgSlNWYWx1ZUNvbnN0IGFyZyk7CmNvbnN0IGNoYXIqIGpzX2Z1bmN0aW9uX25hbWUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSk7CkpTVmFsdWUganNfZnVuY3Rpb25fcHJvdG90eXBlKEpTQ29udGV4dCogY3R4KTsKCnR5cGVkZWYgSlNWYWx1ZSBqc19jY2xvc3VyZV9mdW5jKEpTQ29udGV4dCosIEpTVmFsdWVDb25zdCwgaW50LCBKU1ZhbHVlQ29uc3RbXSwgaW50LCB2b2lkKik7CgpKU1ZhbHVlIGpzX2Z1bmN0aW9uX2NjbG9zdXJlKEpTQ29udGV4dCosIGpzX2NjbG9zdXJlX2Z1bmMqLCBpbnQsIGludCBtYWdpYywgdm9pZCogb3BhcXVlLCB2b2lkICgqb3BhcXVlX2ZpbmFsaXplKSh2b2lkKikpOwoKSlNWYWx1ZSBqc19pdGVyYXRvcl9yZXN1bHQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSwgQk9PTCBkb25lKTsKSlNWYWx1ZSBqc19pdGVyYXRvcl9uZXh0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCBKU1ZhbHVlKiBuZXh0LCBCT09MKiBkb25lX3AsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdKTsKaW50IGpzX2NvcHlfcHJvcGVydGllcyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGRzdCwgSlNWYWx1ZUNvbnN0IHNyYywgaW50IGZsYWdzKTsKdm9pZCBqc19idWZmZXJfZnJlZV9kZWZhdWx0KEpTUnVudGltZSogcnQsIHZvaWQqIG9wYXF1ZSwgdm9pZCogcHRyKTsKQk9PTCBqc19idWZmZXJfZnJvbShKU0NvbnRleHQqIGN0eCwgSlNCdWZmZXIqIGJ1ZiwgSlNWYWx1ZUNvbnN0IHZhbHVlKTsKSlNCdWZmZXIganNfYnVmZmVyX25ldyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKTsKSlNCdWZmZXIganNfYnVmZmVyX2Zyb21ibG9jayhKU0NvbnRleHQqIGN0eCwgc3RydWN0IGJ5dGVfYmxvY2sqIGJsayk7CgppbnQganNfYnVmZmVyX2Zyb21hcmdzKEpTQ29udGV4dCogY3R4LCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgSlNCdWZmZXIqIGJ1Zik7CkpTQnVmZmVyIGpzX2J1ZmZlcl9hbGxvYyhKU0NvbnRleHQqLCBzaXplX3Qgc2l6ZSk7CkpTQnVmZmVyIGpzX2J1ZmZlcl9kYXRhKEpTQ29udGV4dCosIGNvbnN0IHZvaWQqIGRhdGEsIHNpemVfdCBzaXplKTsKdm9pZCBqc19idWZmZXJfdG8oSlNCdWZmZXIgYnVmLCB2b2lkKiogcHB0ciwgc2l6ZV90KiBwbGVuKTsKdm9pZCBqc19idWZmZXJfdG8zKEpTQnVmZmVyIGJ1ZiwgY29uc3QgY2hhcioqIHBzdHIsIHZvaWQqKiBwcHRyLCB1bnNpZ25lZCogcGxlbik7CkJPT0wganNfYnVmZmVyX3ZhbGlkKGNvbnN0IEpTQnVmZmVyKiBpbik7CkpTQnVmZmVyIGpzX2J1ZmZlcl9jbG9uZShjb25zdCBKU0J1ZmZlciogaW4sIEpTQ29udGV4dCogY3R4KTsKdm9pZCBqc19idWZmZXJfZHVtcChjb25zdCBKU0J1ZmZlciogaW4sIER5bkJ1ZiogZGIpOwp2b2lkIGpzX2J1ZmZlcl9mcmVlKEpTQnVmZmVyKiBpbiwgSlNDb250ZXh0KiBjdHgpOwp2b2lkIGpzX2J1ZmZlcl9mcmVlX3J0KEpTQnVmZmVyKiBpbiwgSlNSdW50aW1lKiBydCk7CkJPT0wganNfaXNfaXRlcmFibGUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmopOwpCT09MIGpzX2lzX2l0ZXJhdG9yKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqKTsKQk9PTCBqc19pc19hc3luY19nZW5lcmF0b3IoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmopOwpKU0F0b20ganNfc3ltYm9sX3N0YXRpY19hdG9tKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBuYW1lKTsKSlNWYWx1ZSBqc19zeW1ib2xfc3RhdGljX3ZhbHVlKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBuYW1lKTsKSlNWYWx1ZSBqc19zeW1ib2xfZm9yX3ZhbHVlKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBuYW1lKTsKSlNBdG9tIGpzX3N5bWJvbF9mb3JfYXRvbShKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogbmFtZSk7CkpTVmFsdWUganNfc3ltYm9sX2N0b3IoSlNDb250ZXh0KiBjdHgpOwpKU1ZhbHVlIGpzX2dsb2JhbF9nZXQoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIHByb3ApOwpKU1ZhbHVlIGpzX2dsb2JhbF9vcyhKU0NvbnRleHQqIGN0eCk7CkpTVmFsdWUganNfb3NfZ2V0KEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBwcm9wKTsKSlNWYWx1ZSBqc190aW1lcl9zdGFydChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGZuLCB1aW50MzJfdCBtcyk7CnZvaWQganNfdGltZXJfY2FuY2VsKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGltZXIpOwp2b2lkIGpzX3RpbWVyX2ZyZWUodm9pZCogcHRyKTsKSlNWYWx1ZSBqc190aW1lcl9jYWxsYmFjayhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZSogYXJndiwgaW50IG1hZ2ljLCB2b2lkKiBvcGFxdWUpOwpzdHJ1Y3QgVGltZXJDbG9zdXJlKiBqc190aW1lcl9pbnRlcnZhbChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGZuLCB1aW50MzJfdCBtcyk7CnZvaWQganNfdGltZXJfcmVzdGFydChzdHJ1Y3QgVGltZXJDbG9zdXJlKiBjbG9zdXJlKTsKdm9pZCBqc19wcm9taXNlX2ZyZWUoSlNDb250ZXh0KiBjdHgsIFJlc29sdmVGdW5jdGlvbnMqIGZ1bmNzKTsKdm9pZCBqc19wcm9taXNlX2ZyZWVfcnQoSlNSdW50aW1lKiBydCwgUmVzb2x2ZUZ1bmN0aW9ucyogZnVuY3MpOwpjaGFyKiBqc190b3N0cmluZ2xlbihKU0NvbnRleHQqIGN0eCwgc2l6ZV90KiBsZW5wLCBKU1ZhbHVlQ29uc3QgdmFsdWUpOwpjaGFyKiBqc190b3N0cmluZyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKTsKSlNWYWx1ZSBqc19pbnZva2UoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX29iaiwgY29uc3QgY2hhciogbWV0aG9kLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSk7CkpTVmFsdWUganNfcHJvbWlzZV9jcmVhdGUoSlNDb250ZXh0KiBjdHgsIFJlc29sdmVGdW5jdGlvbnMqIGZ1bmNzKTsKSlNWYWx1ZSBqc19wcm9taXNlX3Jlc29sdmUoSlNDb250ZXh0KiBjdHgsIFJlc29sdmVGdW5jdGlvbnMqIGZ1bmNzLCBKU1ZhbHVlQ29uc3QgdmFsdWUpOwpKU1ZhbHVlIGpzX3Byb21pc2VfcmVqZWN0KEpTQ29udGV4dCogY3R4LCBSZXNvbHZlRnVuY3Rpb25zKiBmdW5jcywgSlNWYWx1ZUNvbnN0IHZhbHVlKTsKdm9pZCBqc19wcm9taXNlX3plcm8oUmVzb2x2ZUZ1bmN0aW9ucyogZnVuY3MpOwpCT09MIGpzX3Byb21pc2VfcGVuZGluZyhSZXNvbHZlRnVuY3Rpb25zIGNvbnN0KiBmdW5jcyk7CkJPT0wganNfcHJvbWlzZV9kb25lKFJlc29sdmVGdW5jdGlvbnMgY29uc3QqIGZ1bmNzKTsKSlNWYWx1ZSBqc19wcm9taXNlX3RoZW4oSlNDb250ZXh0KiwgSlNWYWx1ZUNvbnN0IHByb21pc2UsIEpTVmFsdWVDb25zdCBoYW5kbGVyKTsKSlNWYWx1ZSBqc19wcm9taXNlX2NhdGNoKEpTQ29udGV4dCosIEpTVmFsdWVDb25zdCBwcm9taXNlLCBKU1ZhbHVlQ29uc3QgaGFuZGxlcik7CkJPT0wganNfaXNfcHJvbWlzZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKTsKSlNWYWx1ZSBqc19lcnJvcl9uZXcoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIGZtdCwgLi4uKTsKdWludDhfdCoganNfdG9wdHJzaXplKEpTQ29udGV4dCogY3R4LCB1bnNpZ25lZCBpbnQqIHBsZW4sIEpTVmFsdWVDb25zdCB2YWx1ZSk7CkJPT0wganNfZ2V0X3Byb3BlcnR5c3RyX2Jvb2woSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIGNvbnN0IGNoYXIqIHN0cik7CmludDY0X3QganNfZ2V0X3Byb3BlcnR5c3RyX2ludDY0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCBjb25zdCBjaGFyKiBzdHIpOwp1aW50MzJfdCBqc19nZXRfcHJvcGVydHlzdHJfdWludDMyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCBjb25zdCBjaGFyKiBzdHIpOwpCT09MIGpzX2hhc19wcm9wZXJ0eXN0cihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaiwgY29uc3QgY2hhciogc3RyKTsKc3RydWN0IGxpc3RfaGVhZCoganNfbW9kdWxlX2xpc3QoSlNDb250ZXh0KiBjdHgpOwpKU01vZHVsZURlZioganNfbW9kdWxlX2F0KEpTQ29udGV4dCogY3R4LCBpbnQgaSk7CkpTTW9kdWxlRGVmKiBqc19tb2R1bGVfZmluZChKU0NvbnRleHQqIGN0eCwgSlNBdG9tIG5hbWUpOwpKU01vZHVsZURlZioganNfbW9kdWxlX2ZpbmRfcyhKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogbmFtZSk7CnZvaWQqIGpzX21vZHVsZV9leHBvcnRfZmluZChKU01vZHVsZURlZiogbW9kdWxlLCBKU0F0b20gbmFtZSk7CkpTVmFsdWUganNfbW9kdWxlX2ltcG9ydF9tZXRhKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBuYW1lKTsKdm9pZCBqc19lcnJvcl9wcmludChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGVycm9yKTsKaW50NjRfdCBqc19hcnJheV9sZW5ndGgoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBhcnJheSk7CmNoYXIqKiBqc19hcnJheV90b19hcmd2KEpTQ29udGV4dCogY3R4LCBpbnQqIGFyZ2NwLCBKU1ZhbHVlQ29uc3QgYXJyYXkpOwppbnQ2NF90IGpzX2FycmF5YnVmZmVyX2xlbmd0aChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGJ1ZmZlcik7CmludCBqc19vZmZzZXRfbGVuZ3RoKEpTQ29udGV4dCogY3R4LCBpbnQ2NF90IHNpemUsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdLCBPZmZzZXRMZW5ndGgqIG9mZl9sZW5fcCk7CkpTVmFsdWUganNfYXJndl90b19hcnJheShKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogY29uc3QqIGFyZ3YpOwoKc3RhdGljIGlubGluZSBCT09MCmpzX2F0b21faXNfaW50MzIoSlNBdG9tIGF0b20pIHsKICBpZigoaW50MzJfdClhdG9tIDwgMCkKICAgIHJldHVybiBUUlVFOwogIHJldHVybiBGQUxTRTsKfQoKc3RhdGljIGlubGluZSBCT09MCmpzX2F0b21fdmFsaWQoSlNBdG9tIGF0b20pIHsKICByZXR1cm4gYXRvbSAhPSAweDdmZmZmZmZmOwp9CgpCT09MIGpzX2F0b21faXNfaW5kZXgoSlNDb250ZXh0KiBjdHgsIGludDY0X3QqIHB2YWwsIEpTQXRvbSBhdG9tKTsKQk9PTCBqc19hdG9tX2NvbXBhcmVfc3RyaW5nKEpTQ29udGV4dCogY3R4LCBKU0F0b20gYXRvbSwgY29uc3QgY2hhciogb3RoZXIpOwpCT09MIGpzX2F0b21faXNfbGVuZ3RoKEpTQ29udGV4dCogY3R4LCBKU0F0b20gYXRvbSk7CkJPT0wganNfYXRvbV9pc19zdHJpbmcoSlNDb250ZXh0KiBjdHgsIEpTQXRvbSBhdG9tKTsKQk9PTCBqc19hdG9tX2lzX3N5bWJvbChKU0NvbnRleHQqIGN0eCwgSlNBdG9tIGF0b20pOwpKU0J1ZmZlciBqc19pbnB1dF9idWZmZXIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSk7CkpTQnVmZmVyIGpzX2lucHV0X2NoYXJzKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpOwpKU0J1ZmZlciBqc19pbnB1dF9hcmdzKEpTQ29udGV4dCogY3R4LCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSk7CkJPT0wganNfaXNfYXJyYXlidWZmZXIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSk7CkJPT0wganNfaXNfZGF0YXZpZXcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSk7CkJPT0wganNfaXNfdHlwZWRhcnJheShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKTsKQk9PTCBqc19pc19nZW5lcmF0b3IoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSk7CkJPT0wganNfaXNfYXN5bmMoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSk7CgpzdGF0aWMgaW5saW5lIHZvaWQKanNfZW50cnlfaW5pdChKU0VudHJ5KiBlbnRyeSkgewogIGVudHJ5LT5rZXkgPSAtMTsKICBlbnRyeS0+dmFsdWUgPSBKU19VTkRFRklORUQ7Cn0KCnN0YXRpYyBpbmxpbmUgdm9pZApqc19lbnRyeV9jbGVhcihKU0NvbnRleHQqIGN0eCwgSlNFbnRyeSogZW50cnkpIHsKICBpZihlbnRyeS0+a2V5ID49IDApCiAgICBKU19GcmVlQXRvbShjdHgsIGVudHJ5LT5rZXkpOwogIGVudHJ5LT5rZXkgPSAtMTsKICBKU19GcmVlVmFsdWUoY3R4LCBlbnRyeS0+dmFsdWUpOwogIGVudHJ5LT52YWx1ZSA9IEpTX1VOREVGSU5FRDsKfQoKc3RhdGljIGlubGluZSB2b2lkCmpzX2VudHJ5X2NsZWFyX3J0KEpTUnVudGltZSogcnQsIEpTRW50cnkqIGVudHJ5KSB7CiAgaWYoZW50cnktPmtleSA+PSAwKQogICAgSlNfRnJlZUF0b21SVChydCwgZW50cnktPmtleSk7CiAgZW50cnktPmtleSA9IC0xOwogIEpTX0ZyZWVWYWx1ZVJUKHJ0LCBlbnRyeS0+dmFsdWUpOwogIGVudHJ5LT52YWx1ZSA9IEpTX1VOREVGSU5FRDsKfQoKc3RhdGljIGlubGluZSB2b2lkCmpzX2VudHJ5X3Jlc2V0KEpTQ29udGV4dCogY3R4LCBKU0VudHJ5KiBlbnRyeSwgSlNBdG9tIGtleSwgSlNWYWx1ZSB2YWx1ZSkgewogIGpzX2VudHJ5X2NsZWFyKGN0eCwgZW50cnkpOwogIGVudHJ5LT5rZXkgPSBrZXk7CiAgZW50cnktPnZhbHVlID0gdmFsdWU7Cn0KCnN0YXRpYyBpbmxpbmUgdm9pZApqc19lbnRyeV9yZXNldF9zdHJpbmcoSlNDb250ZXh0KiBjdHgsIEpTRW50cnkqIGVudHJ5LCBjb25zdCBjaGFyKiBrZXlzdHIsIEpTVmFsdWUgdmFsdWUpIHsKICBKU0F0b20ga2V5OwogIGtleSA9IEpTX05ld0F0b20oY3R4LCBrZXlzdHIpOwogIGpzX2VudHJ5X3Jlc2V0KGN0eCwgZW50cnksIGtleSwgdmFsdWUpOwp9CgpzdGF0aWMgaW5saW5lIGNvbnN0IGNoYXIqCmpzX2VudHJ5X2tleV9zdHJpbmcoSlNDb250ZXh0KiBjdHgsIGNvbnN0IEpTRW50cnkgZW50cnkpIHsKICBjb25zdCBjaGFyKiBzdHI7CiAgc3RyID0gSlNfQXRvbVRvQ1N0cmluZyhjdHgsIGVudHJ5LmtleSk7CiAgcmV0dXJuIHN0cjsKfQoKc3RhdGljIGlubGluZSBjb25zdCBjaGFyKgpqc19lbnRyeV92YWx1ZV9zdHJpbmcoSlNDb250ZXh0KiBjdHgsIGNvbnN0IEpTRW50cnkgZW50cnkpIHsKICBjb25zdCBjaGFyKiBzdHI7CiAgc3RyID0gSlNfVG9DU3RyaW5nKGN0eCwgZW50cnkudmFsdWUpOwogIHJldHVybiBzdHI7Cn0KCnN0YXRpYyBpbmxpbmUgSlNFbnRyeQpqc19lbnRyeV9kdXAoSlNDb250ZXh0KiBjdHgsIGNvbnN0IEpTRW50cnkgZW50cnkpIHsKICBKU0VudHJ5IHJldCA9IHtKU19EdXBBdG9tKGN0eCwgZW50cnkua2V5KSwgSlNfRHVwVmFsdWUoY3R4LCBlbnRyeS52YWx1ZSl9OwogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBpbmxpbmUgaW50CmpzX2VudHJ5X2FwcGx5KEpTQ29udGV4dCogY3R4LCBKU0VudHJ5KiBlbnRyeSwgSlNWYWx1ZUNvbnN0IG9iaikgewogIGludCByZXQ7CiAgcmV0ID0gSlNfU2V0UHJvcGVydHkoY3R4LCBvYmosIGVudHJ5LT5rZXksIGVudHJ5LT52YWx1ZSk7CiAgSlNfRnJlZUF0b20oY3R4LCBlbnRyeS0+a2V5KTsKICBlbnRyeS0+a2V5ID0gLTE7CiAgZW50cnktPnZhbHVlID0gSlNfVU5ERUZJTkVEOwogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBpbmxpbmUgdm9pZApvbF9pbml0KE9mZnNldExlbmd0aCogb2wpIHsKICBvbC0+b2Zmc2V0ID0gMDsKICBvbC0+bGVuZ3RoID0gSU5UNjRfTUFYOwp9CgpzdGF0aWMgaW5saW5lIEJPT0wKb2xfaXNfZGVmYXVsdChjb25zdCBPZmZzZXRMZW5ndGgqIG9sKSB7CiAgcmV0dXJuIG9sLT5vZmZzZXQgPT0gMCAmJiBvbC0+bGVuZ3RoID09IElOVDY0X01BWDsKfQoKc3RhdGljIGlubGluZSB1aW50OF90KgpvbF9kYXRhKGNvbnN0IE9mZnNldExlbmd0aCogb2wsIGNvbnN0IHZvaWQqIHgpIHsKICByZXR1cm4gKHVpbnQ4X3QqKXggKyBvbC0+b2Zmc2V0Owp9CgpzdGF0aWMgaW5saW5lIHNpemVfdApvbF9zaXplKGNvbnN0IE9mZnNldExlbmd0aCogb2wsIGludDY0X3QgbikgewogIHJldHVybiBNSU4ob2wtPmxlbmd0aCwgbiAtIG9sLT5vZmZzZXQpOwp9CgovKnN0YXRpYyBpbmxpbmUgTWVtb3J5QmxvY2sKb2xfYmxvY2soY29uc3QgT2Zmc2V0TGVuZ3RoKiBvbCwgY29uc3Qgdm9pZCogeCwgc2l6ZV90IG4pIHsKICByZXR1cm4gKE1lbW9yeUJsb2NrKXtvbF9kYXRhKG9sLCB4KSwgb2xfc2l6ZShvbCwgbil9Owp9Ki8KCi8qc3RhdGljIGlubGluZSBQb2ludGVyUmFuZ2UKb2xfcmFuZ2UoY29uc3QgT2Zmc2V0TGVuZ3RoKiBvbCwgY29uc3Qgdm9pZCogeCwgc2l6ZV90IG4pIHsKICBNZW1vcnlCbG9jayBtYiA9IG9mZnNldF9ibG9jayhvbCwgeCwgbik7CiAgcmV0dXJuIHJhbmdlX2Zyb20oJm1iKTsKfSovCgpzdGF0aWMgaW5saW5lIE9mZnNldExlbmd0aApvbF9zbGljZShjb25zdCBPZmZzZXRMZW5ndGggb2wsIGludDY0X3Qgc3RhcnQsIGludDY0X3QgZW5kKSB7CiAgaWYoc3RhcnQgPCAwKQogICAgc3RhcnQgPSBvbC5sZW5ndGggKyAoc3RhcnQgJSBvbC5sZW5ndGgpOwogIGVsc2UgaWYoc3RhcnQgPiBvbC5sZW5ndGgpCiAgICBzdGFydCA9IG9sLmxlbmd0aDsKICBpZihlbmQgPCAwKQogICAgZW5kID0gb2wubGVuZ3RoICsgKGVuZCAlIG9sLmxlbmd0aCk7CiAgZWxzZSBpZihlbmQgPiBvbC5sZW5ndGgpCiAgICBlbmQgPSBvbC5sZW5ndGg7CgogIHJldHVybiAoT2Zmc2V0TGVuZ3RoKXtzdGFydCwgZW5kIC0gc3RhcnR9Owp9CgpzdGF0aWMgaW5saW5lIE9mZnNldExlbmd0aApvbF9vZmZzZXQoY29uc3QgT2Zmc2V0TGVuZ3RoKiBvbCwgY29uc3QgT2Zmc2V0TGVuZ3RoKiBieSkgewogIE9mZnNldExlbmd0aCByZXQ7CiAgcmV0Lm9mZnNldCA9IG9sLT5vZmZzZXQgKyBieS0+b2Zmc2V0OwogIHJldC5sZW5ndGggPSBNSU4oYnktPmxlbmd0aCwgb2wtPmxlbmd0aCAtIGJ5LT5vZmZzZXQpOwogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBpbmxpbmUgdm9pZApqc19jbGVhcihKU0NvbnRleHQqIGN0eCwgY29uc3Qgdm9pZCogYXJnKSB7CiAgY29uc3Qgdm9pZCoqIHB0ciA9IChjb25zdCB2b2lkKiopYXJnOwogIGlmKCpwdHIpCiAgICBqc19mcmVlKGN0eCwgKHZvaWQqKSpwdHIpOwogICpwdHIgPSAwOwp9CgpzdGF0aWMgaW5saW5lIHZvaWQKanNfZHVtcF9zdHJpbmcoY29uc3QgY2hhciogc3RyLCBzaXplX3QgbGVuLCBzaXplX3QgbWF4bGVuKSB7CiAgc2l6ZV90IGksIG4gPSAyOwogIHB1dGNoYXIoJ1wnJyk7CiAgZm9yKGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKICAgIGlmKHN0cltpXSA9PSAnXG4nKSB7CiAgICAgIHB1dGNoYXIoJ1xcJyk7CiAgICAgIHB1dGNoYXIoJ24nKTsKICAgICAgbiArPSAyOwogICAgfSBlbHNlIHsKICAgICAgcHV0Y2hhcihzdHJbaV0pOwogICAgICBuKys7CiAgICB9CiAgICBpZihtYXhsZW4gPiAwICYmIG4gKyAxID49IG1heGxlbikgewogICAgICBmcHV0cygiJy4uLiIsIHN0ZG91dCk7CiAgICAgIHJldHVybjsKICAgIH0KICB9CiAgcHV0Y2hhcignXCcnKTsKfQoKc3RhdGljIGlubGluZSBjaGFyKgpqc190b19zdHJpbmcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIGNvbnN0IGNoYXIqIHM7CiAgY2hhciogcmV0ID0gMDsKCiAgaWYoKHMgPSBKU19Ub0NTdHJpbmcoY3R4LCB2YWx1ZSkpKSB7CiAgICByZXQgPSBqc19zdHJkdXAoY3R4LCBzKTsKICAgIEpTX0ZyZWVDU3RyaW5nKGN0eCwgcyk7CiAgfQogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBpbmxpbmUgY2hhcioKanNfcmVwbGFjZV9zdHJpbmcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSwgY2hhcioqIHNwdHIpIHsKICBjb25zdCBjaGFyKiBzOwoKICBpZigqc3B0cikKICAgIGpzX2ZyZWUoY3R4LCAqc3B0cik7CgogIGlmKChzID0gSlNfVG9DU3RyaW5nKGN0eCwgdmFsdWUpKSkgewogICAgKnNwdHIgPSBqc19zdHJkdXAoY3R4LCBzKTsKICAgIEpTX0ZyZWVDU3RyaW5nKGN0eCwgcyk7CiAgfQogIHJldHVybiAqc3B0cjsKfQoKc3RhdGljIGlubGluZSBCT09MCmpzX2lzX251bGxpc2goSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgcmV0dXJuIEpTX0lzTnVsbCh2YWx1ZSkgfHwgSlNfSXNVbmRlZmluZWQodmFsdWUpOwp9CgpzdGF0aWMgaW5saW5lIGNvbnN0IHVpbnQ4X3QqCmpzX2J1ZmZlcl9iZWdpbihjb25zdCBKU0J1ZmZlciogaW4pIHsKICByZXR1cm4gaW4tPmRhdGE7Cn0KCnN0YXRpYyBpbmxpbmUgY29uc3QgdWludDhfdCoKanNfYnVmZmVyX2VuZChjb25zdCBKU0J1ZmZlciogaW4pIHsKICByZXR1cm4gaW4tPmRhdGEgKyBpbi0+c2l6ZTsKfQoKSlNWYWx1ZSBqc190eXBlZGFycmF5X2NvbnN0cnVjdG9yKEpTQ29udGV4dCosIGludCBiaXRzLCBCT09MIGZsb2F0aW5nLCBCT09MIHNpZ24pOwpKU1ZhbHVlIGpzX3R5cGVkYXJyYXlfbmV3KEpTQ29udGV4dCosIGludCBiaXRzLCBCT09MIGZsb2F0aW5nLCBCT09MIHNpZ24sIEpTVmFsdWVDb25zdCBidWZmZXIsIHVpbnQzMl90IGJ5dGVfb2Zmc2V0LCB1aW50MzJfdCBsZW5ndGgpOwoKI2VuZGlmIC8qIFFKU05FVF9MSUJfSlNfVVRJTFNfSCAqLwoAAAAAAAAAAL41AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1A4AAAAAAADUDgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/minnet-client.c",
			"settings":
			{
				"buffer_size": 19065,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"",
					null,
					"AgAAAAEtAAAAAAAAES0AAAAAAAAPAAAASlNfTmV3Q0Nsb3N1cmUokywAAAAAAACjLAAAAAAAAA8AAABKU19OZXdDQ2xvc3VyZSg",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/jsutils.c",
			"settings":
			{
				"buffer_size": 30820,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					425,
					1,
					"insert",
					{
						"characters": "==0"
					},
					"AwAAAHl1AAAAAAAAenUAAAAAAAAAAAAAenUAAAAAAAB7dQAAAAAAAAAAAAB7dQAAAAAAAHx1AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeXUAAAAAAAB5dQAAAAAAAAAAAAAAAPC/"
				],
				[
					462,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA63MAAAAAAADrcwAAAAAAAAAAAAAAAAAA"
				],
				[
					479,
					1,
					"insert",
					{
						"characters": "func_proto"
					},
					"CwAAAAV2AAAAAAAABnYAAAAAAAAAAAAABnYAAAAAAAAGdgAAAAAAABoAAABqc19mdW5jdGlvbl9wcm90b3R5cGUoY3R4KQZ2AAAAAAAAB3YAAAAAAAAAAAAAB3YAAAAAAAAIdgAAAAAAAAAAAAAIdgAAAAAAAAl2AAAAAAAAAAAAAAl2AAAAAAAACnYAAAAAAAAAAAAACnYAAAAAAAALdgAAAAAAAAAAAAALdgAAAAAAAAx2AAAAAAAAAAAAAAx2AAAAAAAADXYAAAAAAAAAAAAADXYAAAAAAAAOdgAAAAAAAAAAAAAOdgAAAAAAAA92AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABXYAAAAAAAAfdgAAAAAAAAAAAAAAAPC/"
				],
				[
					506,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKt1AAAAAAAArHUAAAAAAAAAAAAArHUAAAAAAACwdQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAq3UAAAAAAACrdQAAAAAAAP///////+9/"
				],
				[
					507,
					1,
					"paste",
					null,
					"AQAAALB1AAAAAAAAAXYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsHUAAAAAAACwdQAAAAAAAAAAAAAAAPC/"
				],
				[
					508,
					1,
					"left_delete",
					null,
					"AQAAAP91AAAAAAAA/3UAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAAAXYAAAAAAAABdgAAAAAAAAAAAAAAAPC/"
				],
				[
					511,
					2,
					"left_delete",
					null,
					"AgAAAP51AAAAAAAA/nUAAAAAAAABAAAACv11AAAAAAAA/XUAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAA/3UAAAAAAAD/dQAAAAAAAAAAAAAAAPC/"
				],
				[
					512,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAP11AAAAAAAA/nUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/XUAAAAAAAD9dQAAAAAAAAAAAAAAAPC/"
				],
				[
					515,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA/nUAAAAAAAD+dQAAAAAAAAAAAAAAAPC/"
				],
				[
					530,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABpeAAAI2RlZmluZSBfR05VX1NPVVJDRQojaW5jbHVkZSA8c3RkYXJnLmg+CiNpbmNsdWRlIDxzdGRkZWYuaD4KI2luY2x1ZGUgPHN0cmluZy5oPgojaW5jbHVkZSA8YXNzZXJ0Lmg+CiNpbmNsdWRlIDxjdHlwZS5oPgojaW5jbHVkZSAianN1dGlscy5oIgojaW5jbHVkZSAiYnVmZmVyLmgiCgpKU1ZhbHVlCnZlY3RvcjJhcnJheShKU0NvbnRleHQqIGN0eCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pIHsKICBpbnQgaTsKICBKU1ZhbHVlIHJldCA9IEpTX05ld0FycmF5KGN0eCk7CiAgZm9yKGkgPSAwOyBpIDwgYXJnYzsgaSsrKSBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIHJldCwgaSwgYXJndltpXSk7CiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQpqc19vYmplY3RfY29uc3RydWN0b3IoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIEpTVmFsdWUgY3RvciA9IEpTX1VOREVGSU5FRDsKICBpZihKU19Jc09iamVjdCh2YWx1ZSkpCiAgICBjdG9yID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCB2YWx1ZSwgImNvbnN0cnVjdG9yIik7CiAgcmV0dXJuIGN0b3I7Cn0KCmNoYXIqCmpzX29iamVjdF9jbGFzc25hbWUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIEpTVmFsdWUgcHJvdG8gPSBKU19VTkRFRklORUQsIGN0b3I7CiAgY29uc3QgY2hhciogbmFtZTsKICBjaGFyKiBzID0gMDsKICBjdG9yID0ganNfb2JqZWN0X2NvbnN0cnVjdG9yKGN0eCwgdmFsdWUpOwogIGlmKCFKU19Jc0Z1bmN0aW9uKGN0eCwgY3RvcikpIHsKICAgIHByb3RvID0gSlNfR2V0UHJvdG90eXBlKGN0eCwgdmFsdWUpOwogICAgY3RvciA9IGpzX29iamVjdF9jb25zdHJ1Y3RvcihjdHgsIHByb3RvKTsKICB9CiAgaWYoKG5hbWUgPSBqc19mdW5jdGlvbl9uYW1lKGN0eCwgY3RvcikpKSB7CiAgICBzID0gbmFtZSAmJiBuYW1lWzBdID8ganNfc3RyZHVwKGN0eCwgbmFtZSkgOiAwOwogICAgSlNfRnJlZUNTdHJpbmcoY3R4LCBuYW1lKTsKICB9CgogIEpTX0ZyZWVWYWx1ZShjdHgsIGN0b3IpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHByb3RvKTsKICByZXR1cm4gczsKfQoKdm9pZApqc19jb25zb2xlX2xvZyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZSogY29uc29sZSwgSlNWYWx1ZSogY29uc29sZV9sb2cpIHsKICBKU1ZhbHVlIGdsb2JhbCA9IEpTX0dldEdsb2JhbE9iamVjdChjdHgpOwogICpjb25zb2xlID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBnbG9iYWwsICJjb25zb2xlIik7CiAgKmNvbnNvbGVfbG9nID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCAqY29uc29sZSwgImxvZyIpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGdsb2JhbCk7Cn0KCkpTVmFsdWUKanNfZnVuY3Rpb25fYm91bmQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10sIGludCBtYWdpYywgSlNWYWx1ZSogZnVuY19kYXRhKSB7CiAgQk9PTCBiaW5kX3RoaXMgPSAhIShtYWdpYyAmIEpTX0JJTkRfVEhJUyk7CiAgaW50IGkgPSAwLCBrID0gMCwgY291bnQgPSBtYWdpYyAmIH4oSlNfQklORF9USElTKTsKICBKU1ZhbHVlIGFyZ3NbYXJnYyArIGNvdW50XSwgZm47CgogIGZuID0gKmZ1bmNfZGF0YSsrOwoKICBpZihiaW5kX3RoaXMpCiAgICB0aGlzX3ZhbCA9IGZ1bmNfZGF0YVtpKytdOwoKICBmb3IoOyBpIDwgY291bnQ7IGkrKykgYXJnc1trKytdID0gZnVuY19kYXRhW2ldOwoKICBmb3IoaSA9IDA7IGkgPCBhcmdjOyBpKyspIGFyZ3NbaysrXSA9IGFyZ3ZbaV07CgogIHJldHVybiBKU19DYWxsKGN0eCwgZm4sIHRoaXNfdmFsLCBrLCBhcmdzKTsKfQoKSlNWYWx1ZQpqc19mdW5jdGlvbl9iaW5kKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgZnVuYywgaW50IGZsYWdzLCBKU1ZhbHVlQ29uc3QgYXJndltdKSB7CiAgaW50IGksIGFyZ2MgPSBmbGFncyAmIH4oSlNfQklORF9USElTKTsKICBKU1ZhbHVlIGRhdGFbYXJnYyArIDFdOwoKICBkYXRhWzBdID0gSlNfRHVwVmFsdWUoY3R4LCBmdW5jKTsKICBmb3IoaSA9IDA7IGkgPCBhcmdjOyBpKyspIGRhdGFbaSArIDFdID0gSlNfRHVwVmFsdWUoY3R4LCBhcmd2W2ldKTsKCiAgcmV0dXJuIEpTX05ld0NGdW5jdGlvbkRhdGEoY3R4LCBqc19mdW5jdGlvbl9ib3VuZCwgMCwgZmxhZ3MsIGFyZ2MgKyAxLCBkYXRhKTsKfQoKSlNWYWx1ZQpqc19mdW5jdGlvbl9iaW5kXzEoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBmdW5jLCBKU1ZhbHVlQ29uc3QgYXJnKSB7CiAgcmV0dXJuIGpzX2Z1bmN0aW9uX2JpbmQoY3R4LCBmdW5jLCAxLCAmYXJnKTsKfQoKSlNWYWx1ZQpqc19mdW5jdGlvbl9iaW5kX3RoaXMoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBmdW5jLCBKU1ZhbHVlQ29uc3QgdGhpc192YWwpIHsKICByZXR1cm4ganNfZnVuY3Rpb25fYmluZChjdHgsIGZ1bmMsIDEgfCBKU19CSU5EX1RISVMsICZ0aGlzX3ZhbCk7Cn0KCkpTVmFsdWUKanNfZnVuY3Rpb25fYmluZF90aGlzXzEoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBmdW5jLCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIEpTVmFsdWVDb25zdCBhcmcpIHsKICBKU1ZhbHVlQ29uc3QgYm91bmRbXSA9IHt0aGlzX3ZhbCwgYXJnfTsKICByZXR1cm4ganNfZnVuY3Rpb25fYmluZChjdHgsIGZ1bmMsIGNvdW50b2YoYm91bmQpIHwgSlNfQklORF9USElTLCBib3VuZCk7Cn0KCi8qSlNWYWx1ZQpqc19mdW5jdGlvbl9iaW5kX3YoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBmdW5jLCAuLi4pIHsKICB2YV9saXN0IGFyZ3M7CiAgRHluQnVmIGI7CiAgSlNWYWx1ZUNvbnN0IGFyZzsKICBkYnVmX2luaXQyKCZiLCBjdHgsIChEeW5CdWZSZWFsbG9jRnVuYyopanNfcmVhbGxvYyk7CiAgdmFfc3RhcnQoYXJncywgZnVuYyk7CiAgd2hpbGUoKGFyZyA9IHZhX2FyZyhhcmdzLCBKU1ZhbHVlQ29uc3QpKSkgeyBkYnVmX3B1dCgmYiwgJmFyZywgc2l6ZW9mKEpTVmFsdWVDb25zdCkpOyB9CiAgdmFfZW5kKGFyZ3MpOwogIHJldHVybiBqc19mdW5jdGlvbl9iaW5kKGN0eCwgZnVuYywgYi5zaXplIC8gc2l6ZW9mKEpTVmFsdWVDb25zdCksIChKU1ZhbHVlQ29uc3QqKWIuYnVmKTsKfSovCgpjb25zdCBjaGFyKgpqc19mdW5jdGlvbl9uYW1lKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBKU1ZhbHVlIHN0ciwgbmFtZSwgYXJnc1syXSwgaWR4OwogIGNvbnN0IGNoYXIqIHMgPSAwOwogIGludDMyX3QgaSA9IC0xOwogIHN0ciA9IGpzX2ludm9rZShjdHgsIHZhbHVlLCAidG9TdHJpbmciLCAwLCAwKTsKICBhcmdzWzBdID0gSlNfTmV3U3RyaW5nKGN0eCwgImZ1bmN0aW9uICIpOwogIGlkeCA9IGpzX2ludm9rZShjdHgsIHN0ciwgImluZGV4T2YiLCAxLCBhcmdzKTsKICBKU19GcmVlVmFsdWUoY3R4LCBhcmdzWzBdKTsKICBKU19Ub0ludDMyKGN0eCwgJmksIGlkeCk7CiAgaWYoaSAhPSAwKSB7CiAgICBKU19GcmVlVmFsdWUoY3R4LCBzdHIpOwogICAgcmV0dXJuIDA7CiAgfQogIGFyZ3NbMF0gPSBKU19OZXdTdHJpbmcoY3R4LCAiKCIpOwogIGlkeCA9IGpzX2ludm9rZShjdHgsIHN0ciwgImluZGV4T2YiLCAxLCBhcmdzKTsKICBKU19GcmVlVmFsdWUoY3R4LCBhcmdzWzBdKTsKICBhcmdzWzBdID0gSlNfTmV3VWludDMyKGN0eCwgOSk7CiAgYXJnc1sxXSA9IGlkeDsKICBuYW1lID0ganNfaW52b2tlKGN0eCwgc3RyLCAic3Vic3RyaW5nIiwgMiwgYXJncyk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgYXJnc1swXSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgYXJnc1sxXSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgc3RyKTsKICBzID0gSlNfVG9DU3RyaW5nKGN0eCwgbmFtZSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgbmFtZSk7CiAgcmV0dXJuIHM7Cn0KCkpTVmFsdWUKanNfZnVuY3Rpb25fcHJvdG90eXBlKEpTQ29udGV4dCogY3R4KSB7CiAgSlNWYWx1ZSByZXQsIGZuID0gSlNfTmV3Q0Z1bmN0aW9uKGN0eCwgMCwgIiIsIDApOwogIHJldCA9IEpTX0dldFByb3RvdHlwZShjdHgsIGZuKTsKICBKU19GcmVlVmFsdWUoY3R4LCBmbik7CiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQpqc19pdGVyYXRvcl9yZXN1bHQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSwgQk9PTCBkb25lKSB7CiAgSlNWYWx1ZSByZXQgPSBKU19OZXdPYmplY3QoY3R4KTsKCiAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCByZXQsICJkb25lIiwgSlNfTmV3Qm9vbChjdHgsIGRvbmUpKTsKICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIHJldCwgInZhbHVlIiwgSlNfRHVwVmFsdWUoY3R4LCB2YWx1ZSkpOwoKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX2l0ZXJhdG9yX25leHQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIEpTVmFsdWUqIG5leHQsIEJPT0wqIGRvbmVfcCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pIHsKICBKU1ZhbHVlIGZuLCByZXN1bHQsIGRvbmUsIHZhbHVlOwoKICBpZighSlNfSXNPYmplY3Qob2JqKSkKICAgIHJldHVybiBKU19UaHJvd1R5cGVFcnJvcihjdHgsICJhcmd1bWVudCBpcyBub3QgYW4gb2JqZWN0ICglZCkgXCIlc1wiIiwgSlNfVkFMVUVfR0VUX1RBRyhvYmopLCBKU19Ub0NTdHJpbmcoY3R4LCBvYmopKTsKCiAgaWYoSlNfSXNPYmplY3QoKm5leHQpICYmIEpTX0lzRnVuY3Rpb24oY3R4LCAqbmV4dCkpIHsKICAgIGZuID0gKm5leHQ7CiAgfSBlbHNlIHsKICAgIGlmKEpTX0lzRnVuY3Rpb24oY3R4LCBvYmopKSB7CiAgICAgIEpTVmFsdWUgdG1wID0gSlNfQ2FsbChjdHgsIG9iaiwgSlNfVU5ERUZJTkVELCAwLCAwKTsKICAgICAgaWYoSlNfSXNPYmplY3QodG1wKSkgewogICAgICAgIEpTX0ZyZWVWYWx1ZShjdHgsIG9iaik7CiAgICAgICAgb2JqID0gdG1wOwogICAgICB9CiAgICB9CgogICAgZm4gPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIG9iaiwgIm5leHQiKTsKCiAgICBpZihKU19Jc1VuZGVmaW5lZChmbikpCiAgICAgIHJldHVybiBKU19UaHJvd1R5cGVFcnJvcihjdHgsICJvYmplY3QgZG9lcyBub3QgaGF2ZSAnbmV4dCcgbWV0aG9kIik7CgogICAgaWYoIUpTX0lzRnVuY3Rpb24oY3R4LCBmbikpCiAgICAgIHJldHVybiBKU19UaHJvd1R5cGVFcnJvcihjdHgsICJvYmplY3QubmV4dCBpcyBub3QgYSBmdW5jdGlvbiIpOwoKICAgICpuZXh0ID0ganNfZnVuY3Rpb25fYmluZF90aGlzKGN0eCwgZm4sIG9iaik7CiAgICBKU19GcmVlVmFsdWUoY3R4LCBmbik7CiAgICBmbiA9ICpuZXh0OwogIH0KCiAgcmVzdWx0ID0gSlNfQ2FsbChjdHgsIGZuLCBKU19VTkRFRklORUQsIGFyZ2MsIGFyZ3YpOwogIC8vIEpTX0ZyZWVWYWx1ZShjdHgsIGZuKTsKCiAgaWYoSlNfSXNFeGNlcHRpb24ocmVzdWx0KSkKICAgIHJldHVybiBKU19FWENFUFRJT047CgogIGlmKGpzX2lzX3Byb21pc2UoY3R4LCByZXN1bHQpKQogICAgcmV0dXJuIHJlc3VsdDsKCiAgZG9uZSA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgcmVzdWx0LCAiZG9uZSIpOwogIHZhbHVlID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCByZXN1bHQsICJ2YWx1ZSIpOwogICpkb25lX3AgPSBKU19Ub0Jvb2woY3R4LCBkb25lKTsKICBKU19GcmVlVmFsdWUoY3R4LCByZXN1bHQpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGRvbmUpOwogIHJldHVybiB2YWx1ZTsKfQoKaW50CmpzX2NvcHlfcHJvcGVydGllcyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGRzdCwgSlNWYWx1ZUNvbnN0IHNyYywgaW50IGZsYWdzKSB7CiAgSlNQcm9wZXJ0eUVudW0qIHRhYjsKICB1aW50MzJfdCB0YWJfbGVuLCBpOwoKICBpZihKU19HZXRPd25Qcm9wZXJ0eU5hbWVzKGN0eCwgJnRhYiwgJnRhYl9sZW4sIHNyYywgZmxhZ3MpKQogICAgcmV0dXJuIC0xOwoKICBmb3IoaSA9IDA7IGkgPCB0YWJfbGVuOyBpKyspIHsKICAgIEpTVmFsdWUgdmFsdWUgPSBKU19HZXRQcm9wZXJ0eShjdHgsIHNyYywgdGFiW2ldLmF0b20pOwogICAgSlNfU2V0UHJvcGVydHkoY3R4LCBkc3QsIHRhYltpXS5hdG9tLCB2YWx1ZSk7CiAgfQogIHJldHVybiBpOwp9Cgp2b2lkCmpzX2J1ZmZlcl9mcmVlX2RlZmF1bHQoSlNSdW50aW1lKiBydCwgdm9pZCogb3BhcXVlLCB2b2lkKiBwdHIpIHsKICBKU0J1ZmZlciogYnVmID0gb3BhcXVlOwoKICBpZihKU19Jc1N0cmluZyhidWYtPnZhbHVlKSkKICAgIEpTX0ZyZWVWYWx1ZVJUKHJ0LCBidWYtPnZhbHVlKTsKICBlbHNlIGlmKCFKU19Jc1VuZGVmaW5lZChidWYtPnZhbHVlKSkKICAgIEpTX0ZyZWVWYWx1ZVJUKHJ0LCBidWYtPnZhbHVlKTsKCiAgYnVmLT52YWx1ZSA9IEpTX1VOREVGSU5FRDsKICBidWYtPmRhdGEgPSAwOwogIGJ1Zi0+c2l6ZSA9IDA7CiAgYnVmLT5wb3MgPSAwOwogIG9sX2luaXQoJmJ1Zi0+cmFuZ2UpOwp9CgpCT09MCmpzX2J1ZmZlcl9mcm9tKEpTQ29udGV4dCogY3R4LCBKU0J1ZmZlciogYnVmLCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICAqYnVmID0ganNfaW5wdXRfY2hhcnMoY3R4LCB2YWx1ZSk7CiAgcmV0dXJuICEhYnVmLT5kYXRhOwp9CgpKU0J1ZmZlcgpqc19idWZmZXJfbmV3KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBKU0J1ZmZlciByZXQgPSB7MCwgMCwgMCwgJmpzX2J1ZmZlcl9mcmVlX2RlZmF1bHQsIEpTX1VOREVGSU5FRCwgezAsIC0xfX07CiAgcmV0LmZyZWUgPSAmanNfYnVmZmVyX2ZyZWVfZGVmYXVsdDsKCiAgaWYoSlNfSXNTdHJpbmcodmFsdWUpKSB7CiAgICByZXQuZGF0YSA9ICh1aW50OF90KilKU19Ub0NTdHJpbmdMZW4oY3R4LCAmcmV0LnNpemUsIHZhbHVlKTsKICAgIHJldC52YWx1ZSA9IHZhbHVlOwogIH0gZWxzZSBpZigocmV0LmRhdGEgPSBKU19HZXRBcnJheUJ1ZmZlcihjdHgsICZyZXQuc2l6ZSwgdmFsdWUpKSkgewogICAgcmV0LnZhbHVlID0gSlNfRHVwVmFsdWUoY3R4LCB2YWx1ZSk7CiAgfQoKICByZXR1cm4gcmV0Owp9CgpKU0J1ZmZlcgpqc19idWZmZXJfZnJvbWJsb2NrKEpTQ29udGV4dCogY3R4LCBzdHJ1Y3QgYnl0ZV9ibG9jayogYmxrKSB7CiAgSlNWYWx1ZSBidWYgPSBibG9ja190b2FycmF5YnVmZmVyKGJsaywgY3R4KTsKCiAgcmV0dXJuIGpzX2J1ZmZlcl9uZXcoY3R4LCBidWYpOwp9CgpKU0J1ZmZlcgpqc19idWZmZXJfZGF0YShKU0NvbnRleHQqIGN0eCwgY29uc3Qgdm9pZCogZGF0YSwgc2l6ZV90IHNpemUpIHsKICBCeXRlQmxvY2sgYmxvY2sgPSB7KHVpbnQ4X3QqKWRhdGEsICh1aW50OF90KilkYXRhICsgc2l6ZX07CgogIHJldHVybiBqc19idWZmZXJfZnJvbWJsb2NrKGN0eCwgJmJsb2NrKTsKfQoKSlNCdWZmZXIKanNfYnVmZmVyX2FsbG9jKEpTQ29udGV4dCogY3R4LCBzaXplX3Qgc2l6ZSkgewogIEJ5dGVCbG9jayBibG9jayA9IHswLCAwfTsKCiAgaWYoKGJsb2NrLnN0YXJ0ID0ganNfbWFsbG9jKGN0eCwgc2l6ZSkpKQogICAgYmxvY2suZW5kID0gYmxvY2suc3RhcnQgKyBzaXplOwoKICByZXR1cm4ganNfYnVmZmVyX2Zyb21ibG9jayhjdHgsICZibG9jayk7Cn0KCnZvaWQKanNfYnVmZmVyX3RvKEpTQnVmZmVyIGJ1Ziwgdm9pZCoqIHBwdHIsIHNpemVfdCogcGxlbikgewogIGlmKHBwdHIpCiAgICAqcHB0ciA9IGJ1Zi5kYXRhOwogIGlmKHBsZW4pCiAgICAqcGxlbiA9IGJ1Zi5zaXplOwp9Cgp2b2lkCmpzX2J1ZmZlcl90bzMoSlNCdWZmZXIgYnVmLCBjb25zdCBjaGFyKiogcHN0ciwgdm9pZCoqIHBwdHIsIHVuc2lnbmVkKiBwbGVuKSB7CiAgaWYoIUpTX0lzU3RyaW5nKGJ1Zi52YWx1ZSkpIHsKICAgIHNpemVfdCBsZW4gPSAwOwogICAganNfYnVmZmVyX3RvKGJ1ZiwgcHB0ciwgJmxlbik7CiAgICBpZihwbGVuKQogICAgICAqcGxlbiA9IGxlbjsKICB9IGVsc2UKICAgICpwc3RyID0gKGNvbnN0IGNoYXIqKWJ1Zi5kYXRhOwp9CgpCT09MCmpzX2J1ZmZlcl92YWxpZChjb25zdCBKU0J1ZmZlciogaW4pIHsKICByZXR1cm4gIUpTX0lzRXhjZXB0aW9uKGluLT52YWx1ZSk7Cn0KCkpTQnVmZmVyCmpzX2J1ZmZlcl9jbG9uZShjb25zdCBKU0J1ZmZlciogaW4sIEpTQ29udGV4dCogY3R4KSB7CiAgSlNCdWZmZXIgYnVmID0ganNfaW5wdXRfYnVmZmVyKGN0eCwgaW4tPnZhbHVlKTsKICBidWYucG9zID0gaW4tPnBvczsKICBidWYucmFuZ2UgPSBpbi0+cmFuZ2U7CiAgcmV0dXJuIGJ1ZjsKfQoKdm9pZApqc19idWZmZXJfZHVtcChjb25zdCBKU0J1ZmZlciogaW4sIER5bkJ1ZiogZGIpIHsKICBkYnVmX3ByaW50ZihkYiwgIihKU0J1ZmZlcil7IC5kYXRhID0gJXAsIC5zaXplID0gJXp1LCAuZnJlZSA9ICVwIH0iLCBpbi0+ZGF0YSwgaW4tPnNpemUsIGluLT5mcmVlKTsKfQoKdm9pZApqc19idWZmZXJfZnJlZV9ydChKU0J1ZmZlciogaW4sIEpTUnVudGltZSogcnQpIHsKICBpZihpbi0+ZGF0YSkgewogICAgaW4tPmZyZWUocnQsIGluLCBpbi0+ZGF0YSk7CiAgICBpbi0+ZGF0YSA9IDA7CiAgICBpbi0+c2l6ZSA9IDA7CiAgICBpbi0+dmFsdWUgPSBKU19VTkRFRklORUQ7CiAgfQp9Cgp2b2lkCmpzX2J1ZmZlcl9mcmVlKEpTQnVmZmVyKiBpbiwgSlNDb250ZXh0KiBjdHgpIHsKICBqc19idWZmZXJfZnJlZV9ydChpbiwgSlNfR2V0UnVudGltZShjdHgpKTsKfQoKQk9PTApqc19pc19pdGVyYWJsZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaikgewogIEpTQXRvbSBhdG9tOwogIEJPT0wgcmV0ID0gRkFMU0U7CiAgYXRvbSA9IGpzX3N5bWJvbF9zdGF0aWNfYXRvbShjdHgsICJpdGVyYXRvciIpOwogIGlmKEpTX0hhc1Byb3BlcnR5KGN0eCwgb2JqLCBhdG9tKSkKICAgIHJldCA9IFRSVUU7CgogIEpTX0ZyZWVBdG9tKGN0eCwgYXRvbSk7CiAgaWYoIXJldCkgewogICAgYXRvbSA9IGpzX3N5bWJvbF9zdGF0aWNfYXRvbShjdHgsICJhc3luY0l0ZXJhdG9yIik7CiAgICBpZihKU19IYXNQcm9wZXJ0eShjdHgsIG9iaiwgYXRvbSkpCiAgICAgIHJldCA9IFRSVUU7CgogICAgSlNfRnJlZUF0b20oY3R4LCBhdG9tKTsKICB9CiAgcmV0dXJuIHJldDsKfQoKQk9PTApqc19pc19pdGVyYXRvcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaikgewogIGlmKEpTX0lzT2JqZWN0KG9iaikpIHsKICAgIEpTVmFsdWUgbmV4dCA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgb2JqLCAibmV4dCIpOwoKICAgIGlmKEpTX0lzRnVuY3Rpb24oY3R4LCBuZXh0KSkKICAgICAgcmV0dXJuIFRSVUU7CiAgfQogIHJldHVybiBGQUxTRTsKfQoKQk9PTApqc19pc19hc3luY19nZW5lcmF0b3IoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmopIHsKICBCT09MIHJldCA9IEZBTFNFOwogIGNvbnN0IGNoYXIqIHN0cjsKCiAgaWYoKHN0ciA9IEpTX1RvQ1N0cmluZyhjdHgsIG9iaikpKSB7CiAgICByZXQgPSAhIXN0cnN0cihzdHIsICJBc3luY0dlbmVyYXRvciIpOwogICAgSlNfRnJlZUNTdHJpbmcoY3R4LCBzdHIpOwogIH0KICByZXR1cm4gcmV0Owp9CgpKU0F0b20KanNfc3ltYm9sX3N0YXRpY19hdG9tKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBuYW1lKSB7CiAgSlNWYWx1ZSBzeW0gPSBqc19zeW1ib2xfc3RhdGljX3ZhbHVlKGN0eCwgbmFtZSk7CiAgSlNBdG9tIHJldCA9IEpTX0lzVW5kZWZpbmVkKHN5bSkgPyAtMSA6IEpTX1ZhbHVlVG9BdG9tKGN0eCwgc3ltKTsKICBKU19GcmVlVmFsdWUoY3R4LCBzeW0pOwogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKanNfc3ltYm9sX3N0YXRpY192YWx1ZShKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogbmFtZSkgewogIEpTVmFsdWUgc3ltYm9sX2N0b3IsIHJldDsKICBzeW1ib2xfY3RvciA9IGpzX3N5bWJvbF9jdG9yKGN0eCk7CiAgcmV0ID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBzeW1ib2xfY3RvciwgbmFtZSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgc3ltYm9sX2N0b3IpOwogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKanNfc3ltYm9sX2Zvcl92YWx1ZShKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogbmFtZSkgewogIEpTVmFsdWUgc3ltYm9sX2N0b3IsIG5hbWV2YWwsIHJldDsKICBKU0F0b20gZm9yX2F0b20gPSBKU19OZXdBdG9tKGN0eCwgImZvciIpOwogIHN5bWJvbF9jdG9yID0ganNfc3ltYm9sX2N0b3IoY3R4KTsKICBuYW1ldmFsID0gSlNfTmV3U3RyaW5nKGN0eCwgbmFtZSk7CiAgcmV0ID0gSlNfSW52b2tlKGN0eCwgc3ltYm9sX2N0b3IsIGZvcl9hdG9tLCAxLCAmbmFtZXZhbCk7CiAgSlNfRnJlZUF0b20oY3R4LCBmb3JfYXRvbSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgbmFtZXZhbCk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgc3ltYm9sX2N0b3IpOwogIHJldHVybiByZXQ7Cn0KCkpTQXRvbQpqc19zeW1ib2xfZm9yX2F0b20oSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIG5hbWUpIHsKICBKU1ZhbHVlIHN5bSA9IGpzX3N5bWJvbF9mb3JfdmFsdWUoY3R4LCBuYW1lKTsKICBKU0F0b20gcmV0ID0gSlNfSXNVbmRlZmluZWQoc3ltKSA/IC0xIDogSlNfVmFsdWVUb0F0b20oY3R4LCBzeW0pOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHN5bSk7CiAgcmV0dXJuIHJldDsKfQpKU1ZhbHVlCmpzX3N5bWJvbF9jdG9yKEpTQ29udGV4dCogY3R4KSB7CiAgcmV0dXJuIGpzX2dsb2JhbF9nZXQoY3R4LCAiU3ltYm9sIik7Cn0KCkpTVmFsdWUKanNfZ2xvYmFsX2dldChKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogcHJvcCkgewogIEpTVmFsdWUgZ2xvYmFsX29iaiwgcmV0OwogIGdsb2JhbF9vYmogPSBKU19HZXRHbG9iYWxPYmplY3QoY3R4KTsKICByZXQgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIGdsb2JhbF9vYmosIHByb3ApOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGdsb2JhbF9vYmopOwogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKanNfZ2xvYmFsX29zKEpTQ29udGV4dCogY3R4KSB7CiAgcmV0dXJuIGpzX2dsb2JhbF9nZXQoY3R4LCAib3MiKTsKfQoKSlNWYWx1ZQpqc19vc19nZXQoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIHByb3ApIHsKICBKU1ZhbHVlIG9zX29iaiA9IGpzX2dsb2JhbF9vcyhjdHgpOwogIEpTVmFsdWUgcmV0ID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBvc19vYmosIHByb3ApOwogIEpTX0ZyZWVWYWx1ZShjdHgsIG9zX29iaik7CiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQpqc190aW1lcl9zdGFydChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGZuLCB1aW50MzJfdCBtcykgewogIEpTVmFsdWUgc2V0X3RpbWVvdXQgPSBqc19vc19nZXQoY3R4LCAic2V0VGltZW91dCIpOwogIEpTVmFsdWVDb25zdCBhcmdzWzJdID0ge2ZuLCBKU19NS1ZBTChKU19UQUdfSU5ULCBtcyl9OwogIEpTVmFsdWUgcmV0ID0gSlNfQ2FsbChjdHgsIHNldF90aW1lb3V0LCBKU19VTkRFRklORUQsIDIsIGFyZ3MpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHNldF90aW1lb3V0KTsKICByZXR1cm4gcmV0Owp9Cgp2b2lkCmpzX3RpbWVyX2NhbmNlbChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRpbWVyKSB7CiAgSlNWYWx1ZSBjbGVhcl90aW1lb3V0ID0ganNfb3NfZ2V0KGN0eCwgImNsZWFyVGltZW91dCIpOwogIEpTVmFsdWUgcmV0ID0gSlNfQ2FsbChjdHgsIGNsZWFyX3RpbWVvdXQsIEpTX1VOREVGSU5FRCwgMSwgJnRpbWVyKTsKICBKU19GcmVlVmFsdWUoY3R4LCBjbGVhcl90aW1lb3V0KTsKICBKU19GcmVlVmFsdWUoY3R4LCByZXQpOwp9Cgp2b2lkCmpzX3RpbWVyX2ZyZWUodm9pZCogcHRyKSB7CiAgc3RydWN0IFRpbWVyQ2xvc3VyZSogY2xvc3VyZSA9IHB0cjsKICBKU0NvbnRleHQqIGN0eCA9IGNsb3N1cmUtPmN0eDsKCiAgaWYoLS1jbG9zdXJlLT5yZWZfY291bnQgPT0gMCkgewogICAgSlNfRnJlZVZhbHVlKGN0eCwgY2xvc3VyZS0+aWQpOwogICAgSlNfRnJlZVZhbHVlKGN0eCwgY2xvc3VyZS0+aGFuZGxlcik7CiAgICBKU19GcmVlVmFsdWUoY3R4LCBjbG9zdXJlLT5jYWxsYmFjayk7CgogICAganNfZnJlZShjdHgsIGNsb3N1cmUpOwogIH0KfQoKSlNWYWx1ZQpqc190aW1lcl9jYWxsYmFjayhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2LCBpbnQgbWFnaWMsIHZvaWQqIG9wYXF1ZSkgewogIHN0cnVjdCBUaW1lckNsb3N1cmUqIGNsb3N1cmUgPSBvcGFxdWU7CiAgSlNWYWx1ZSByZXQ7CiAgSlNWYWx1ZUNvbnN0IGFyZ3NbXSA9IHtjbG9zdXJlLT5pZCwgY2xvc3VyZS0+aGFuZGxlciwgY2xvc3VyZS0+Y2FsbGJhY2ssIEpTX05ld1VpbnQzMihjdHgsIGNsb3N1cmUtPmludGVydmFsKX07CgogIHJldCA9IEpTX0NhbGwoY3R4LCBjbG9zdXJlLT5oYW5kbGVyLCB0aGlzX3ZhbCwgY291bnRvZihhcmdzKSwgYXJncyk7CgogIGlmKCEoSlNfSXNCb29sKHJldCkgJiYgIUpTX1RvQm9vbChjdHgsIHJldCkpKSB7CiAgICBKU19GcmVlVmFsdWUoY3R4LCBjbG9zdXJlLT5pZCk7CiAgICBjbG9zdXJlLT5pZCA9IGpzX3RpbWVyX3N0YXJ0KGN0eCwgY2xvc3VyZS0+Y2FsbGJhY2ssIGNsb3N1cmUtPmludGVydmFsKTsKICB9CgogIHJldHVybiByZXQ7Cn0KCnN0cnVjdCBUaW1lckNsb3N1cmUqCmpzX3RpbWVyX2ludGVydmFsKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgZm4sIHVpbnQzMl90IG1zKSB7CiAgc3RydWN0IFRpbWVyQ2xvc3VyZSogY2xvc3VyZTsKCiAgaWYoIShjbG9zdXJlID0ganNfbWFsbG9jKGN0eCwgc2l6ZW9mKHN0cnVjdCBUaW1lckNsb3N1cmUpKSkpCiAgICByZXR1cm4gMDsKCiAgY2xvc3VyZS0+cmVmX2NvdW50ID0gMTsKICBjbG9zdXJlLT5jdHggPSBjdHg7CiAgY2xvc3VyZS0+aW50ZXJ2YWwgPSBtczsKICBjbG9zdXJlLT5oYW5kbGVyID0gSlNfRHVwVmFsdWUoY3R4LCBmbik7CiAgY2xvc3VyZS0+Y2FsbGJhY2sgPSBKU19OZXdDQ2xvc3VyZShjdHgsIGpzX3RpbWVyX2NhbGxiYWNrLCAwLCAwLCBjbG9zdXJlLCBqc190aW1lcl9mcmVlKTsKICBjbG9zdXJlLT5pZCA9IGpzX3RpbWVyX3N0YXJ0KGN0eCwgY2xvc3VyZS0+Y2FsbGJhY2ssIG1zKTsKCiAgcmV0dXJuIGNsb3N1cmU7Cn0KCnZvaWQKanNfdGltZXJfcmVzdGFydChzdHJ1Y3QgVGltZXJDbG9zdXJlKiBjbG9zdXJlKSB7CiAganNfdGltZXJfY2FuY2VsKGNsb3N1cmUtPmN0eCwgY2xvc3VyZS0+aWQpOwogIEpTX0ZyZWVWYWx1ZShjbG9zdXJlLT5jdHgsIGNsb3N1cmUtPmlkKTsKICBjbG9zdXJlLT5pZCA9IGpzX3RpbWVyX3N0YXJ0KGNsb3N1cmUtPmN0eCwgY2xvc3VyZS0+Y2FsbGJhY2ssIGNsb3N1cmUtPmludGVydmFsKTsKfQoKc3RhdGljIGlubGluZSB2b2lkCmpzX3Jlc29sdmVfZnVuY3Rpb25zX3plcm8oUmVzb2x2ZUZ1bmN0aW9ucyogZnVuY3MpIHsKICBmdW5jcy0+cmVzb2x2ZSA9IEpTX05VTEw7CiAgZnVuY3MtPnJlamVjdCA9IEpTX05VTEw7Cn0KCnN0YXRpYyBpbmxpbmUgQk9PTApqc19yZXNvbHZlX2Z1bmN0aW9uc19pc19udWxsKFJlc29sdmVGdW5jdGlvbnMgY29uc3QqIGZ1bmNzKSB7CiAgcmV0dXJuIEpTX0lzTnVsbChmdW5jcy0+cmVzb2x2ZSkgJiYgSlNfSXNOdWxsKGZ1bmNzLT5yZWplY3QpOwp9CgpzdGF0aWMgaW5saW5lIEpTVmFsdWUKanNfcmVzb2x2ZV9mdW5jdGlvbnNfY2FsbChKU0NvbnRleHQqIGN0eCwgUmVzb2x2ZUZ1bmN0aW9ucyogZnVuY3MsIGludCBpbmRleCwgSlNWYWx1ZUNvbnN0IGFyZykgewogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVELCBmdW5jID0gKChKU1ZhbHVlKilmdW5jcylbaW5kZXhdOwoKICBhc3NlcnQoIUpTX0lzTnVsbChmdW5jKSk7CiAgcmV0ID0gSlNfQ2FsbChjdHgsIGZ1bmMsIEpTX1VOREVGSU5FRCwgMSwgJmFyZyk7CiAganNfcHJvbWlzZV9mcmVlKGN0eCwgZnVuY3MpOwogIHJldHVybiByZXQ7Cn0KCmNoYXIqCmpzX3Rvc3RyaW5nbGVuKEpTQ29udGV4dCogY3R4LCBzaXplX3QqIGxlbnAsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIHNpemVfdCBsZW47CiAgY29uc3QgY2hhciogY3N0cjsKICBjaGFyKiByZXQgPSAwOwogIGlmKChjc3RyID0gSlNfVG9DU3RyaW5nTGVuKGN0eCwgJmxlbiwgdmFsdWUpKSkgewogICAgcmV0ID0ganNfc3RybmR1cChjdHgsIGNzdHIsIGxlbik7CiAgICBpZihsZW5wKQogICAgICAqbGVucCA9IGxlbjsKICAgIEpTX0ZyZWVDU3RyaW5nKGN0eCwgY3N0cik7CiAgfQogIHJldHVybiByZXQ7Cn0KCmNoYXIqCmpzX3Rvc3RyaW5nKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4ganNfdG9zdHJpbmdsZW4oY3R4LCAwLCB2YWx1ZSk7Cn0KCkpTVmFsdWUKanNfaW52b2tlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc19vYmosIGNvbnN0IGNoYXIqIG1ldGhvZCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pIHsKICBKU0F0b20gYXRvbSA9IEpTX05ld0F0b20oY3R4LCBtZXRob2QpOwogIEpTVmFsdWUgcmV0ID0gSlNfSW52b2tlKGN0eCwgdGhpc19vYmosIGF0b20sIGFyZ2MsIGFyZ3YpOwogIEpTX0ZyZWVBdG9tKGN0eCwgYXRvbSk7CiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQpqc19wcm9taXNlX2NyZWF0ZShKU0NvbnRleHQqIGN0eCwgUmVzb2x2ZUZ1bmN0aW9ucyogZnVuY3MpIHsKICBKU1ZhbHVlIHJldDsKCiAgcmV0ID0gSlNfTmV3UHJvbWlzZUNhcGFiaWxpdHkoY3R4LCAmZnVuY3MtPnJlc29sdmUpOwogIHJldHVybiByZXQ7Cn0KCnZvaWQKanNfcHJvbWlzZV9mcmVlKEpTQ29udGV4dCogY3R4LCBSZXNvbHZlRnVuY3Rpb25zKiBmdW5jcykgewogIEpTX0ZyZWVWYWx1ZShjdHgsIGZ1bmNzLT5yZXNvbHZlKTsKICBKU19GcmVlVmFsdWUoY3R4LCBmdW5jcy0+cmVqZWN0KTsKICBqc19yZXNvbHZlX2Z1bmN0aW9uc196ZXJvKGZ1bmNzKTsKfQoKdm9pZApqc19wcm9taXNlX2ZyZWVfcnQoSlNSdW50aW1lKiBydCwgUmVzb2x2ZUZ1bmN0aW9ucyogZnVuY3MpIHsKICBKU19GcmVlVmFsdWVSVChydCwgZnVuY3MtPnJlc29sdmUpOwogIEpTX0ZyZWVWYWx1ZVJUKHJ0LCBmdW5jcy0+cmVqZWN0KTsKICBqc19yZXNvbHZlX2Z1bmN0aW9uc196ZXJvKGZ1bmNzKTsKfQoKSlNWYWx1ZQpqc19wcm9taXNlX3Jlc29sdmUoSlNDb250ZXh0KiBjdHgsIFJlc29sdmVGdW5jdGlvbnMqIGZ1bmNzLCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBpZihqc19pc19udWxsaXNoKGZ1bmNzLT5yZXNvbHZlKSkKICAgIHJldHVybiBKU19VTkRFRklORUQ7CiAgcmV0dXJuIGpzX3Jlc29sdmVfZnVuY3Rpb25zX2NhbGwoY3R4LCBmdW5jcywgMCwgdmFsdWUpOwp9CgpKU1ZhbHVlCmpzX3Byb21pc2VfcmVqZWN0KEpTQ29udGV4dCogY3R4LCBSZXNvbHZlRnVuY3Rpb25zKiBmdW5jcywgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgaWYoanNfaXNfbnVsbGlzaChmdW5jcy0+cmVqZWN0KSkKICAgIHJldHVybiBKU19VTkRFRklORUQ7CiAgcmV0dXJuIGpzX3Jlc29sdmVfZnVuY3Rpb25zX2NhbGwoY3R4LCBmdW5jcywgMSwgdmFsdWUpOwp9Cgp2b2lkCmpzX3Byb21pc2VfemVybyhSZXNvbHZlRnVuY3Rpb25zKiBmdW5jcykgewogIGpzX3Jlc29sdmVfZnVuY3Rpb25zX3plcm8oZnVuY3MpOwp9CgpCT09MCmpzX3Byb21pc2VfcGVuZGluZyhSZXNvbHZlRnVuY3Rpb25zIGNvbnN0KiBmdW5jcykgewogIHJldHVybiAhanNfcmVzb2x2ZV9mdW5jdGlvbnNfaXNfbnVsbChmdW5jcyk7Cn0KCkJPT0wKanNfcHJvbWlzZV9kb25lKFJlc29sdmVGdW5jdGlvbnMgY29uc3QqIGZ1bmNzKSB7CiAgcmV0dXJuIGpzX3Jlc29sdmVfZnVuY3Rpb25zX2lzX251bGwoZnVuY3MpOwp9CgpKU1ZhbHVlCmpzX3Byb21pc2VfdGhlbihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHByb21pc2UsIEpTVmFsdWVDb25zdCBoYW5kbGVyKSB7CiAgcmV0dXJuIGpzX2ludm9rZShjdHgsIHByb21pc2UsICJ0aGVuIiwgMSwgJmhhbmRsZXIpOwp9CgpKU1ZhbHVlCmpzX3Byb21pc2VfY2F0Y2goSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBwcm9taXNlLCBKU1ZhbHVlQ29uc3QgaGFuZGxlcikgewogIHJldHVybiBqc19pbnZva2UoY3R4LCBwcm9taXNlLCAiY2F0Y2giLCAxLCAmaGFuZGxlcik7Cn0KCkJPT0wKanNfaXNfcHJvbWlzZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgSlNWYWx1ZSBjdG9yOwogIEJPT0wgcmV0OwoKICBjdG9yID0ganNfZ2xvYmFsX2dldChjdHgsICJQcm9taXNlIik7CiAgcmV0ID0gSlNfSXNJbnN0YW5jZU9mKGN0eCwgdmFsdWUsIGN0b3IpOwoKICBKU19GcmVlVmFsdWUoY3R4LCBjdG9yKTsKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX2Vycm9yX25ldyhKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogZm10LCAuLi4pIHsKICB2YV9saXN0IGFyZ3M7CiAgSlNWYWx1ZSBlcnIgPSBKU19OZXdFcnJvcihjdHgpOwogIGNoYXIgYnVmWzEwMjRdOwoKICB2YV9zdGFydChhcmdzLCBmbXQpOwogIHZzbnByaW50ZihidWYsIHNpemVvZihidWYpLCBmbXQsIGFyZ3MpOwogIHZhX2VuZChhcmdzKTsKCiAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBlcnIsICJtZXNzYWdlIiwgSlNfTmV3U3RyaW5nKGN0eCwgYnVmKSk7CiAgcmV0dXJuIGVycjsKfQoKdm9pZApqc19lcnJvcl9wcmludChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGVycm9yKSB7CiAgY29uc3QgY2hhciAqc3RyID0gMCwgKnN0YWNrID0gMDsKCiAgaWYoSlNfSXNPYmplY3QoZXJyb3IpKSB7CiAgICBKU1ZhbHVlIHN0ID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBlcnJvciwgInN0YWNrIik7CgogICAgaWYoIUpTX0lzVW5kZWZpbmVkKHN0KSkKICAgICAgc3RhY2sgPSBKU19Ub0NTdHJpbmcoY3R4LCBzdCk7CgogICAgSlNfRnJlZVZhbHVlKGN0eCwgc3QpOwogIH0KCiAgLy8gbHdzbF9lcnIoIlRvcGxldmVsIGVycm9yOiIpOwoKICBpZighSlNfSXNOdWxsKGVycm9yKSAmJiAoc3RyID0gSlNfVG9DU3RyaW5nKGN0eCwgZXJyb3IpKSkgewogICAgY29uc3QgY2hhciogdHlwZSA9IGpzX29iamVjdF9jbGFzc25hbWUoY3R4LCBlcnJvcik7CiAgICBjb25zdCBjaGFyKiBleGNlcHRpb24gPSBzdHI7CiAgICBzaXplX3QgdHlwZWxlbiA9IHN0cmxlbih0eXBlKTsKCiAgICBpZighc3RybmNtcChleGNlcHRpb24sIHR5cGUsIHR5cGVsZW4pICYmIGV4Y2VwdGlvblt0eXBlbGVuXSA9PSAnOicpIHsKICAgICAgZXhjZXB0aW9uICs9IHR5cGVsZW4gKyAyOwogICAgfQogICAgbHdzbF9lcnIoIkV4Y2VwdGlvbiAlczogJXMiLCB0eXBlLCBleGNlcHRpb24pOwogIH0KICBpZihzdGFjaykgewogICAgc2l6ZV90IHBvcyA9IDAsIGkgPSAwLCBsZW4sIGVuZCA9IHN0cmxlbihzdGFjayk7CiAgICBsd3NsX2VycigiU3RhY2s6Iik7CgogICAgd2hpbGUoaSA8IGVuZCkgewogICAgICBsZW4gPSBieXRlX2NocnMoJnN0YWNrW2ldLCBlbmQgLSBpLCAiXHJcbiIsIDIpOwoKICAgICAgbHdzbF9lcnIoIiV6dTogJS4qcyIsIHBvcysrLCAoaW50KWxlbiwgJnN0YWNrW2ldKTsKICAgICAgaSArPSBsZW47CgogICAgICBpICs9IHNjYW5fY2hhcnNldG5za2lwKCZzdGFja1tpXSwgIlxyXG4iLCBlbmQgLSBpKTsKICAgIH0KICB9CiAgaWYoc3RhY2spCiAgICBKU19GcmVlQ1N0cmluZyhjdHgsIHN0YWNrKTsKICBpZihzdHIpCiAgICBKU19GcmVlQ1N0cmluZyhjdHgsIHN0cik7Cn0KCnVpbnQ4X3QqCmpzX3RvcHRyc2l6ZShKU0NvbnRleHQqIGN0eCwgdW5zaWduZWQgaW50KiBwbGVuLCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBzaXplX3QgbiA9IDA7CiAgdm9pZCAqcmV0ID0gMCwgKnB0cjsKICBpZigocHRyID0gSlNfR2V0QXJyYXlCdWZmZXIoY3R4LCAmbiwgdmFsdWUpKSkgewogICAgaWYoKHJldCA9IGpzX21hbGxvYyhjdHgsIG4pKSkKICAgICAgbWVtY3B5KHJldCwgcHRyLCBuKTsKICB9CiAgcmV0dXJuIHJldDsKfQoKQk9PTApqc19nZXRfcHJvcGVydHlzdHJfYm9vbChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaiwgY29uc3QgY2hhciogc3RyKSB7CiAgQk9PTCByZXQgPSBGQUxTRTsKICBKU1ZhbHVlIHZhbHVlOwogIHZhbHVlID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBvYmosIHN0cik7CiAgaWYoIUpTX0lzRXhjZXB0aW9uKHZhbHVlKSkKICAgIHJldCA9IEpTX1RvQm9vbChjdHgsIHZhbHVlKTsKCiAgSlNfRnJlZVZhbHVlKGN0eCwgdmFsdWUpOwogIHJldHVybiByZXQ7Cn0KCmludDY0X3QKanNfZ2V0X3Byb3BlcnR5c3RyX2ludDY0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCBjb25zdCBjaGFyKiBzdHIpIHsKICBpbnQ2NF90IHJldCA9IDA7CiAgSlNWYWx1ZSB2YWx1ZTsKICB2YWx1ZSA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgb2JqLCBzdHIpOwogIEpTX1RvSW50NjQoY3R4LCAmcmV0LCB2YWx1ZSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgdmFsdWUpOwogIHJldHVybiByZXQ7Cn0KCnVpbnQzMl90CmpzX2dldF9wcm9wZXJ0eXN0cl91aW50MzIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIGNvbnN0IGNoYXIqIHN0cikgewogIHVpbnQzMl90IHJldCA9IDA7CiAgSlNWYWx1ZSB2YWx1ZTsKICB2YWx1ZSA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgb2JqLCBzdHIpOwogIEpTX1RvVWludDMyKGN0eCwgJnJldCwgdmFsdWUpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHZhbHVlKTsKICByZXR1cm4gcmV0Owp9CgpCT09MCmpzX2hhc19wcm9wZXJ0eXN0cihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaiwgY29uc3QgY2hhciogc3RyKSB7CiAgSlNBdG9tIHByb3AgPSBKU19OZXdBdG9tKGN0eCwgc3RyKTsKICBCT09MIHJldCA9IEpTX0hhc1Byb3BlcnR5KGN0eCwgb2JqLCBwcm9wKTsKICBKU19GcmVlQXRvbShjdHgsIHByb3ApOwogIHJldHVybiByZXQ7Cn0KCnN0cnVjdCBsaXN0X2hlYWQqCmpzX21vZHVsZV9saXN0KEpTQ29udGV4dCogY3R4KSB7CiAgdm9pZCogdG1wX29wYXF1ZTsKICBwdHJkaWZmX3QgbmVlZGxlOwogIHZvaWQqKiBwdHI7CiAgdG1wX29wYXF1ZSA9IEpTX0dldENvbnRleHRPcGFxdWUoY3R4KTsKICBtZW1zZXQoJm5lZWRsZSwgMHhhNSwgc2l6ZW9mKG5lZWRsZSkpOwogIEpTX1NldENvbnRleHRPcGFxdWUoY3R4LCAodm9pZCopbmVlZGxlKTsKCiAgcHRyID0gbWVtbWVtKGN0eCwgMTAyNCwgJm5lZWRsZSwgc2l6ZW9mKG5lZWRsZSkpOwoKICBKU19TZXRDb250ZXh0T3BhcXVlKGN0eCwgdG1wX29wYXF1ZSk7CgogIHJldHVybiAoKHN0cnVjdCBsaXN0X2hlYWQqKShwdHIgLSAyKSkgLSAxOwp9CgpKU01vZHVsZURlZioKanNfbW9kdWxlX2F0KEpTQ29udGV4dCogY3R4LCBpbnQgaSkgewogIHN0cnVjdCBsaXN0X2hlYWQgKmVsID0gMCwgKmxpc3QgPSBqc19tb2R1bGVfbGlzdChjdHgpOwoKICBsaXN0X2Zvcl9lYWNoKGxpc3QsIGVsKSB7CiAgICBKU01vZHVsZURlZiogbW9kdWxlID0gKHZvaWQqKSgoY2hhciopZWwgLSBzaXplb2YoSlNBdG9tKSAqIDIpOwoKICAgIGlmKGktLSA9PSAwKQogICAgICByZXR1cm4gbW9kdWxlOwogIH0KICByZXR1cm4gMDsKfQoKSlNNb2R1bGVEZWYqCmpzX21vZHVsZV9maW5kKEpTQ29udGV4dCogY3R4LCBKU0F0b20gbmFtZSkgewogIHN0cnVjdCBsaXN0X2hlYWQgKmVsLCAqbGlzdCA9IGpzX21vZHVsZV9saXN0KGN0eCk7CgogIGxpc3RfZm9yX2VhY2goZWwsIGxpc3QpIHsKICAgIEpTTW9kdWxlRGVmKiBtb2R1bGUgPSAodm9pZCopKChjaGFyKillbCAtIHNpemVvZihKU0F0b20pICogMik7CgogICAgaWYoKChKU0F0b20qKW1vZHVsZSlbMV0gPT0gbmFtZSkKICAgICAgcmV0dXJuIG1vZHVsZTsKICB9CiAgcmV0dXJuIDA7Cn0KCkpTTW9kdWxlRGVmKgpqc19tb2R1bGVfZmluZF9zKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBuYW1lKSB7CiAgSlNBdG9tIGF0b207CiAgSlNNb2R1bGVEZWYqIG1vZHVsZTsKICBhdG9tID0gSlNfTmV3QXRvbShjdHgsIG5hbWUpOwogIG1vZHVsZSA9IGpzX21vZHVsZV9maW5kKGN0eCwgYXRvbSk7CiAgSlNfRnJlZUF0b20oY3R4LCBhdG9tKTsKICByZXR1cm4gbW9kdWxlOwp9Cgp2b2lkKgpqc19tb2R1bGVfZXhwb3J0X2ZpbmQoSlNNb2R1bGVEZWYqIG1vZHVsZSwgSlNBdG9tIG5hbWUpIHsKICB2b2lkKiBleHBvcnRfZW50cmllcyA9ICoodm9pZCoqKSgoY2hhciopbW9kdWxlICsgc2l6ZW9mKGludCkgKiAyICsgc2l6ZW9mKHN0cnVjdCBsaXN0X2hlYWQpICsgc2l6ZW9mKHZvaWQqKSArIHNpemVvZihpbnQpICogMik7CiAgaW50IGksIGV4cG9ydF9lbnRyaWVzX2NvdW50ID0gKihpbnQqKSgoY2hhciopbW9kdWxlICsgc2l6ZW9mKGludCkgKiAyICsgc2l6ZW9mKHN0cnVjdCBsaXN0X2hlYWQpICsgc2l6ZW9mKHZvaWQqKSArIHNpemVvZihpbnQpICogMiArIHNpemVvZih2b2lkKikpOwogIHN0YXRpYyBjb25zdCBzaXplX3QgZXhwb3J0X2VudHJ5X3NpemUgPSBzaXplb2Yodm9pZCopICogMiArIHNpemVvZihpbnQpICogMjsKCiAgZm9yKGkgPSAwOyBpIDwgZXhwb3J0X2VudHJpZXNfY291bnQ7IGkrKykgewogICAgdm9pZCogZW50cnkgPSAoY2hhciopZXhwb3J0X2VudHJpZXMgKyBleHBvcnRfZW50cnlfc2l6ZSAqIGk7CgogICAgSlNBdG9tKiBleHBvcnRfbmFtZSA9IChKU0F0b20qKShjaGFyKillbnRyeSArIHNpemVvZih2b2lkKikgKiAyICsgc2l6ZW9mKGludCkgKiAyOwoKICAgIGlmKCpleHBvcnRfbmFtZSA9PSBuYW1lKQogICAgICByZXR1cm4gZW50cnk7CiAgfQoKICByZXR1cm4gMDsKfQoKZXh0ZXJuIEpTTW9kdWxlRGVmKiBqc19tb2R1bGVfbG9hZGVyKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBtb2R1bGVfbmFtZSwgdm9pZCogb3BhcXVlKTsKCkpTVmFsdWUKanNfbW9kdWxlX2ltcG9ydF9tZXRhKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBuYW1lKSB7CiAgSlNNb2R1bGVEZWYqIG07CiAgSlNWYWx1ZSByZXQgPSBKU19VTkRFRklORUQ7CgogIGlmKChtID0ganNfbW9kdWxlX2xvYWRlcihjdHgsIG5hbWUsIDApKSkgewogICAgcmV0ID0gSlNfR2V0SW1wb3J0TWV0YShjdHgsIG0pOwogIH0KICByZXR1cm4gcmV0Owp9CgppbnQ2NF90CmpzX2FycmF5X2xlbmd0aChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGFycmF5KSB7CiAgaW50NjRfdCBsZW4gPSAtMTsKICAvKmlmKGpzX2lzX2FycmF5KGN0eCwgYXJyYXkpIHx8IGpzX2lzX3R5cGVkYXJyYXkoYXJyYXkpfHwganNfaXNfYXJyYXlfbGlrZShjdHgsIGFycmF5KSkqLyB7CiAgICBKU1ZhbHVlIGxlbmd0aCA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgYXJyYXksICJsZW5ndGgiKTsKICAgIGlmKEpTX0lzTnVtYmVyKGxlbmd0aCkpCiAgICAgIEpTX1RvSW50NjQoY3R4LCAmbGVuLCBsZW5ndGgpOwogICAgSlNfRnJlZVZhbHVlKGN0eCwgbGVuZ3RoKTsKICB9CiAgcmV0dXJuIGxlbjsKfQoKY2hhcioqCmpzX2FycmF5X3RvX2FyZ3YoSlNDb250ZXh0KiBjdHgsIGludCogYXJnY3AsIEpTVmFsdWVDb25zdCBhcnJheSkgewogIGludCBpLCBsZW4gPSBqc19hcnJheV9sZW5ndGgoY3R4LCBhcnJheSk7CiAgY2hhcioqIHJldCA9IGpzX21hbGxvY3ooY3R4LCBzaXplb2YoY2hhciopICogKGxlbiArIDEpKTsKICBmb3IoaSA9IDA7IGkgPCBsZW47IGkrKykgewogICAgSlNWYWx1ZSBpdGVtID0gSlNfR2V0UHJvcGVydHlVaW50MzIoY3R4LCBhcnJheSwgaSk7CiAgICByZXRbaV0gPSBqc190b3N0cmluZyhjdHgsIGl0ZW0pOwogICAgSlNfRnJlZVZhbHVlKGN0eCwgaXRlbSk7CiAgfQogIGlmKGFyZ2NwKQogICAgKmFyZ2NwID0gbGVuOwogIHJldHVybiByZXQ7Cn0KCmludDY0X3QKanNfYXJyYXlidWZmZXJfbGVuZ3RoKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgYnVmZmVyKSB7CiAgc2l6ZV90IGxlbjsKCiAgaWYoSlNfR2V0QXJyYXlCdWZmZXIoY3R4LCAmbGVuLCBidWZmZXIpKQogICAgcmV0dXJuIGxlbjsKCiAgcmV0dXJuIC0xOwp9CgppbnQKanNfb2Zmc2V0X2xlbmd0aChKU0NvbnRleHQqIGN0eCwgaW50NjRfdCBzaXplLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgT2Zmc2V0TGVuZ3RoKiBvZmZfbGVuX3ApIHsKICBpbnQgcmV0ID0gMDsKICBpbnQ2NF90IG9mZiA9IDAsIGxlbiA9IHNpemU7CgogIGlmKGFyZ2MgPj0gMSAmJiBKU19Jc051bWJlcihhcmd2WzBdKSkKICAgIGlmKCFKU19Ub0ludDY0KGN0eCwgJm9mZiwgYXJndlswXSkpCiAgICAgIHJldCA9IDE7CgogIGlmKGFyZ2MgPj0gMiAmJiBKU19Jc051bWJlcihhcmd2WzFdKSkKICAgIGlmKCFKU19Ub0ludDY0KGN0eCwgJmxlbiwgYXJndlsxXSkpCiAgICAgIHJldCA9IDI7CgogIGlmKHNpemUpCiAgICBvZmYgPSAoKG9mZiAlIHNpemUpICsgc2l6ZSkgJSBzaXplOwoKICBpZihsZW4gPj0gMCkKICAgIGxlbiA9IE1JTihsZW4sIHNpemUgLSBvZmYpOwogIGVsc2UKICAgIGxlbiA9IHNpemUgLSBvZmY7CgogIGlmKG9mZl9sZW5fcCkgewogICAgb2ZmX2xlbl9wLT5vZmZzZXQgPSBvZmY7CiAgICBvZmZfbGVuX3AtPmxlbmd0aCA9IGxlbjsKICB9CiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQpqc19hcmd2X3RvX2FycmF5KEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBjb25zdCogYXJndikgewogIEpTVmFsdWUgcmV0ID0gSlNfTmV3QXJyYXkoY3R4KTsKICBpZihhcmd2KSB7CiAgICBzaXplX3QgaTsKICAgIGZvcihpID0gMDsgYXJndltpXTsgaSsrKSBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIHJldCwgaSwgSlNfTmV3U3RyaW5nKGN0eCwgYXJndltpXSkpOwogIH0KICByZXR1cm4gcmV0Owp9CgpCT09MCmpzX2F0b21faXNfaW5kZXgoSlNDb250ZXh0KiBjdHgsIGludDY0X3QqIHB2YWwsIEpTQXRvbSBhdG9tKSB7CiAgSlNWYWx1ZSB2YWx1ZTsKICBCT09MIHJldCA9IEZBTFNFOwogIGludDY0X3QgaW5kZXg7CgogIGlmKGF0b20gJiAoMVUgPDwgMzEpKSB7CiAgICBpZihwdmFsKQogICAgICAqcHZhbCA9IGF0b20gJiAofigxVSA8PCAzMSkpOwogICAgcmV0dXJuIFRSVUU7CiAgfQoKICB2YWx1ZSA9IEpTX0F0b21Ub1ZhbHVlKGN0eCwgYXRvbSk7CgogIGlmKEpTX0lzTnVtYmVyKHZhbHVlKSkgewogICAgSlNfVG9JbnQ2NChjdHgsICZpbmRleCwgdmFsdWUpOwogICAgcmV0ID0gVFJVRTsKICB9IGVsc2UgaWYoSlNfSXNTdHJpbmcodmFsdWUpKSB7CiAgICBjb25zdCBjaGFyKiBzID0gSlNfVG9DU3RyaW5nKGN0eCwgdmFsdWUpOwogICAgaWYoc1swXSA9PSAnLScgJiYgaXNkaWdpdChzW3NbMF0gPT0gJy0nXSkpIHsKICAgICAgaW5kZXggPSBhdG9pKHMpOwogICAgICByZXQgPSBUUlVFOwogICAgfQogICAgSlNfRnJlZUNTdHJpbmcoY3R4LCBzKTsKICB9CgogIGlmKHJldCA9PSBUUlVFKQogICAgaWYocHZhbCkKICAgICAgKnB2YWwgPSBpbmRleDsKCiAgcmV0dXJuIHJldDsKfQoKQk9PTApqc19hdG9tX2NvbXBhcmVfc3RyaW5nKEpTQ29udGV4dCogY3R4LCBKU0F0b20gYXRvbSwgY29uc3QgY2hhciogb3RoZXIpIHsKICBjb25zdCBjaGFyKiBzdHIgPSBKU19BdG9tVG9DU3RyaW5nKGN0eCwgYXRvbSk7CiAgQk9PTCByZXQgPSAhc3RyY21wKHN0ciwgb3RoZXIpOwogIEpTX0ZyZWVDU3RyaW5nKGN0eCwgc3RyKTsKICByZXR1cm4gcmV0Owp9CgpCT09MCmpzX2F0b21faXNfbGVuZ3RoKEpTQ29udGV4dCogY3R4LCBKU0F0b20gYXRvbSkgewogIHJldHVybiBqc19hdG9tX2NvbXBhcmVfc3RyaW5nKGN0eCwgYXRvbSwgImxlbmd0aCIpOwp9CgpCT09MCmpzX2F0b21faXNfc3ltYm9sKEpTQ29udGV4dCogY3R4LCBKU0F0b20gYXRvbSkgewogIEpTVmFsdWUgdmFsdWU7CiAgQk9PTCByZXQ7CiAgdmFsdWUgPSBKU19BdG9tVG9WYWx1ZShjdHgsIGF0b20pOwogIHJldCA9IEpTX0lzU3ltYm9sKHZhbHVlKTsKICBKU19GcmVlVmFsdWUoY3R4LCB2YWx1ZSk7CiAgcmV0dXJuIHJldDsKfQoKQk9PTApqc19hdG9tX2lzX3N0cmluZyhKU0NvbnRleHQqIGN0eCwgSlNBdG9tIGF0b20pIHsKICBKU1ZhbHVlIHZhbHVlOwogIEJPT0wgcmV0OwogIHZhbHVlID0gSlNfQXRvbVRvVmFsdWUoY3R4LCBhdG9tKTsKICByZXQgPSBKU19Jc1N0cmluZyh2YWx1ZSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgdmFsdWUpOwogIHJldHVybiByZXQ7Cn0KCkpTQnVmZmVyCmpzX2lucHV0X2J1ZmZlcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgSlNCdWZmZXIgcmV0ID0gezAsIDAsIDAsICZqc19idWZmZXJfZnJlZV9kZWZhdWx0LCBKU19VTkRFRklORUQsIHswLCAwfX07CiAgaW50NjRfdCBvZmZzZXQgPSAwLCBsZW5ndGggPSBJTlQ2NF9NQVg7CgogIG9sX2luaXQoJnJldC5yYW5nZSk7CgogIGlmKGpzX2lzX3R5cGVkYXJyYXkoY3R4LCB2YWx1ZSkgfHwganNfaXNfZGF0YXZpZXcoY3R4LCB2YWx1ZSkpIHsKICAgIEpTVmFsdWUgYXJyYXlidWYsIGJ5dGVvZmZzLCBieXRlbGVuOwogICAgYXJyYXlidWYgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIHZhbHVlLCAiYnVmZmVyIik7CiAgICBieXRlbGVuID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCB2YWx1ZSwgImJ5dGVMZW5ndGgiKTsKICAgIGlmKEpTX0lzTnVtYmVyKGJ5dGVsZW4pKQogICAgICBKU19Ub0ludDY0KGN0eCwgJmxlbmd0aCwgYnl0ZWxlbik7CiAgICBKU19GcmVlVmFsdWUoY3R4LCBieXRlbGVuKTsKICAgIGJ5dGVvZmZzID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCB2YWx1ZSwgImJ5dGVPZmZzZXQiKTsKICAgIGlmKEpTX0lzTnVtYmVyKGJ5dGVvZmZzKSkKICAgICAgSlNfVG9JbnQ2NChjdHgsICZvZmZzZXQsIGJ5dGVvZmZzKTsKICAgIEpTX0ZyZWVWYWx1ZShjdHgsIGJ5dGVvZmZzKTsKICAgIHZhbHVlID0gYXJyYXlidWY7CiAgfQoKICBpZihqc19pc19hcnJheWJ1ZmZlcihjdHgsIHZhbHVlKSkgewogICAgcmV0LnZhbHVlID0gSlNfRHVwVmFsdWUoY3R4LCB2YWx1ZSk7CiAgICByZXQuZGF0YSA9IEpTX0dldEFycmF5QnVmZmVyKGN0eCwgJnJldC5zaXplLCByZXQudmFsdWUpOwogIH0gZWxzZSB7CiAgICByZXQudmFsdWUgPSBKU19FWENFUFRJT047CiAgICAvLyBKU19UaHJvd1R5cGVFcnJvcihjdHgsICJJbnZhbGlkIHR5cGUgZm9yIGlucHV0IGJ1ZmZlciIpOwogIH0KCiAgaWYob2Zmc2V0IDwgMCkKICAgIHJldC5yYW5nZS5vZmZzZXQgPSByZXQuc2l6ZSArIG9mZnNldCAlIHJldC5zaXplOwogIGVsc2UgaWYoKHNpemVfdClvZmZzZXQgPiByZXQuc2l6ZSkKICAgIHJldC5yYW5nZS5vZmZzZXQgPSByZXQuc2l6ZTsKICBlbHNlCiAgICByZXQucmFuZ2Uub2Zmc2V0ID0gb2Zmc2V0OwoKICBpZihsZW5ndGggPj0gMCAmJiAoc2l6ZV90KWxlbmd0aCA8IHJldC5zaXplKQogICAgcmV0LnJhbmdlLmxlbmd0aCA9IGxlbmd0aDsKCiAgcmV0dXJuIHJldDsKfQoKI3VuZGVmIGZyZWUKCkpTQnVmZmVyCmpzX2lucHV0X2NoYXJzKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBKU0J1ZmZlciByZXQgPSBKU19CVUZGRVJfREVGQVVMVCgpOwogIC8vIGludDY0X3Qgb2Zmc2V0ID0gMCwgbGVuZ3RoID0gSU5UNjRfTUFYOwoKICBvbF9pbml0KCZyZXQucmFuZ2UpOwoKICBpZihKU19Jc1N0cmluZyh2YWx1ZSkpIHsKICAgIHJldC5kYXRhID0gKHVpbnQ4X3QqKUpTX1RvQ1N0cmluZ0xlbihjdHgsICZyZXQuc2l6ZSwgdmFsdWUpOwogICAgcmV0LnZhbHVlID0gSlNfRHVwVmFsdWUoY3R4LCB2YWx1ZSk7CiAgICByZXQuZnJlZSA9ICZqc19idWZmZXJfZnJlZV9kZWZhdWx0OwogIH0gZWxzZSB7CiAgICByZXQgPSBqc19pbnB1dF9idWZmZXIoY3R4LCB2YWx1ZSk7CiAgfQoKICByZXR1cm4gcmV0Owp9CgpKU0J1ZmZlcgpqc19pbnB1dF9hcmdzKEpTQ29udGV4dCogY3R4LCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSkgewogIEpTQnVmZmVyIGlucHV0ID0ganNfaW5wdXRfY2hhcnMoY3R4LCBhcmd2WzBdKTsKCiAgaWYoYXJnYyA+IDEpCiAgICBqc19vZmZzZXRfbGVuZ3RoKGN0eCwgaW5wdXQuc2l6ZSwgYXJnYyAtIDEsIGFyZ3YgKyAxLCAmaW5wdXQucmFuZ2UpOwoKICByZXR1cm4gaW5wdXQ7Cn0KCmludApqc19idWZmZXJfZnJvbWFyZ3MoSlNDb250ZXh0KiBjdHgsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdLCBKU0J1ZmZlciogYnVmKSB7CiAgaW50IHJldCA9IDA7CiAgKmJ1ZiA9IGpzX2lucHV0X2NoYXJzKGN0eCwgYXJndlswXSk7CgogIGlmKGJ1Zi0+c2l6ZSkgewogICAgKytyZXQ7CgogICAgaWYoYXJnYyA+IDEpCiAgICAgIHJldCArPSBqc19vZmZzZXRfbGVuZ3RoKGN0eCwgYnVmLT5zaXplLCBhcmdjIC0gMSwgYXJndiArIDEsICZidWYtPnJhbmdlKTsKICB9CgogIHJldHVybiByZXQ7Cn0KCkJPT0wKanNfaXNfYXJyYXlidWZmZXIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIGlmKEpTX0lzT2JqZWN0KHZhbHVlKSkgewogICAgc2l6ZV90IGxlbjsKICAgIHJldHVybiBKU19HZXRBcnJheUJ1ZmZlcihjdHgsICZsZW4sIHZhbHVlKSAhPSBOVUxMOwogIH0KICByZXR1cm4gRkFMU0U7Cn0KCkJPT0wKanNfaXNfZGF0YXZpZXcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIGlmKEpTX0lzT2JqZWN0KHZhbHVlKSkgewogICAgSlNBdG9tIGF0b21zW10gPSB7CiAgICAgICAgSlNfTmV3QXRvbShjdHgsICJieXRlTGVuZ3RoIiksCiAgICAgICAgSlNfTmV3QXRvbShjdHgsICJieXRlT2Zmc2V0IiksCiAgICAgICAgSlNfTmV3QXRvbShjdHgsICJidWZmZXIiKSwKICAgIH07CiAgICB1bnNpZ25lZCBpOwogICAgQk9PTCByZXQgPSBUUlVFOwoKICAgIGZvcihpID0gMDsgaSA8IGNvdW50b2YoYXRvbXMpOyBpKyspIHsKICAgICAgaWYoIUpTX0hhc1Byb3BlcnR5KGN0eCwgdmFsdWUsIGF0b21zW2ldKSkgewogICAgICAgIHJldCA9IEZBTFNFOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHJldDsKICB9CiAgcmV0dXJuIEZBTFNFOwp9CgpCT09MCmpzX2lzX3R5cGVkYXJyYXkoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIHJldHVybiBqc19pc19kYXRhdmlldyhjdHgsIHZhbHVlKSAmJiBqc19oYXNfcHJvcGVydHlzdHIoY3R4LCB2YWx1ZSwgIkJZVEVTX1BFUl9FTEVNRU5UIik7Cn0KCkJPT0wKanNfaXNfZ2VuZXJhdG9yKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBjb25zdCBjaGFyKiBzdHI7CiAgQk9PTCByZXQgPSBGQUxTRTsKCiAgaWYoKHN0ciA9IEpTX1RvQ1N0cmluZyhjdHgsIHZhbHVlKSkpIHsKICAgIGNvbnN0IGNoYXIqIHMgPSBzdHI7CgogICAgaWYoIXN0cm5jbXAocywgImFzeW5jICIsIDYpKQogICAgICBzICs9IDY7CgogICAgaWYoIXN0cm5jbXAocywgImZ1bmN0aW9uIiwgOCkpIHsKICAgICAgcyArPSA4OwoKICAgICAgd2hpbGUoKnMgPT0gJyAnKSArK3M7CgogICAgICBpZigqcyA9PSAnKicpCiAgICAgICAgcmV0ID0gVFJVRTsKICAgIH0KCiAgICBKU19GcmVlQ1N0cmluZyhjdHgsIHN0cik7CiAgfQogIHJldHVybiByZXQ7Cn0KCkJPT0wKanNfaXNfYXN5bmMoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIGNvbnN0IGNoYXIqIHN0cjsKICBCT09MIHJldCA9IEZBTFNFOwogIGlmKChzdHIgPSBKU19Ub0NTdHJpbmcoY3R4LCB2YWx1ZSkpKSB7CiAgICBjb25zdCBjaGFyKiBzID0gc3RyOwoKICAgIGlmKCFzdHJuY21wKHMsICJhc3luYyAiLCA2KSkKICAgICAgcmV0ID0gVFJVRTsKCiAgICBlbHNlIGlmKCFzdHJuY21wKHMsICJbb2JqZWN0IEFzeW5jIiwgMTMpKQogICAgICByZXQgPSBUUlVFOwoKICAgIEpTX0ZyZWVDU3RyaW5nKGN0eCwgc3RyKTsKICB9CiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQpqc190eXBlZGFycmF5X2NvbnN0cnVjdG9yKEpTQ29udGV4dCogY3R4LCBpbnQgYml0cywgQk9PTCBmbG9hdGluZywgQk9PTCBzaWduKSB7CiAgY2hhciBjbGFzc19uYW1lWzY0XTsKCiAgc3ByaW50ZihjbGFzc19uYW1lLCAiJXMlcyVkQXJyYXkiLCAoIWZsb2F0aW5nICYmIGJpdHMgPj0gNjQpID8gIkJpZyIgOiAiIiwgZmxvYXRpbmcgPyAiRmxvYXQiIDogc2lnbiA/ICJJbnQiIDogIlVpbnQiLCBiaXRzKTsKCiAgcmV0dXJuIGpzX2dsb2JhbF9nZXQoY3R4LCBjbGFzc19uYW1lKTsKfQoKSlNWYWx1ZQpqc190eXBlZGFycmF5X25ldyhKU0NvbnRleHQqIGN0eCwgaW50IGJpdHMsIEJPT0wgZmxvYXRpbmcsIEJPT0wgc2lnbiwgSlNWYWx1ZUNvbnN0IGJ1ZmZlciwgdWludDMyX3QgYnl0ZV9vZmZzZXQsIHVpbnQzMl90IGxlbmd0aCkgewogIEpTVmFsdWUgY3RvciA9IGpzX3R5cGVkYXJyYXlfY29uc3RydWN0b3IoY3R4LCBiaXRzLCBmbG9hdGluZywgc2lnbik7CiAgSlNWYWx1ZSBhcmdzW10gPSB7CiAgICAgIGJ1ZmZlciwKICAgICAgSlNfTmV3VWludDMyKGN0eCwgYnl0ZV9vZmZzZXQpLAogICAgICBKU19OZXdVaW50MzIoY3R4LCBsZW5ndGgpLAogIH07CiAgSlNWYWx1ZSByZXQgPSBKU19DYWxsQ29uc3RydWN0b3IoY3R4LCBjdG9yLCBjb3VudG9mKGFyZ3MpLCBhcmdzKTsKICBKU19GcmVlVmFsdWUoY3R4LCBhcmdzWzFdKTsKICBKU19GcmVlVmFsdWUoY3R4LCBhcmdzWzJdKTsKICBKU19GcmVlVmFsdWUoY3R4LCBjdG9yKTsKICByZXR1cm4gcmV0Owp9Cgp0eXBlZGVmIHN0cnVjdCB7CiAgQ0Nsb3N1cmVGdW5jKiBmdW5jOwogIHVpbnQxNl90IGxlbmd0aDsKICB1aW50MTZfdCBtYWdpYzsKICB2b2lkKiBvcGFxdWU7CiAgdm9pZCAoKm9wYXF1ZV9maW5hbGl6ZSkodm9pZCopOwp9IEpTQ0Nsb3N1cmVSZWNvcmQ7CgpzdGF0aWMgVEhSRUFEX0xPQ0FMIEpTQ2xhc3NJRCBqc19jY2xvc3VyZV9jbGFzc19pZDsKCnN0YXRpYyBpbmxpbmUgSlNDQ2xvc3VyZVJlY29yZCoKanNfY2Nsb3N1cmVfZGF0YShKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfR2V0T3BhcXVlKHZhbHVlLCBqc19jY2xvc3VyZV9jbGFzc19pZCk7Cn0KCnN0YXRpYyBpbmxpbmUgSlNDQ2xvc3VyZVJlY29yZCoKanNfY2Nsb3N1cmVfZGF0YTIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIHJldHVybiBKU19HZXRPcGFxdWUyKGN0eCwgdmFsdWUsIGpzX2NjbG9zdXJlX2NsYXNzX2lkKTsKfQoKc3RhdGljIEpTVmFsdWUKanNfY2Nsb3N1cmVfY2FsbChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGZ1bmNfb2JqLCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdLCBpbnQgZmxhZ3MpIHsKICBKU0NDbG9zdXJlUmVjb3JkKiBjY3I7CgogIGlmKCEoY2NyID0ganNfY2Nsb3N1cmVfZGF0YTIoY3R4LCBmdW5jX29iaikpKQogICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKCiAgSlNWYWx1ZUNvbnN0KiBhcmdfYnVmOwogIGludCBpOwoKICAvKiBYWFg6IGNvdWxkIGFkZCB0aGUgZnVuY3Rpb24gb24gdGhlIHN0YWNrIGZvciBkZWJ1ZyAqLwogIGlmKHVubGlrZWx5KGFyZ2MgPCBjY3ItPmxlbmd0aCkpIHsKICAgIGFyZ19idWYgPSBhbGxvY2Eoc2l6ZW9mKGFyZ19idWZbMF0pICogY2NyLT5sZW5ndGgpOwogICAgZm9yKGkgPSAwOyBpIDwgYXJnYzsgaSsrKSBhcmdfYnVmW2ldID0gYXJndltpXTsKICAgIGZvcihpID0gYXJnYzsgaSA8IGNjci0+bGVuZ3RoOyBpKyspIGFyZ19idWZbaV0gPSBKU19VTkRFRklORUQ7CiAgfSBlbHNlIHsKICAgIGFyZ19idWYgPSBhcmd2OwogIH0KCiAgcmV0dXJuIGNjci0+ZnVuYyhjdHgsIHRoaXNfdmFsLCBhcmdjLCBhcmdfYnVmLCBjY3ItPm1hZ2ljLCBjY3ItPm9wYXF1ZSk7Cn0KCnN0YXRpYyB2b2lkCmpzX2NjbG9zdXJlX2ZpbmFsaXplcihKU1J1bnRpbWUqIHJ0LCBKU1ZhbHVlIHZhbCkgewogIEpTQ0Nsb3N1cmVSZWNvcmQqIGNjcjsKCiAgaWYoKGNjciA9IGpzX2NjbG9zdXJlX2RhdGEodmFsKSkpIHsKCiAgICBpZihjY3ItPm9wYXF1ZV9maW5hbGl6ZSkKICAgICAgY2NyLT5vcGFxdWVfZmluYWxpemUoY2NyLT5vcGFxdWUpOwoKICAgIGpzX2ZyZWVfcnQocnQsIGNjcik7CiAgfQp9CgpzdGF0aWMgSlNDbGFzc0RlZiBqc19jY2xvc3VyZV9jbGFzcyA9IHsKICAgIC5jbGFzc19uYW1lID0gIkpTQ0Nsb3N1cmUiLAogICAgLmZpbmFsaXplciA9IGpzX2NjbG9zdXJlX2ZpbmFsaXplciwKICAgIC5jYWxsID0ganNfY2Nsb3N1cmVfY2FsbCwKfTsKCkpTVmFsdWUKanNfZnVuY3Rpb25fY2Nsb3N1cmUoSlNDb250ZXh0KiBjdHgsIENDbG9zdXJlRnVuYyogZnVuYywgaW50IGxlbmd0aCwgaW50IG1hZ2ljLCB2b2lkKiBvcGFxdWUsIHZvaWQgKCpvcGFxdWVfZmluYWxpemUpKHZvaWQqKSkgewogIEpTQ0Nsb3N1cmVSZWNvcmQqIGNjcjsKICBKU1ZhbHVlIGZ1bmNfcHJvdG8sIGZ1bmNfb2JqOwoKICBpZihqc19jY2xvc3VyZV9jbGFzc19pZCA9PSAwKSB7CiAgICBKU19OZXdDbGFzc0lEKCZqc19jY2xvc3VyZV9jbGFzc19pZCk7CiAgICBKU19OZXdDbGFzcyhKU19HZXRSdW50aW1lKGN0eCksIGpzX2NjbG9zdXJlX2NsYXNzX2lkLCAmanNfY2Nsb3N1cmVfY2xhc3MpOwogIH0KCiAgZnVuY19wcm90byA9IGpzX2Z1bmN0aW9uX3Byb3RvdHlwZShjdHgpOwogIGZ1bmNfb2JqID0gSlNfTmV3T2JqZWN0UHJvdG9DbGFzcyhjdHgsIGZ1bmNfcHJvdG8sIGpzX2NjbG9zdXJlX2NsYXNzX2lkKTsKICBKU19GcmVlVmFsdWUoY3R4LCBmdW5jX3Byb3RvKTsKCiAgaWYoSlNfSXNFeGNlcHRpb24oZnVuY19vYmopKQogICAgcmV0dXJuIGZ1bmNfb2JqOwoKICBpZighKGNjciA9IGpzX21hbGxvYyhjdHgsIHNpemVvZihKU0NDbG9zdXJlUmVjb3JkKSkpKSB7CiAgICBKU19GcmVlVmFsdWUoY3R4LCBmdW5jX29iaik7CiAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwogIH0KCiAgY2NyLT5mdW5jID0gZnVuYzsKICBjY3ItPmxlbmd0aCA9IGxlbmd0aDsKICBjY3ItPm1hZ2ljID0gbWFnaWM7CiAgY2NyLT5vcGFxdWUgPSBvcGFxdWU7CiAgY2NyLT5vcGFxdWVfZmluYWxpemUgPSBvcGFxdWVfZmluYWxpemU7CgogIEpTX1NldE9wYXF1ZShmdW5jX29iaiwgY2NyKTsKCiAgSlNfRGVmaW5lUHJvcGVydHlWYWx1ZVN0cihjdHgsIGZ1bmNfb2JqLCAibGVuZ3RoIiwgSlNfTmV3VWludDMyKGN0eCwgbGVuZ3RoKSwgSlNfUFJPUF9DT05GSUdVUkFCTEUpOwoKICByZXR1cm4gZnVuY19vYmo7Cn0KAAAAAAAAAABveAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApnQAAAAAAAC6dAAAAAAAAAAAAAAAAPC/"
				],
				[
					576,
					1,
					"insert",
					{
						"characters": ","
					},
					"AgAAAPVuAAAAAAAA9m4AAAAAAAAAAAAA9m4AAAAAAAD2bgAAAAAAAA0AAAA7CiAgdWludDE2X3Qg",
					"AQAAAAAAAAABAAAA9W4AAAAAAAACbwAAAAAAAAAAAAAAAPC/"
				],
				[
					577,
					1,
					"left_delete",
					null,
					"AQAAAPVuAAAAAAAA9W4AAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAA9m4AAAAAAAD2bgAAAAAAAAAAAAAAAPC/"
				],
				[
					578,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPVuAAAAAAAA9m4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9W4AAAAAAAD1bgAAAAAAAAAAAAAAAPC/"
				],
				[
					579,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPZuAAAAAAAA924AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9m4AAAAAAAD2bgAAAAAAAAAAAAAAAPC/"
				],
				[
					580,
					1,
					"left_delete",
					null,
					"AQAAAPZuAAAAAAAA9m4AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA924AAAAAAAD3bgAAAAAAAAAAAAAAAPC/"
				],
				[
					591,
					1,
					"left_delete",
					null,
					"AQAAAJ1zAAAAAAAAnXMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAnnMAAAAAAACecwAAAAAAAAAAAAAAAPC/"
				],
				[
					615,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAOd3AAAAAAAA6HcAAAAAAAAAAAAA6HcAAAAAAADpdwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA53cAAAAAAADndwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/home/roman/Projects/plot-cv/quickjs/quickjs.h",
			"settings":
			{
				"buffer_size": 40236,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "src/minnet-server.c",
			"settings":
			{
				"buffer_size": 18477,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"",
					null,
					"AwAAAMo9AAAAAAAA2j0AAAAAAAAPAAAASlNfTmV3Q0Nsb3N1cmUoXD0AAAAAAABsPQAAAAAAAA8AAABKU19OZXdDQ2xvc3VyZSiENAAAAAAAAJQ0AAAAAAAADwAAAEpTX05ld0NDbG9zdXJlKA",
					"AQAAAAAAAAABAAAAQTEAAAAAAABBMQAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAQTEAAAAAAABBMQAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAQTEAAAAAAABBMQAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAQTEAAAAAAABBMQAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAQTEAAAAAAABBMQAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAQTEAAAAAAABBMQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "tests/common.js",
			"settings":
			{
				"buffer_size": 1697,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					13,
					1,
					"insert",
					{
						"characters": "\n\nexport"
					},
					"CAAAABQFAAAAAAAAFQUAAAAAAAAAAAAAFQUAAAAAAAAWBQAAAAAAAAAAAAAWBQAAAAAAABcFAAAAAAAAAAAAABcFAAAAAAAAGAUAAAAAAAAAAAAAGAUAAAAAAAAZBQAAAAAAAAAAAAAZBQAAAAAAABoFAAAAAAAAAAAAABoFAAAAAAAAGwUAAAAAAAAAAAAAGwUAAAAAAAAcBQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAUBQAAAAAAABQFAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " awsync"
					},
					"BwAAABwFAAAAAAAAHQUAAAAAAAAAAAAAHQUAAAAAAAAeBQAAAAAAAAAAAAAeBQAAAAAAAB8FAAAAAAAAAAAAAB8FAAAAAAAAIAUAAAAAAAAAAAAAIAUAAAAAAAAhBQAAAAAAAAAAAAAhBQAAAAAAACIFAAAAAAAAAAAAACIFAAAAAAAAIwUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcBQAAAAAAABwFAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					5,
					"left_delete",
					null,
					"BQAAACIFAAAAAAAAIgUAAAAAAAABAAAAYyEFAAAAAAAAIQUAAAAAAAABAAAAbiAFAAAAAAAAIAUAAAAAAAABAAAAeR8FAAAAAAAAHwUAAAAAAAABAAAAcx4FAAAAAAAAHgUAAAAAAAABAAAAdw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjBQAAAAAAACMFAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "sync"
					},
					"BAAAAB4FAAAAAAAAHwUAAAAAAAAAAAAAHwUAAAAAAAAgBQAAAAAAAAAAAAAgBQAAAAAAACEFAAAAAAAAAAAAACEFAAAAAAAAIgUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAeBQAAAAAAAB4FAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " function"
					},
					"CQAAACIFAAAAAAAAIwUAAAAAAAAAAAAAIwUAAAAAAAAkBQAAAAAAAAAAAAAkBQAAAAAAACUFAAAAAAAAAAAAACUFAAAAAAAAJgUAAAAAAAAAAAAAJgUAAAAAAAAnBQAAAAAAAAAAAAAnBQAAAAAAACgFAAAAAAAAAAAAACgFAAAAAAAAKQUAAAAAAAAAAAAAKQUAAAAAAAAqBQAAAAAAAAAAAAAqBQAAAAAAACsFAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiBQAAAAAAACIFAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " save"
					},
					"BQAAACsFAAAAAAAALAUAAAAAAAAAAAAALAUAAAAAAAAtBQAAAAAAAAAAAAAtBQAAAAAAAC4FAAAAAAAAAAAAAC4FAAAAAAAALwUAAAAAAAAAAAAALwUAAAAAAAAwBQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAArBQAAAAAAACsFAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADAFAAAAAAAAMgUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwBQAAAAAAADAFAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "file"
					},
					"BAAAADEFAAAAAAAAMgUAAAAAAAAAAAAAMgUAAAAAAAAzBQAAAAAAAAAAAAAzBQAAAAAAADQFAAAAAAAAAAAAADQFAAAAAAAANQUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxBQAAAAAAADEFAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					4,
					"left_delete",
					null,
					"BAAAADQFAAAAAAAANAUAAAAAAAABAAAAZTMFAAAAAAAAMwUAAAAAAAABAAAAbDIFAAAAAAAAMgUAAAAAAAABAAAAaTEFAAAAAAAAMQUAAAAAAAABAAAAZg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1BQAAAAAAADUFAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "generator,"
					},
					"CgAAADEFAAAAAAAAMgUAAAAAAAAAAAAAMgUAAAAAAAAzBQAAAAAAAAAAAAAzBQAAAAAAADQFAAAAAAAAAAAAADQFAAAAAAAANQUAAAAAAAAAAAAANQUAAAAAAAA2BQAAAAAAAAAAAAA2BQAAAAAAADcFAAAAAAAAAAAAADcFAAAAAAAAOAUAAAAAAAAAAAAAOAUAAAAAAAA5BQAAAAAAAAAAAAA5BQAAAAAAADoFAAAAAAAAAAAAADoFAAAAAAAAOwUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxBQAAAAAAADEFAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " file"
					},
					"BQAAADsFAAAAAAAAPAUAAAAAAAAAAAAAPAUAAAAAAAA9BQAAAAAAAAAAAAA9BQAAAAAAAD4FAAAAAAAAAAAAAD4FAAAAAAAAPwUAAAAAAAAAAAAAPwUAAAAAAABABQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7BQAAAAAAADsFAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEEFAAAAAAAAQgUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBBQAAAAAAAEEFAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAEIFAAAAAAAARAUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABCBQAAAAAAAEIFAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAEMFAAAAAAAARAUAAAAAAAAAAAAARAUAAAAAAABFBQAAAAAAAAAAAABEBQAAAAAAAEYFAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDBQAAAAAAAEMFAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "for"
					},
					"AwAAAEYFAAAAAAAARwUAAAAAAAAAAAAARwUAAAAAAABIBQAAAAAAAAAAAABIBQAAAAAAAEkFAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGBQAAAAAAAEYFAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " await"
					},
					"BgAAAEkFAAAAAAAASgUAAAAAAAAAAAAASgUAAAAAAABLBQAAAAAAAAAAAABLBQAAAAAAAEwFAAAAAAAAAAAAAEwFAAAAAAAATQUAAAAAAAAAAAAATQUAAAAAAABOBQAAAAAAAAAAAABOBQAAAAAAAE8FAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJBQAAAAAAAEkFAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAE8FAAAAAAAAUQUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABPBQAAAAAAAE8FAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAFAFAAAAAAAAUQUAAAAAAAAAAAAAUQUAAAAAAABSBQAAAAAAAAAAAABSBQAAAAAAAFMFAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQBQAAAAAAAFAFAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " chunk"
					},
					"BgAAAFMFAAAAAAAAVAUAAAAAAAAAAAAAVAUAAAAAAABVBQAAAAAAAAAAAABVBQAAAAAAAFYFAAAAAAAAAAAAAFYFAAAAAAAAVwUAAAAAAAAAAAAAVwUAAAAAAABYBQAAAAAAAAAAAABYBQAAAAAAAFkFAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABTBQAAAAAAAFMFAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAFkFAAAAAAAAWgUAAAAAAAAAAAAAWgUAAAAAAABbBQAAAAAAAAAAAABbBQAAAAAAAFwFAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABZBQAAAAAAAFkFAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " generator"
					},
					"CgAAAFwFAAAAAAAAXQUAAAAAAAAAAAAAXQUAAAAAAABeBQAAAAAAAAAAAABeBQAAAAAAAF8FAAAAAAAAAAAAAF8FAAAAAAAAYAUAAAAAAAAAAAAAYAUAAAAAAABhBQAAAAAAAAAAAABhBQAAAAAAAGIFAAAAAAAAAAAAAGIFAAAAAAAAYwUAAAAAAAAAAAAAYwUAAAAAAABkBQAAAAAAAAAAAABkBQAAAAAAAGUFAAAAAAAAAAAAAGUFAAAAAAAAZgUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcBQAAAAAAAFwFAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGcFAAAAAAAAaAUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABnBQAAAAAAAGcFAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAGgFAAAAAAAAagUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoBQAAAAAAAGgFAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAGkFAAAAAAAAagUAAAAAAAAAAAAAagUAAAAAAABsBQAAAAAAAAAAAABsBQAAAAAAAG0FAAAAAAAAAAAAAG0FAAAAAAAAbwUAAAAAAAAAAAAAagUAAAAAAABqBQAAAAAAAAIAAAAgIGoFAAAAAAAAbgUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpBQAAAAAAAGkFAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "await"
					},
					"BgAAAF0FAAAAAAAAXgUAAAAAAAAAAAAAawUAAAAAAABrBQAAAAAAAAQAAAAgICAgXgUAAAAAAABfBQAAAAAAAAAAAABfBQAAAAAAAGAFAAAAAAAAAAAAAGAFAAAAAAAAYQUAAAAAAAAAAAAAYQUAAAAAAABiBQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdBQAAAAAAAF0FAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGIFAAAAAAAAYwUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiBQAAAAAAAGIFAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAG8FAAAAAAAAcAUAAAAAAAAAAAAAcAUAAAAAAAByBQAAAAAAAAAAAAByBQAAAAAAAHQFAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABvBQAAAAAAAG8FAAAAAAAA////////738"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAEYFAAAAAAAARwUAAAAAAAAAAAAARwUAAAAAAABJBQAAAAAAAAAAAABzBQAAAAAAAHMFAAAAAAAABAAAACAgICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGBQAAAAAAAEYFAAAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABcAAAAAAAAAGAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXAAAAAAAAABcAAAAAAAAAAAAAAAAA8L8"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABgAAAAAAAAAGQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYAAAAAAAAABgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					59,
					2,
					"left_delete",
					null,
					"AgAAABgAAAAAAAAAGAAAAAAAAAABAAAAIBcAAAAAAAAAFwAAAAAAAAABAAAALA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAZAAAAAAAAABkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					61,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAKAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAAoAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAALAAAAAAAAAAoAAAB4aXQsIHB1dHMs",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKAAAAAAAAABQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					65,
					2,
					"left_delete",
					null,
					"AgAAAAoAAAAAAAAACgAAAAAAAAABAAAAIAkAAAAAAAAACQAAAAAAAAABAAAAZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALAAAAAAAAAAsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAGEFAAAAAAAAYgUAAAAAAAAAAAAAYgUAAAAAAABjBQAAAAAAAAAAAABjBQAAAAAAAGQFAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhBQAAAAAAAGEFAAAAAAAAAAAAAAAAAAA"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": " handle="
					},
					"CAAAAGQFAAAAAAAAZQUAAAAAAAAAAAAAZQUAAAAAAABmBQAAAAAAAAAAAABmBQAAAAAAAGcFAAAAAAAAAAAAAGcFAAAAAAAAaAUAAAAAAAAAAAAAaAUAAAAAAABpBQAAAAAAAAAAAABpBQAAAAAAAGoFAAAAAAAAAAAAAGoFAAAAAAAAawUAAAAAAAAAAAAAawUAAAAAAABsBQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABkBQAAAAAAAGQFAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "open"
					},
					"BAAAAGwFAAAAAAAAbQUAAAAAAAAAAAAAbQUAAAAAAABuBQAAAAAAAAAAAABuBQAAAAAAAG8FAAAAAAAAAAAAAG8FAAAAAAAAcAUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsBQAAAAAAAGwFAAAAAAAAAAAAAAAA8L8"
				],
				[
					75,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHAFAAAAAAAAcgUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwBQAAAAAAAHAFAAAAAAAAAAAAAAAA8L8"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "file,"
					},
					"BQAAAHEFAAAAAAAAcgUAAAAAAAAAAAAAcgUAAAAAAABzBQAAAAAAAAAAAABzBQAAAAAAAHQFAAAAAAAAAAAAAHQFAAAAAAAAdQUAAAAAAAAAAAAAdQUAAAAAAAB2BQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxBQAAAAAAAHEFAAAAAAAAAAAAAAAA8L8"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHYFAAAAAAAAdwUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB2BQAAAAAAAHYFAAAAAAAAAAAAAAAA8L8"
				],
				[
					78,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAHcFAAAAAAAAeQUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3BQAAAAAAAHcFAAAAAAAAAAAAAAAA8L8"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAHgFAAAAAAAAeQUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4BQAAAAAAAHgFAAAAAAAAAAAAAAAA8L8"
				],
				[
					80,
					1,
					"left_delete",
					null,
					"AQAAAHgFAAAAAAAAeAUAAAAAAAABAAAAIg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB5BQAAAAAAAHkFAAAAAAAAAAAAAAAA8L8"
				],
				[
					81,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAHcFAAAAAAAAdwUAAAAAAAABAAAAJ3cFAAAAAAAAdwUAAAAAAAABAAAAJw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4BQAAAAAAAHgFAAAAAAAAAAAAAAAA8L8"
				],
				[
					82,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAHcFAAAAAAAAeQUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3BQAAAAAAAHcFAAAAAAAAAAAAAAAA8L8"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "w"
					},
					"AQAAAHgFAAAAAAAAeQUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4BQAAAAAAAHgFAAAAAAAAAAAAAAAA8L8"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHsFAAAAAAAAfAUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7BQAAAAAAAHsFAAAAAAAAAAAAAAAA8L8"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHwFAAAAAAAAfQUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8BQAAAAAAAHwFAAAAAAAAAAAAAAAA8L8"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "\nhandle.puts"
					},
					"DwAAAKsFAAAAAAAArAUAAAAAAAAAAAAArAUAAAAAAACuBQAAAAAAAAAAAACuBQAAAAAAALAFAAAAAAAAAAAAAH0FAAAAAAAAfQUAAAAAAAACAAAAICCuBQAAAAAAAK8FAAAAAAAAAAAAAK8FAAAAAAAAsAUAAAAAAAAAAAAAsAUAAAAAAACxBQAAAAAAAAAAAACxBQAAAAAAALIFAAAAAAAAAAAAALIFAAAAAAAAswUAAAAAAAAAAAAAswUAAAAAAAC0BQAAAAAAAAAAAAC0BQAAAAAAALUFAAAAAAAAAAAAALUFAAAAAAAAtgUAAAAAAAAAAAAAtgUAAAAAAAC3BQAAAAAAAAAAAAC3BQAAAAAAALgFAAAAAAAAAAAAALgFAAAAAAAAuQUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrBQAAAAAAAKsFAAAAAAAAAAAAAAAA8L8"
				],
				[
					90,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALkFAAAAAAAAuwUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5BQAAAAAAALkFAAAAAAAAAAAAAAAA8L8"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "chunk"
					},
					"BQAAALoFAAAAAAAAuwUAAAAAAAAAAAAAuwUAAAAAAAC8BQAAAAAAAAAAAAC8BQAAAAAAAL0FAAAAAAAAAAAAAL0FAAAAAAAAvgUAAAAAAAAAAAAAvgUAAAAAAAC/BQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC6BQAAAAAAALoFAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMAFAAAAAAAAwQUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADABQAAAAAAAMAFAAAAAAAAAAAAAAAA8L8"
				],
				[
					97,
					1,
					"left_delete",
					null,
					"AQAAAMEFAAAAAAAAwQUAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCBQAAAAAAAMIFAAAAAAAAAAAAAAAAZ0A"
				],
				[
					99,
					1,
					"left_delete",
					null,
					"AQAAAMEFAAAAAAAAwQUAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCBQAAAAAAAMIFAAAAAAAAAAAAAAAAZ0A"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "\nhandle.flusah"
					},
					"DwAAAMUFAAAAAAAAxgUAAAAAAAAAAAAAxgUAAAAAAADIBQAAAAAAAAAAAADIBQAAAAAAAMkFAAAAAAAAAAAAAMkFAAAAAAAAygUAAAAAAAAAAAAAygUAAAAAAADLBQAAAAAAAAAAAADLBQAAAAAAAMwFAAAAAAAAAAAAAMwFAAAAAAAAzQUAAAAAAAAAAAAAzQUAAAAAAADOBQAAAAAAAAAAAADOBQAAAAAAAM8FAAAAAAAAAAAAAM8FAAAAAAAA0AUAAAAAAAAAAAAA0AUAAAAAAADRBQAAAAAAAAAAAADRBQAAAAAAANIFAAAAAAAAAAAAANIFAAAAAAAA0wUAAAAAAAAAAAAA0wUAAAAAAADUBQAAAAAAAAAAAADUBQAAAAAAANUFAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFBQAAAAAAAMUFAAAAAAAAAAAAAAAAZ0A"
				],
				[
					104,
					2,
					"left_delete",
					null,
					"AgAAANQFAAAAAAAA1AUAAAAAAAABAAAAaNMFAAAAAAAA0wUAAAAAAAABAAAAYQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVBQAAAAAAANUFAAAAAAAAAAAAAAAA8L8"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAANMFAAAAAAAA1AUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTBQAAAAAAANMFAAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANQFAAAAAAAA1gUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADUBQAAAAAAANQFAAAAAAAAAAAAAAAA8L8"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANYFAAAAAAAA1wUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADWBQAAAAAAANYFAAAAAAAAAAAAAAAA8L8"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "\nc"
					},
					"AwAAANcFAAAAAAAA2AUAAAAAAAAAAAAA2AUAAAAAAADaBQAAAAAAAAAAAADaBQAAAAAAANsFAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXBQAAAAAAANcFAAAAAAAAAAAAAAAA8L8"
				],
				[
					110,
					1,
					"left_delete",
					null,
					"AQAAANoFAAAAAAAA2gUAAAAAAAABAAAAYw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbBQAAAAAAANsFAAAAAAAAAAAAAAAA8L8"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "handle.close"
					},
					"DAAAANoFAAAAAAAA2wUAAAAAAAAAAAAA2wUAAAAAAADcBQAAAAAAAAAAAADcBQAAAAAAAN0FAAAAAAAAAAAAAN0FAAAAAAAA3gUAAAAAAAAAAAAA3gUAAAAAAADfBQAAAAAAAAAAAADfBQAAAAAAAOAFAAAAAAAAAAAAAOAFAAAAAAAA4QUAAAAAAAAAAAAA4QUAAAAAAADiBQAAAAAAAAAAAADiBQAAAAAAAOMFAAAAAAAAAAAAAOMFAAAAAAAA5AUAAAAAAAAAAAAA5AUAAAAAAADlBQAAAAAAAAAAAADlBQAAAAAAAOYFAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaBQAAAAAAANoFAAAAAAAAAAAAAAAA8L8"
				],
				[
					112,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOYFAAAAAAAA6AUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmBQAAAAAAAOYFAAAAAAAAAAAAAAAA8L8"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOgFAAAAAAAA6QUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADoBQAAAAAAAOgFAAAAAAAAAAAAAAAA8L8"
				],
				[
					117,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA7BgAAaW1wb3J0IHsgIG9wZW4gfSBmcm9tICdzdGQnOwppbXBvcnQgeyByZWFkbGluaywgc3RhdCB9IGZyb20gJ29zJzsKCmV4cG9ydCBmdW5jdGlvbiBhc3NlcnQoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkgewogIGlmKGFyZ3VtZW50cy5sZW5ndGggPT0gMSkgZXhwZWN0ZWQgPSB0cnVlOwoKICBpZihhY3R1YWwgPT09IGV4cGVjdGVkKSByZXR1cm47CgogIGlmKAogICAgYWN0dWFsICE9PSBudWxsICYmCiAgICBleHBlY3RlZCAhPT0gbnVsbCAmJgogICAgdHlwZW9mIGFjdHVhbCA9PSAnb2JqZWN0JyAmJgogICAgdHlwZW9mIGV4cGVjdGVkID09ICdvYmplY3QnICYmCiAgICBhY3R1YWwudG9TdHJpbmcoKSA9PT0gZXhwZWN0ZWQudG9TdHJpbmcoKQogICkKICAgIHJldHVybjsKCiAgY29uc29sZS5sb2coJ2Fzc2VydCcsIHsgYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSB9KTsKCiAgdGhyb3cgRXJyb3IoCiAgICAnYXNzZXJ0aW9uIGZhaWxlZDogZ290IHwnICsgYWN0dWFsICsgJ3wnICsgJywgZXhwZWN0ZWQgfCcgKyBleHBlY3RlZCArICd8JyArIChtZXNzYWdlID8gJyAoJyArIG1lc3NhZ2UgKyAnKScgOiAnJykKICApOwp9CgpleHBvcnQgY29uc3QgZ2V0cGlkID0gKCkgPT4gcGFyc2VJbnQocmVhZGxpbmsoJy9wcm9jL3NlbGYnKVswXSk7CgpleHBvcnQgY29uc3Qgb25jZSA9IGZuID0+IHsKICBsZXQgcmV0LAogICAgcmFuID0gZmFsc2U7CiAgcmV0dXJuICguLi5hcmdzKSA9PiAocmFuID8gcmV0IDogKChyYW4gPSB0cnVlKSwgKHJldCA9IGZuLmFwcGx5KHRoaXMsIGFyZ3MpKSkpOwp9OwoKZXhwb3J0IGNvbnN0IGV4aXN0cyA9IHBhdGggPT4gewogIGxldCBbc3QsIGVycl0gPSBzdGF0KHBhdGgpOwogIHJldHVybiAhZXJyOwp9OwoKZXhwb3J0IGNvbnN0IHJhbmRTdHIgPSAoCiAgbiwKICBzZXQgPSAnXzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6JywKICBybmcgPSBNYXRoLnJhbmRvbQopID0+IHsKICBsZXQgbyA9ICcnOwogIHdoaWxlKC0tbiA+PSAwKSBvICs9IHNldFtNYXRoLnJvdW5kKHJuZygpICogKHNldC5sZW5ndGggLSAxKSldOwogIHJldHVybiBvOwp9OwoKZXhwb3J0IGNvbnN0IGVzY2FwZSA9IHMgPT4KICBbCiAgICBbL1xyL2csICdcXHInXSwKICAgIFsvXG4vZywgJ1xcbiddCiAgXS5yZWR1Y2UoKGEsIFtleHAsIHJwbF0pID0+IGEucmVwbGFjZShleHAsIHJwbCksIHMpOwoKZXhwb3J0IGNvbnN0IGFiYnJldmlhdGUgPSBzID0+IChzLmxlbmd0aCA+IDEwMCA/IHMuc3Vic3RyaW5nKDAsIDQ1KSArICcgLi4uICcgKyBzLnN1YnN0cmluZygtNDUpIDogcyk7CgpleHBvcnQgYXN5bmMgZnVuY3Rpb24gc2F2ZShnZW5lcmF0b3IsIGZpbGUpIHsKbGV0IGhhbmRsZT1vcGVuKGZpbGUsICd3Jyk7CgogIGZvciBhd2FpdChsZXQgY2h1bmsgb2YgYXdhaXQgZ2VuZXJhdG9yKSB7CiAgICBoYW5kbGUucHV0cyhjaHVuayk7CiAgfQogIGhhbmRsZS5mbHVzaCgpOwogIGhhbmRsZS5jbG9zZSgpOwp9CgpleHBvcnQgZGVmYXVsdCB7IGFzc2VydCwgZ2V0cGlkLCBvbmNlLCBleGlzdHMsIHJhbmRTdHIsIGVzY2FwZSwgYWJicmV2aWF0ZSB9OwoAAAAAAAAAAD4GAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpBQAAAAAAAOkFAAAAAAAAAAAAAAAA8L8"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMgFAAAAAAAAyQUAAAAAAAAAAAAAyQUAAAAAAADLBQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIBQAAAAAAAMgFAAAAAAAAAAAAAAAAXEA"
				],
				[
					124,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABBBgAAaW1wb3J0IHsgb3BlbiB9IGZyb20gJ3N0ZCc7CmltcG9ydCB7IHJlYWRsaW5rLCBzdGF0IH0gZnJvbSAnb3MnOwoKZXhwb3J0IGZ1bmN0aW9uIGFzc2VydChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7CiAgaWYoYXJndW1lbnRzLmxlbmd0aCA9PSAxKSBleHBlY3RlZCA9IHRydWU7CgogIGlmKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHJldHVybjsKCiAgaWYoCiAgICBhY3R1YWwgIT09IG51bGwgJiYKICAgIGV4cGVjdGVkICE9PSBudWxsICYmCiAgICB0eXBlb2YgYWN0dWFsID09ICdvYmplY3QnICYmCiAgICB0eXBlb2YgZXhwZWN0ZWQgPT0gJ29iamVjdCcgJiYKICAgIGFjdHVhbC50b1N0cmluZygpID09PSBleHBlY3RlZC50b1N0cmluZygpCiAgKQogICAgcmV0dXJuOwoKICBjb25zb2xlLmxvZygnYXNzZXJ0JywgeyBhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlIH0pOwoKICB0aHJvdyBFcnJvcigKICAgICdhc3NlcnRpb24gZmFpbGVkOiBnb3QgfCcgKyBhY3R1YWwgKyAnfCcgKyAnLCBleHBlY3RlZCB8JyArIGV4cGVjdGVkICsgJ3wnICsgKG1lc3NhZ2UgPyAnICgnICsgbWVzc2FnZSArICcpJyA6ICcnKQogICk7Cn0KCmV4cG9ydCBjb25zdCBnZXRwaWQgPSAoKSA9PiBwYXJzZUludChyZWFkbGluaygnL3Byb2Mvc2VsZicpWzBdKTsKCmV4cG9ydCBjb25zdCBvbmNlID0gZm4gPT4gewogIGxldCByZXQsCiAgICByYW4gPSBmYWxzZTsKICByZXR1cm4gKC4uLmFyZ3MpID0+IChyYW4gPyByZXQgOiAoKHJhbiA9IHRydWUpLCAocmV0ID0gZm4uYXBwbHkodGhpcywgYXJncykpKSk7Cn07CgpleHBvcnQgY29uc3QgZXhpc3RzID0gcGF0aCA9PiB7CiAgbGV0IFtzdCwgZXJyXSA9IHN0YXQocGF0aCk7CiAgcmV0dXJuICFlcnI7Cn07CgpleHBvcnQgY29uc3QgcmFuZFN0ciA9ICgKICBuLAogIHNldCA9ICdfMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonLAogIHJuZyA9IE1hdGgucmFuZG9tCikgPT4gewogIGxldCBvID0gJyc7CiAgd2hpbGUoLS1uID49IDApIG8gKz0gc2V0W01hdGgucm91bmQocm5nKCkgKiAoc2V0Lmxlbmd0aCAtIDEpKV07CiAgcmV0dXJuIG87Cn07CgpleHBvcnQgY29uc3QgZXNjYXBlID0gcyA9PgogIFsKICAgIFsvXHIvZywgJ1xcciddLAogICAgWy9cbi9nLCAnXFxuJ10KICBdLnJlZHVjZSgoYSwgW2V4cCwgcnBsXSkgPT4gYS5yZXBsYWNlKGV4cCwgcnBsKSwgcyk7CgpleHBvcnQgY29uc3QgYWJicmV2aWF0ZSA9IHMgPT4gKHMubGVuZ3RoID4gMTAwID8gcy5zdWJzdHJpbmcoMCwgNDUpICsgJyAuLi4gJyArIHMuc3Vic3RyaW5nKC00NSkgOiBzKTsKCmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYXZlKGdlbmVyYXRvciwgZmlsZSkgewogIGxldCBoYW5kbGUgPSBvcGVuKGZpbGUsICd3Jyk7CgogIGZvciBhd2FpdChsZXQgY2h1bmsgb2YgYXdhaXQgZ2VuZXJhdG9yKSB7CiAgICBoYW5kbGUucHV0cyhjaHVuayk7CiAgfQogIAogIGhhbmRsZS5mbHVzaCgpOwogIGhhbmRsZS5jbG9zZSgpOwp9CgpleHBvcnQgZGVmYXVsdCB7IGFzc2VydCwgZ2V0cGlkLCBvbmNlLCBleGlzdHMsIHJhbmRTdHIsIGVzY2FwZSwgYWJicmV2aWF0ZSB9OwoAAAAAAAAAAD8GAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLBQAAAAAAAMsFAAAAAAAAAAAAAAAA8L8"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAGwFAAAAAAAAbQUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsBQAAAAAAAGwFAAAAAAAAAAAAAAAA8L8"
				],
				[
					143,
					1,
					"cut",
					null,
					"AQAAAG0FAAAAAAAAbQUAAAAAAAAUAAAAID0gb3BlbihmaWxlLCAndycpOwo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtBQAAAAAAAIEFAAAAAAAAAAAAAAAAWkA"
				],
				[
					146,
					1,
					"paste",
					null,
					"AQAAAJ4FAAAAAAAAsgUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeBQAAAAAAAJ4FAAAAAAAAAAAAAAAAQEA"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": "an"
					},
					"AgAAAJoFAAAAAAAAmwUAAAAAAAAAAAAAmwUAAAAAAACcBQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaBQAAAAAAAJoFAAAAAAAAAAAAAAAAAAA"
				],
				[
					149,
					2,
					"left_delete",
					null,
					"AgAAAJsFAAAAAAAAmwUAAAAAAAABAAAAbpoFAAAAAAAAmgUAAAAAAAABAAAAYQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcBQAAAAAAAJwFAAAAAAAAAAAAAAAA8L8"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": "handle"
					},
					"BgAAAJoFAAAAAAAAmwUAAAAAAAAAAAAAmwUAAAAAAACcBQAAAAAAAAAAAACcBQAAAAAAAJ0FAAAAAAAAAAAAAJ0FAAAAAAAAngUAAAAAAAAAAAAAngUAAAAAAACfBQAAAAAAAAAAAACfBQAAAAAAAKAFAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaBQAAAAAAAJoFAAAAAAAAAAAAAAAA8L8"
				],
				[
					151,
					1,
					"insert",
					{
						"characters": " ??"
					},
					"AwAAAKAFAAAAAAAAoQUAAAAAAAAAAAAAoQUAAAAAAACiBQAAAAAAAAAAAACiBQAAAAAAAKMFAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgBQAAAAAAAKAFAAAAAAAAAAAAAAAA8L8"
				],
				[
					152,
					6,
					"right_delete",
					null,
					"BgAAAKMFAAAAAAAAowUAAAAAAAABAAAAIKMFAAAAAAAAowUAAAAAAAABAAAAIKMFAAAAAAAAowUAAAAAAAABAAAAIKMFAAAAAAAAowUAAAAAAAABAAAAIKMFAAAAAAAAowUAAAAAAAABAAAAIKMFAAAAAAAAowUAAAAAAAABAAAAPQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjBQAAAAAAAKMFAAAAAAAAAAAAAAAA8L8"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": ")="
					},
					"AgAAAKMFAAAAAAAApAUAAAAAAAAAAAAApAUAAAAAAAClBQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjBQAAAAAAAKMFAAAAAAAAAAAAAAAA8L8"
				],
				[
					154,
					2,
					"left_delete",
					null,
					"AgAAAKQFAAAAAAAApAUAAAAAAAABAAAAPaMFAAAAAAAAowUAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClBQAAAAAAAKUFAAAAAAAAAAAAAAAA8L8"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAKMFAAAAAAAApAUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjBQAAAAAAAKMFAAAAAAAAAAAAAAAA8L8"
				],
				[
					159,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABEBgAAaW1wb3J0IHsgb3BlbiB9IGZyb20gJ3N0ZCc7CmltcG9ydCB7IHJlYWRsaW5rLCBzdGF0IH0gZnJvbSAnb3MnOwoKZXhwb3J0IGZ1bmN0aW9uIGFzc2VydChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7CiAgaWYoYXJndW1lbnRzLmxlbmd0aCA9PSAxKSBleHBlY3RlZCA9IHRydWU7CgogIGlmKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHJldHVybjsKCiAgaWYoCiAgICBhY3R1YWwgIT09IG51bGwgJiYKICAgIGV4cGVjdGVkICE9PSBudWxsICYmCiAgICB0eXBlb2YgYWN0dWFsID09ICdvYmplY3QnICYmCiAgICB0eXBlb2YgZXhwZWN0ZWQgPT0gJ29iamVjdCcgJiYKICAgIGFjdHVhbC50b1N0cmluZygpID09PSBleHBlY3RlZC50b1N0cmluZygpCiAgKQogICAgcmV0dXJuOwoKICBjb25zb2xlLmxvZygnYXNzZXJ0JywgeyBhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlIH0pOwoKICB0aHJvdyBFcnJvcigKICAgICdhc3NlcnRpb24gZmFpbGVkOiBnb3QgfCcgKyBhY3R1YWwgKyAnfCcgKyAnLCBleHBlY3RlZCB8JyArIGV4cGVjdGVkICsgJ3wnICsgKG1lc3NhZ2UgPyAnICgnICsgbWVzc2FnZSArICcpJyA6ICcnKQogICk7Cn0KCmV4cG9ydCBjb25zdCBnZXRwaWQgPSAoKSA9PiBwYXJzZUludChyZWFkbGluaygnL3Byb2Mvc2VsZicpWzBdKTsKCmV4cG9ydCBjb25zdCBvbmNlID0gZm4gPT4gewogIGxldCByZXQsCiAgICByYW4gPSBmYWxzZTsKICByZXR1cm4gKC4uLmFyZ3MpID0+IChyYW4gPyByZXQgOiAoKHJhbiA9IHRydWUpLCAocmV0ID0gZm4uYXBwbHkodGhpcywgYXJncykpKSk7Cn07CgpleHBvcnQgY29uc3QgZXhpc3RzID0gcGF0aCA9PiB7CiAgbGV0IFtzdCwgZXJyXSA9IHN0YXQocGF0aCk7CiAgcmV0dXJuICFlcnI7Cn07CgpleHBvcnQgY29uc3QgcmFuZFN0ciA9ICgKICBuLAogIHNldCA9ICdfMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonLAogIHJuZyA9IE1hdGgucmFuZG9tCikgPT4gewogIGxldCBvID0gJyc7CiAgd2hpbGUoLS1uID49IDApIG8gKz0gc2V0W01hdGgucm91bmQocm5nKCkgKiAoc2V0Lmxlbmd0aCAtIDEpKV07CiAgcmV0dXJuIG87Cn07CgpleHBvcnQgY29uc3QgZXNjYXBlID0gcyA9PgogIFsKICAgIFsvXHIvZywgJ1xcciddLAogICAgWy9cbi9nLCAnXFxuJ10KICBdLnJlZHVjZSgoYSwgW2V4cCwgcnBsXSkgPT4gYS5yZXBsYWNlKGV4cCwgcnBsKSwgcyk7CgpleHBvcnQgY29uc3QgYWJicmV2aWF0ZSA9IHMgPT4gKHMubGVuZ3RoID4gMTAwID8gcy5zdWJzdHJpbmcoMCwgNDUpICsgJyAuLi4gJyArIHMuc3Vic3RyaW5nKC00NSkgOiBzKTsKCmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYXZlKGdlbmVyYXRvciwgZmlsZSkgewogIGxldCBoYW5kbGU7CiAgZm9yIGF3YWl0KGxldCBjaHVuayBvZiBhd2FpdCBnZW5lcmF0b3IpIHsKaGFuZGxlID8/PSBvcGVuKGZpbGUsICd3Jyk7CmhhbmRsZS5wdXRzKGNodW5rKTsKICB9CgogIGhhbmRsZS5mbHVzaCgpOwogIGhhbmRsZS5jbG9zZSgpOwp9CgpleHBvcnQgZGVmYXVsdCB7IGFzc2VydCwgZ2V0cGlkLCBvbmNlLCBleGlzdHMsIHJhbmRTdHIsIGVzY2FwZSwgYWJicmV2aWF0ZSB9OwoAAAAAAAAAAEwGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaBQAAAAAAAJoFAAAAAAAAAAAAAAAAAAA"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAG4FAAAAAAAAbwUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuBQAAAAAAAG4FAAAAAAAAAAAAAAAAAAA"
				],
				[
					204,
					1,
					"insert",
					{
						"characters": "\nconsole"
					},
					"CQAAALoFAAAAAAAAuwUAAAAAAAAAAAAAuwUAAAAAAAC/BQAAAAAAAAAAAAC/BQAAAAAAAMAFAAAAAAAAAAAAAMAFAAAAAAAAwQUAAAAAAAAAAAAAwQUAAAAAAADCBQAAAAAAAAAAAADCBQAAAAAAAMMFAAAAAAAAAAAAAMMFAAAAAAAAxAUAAAAAAAAAAAAAxAUAAAAAAADFBQAAAAAAAAAAAADFBQAAAAAAAMYFAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC6BQAAAAAAALoFAAAAAAAA////////738"
				],
				[
					205,
					1,
					"insert",
					{
						"characters": ".log"
					},
					"BAAAAMYFAAAAAAAAxwUAAAAAAAAAAAAAxwUAAAAAAADIBQAAAAAAAAAAAADIBQAAAAAAAMkFAAAAAAAAAAAAAMkFAAAAAAAAygUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGBQAAAAAAAMYFAAAAAAAAAAAAAAAA8L8"
				],
				[
					206,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMoFAAAAAAAAzAUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKBQAAAAAAAMoFAAAAAAAAAAAAAAAA8L8"
				],
				[
					207,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAMsFAAAAAAAAzQUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLBQAAAAAAAMsFAAAAAAAAAAAAAAAA8L8"
				],
				[
					208,
					1,
					"insert",
					{
						"characters": "Writing"
					},
					"BwAAAMwFAAAAAAAAzQUAAAAAAAAAAAAAzQUAAAAAAADOBQAAAAAAAAAAAADOBQAAAAAAAM8FAAAAAAAAAAAAAM8FAAAAAAAA0AUAAAAAAAAAAAAA0AUAAAAAAADRBQAAAAAAAAAAAADRBQAAAAAAANIFAAAAAAAAAAAAANIFAAAAAAAA0wUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADMBQAAAAAAAMwFAAAAAAAAAAAAAAAA8L8"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAANMFAAAAAAAA1AUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTBQAAAAAAANMFAAAAAAAAAAAAAAAA8L8"
				],
				[
					210,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANQFAAAAAAAA1QUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADUBQAAAAAAANQFAAAAAAAAAAAAAAAA8L8"
				],
				[
					211,
					1,
					"left_delete",
					null,
					"AQAAANQFAAAAAAAA1AUAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVBQAAAAAAANUFAAAAAAAAAAAAAAAA8L8"
				],
				[
					213,
					1,
					"insert",
					{
						"characters": ",m"
					},
					"AgAAANUFAAAAAAAA1gUAAAAAAAAAAAAA1gUAAAAAAADXBQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVBQAAAAAAANUFAAAAAAAAAAAAAAAA8L8"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANcFAAAAAAAA2AUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXBQAAAAAAANcFAAAAAAAAAAAAAAAA8L8"
				],
				[
					215,
					2,
					"left_delete",
					null,
					"AgAAANcFAAAAAAAA1wUAAAAAAAABAAAAINYFAAAAAAAA1gUAAAAAAAABAAAAbQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYBQAAAAAAANgFAAAAAAAAAAAAAAAA8L8"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": " chunk"
					},
					"BgAAANYFAAAAAAAA1wUAAAAAAAAAAAAA1wUAAAAAAADYBQAAAAAAAAAAAADYBQAAAAAAANkFAAAAAAAAAAAAANkFAAAAAAAA2gUAAAAAAAAAAAAA2gUAAAAAAADbBQAAAAAAAAAAAADbBQAAAAAAANwFAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADWBQAAAAAAANYFAAAAAAAAAAAAAAAA8L8"
				],
				[
					218,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAN0FAAAAAAAA3gUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADdBQAAAAAAAN0FAAAAAAAAAAAAAAAA8L8"
				],
				[
					223,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAALsFAAAAAAAAvAUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7BQAAAAAAALsFAAAAAAAAAAAAAAAA8L8"
				],
				[
					237,
					1,
					"cut",
					null,
					"AQAAALwFAAAAAAAAvAUAAAAAAAAkAAAAICAgIGNvbnNvbGUubG9nKCdXcml0aW5nOicsIGNodW5rKTsK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8BQAAAAAAAOAFAAAAAAAAAAAAAAAAAAA"
				],
				[
					238,
					1,
					"paste",
					null,
					"AQAAALwFAAAAAAAA4AUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8BQAAAAAAALwFAAAAAAAAAAAAAAAA8L8"
				],
				[
					243,
					1,
					"paste",
					null,
					"AQAAAG4FAAAAAAAAkgUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuBQAAAAAAAG4FAAAAAAAAAAAAAAAAAAA"
				],
				[
					253,
					1,
					"paste",
					null,
					"AgAAAH8FAAAAAAAAiAUAAAAAAAAAAAAAiAUAAAAAAACIBQAAAAAAAAcAAABXcml0aW5n",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB/BQAAAAAAAIYFAAAAAAAAAAAAAAAA8L8"
				],
				[
					258,
					1,
					"paste",
					null,
					"AgAAAIwFAAAAAAAAlQUAAAAAAAAAAAAAlQUAAAAAAACVBQAAAAAAAAUAAABjaHVuaw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMBQAAAAAAAJEFAAAAAAAAAAAAAAAA8L8"
				],
				[
					279,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"AwAAAOUFAAAAAAAA5gUAAAAAAAAAAAAA5gUAAAAAAADnBQAAAAAAAAAAAADnBQAAAAAAAOgFAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADlBQAAAAAAAOUFAAAAAAAAAAAAAAAA8L8"
				],
				[
					280,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOgFAAAAAAAA6gUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADoBQAAAAAAAOgFAAAAAAAAAAAAAAAA8L8"
				],
				[
					281,
					1,
					"insert",
					{
						"characters": "chunk"
					},
					"BQAAAOkFAAAAAAAA6gUAAAAAAAAAAAAA6gUAAAAAAADrBQAAAAAAAAAAAADrBQAAAAAAAOwFAAAAAAAAAAAAAOwFAAAAAAAA7QUAAAAAAAAAAAAA7QUAAAAAAADuBQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpBQAAAAAAAOkFAAAAAAAAAAAAAAAA8L8"
				],
				[
					282,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAO4FAAAAAAAA7wUAAAAAAAAAAAAA7wUAAAAAAADwBQAAAAAAAAAAAADwBQAAAAAAAPEFAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuBQAAAAAAAO4FAAAAAAAAAAAAAAAA8L8"
				],
				[
					283,
					1,
					"left_delete",
					null,
					"AQAAAPAFAAAAAAAA8AUAAAAAAAABAAAAPQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADxBQAAAAAAAPEFAAAAAAAAAAAAAAAA8L8"
				],
				[
					284,
					1,
					"insert",
					{
						"characters": "=="
					},
					"AgAAAPAFAAAAAAAA8QUAAAAAAAAAAAAA8QUAAAAAAADyBQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwBQAAAAAAAPAFAAAAAAAAAAAAAAAA8L8"
				],
				[
					285,
					1,
					"insert",
					{
						"characters": " undefined"
					},
					"CgAAAPIFAAAAAAAA8wUAAAAAAAAAAAAA8wUAAAAAAAD0BQAAAAAAAAAAAAD0BQAAAAAAAPUFAAAAAAAAAAAAAPUFAAAAAAAA9gUAAAAAAAAAAAAA9gUAAAAAAAD3BQAAAAAAAAAAAAD3BQAAAAAAAPgFAAAAAAAAAAAAAPgFAAAAAAAA+QUAAAAAAAAAAAAA+QUAAAAAAAD6BQAAAAAAAAAAAAD6BQAAAAAAAPsFAAAAAAAAAAAAAPsFAAAAAAAA/AUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyBQAAAAAAAPIFAAAAAAAAAAAAAAAA8L8"
				],
				[
					494,
					1,
					"insert",
					{
						"characters": " break;"
					},
					"BwAAAP0FAAAAAAAA/gUAAAAAAAAAAAAA/gUAAAAAAAD/BQAAAAAAAAAAAAD/BQAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAQYAAAAAAAAAAAAAAQYAAAAAAAACBgAAAAAAAAAAAAACBgAAAAAAAAMGAAAAAAAAAAAAAAMGAAAAAAAABAYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD9BQAAAAAAAP0FAAAAAAAAAAAAAAAA8L8"
				],
				[
					500,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACgGAAAAAAAAKQYAAAAAAAAAAAAAKQYAAAAAAAAtBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAoBgAAAAAAACgGAAAAAAAA////////738"
				],
				[
					507,
					1,
					"insert",
					{
						"characters": "write"
					},
					"BwAAADkGAAAAAAAAOgYAAAAAAAAAAAAAOgYAAAAAAAA6BgAAAAAAAAQAAABwdXRzKQYAAAAAAAApBgAAAAAAAAQAAAAgICAgNgYAAAAAAAA3BgAAAAAAAAAAAAA3BgAAAAAAADgGAAAAAAAAAAAAADgGAAAAAAAAOQYAAAAAAAAAAAAAOQYAAAAAAAA6BgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5BgAAAAAAAD0GAAAAAAAAAAAAAAAA8L8"
				],
				[
					509,
					1,
					"insert",
					{
						"characters": ",0,"
					},
					"AwAAAEAGAAAAAAAAQQYAAAAAAAAAAAAAQQYAAAAAAABCBgAAAAAAAAAAAABCBgAAAAAAAEMGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABABgAAAAAAAEAGAAAAAAAAAAAAAAAA8L8"
				],
				[
					510,
					1,
					"insert",
					{
						"characters": " chunk.byte"
					},
					"CwAAAEMGAAAAAAAARAYAAAAAAAAAAAAARAYAAAAAAABFBgAAAAAAAAAAAABFBgAAAAAAAEYGAAAAAAAAAAAAAEYGAAAAAAAARwYAAAAAAAAAAAAARwYAAAAAAABIBgAAAAAAAAAAAABIBgAAAAAAAEkGAAAAAAAAAAAAAEkGAAAAAAAASgYAAAAAAAAAAAAASgYAAAAAAABLBgAAAAAAAAAAAABLBgAAAAAAAEwGAAAAAAAAAAAAAEwGAAAAAAAATQYAAAAAAAAAAAAATQYAAAAAAABOBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDBgAAAAAAAEMGAAAAAAAAAAAAAAAA8L8"
				],
				[
					511,
					1,
					"insert",
					{
						"characters": "Length"
					},
					"BgAAAE4GAAAAAAAATwYAAAAAAAAAAAAATwYAAAAAAABQBgAAAAAAAAAAAABQBgAAAAAAAFEGAAAAAAAAAAAAAFEGAAAAAAAAUgYAAAAAAAAAAAAAUgYAAAAAAABTBgAAAAAAAAAAAABTBgAAAAAAAFQGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABOBgAAAAAAAE4GAAAAAAAAAAAAAAAA8L8"
				],
				[
					518,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADRBgAAaW1wb3J0IHsgb3BlbiB9IGZyb20gJ3N0ZCc7CmltcG9ydCB7IHJlYWRsaW5rLCBzdGF0IH0gZnJvbSAnb3MnOwoKZXhwb3J0IGZ1bmN0aW9uIGFzc2VydChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7CiAgaWYoYXJndW1lbnRzLmxlbmd0aCA9PSAxKSBleHBlY3RlZCA9IHRydWU7CgogIGlmKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHJldHVybjsKCiAgaWYoCiAgICBhY3R1YWwgIT09IG51bGwgJiYKICAgIGV4cGVjdGVkICE9PSBudWxsICYmCiAgICB0eXBlb2YgYWN0dWFsID09ICdvYmplY3QnICYmCiAgICB0eXBlb2YgZXhwZWN0ZWQgPT0gJ29iamVjdCcgJiYKICAgIGFjdHVhbC50b1N0cmluZygpID09PSBleHBlY3RlZC50b1N0cmluZygpCiAgKQogICAgcmV0dXJuOwoKICBjb25zb2xlLmxvZygnYXNzZXJ0JywgeyBhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlIH0pOwoKICB0aHJvdyBFcnJvcigKICAgICdhc3NlcnRpb24gZmFpbGVkOiBnb3QgfCcgKyBhY3R1YWwgKyAnfCcgKyAnLCBleHBlY3RlZCB8JyArIGV4cGVjdGVkICsgJ3wnICsgKG1lc3NhZ2UgPyAnICgnICsgbWVzc2FnZSArICcpJyA6ICcnKQogICk7Cn0KCmV4cG9ydCBjb25zdCBnZXRwaWQgPSAoKSA9PiBwYXJzZUludChyZWFkbGluaygnL3Byb2Mvc2VsZicpWzBdKTsKCmV4cG9ydCBjb25zdCBvbmNlID0gZm4gPT4gewogIGxldCByZXQsCiAgICByYW4gPSBmYWxzZTsKICByZXR1cm4gKC4uLmFyZ3MpID0+IChyYW4gPyByZXQgOiAoKHJhbiA9IHRydWUpLCAocmV0ID0gZm4uYXBwbHkodGhpcywgYXJncykpKSk7Cn07CgpleHBvcnQgY29uc3QgZXhpc3RzID0gcGF0aCA9PiB7CiAgbGV0IFtzdCwgZXJyXSA9IHN0YXQocGF0aCk7CiAgcmV0dXJuICFlcnI7Cn07CgpleHBvcnQgY29uc3QgcmFuZFN0ciA9ICgKICBuLAogIHNldCA9ICdfMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonLAogIHJuZyA9IE1hdGgucmFuZG9tCikgPT4gewogIGxldCBvID0gJyc7CiAgd2hpbGUoLS1uID49IDApIG8gKz0gc2V0W01hdGgucm91bmQocm5nKCkgKiAoc2V0Lmxlbmd0aCAtIDEpKV07CiAgcmV0dXJuIG87Cn07CgpleHBvcnQgY29uc3QgZXNjYXBlID0gcyA9PgogIFsKICAgIFsvXHIvZywgJ1xcciddLAogICAgWy9cbi9nLCAnXFxuJ10KICBdLnJlZHVjZSgoYSwgW2V4cCwgcnBsXSkgPT4gYS5yZXBsYWNlKGV4cCwgcnBsKSwgcyk7CgpleHBvcnQgY29uc3QgYWJicmV2aWF0ZSA9IHMgPT4gKHMubGVuZ3RoID4gMTAwID8gcy5zdWJzdHJpbmcoMCwgNDUpICsgJyAuLi4gJyArIHMuc3Vic3RyaW5nKC00NSkgOiBzKTsKCmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYXZlKGdlbmVyYXRvciwgZmlsZSkgewogIGxldCBoYW5kbGU7CiAgICBjb25zb2xlLmxvZygnZ2VuZXJhdG9yOicsIGdlbmVyYXRvcik7CgogIGZvciBhd2FpdChsZXQgY2h1bmsgb2YgYXdhaXQgZ2VuZXJhdG9yKSB7CiAgICBoYW5kbGUgPz89IG9wZW4oZmlsZSwgJ3cnKTsKCmlmKGNodW5rID09PSB1bmRlZmluZWQpIGJyZWFrOwogICAgY29uc29sZS5sb2coJ1dyaXRpbmc6JywgY2h1bmspOwoKICAgIGhhbmRsZS53cml0ZShjaHVuaywwLCBjaHVuay5ieXRlTGVuZ3RoKTsKICB9CgogIGhhbmRsZS5mbHVzaCgpOwogIGhhbmRsZS5jbG9zZSgpOwp9CgpleHBvcnQgZGVmYXVsdCB7IGFzc2VydCwgZ2V0cGlkLCBvbmNlLCBleGlzdHMsIHJhbmRTdHIsIGVzY2FwZSwgYWJicmV2aWF0ZSB9OwoAAAAAAAAAANQGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUBgAAAAAAAFQGAAAAAAAAAAAAAAAAdUA"
				],
				[
					526,
					1,
					"left_delete",
					null,
					"AQAAAG4FAAAAAAAAbgUAAAAAAAAoAAAAICBjb25zb2xlLmxvZygnZ2VuZXJhdG9yOicsIGdlbmVyYXRvcik7Cg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuBQAAAAAAAJYFAAAAAAAAAAAAAAAAAAA"
				],
				[
					534,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAN4FAAAAAAAA3wUAAAAAAAAAAAAA3wUAAAAAAADjBQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADeBQAAAAAAAN4FAAAAAAAAAAAAAAAA8L8"
				],
				[
					539,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AwAAAOgFAAAAAAAA6QUAAAAAAAAAAAAA3wUAAAAAAADfBQAAAAAAAAQAAAAgICAg5QUAAAAAAADmBQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADoBQAAAAAAAOgFAAAAAAAAAAAAAAAA8L8"
				],
				[
					550,
					2,
					"right_delete",
					null,
					"AgAAAOQFAAAAAAAA5AUAAAAAAAABAAAAL+QFAAAAAAAA5AUAAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkBQAAAAAAAOQFAAAAAAAAAAAAAAAAQEA"
				],
				[
					552,
					1,
					"cut",
					null,
					"AQAAAOQFAAAAAAAA5AUAAAAAAAAgAAAAY29uc29sZS5sb2coJ1dyaXRpbmc6JywgY2h1bmspOwo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkBQAAAAAAAAQGAAAAAAAAAAAAAAAAQEA"
				],
				[
					554,
					1,
					"paste",
					null,
					"AQAAAOkFAAAAAAAACQYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpBQAAAAAAAOkFAAAAAAAAAAAAAAAAQEA"
				],
				[
					555,
					14,
					"left_delete",
					null,
					"DgAAAAgGAAAAAAAACAYAAAAAAAABAAAACgcGAAAAAAAABwYAAAAAAAABAAAAOwYGAAAAAAAABgYAAAAAAAABAAAAKQUGAAAAAAAABQYAAAAAAAABAAAAawQGAAAAAAAABAYAAAAAAAABAAAAbgMGAAAAAAAAAwYAAAAAAAABAAAAdQIGAAAAAAAAAgYAAAAAAAABAAAAaAEGAAAAAAAAAQYAAAAAAAABAAAAYwAGAAAAAAAAAAYAAAAAAAABAAAAIP8FAAAAAAAA/wUAAAAAAAABAAAALP4FAAAAAAAA/gUAAAAAAAABAAAAJ/0FAAAAAAAA/QUAAAAAAAABAAAAOvwFAAAAAAAA/AUAAAAAAAABAAAAZ/sFAAAAAAAA+wUAAAAAAAABAAAAbg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJBgAAAAAAAAkGAAAAAAAAAAAAAAAA8L8"
				],
				[
					556,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAPsFAAAAAAAA/AUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7BQAAAAAAAPsFAAAAAAAAAAAAAAAA8L8"
				],
				[
					557,
					2,
					"left_delete",
					null,
					"AgAAAPsFAAAAAAAA+wUAAAAAAAABAAAAdPoFAAAAAAAA+gUAAAAAAAABAAAAaQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8BQAAAAAAAPwFAAAAAAAAAAAAAAAA8L8"
				],
				[
					558,
					1,
					"insert",
					{
						"characters": "ten:',"
					},
					"BgAAAPoFAAAAAAAA+wUAAAAAAAAAAAAA+wUAAAAAAAD8BQAAAAAAAAAAAAD8BQAAAAAAAP0FAAAAAAAAAAAAAP0FAAAAAAAA/gUAAAAAAAAAAAAA/gUAAAAAAAD/BQAAAAAAAAAAAAD/BQAAAAAAAAAGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6BQAAAAAAAPoFAAAAAAAAAAAAAAAA8L8"
				],
				[
					559,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAAGAAAAAAAAAQYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAABgAAAAAAAAAGAAAAAAAAAAAAAAAA8L8"
				],
				[
					561,
					1,
					"left_delete",
					null,
					"AQAAACkGAAAAAAAAKQYAAAAAAAABAAAAOw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqBgAAAAAAACoGAAAAAAAA////////738"
				],
				[
					562,
					1,
					"insert",
					{
						"characters": ");"
					},
					"AgAAACkGAAAAAAAAKgYAAAAAAAAAAAAAKgYAAAAAAAArBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAApBgAAAAAAACkGAAAAAAAAAAAAAAAA8L8"
				],
				[
					568,
					1,
					"left_delete",
					null,
					"AQAAAN8FAAAAAAAA3wUAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgBQAAAAAAAOAFAAAAAAAAAAAAAAAAAAA"
				],
				[
					571,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAAClBgAAaW1wb3J0IHsgb3BlbiB9IGZyb20gJ3N0ZCc7CmltcG9ydCB7IHJlYWRsaW5rLCBzdGF0IH0gZnJvbSAnb3MnOwoKZXhwb3J0IGZ1bmN0aW9uIGFzc2VydChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7CiAgaWYoYXJndW1lbnRzLmxlbmd0aCA9PSAxKSBleHBlY3RlZCA9IHRydWU7CgogIGlmKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHJldHVybjsKCiAgaWYoCiAgICBhY3R1YWwgIT09IG51bGwgJiYKICAgIGV4cGVjdGVkICE9PSBudWxsICYmCiAgICB0eXBlb2YgYWN0dWFsID09ICdvYmplY3QnICYmCiAgICB0eXBlb2YgZXhwZWN0ZWQgPT0gJ29iamVjdCcgJiYKICAgIGFjdHVhbC50b1N0cmluZygpID09PSBleHBlY3RlZC50b1N0cmluZygpCiAgKQogICAgcmV0dXJuOwoKICBjb25zb2xlLmxvZygnYXNzZXJ0JywgeyBhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlIH0pOwoKICB0aHJvdyBFcnJvcigKICAgICdhc3NlcnRpb24gZmFpbGVkOiBnb3QgfCcgKyBhY3R1YWwgKyAnfCcgKyAnLCBleHBlY3RlZCB8JyArIGV4cGVjdGVkICsgJ3wnICsgKG1lc3NhZ2UgPyAnICgnICsgbWVzc2FnZSArICcpJyA6ICcnKQogICk7Cn0KCmV4cG9ydCBjb25zdCBnZXRwaWQgPSAoKSA9PiBwYXJzZUludChyZWFkbGluaygnL3Byb2Mvc2VsZicpWzBdKTsKCmV4cG9ydCBjb25zdCBvbmNlID0gZm4gPT4gewogIGxldCByZXQsCiAgICByYW4gPSBmYWxzZTsKICByZXR1cm4gKC4uLmFyZ3MpID0+IChyYW4gPyByZXQgOiAoKHJhbiA9IHRydWUpLCAocmV0ID0gZm4uYXBwbHkodGhpcywgYXJncykpKSk7Cn07CgpleHBvcnQgY29uc3QgZXhpc3RzID0gcGF0aCA9PiB7CiAgbGV0IFtzdCwgZXJyXSA9IHN0YXQocGF0aCk7CiAgcmV0dXJuICFlcnI7Cn07CgpleHBvcnQgY29uc3QgcmFuZFN0ciA9ICgKICBuLAogIHNldCA9ICdfMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonLAogIHJuZyA9IE1hdGgucmFuZG9tCikgPT4gewogIGxldCBvID0gJyc7CiAgd2hpbGUoLS1uID49IDApIG8gKz0gc2V0W01hdGgucm91bmQocm5nKCkgKiAoc2V0Lmxlbmd0aCAtIDEpKV07CiAgcmV0dXJuIG87Cn07CgpleHBvcnQgY29uc3QgZXNjYXBlID0gcyA9PgogIFsKICAgIFsvXHIvZywgJ1xcciddLAogICAgWy9cbi9nLCAnXFxuJ10KICBdLnJlZHVjZSgoYSwgW2V4cCwgcnBsXSkgPT4gYS5yZXBsYWNlKGV4cCwgcnBsKSwgcyk7CgpleHBvcnQgY29uc3QgYWJicmV2aWF0ZSA9IHMgPT4gKHMubGVuZ3RoID4gMTAwID8gcy5zdWJzdHJpbmcoMCwgNDUpICsgJyAuLi4gJyArIHMuc3Vic3RyaW5nKC00NSkgOiBzKTsKCmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYXZlKGdlbmVyYXRvciwgZmlsZSkgewogIGxldCBoYW5kbGU7CgogIGZvciBhd2FpdChsZXQgY2h1bmsgb2YgYXdhaXQgZ2VuZXJhdG9yKSB7CiAgICBoYW5kbGUgPz89IG9wZW4oZmlsZSwgJ3cnKTsKCiAgICBpZihjaHVuayA9PT0gdW5kZWZpbmVkKSBicmVhazsKICAgIAogICAgY29uc29sZS5sb2coJ1dyaXR0ZW46JywgaGFuZGxlLndyaXRlKGNodW5rLCAwLCBjaHVuay5ieXRlTGVuZ3RoKSk7CiAgfQoKICBoYW5kbGUuZmx1c2goKTsKICBoYW5kbGUuY2xvc2UoKTsKfQoKZXhwb3J0IGRlZmF1bHQgeyBhc3NlcnQsIGdldHBpZCwgb25jZSwgZXhpc3RzLCByYW5kU3RyLCBlc2NhcGUsIGFiYnJldmlhdGUgfTsKAAAAAAAAAAChBgAAAAAAAAAAAAAAAAAAAAAAAKEGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfBQAAAAAAAN8FAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "tests/log.js",
			"settings":
			{
				"buffer_size": 2014,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					83,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAJcEAAAAAAAAmQQAAAAAAAAAAAAAQAQAAAAAAABCBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABABAAAAAAAAJcEAAAAAAAAAAAAAAAA8L8"
				],
				[
					86,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAADYBwAAaW1wb3J0IHsgc2V0TG9nLCBVUkwsIExMTF9FUlIsIExMTF9XQVJOLCBMTExfTk9USUNFLCBMTExfSU5GTywgTExMX0RFQlVHLCBMTExfUEFSU0VSLCBMTExfSEVBREVSLCBMTExfRVhULCBMTExfQ0xJRU5ULCBMTExfTEFURU5DWSwgTExMX1VTRVIsIExMTF9USFJFQUQgfSBmcm9tICduZXQnOwppbXBvcnQgeyBlcnIgfSBmcm9tICdzdGQnOwoKbGV0IGxvZ05hbWU7CgpleHBvcnQgY29uc3QgTGV2ZWxzID0gKCgpID0+IHsKICBjb25zdCBsbE9iaiA9IHsKICAgIExMTF9FUlIsCiAgICBMTExfV0FSTiwKICAgIExMTF9OT1RJQ0UsCiAgICBMTExfSU5GTywKICAgIExMTF9ERUJVRywKICAgIExMTF9QQVJTRVIsCiAgICBMTExfSEVBREVSLAogICAgTExMX0VYVCwKICAgIExMTF9DTElFTlQsCiAgICBMTExfTEFURU5DWSwKICAgIExMTF9VU0VSLAogICAgTExMX1RIUkVBRAogIH07CiAgcmV0dXJuIE9iamVjdC5rZXlzKGxsT2JqKS5yZWR1Y2UoKGFjYywgbikgPT4gewogICAgbGV0IHYgPSBNYXRoLmxvZzIobGxPYmpbbl0pOwogICAgaWYoTWF0aC5mbG9vcih2KSA9PT0gdikgYWNjW2xsT2JqW25dXSA9IG4uc3Vic3RyaW5nKDQpOwogICAgcmV0dXJuIGFjYzsKICB9LCB7fSk7Cn0pKCk7CgpleHBvcnQgY29uc3QgaXNEZWJ1ZyA9ICgpID0+IHNjcmlwdEFyZ3Muc29tZShhID0+IC9eLVtkeF0vLnRlc3QoYSkpOwpleHBvcnQgY29uc3QgRGVidWdDYWxsYmFjayA9IGZuID0+IChpc0RlYnVnKCkgPyBmbiA6ICgpID0+IHt9KTsKCmV4cG9ydCBjb25zdCBEZWZhdWx0TGV2ZWxzID0KICBMTExfRVJSIHwgTExMX1dBUk4gfCBMTExfTk9USUNFIHwgTExMX0lORk8gfCBMTExfQ0xJRU5UIHwgTExMX0xBVEVOQ1kgfCBMTExfVVNFUiB8IExMTF9USFJFQUQ7CgpleHBvcnQgY29uc3QgSW5pdCA9IChuYW1lLCBtYXNrID0gTExMX1VTRVIgfCAoKExMTF9DTElFTlQgPDwgMSkgLSAxKSkgPT4gewogIGlmKHR5cGVvZiBuYW1lID09ICdzdHJpbmcnKSBsb2dOYW1lID0gbmFtZTsKICBzZXRMb2coCiAgICBtYXNrLAogICAgRGVidWdDYWxsYmFjaygobGV2ZWwsIG1zZykgPT4gewogICAgICBsZXQgbCA9IExldmVsc1tsZXZlbF07CiAgICAvKiAgaWYoIShsZXZlbCAmIG1hc2spKSByZXR1cm47CiAgICAgIGlmKGxldmVsID49IExMTF9OT1RJQ0UgJiYgbGV2ZWwgPD0gTExMX0VYVCkgcmV0dXJuOyovCiAgICAgIGlmKGwgPT0gJ1VTRVInKSBsID0gbmFtZSA/PyBsOwogICAgICBlcnIucHV0cyhgJHtsLnBhZEVuZCgxMCl9ICR7bXNnfVxuYCk7CiAgICB9KQogICk7Cn07CgpleHBvcnQgY29uc3QgU2V0TG9nID0gKG5hbWUsIG1heExldmVsID0gTExMX0NMSUVOVCkgPT4gewogIGlmKHR5cGVvZiBuYW1lID09ICdzdHJpbmcnKSBsb2dOYW1lID0gbmFtZTsKCiAgc2V0TG9nKExMTF9VU0VSIHwgKChtYXhMZXZlbCA8PCAxKSAtIDEpLCAobGV2ZWwsIG1zZykgPT4gewogICAgbGV0IGwgPSBMZXZlbHNbbGV2ZWxdID8/ICdVTktOT1dOJzsKICAgIGlmKGwgPT0gJ1VTRVInKSBsID0gbmFtZSA/PyBsOwogICAgZXJyLnB1dHMoKCdYJywgbCkucGFkRW5kKDkpICsgbXNnLnJlcGxhY2UoL1xyL2csICdcXHInKS5yZXBsYWNlKC9cbi9nLCAnXFxuJykpOwogIH0pOwp9OwoKZXhwb3J0IGNvbnN0IGxvZyA9ICgoKSA9PiB7CiAgbG9nTmFtZSA/Pz0gc2NyaXB0QXJnc1swXS5yZXBsYWNlKC8uKlwvL2csICcnKTsKICBsZXQgY29ucyA9IGNvbnNvbGU7CiAgaW1wb3J0KCdjb25zb2xlJykudGhlbigoeyBDb25zb2xlIH0pID0+IHsKICAgIGdsb2JhbFRoaXMuY29uc29sZSA9IGNvbnMgPSBuZXcgQ29uc29sZSgKICAgICAgLyplcnIsICovIHsKICAgICAgICBpbnNwZWN0T3B0aW9uczogeyBjb21wYWN0OiAwLCBkZXB0aDogMTAsIGN1c3RvbUluc3BlY3Q6IHRydWUsIG1heFN0cmluZ0xlbmd0aDogMTAwLCBjb2xvcnM6IHRydWUgfQogICAgICB9CiAgICApOwogIH0pOwogIHJldHVybiAoLi4uYXJncykgPT4gY29ucy5sb2cobG9nTmFtZSArICc6JywgLi4uYXJncyk7Cn0pKCk7CgAAAAAAAAAA3gcAAAAAAAAAAAAAAAAAAAAAAADeBwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABCBAAAAAAAAJkEAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/minnet-client-http.c",
			"settings":
			{
				"buffer_size": 13571,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					39,
					1,
					"paste",
					null,
					"AQAAAAgoAAAAAAAAZigAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIKAAAAAAAAAgoAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAABUoAAAAAAAAFigAAAAAAAAAAAAAFigAAAAAAAAWKAAAAAAAAA4AAABDTElFTlQtSFRUUCgyKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVKAAAAAAAACMoAAAAAAAAAAAAAAAA8L8"
				],
				[
					61,
					1,
					"paste",
					null,
					"AgAAABUoAAAAAAAAOigAAAAAAAAAAAAAOigAAAAAAAA6KAAAAAAAAAEAAAAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVKAAAAAAAABYoAAAAAAAAAAAAAAAA8L8"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAA4oAAAAAAAADygAAAAAAAAAAAAADygAAAAAAAAVKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOKAAAAAAAAA4oAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAG0oAAAAAAAAbygAAAAAAAAAAAAAXigAAAAAAABgKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeKAAAAAAAAG0oAAAAAAAAAAAAAAAA8L8"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "DEW"
					},
					"BAAAABUoAAAAAAAAFigAAAAAAAAAAAAAFigAAAAAAAAWKAAAAAAAAAUAAABMT0dDQhYoAAAAAAAAFygAAAAAAAAAAAAAFygAAAAAAAAYKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVKAAAAAAAABooAAAAAAAAAAAAAAAA8L8"
				],
				[
					105,
					1,
					"left_delete",
					null,
					"AQAAABcoAAAAAAAAFygAAAAAAAABAAAAVw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYKAAAAAAAABgoAAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "BUG"
					},
					"AwAAABcoAAAAAAAAGCgAAAAAAAAAAAAAGCgAAAAAAAAZKAAAAAAAAAAAAAAZKAAAAAAAABooAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXKAAAAAAAABcoAAAAAAAAAAAAAAAA8L8"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAEEoAAAAAAAAQigAAAAAAAAAAAAAQigAAAAAAABCKAAAAAAAAAQAAAAiLCAi",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBKAAAAAAAAEUoAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAQigAAAAAAABCKAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAQigAAAAAAABCKAAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"",
					null,
					"AQAAAMsEAAAAAAAA2wQAAAAAAAAPAAAASlNfTmV3Q0Nsb3N1cmUo",
					"AQAAAAAAAAABAAAAQigAAAAAAABCKAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAQygAAAAAAABDKAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD+NAAAI2luY2x1ZGUgIm1pbm5ldC1jbGllbnQuaCIKI2luY2x1ZGUgIm1pbm5ldC1jbGllbnQtaHR0cC5oIgojaW5jbHVkZSAibWlubmV0LXdlYnNvY2tldC5oIgojaW5jbHVkZSAibWlubmV0LXJlc3BvbnNlLmgiCiNpbmNsdWRlICJtaW5uZXQuaCIKI2luY2x1ZGUgImhlYWRlcnMuaCIKI2luY2x1ZGUgImpzdXRpbHMuaCIKI2luY2x1ZGUgPGxpYndlYnNvY2tldHMuaD4KCnR5cGVkZWYgc3RydWN0IHsKICBpbnQgcmVmX2NvdW50OwogIEpTQ29udGV4dCogY3R4OwogIHN0cnVjdCBzZXNzaW9uX2RhdGEqIHNlc3Npb247CiAgTWlubmV0UmVzcG9uc2UqIHJlc3A7CiAgc3RydWN0IGx3cyogd3NpOwp9IEhUVFBBc3luY1Jlc29sdmVDbG9zdXJlOwoKLypzdGF0aWMgdm9pZApjbGllbnRfcmVzb2x2ZWRfZnJlZSh2b2lkKiBwdHIpIHsKICBIVFRQQXN5bmNSZXNvbHZlQ2xvc3VyZSogY2xvc3VyZSA9IHB0cjsKICBpZigtLWNsb3N1cmUtPnJlZl9jb3VudCA9PSAwKSB7CiAgICByZXNwb25zZV9mcmVlKGNsb3N1cmUtPnJlc3AsIGNsb3N1cmUtPmN0eCk7CiAgICBqc19mcmVlKGNsb3N1cmUtPmN0eCwgcHRyKTsKICB9Cn0KCnN0YXRpYyBKU1ZhbHVlCmNsaWVudF9yZXNvbHZlZChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljLCB2b2lkKiBwdHIpIHsKICBjb25zdCBjaGFyKiB2YWwgPSBKU19Ub0NTdHJpbmcoY3R4LCBhcmd2WzBdKTsKCiAgLy9wcmludGYoInZhbHVlPSVzXG4iLCB2YWwpOwogIExPRyhfX2Z1bmNfXywgInZhbHVlPSVzIiwgdmFsKTsKICBKU19GcmVlQ1N0cmluZyhjdHgsIHZhbCk7CgogIHJldHVybiBKU19VTkRFRklORUQ7Cn0qLwoKLypzdGF0aWMgSlNWYWx1ZQpjbGllbnRfcHJvbWlzZShKU0NvbnRleHQqIGN0eCwgc3RydWN0IHNlc3Npb25fZGF0YSogc2Vzc2lvbiwgTWlubmV0UmVzcG9uc2UqIHJlc3AsIHN0cnVjdCBsd3MqIHdzaSwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgSFRUUEFzeW5jUmVzb2x2ZUNsb3N1cmUqIHA7CiAgSlNWYWx1ZSByZXQgPSBKU19VTkRFRklORUQ7CgogIGlmKChwID0ganNfbWFsbG9jKGN0eCwgc2l6ZW9mKEhUVFBBc3luY1Jlc29sdmVDbG9zdXJlKSkpKSB7CiAgICAqcCA9IChIVFRQQXN5bmNSZXNvbHZlQ2xvc3VyZSl7MSwgY3R4LCBzZXNzaW9uLCByZXNwb25zZV9kdXAocmVzcCksIHdzaX07CiAgICBKU1ZhbHVlIGZuID0ganNfY2Nsb3N1cmVfbmV3KGN0eCwgY2xpZW50X3Jlc29sdmVkLCAxLCAwLCBwLCBjbGllbnRfcmVzb2x2ZWRfZnJlZSk7CiAgICBKU1ZhbHVlIHRtcCA9IGpzX3Byb21pc2VfdGhlbihjdHgsIHZhbHVlLCBmbik7CiAgICBKU19GcmVlVmFsdWUoY3R4LCBmbik7CiAgICByZXQgPSB0bXA7CiAgfSBlbHNlIHsKICAgIHJldCA9IEpTX1Rocm93T3V0T2ZNZW1vcnkoY3R4KTsKICB9CiAgcmV0dXJuIHJldDsKfSovCgppbnQKaHR0cF9jbGllbnRfY2FsbGJhY2soc3RydWN0IGx3cyogd3NpLCBlbnVtIGx3c19jYWxsYmFja19yZWFzb25zIHJlYXNvbiwgdm9pZCogdXNlciwgdm9pZCogaW4sIHNpemVfdCBsZW4pIHsKCiAgaWYocmVhc29uID09IExXU19DQUxMQkFDS19PUEVOU1NMX0xPQURfRVhUUkFfQ0xJRU5UX1ZFUklGWV9DRVJUUykKICAgIHJldHVybiAwOwoKICBNaW5uZXRDbGllbnQqIGNsaWVudCA9IGx3c19jbGllbnQod3NpKTsKICBzdHJ1Y3Qgc2Vzc2lvbl9kYXRhKiBzZXNzaW9uID0gJmNsaWVudC0+c2Vzc2lvbjsKICBKU0NvbnRleHQqIGN0eCA9IGNsaWVudCA/IGNsaWVudC0+Y29udGV4dC5qcyA6IDA7CiAgc3RydWN0IHdzaV9vcGFxdWVfdXNlcl9kYXRhKiBvcGFxdWU7CgogIGlmKGx3c19yZWFzb25fcG9sbChyZWFzb24pKQogICAgcmV0dXJuIHdzaV9oYW5kbGVfcG9sbCh3c2ksIHJlYXNvbiwgJmNsaWVudC0+b24uZmQsIGluKTsKCiAgaWYoKG9wYXF1ZSA9IGx3c19vcGFxdWUod3NpLCBjdHgpKSkgewogICAgaWYoIW9wYXF1ZS0+c2VzcyAmJiBzZXNzaW9uKQogICAgICBvcGFxdWUtPnNlc3MgPSBzZXNzaW9uOwogIH0KCiAgLy8gbHdzbF91c2VyKCJjbGllbnQtaHR0cCAiIEZHKCIlZCIpICIlLTM4cyIgTkMgIiBpc19zc2w9JWkgbGVuPSV6dSBpbj0nJS4qcydcbiIsIDIyICsgKHJlYXNvbiAqIDIpLCBsd3NfY2FsbGJhY2tfbmFtZShyZWFzb24pICsgMTMsIHdzaV90bHMod3NpKSwgbGVuLCAoaW50KU1JTihsZW4sIDMyKSwgKGNoYXIqKWluKTsKICBpZihyZWFzb24gIT0gTFdTX0NBTExCQUNLX1JFQ0VJVkVfQ0xJRU5UX0hUVFBfUkVBRCkKICAgIExPR0NCKCJDTElFTlQtSFRUUCAiLCAiZmQ9JWQsIGgyPSVpLCB0bHM9JWklcyUuKnMlcyIsIGx3c19nZXRfc29ja2V0X2ZkKHdzaSksIHdzaV9odHRwMih3c2kpLCB3c2lfdGxzKHdzaSksIChpbiAmJiBsZW4pID8gIiwgaW49JyIgOiAiIiwgKGludClsZW4sIChjaGFyKilpbiwgKGluICYmIGxlbikgPyAiJyIgOiAiIik7CgogIHN3aXRjaChyZWFzb24pIHsKICAgIGNhc2UgTFdTX0NBTExCQUNLX0NMSUVOVF9GSUxURVJfUFJFX0VTVEFCTElTSDogewoKICAgICAgTWlubmV0UmVxdWVzdCogcmVxID0gY2xpZW50LT5yZXF1ZXN0OwogICAgICBNaW5uZXRSZXNwb25zZSogcmVzcDsKCiAgICAgIGlmKHJlcSkgewogICAgICAgIC8vIHVybF9mcm9td3NpKCZyZXEtPnVybCwgd3NpLCBjdHgpOwoKICAgICAgICBzZXNzaW9uLT5yZXFfb2JqID0gbWlubmV0X3JlcXVlc3Rfd3JhcChjdHgsIGNsaWVudC0+cmVxdWVzdCk7CiAgICAgIH0KCiAgICAgIGlmKCEocmVzcCA9IG9wYXF1ZS0+cmVzcCkpIHsKICAgICAgICByZXNwID0gb3BhcXVlLT5yZXNwID0gcmVzcG9uc2VfbmV3KGN0eCk7CgogICAgICAgIHJlc3AtPmdlbmVyYXRvciA9IGdlbmVyYXRvcl9uZXcoY3R4KTsKICAgICAgICByZXNwLT5zdGF0dXMgPSBsd3NfaHR0cF9jbGllbnRfaHR0cF9yZXNwb25zZSh3c2kpOwoKICAgICAgICBoZWFkZXJzX3RvYnVmZmVyKGN0eCwgJm9wYXF1ZS0+cmVzcC0+aGVhZGVycywgd3NpKTsKICAgICAgICBzZXNzaW9uLT5yZXNwX29iaiA9IG1pbm5ldF9yZXNwb25zZV93cmFwKGN0eCwgb3BhcXVlLT5yZXNwKTsKICAgICAgfQogICAgICAvKiAgICBpZihqc19pc19udWxsaXNoKHNlc3Npb24tPnJlcV9vYmopKQogICAgICAgICAgICBzZXNzaW9uLT5yZXFfb2JqID0gbWlubmV0X3JlcXVlc3Rfd3JhcChjdHgsIGNsaWVudC0+cmVxdWVzdCk7CiAgICAgICAgICBpZihqc19pc19udWxsaXNoKHNlc3Npb24tPnJlc3Bfb2JqKSkKICAgICAgICAgICAgc2Vzc2lvbi0+cmVzcF9vYmogPSBtaW5uZXRfcmVzcG9uc2Vfd3JhcChjdHgsIGNsaWVudC0+cmVzcG9uc2UpOwogICAgKi8KICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICBjYXNlIExXU19DQUxMQkFDS19TRVJWRVJfTkVXX0NMSUVOVF9JTlNUQU5USUFURUQ6CiAgICBjYXNlIExXU19DQUxMQkFDS19XU0lfQ1JFQVRFOgogICAgY2FzZSBMV1NfQ0FMTEJBQ0tfQ09OTkVDVElORzogewogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgTFdTX0NBTExCQUNLX1BST1RPQ09MX0lOSVQ6IHsKICAgICAgc2Vzc2lvbl96ZXJvKHNlc3Npb24pOwogICAgICByZXR1cm4gMDsKICAgIH0KICAgIGNhc2UgTFdTX0NBTExCQUNLX0NMSUVOVF9DT05ORUNUSU9OX0VSUk9SOiB7CiAgICAgIGlmKGpzX3Byb21pc2VfcGVuZGluZygmY2xpZW50LT5wcm9taXNlKSkgewogICAgICAgIEpTVmFsdWUgZXJyID0ganNfZXJyb3JfbmV3KGN0eCwgIiVzIiwgKGNoYXIqKWluKTsKICAgICAgICBqc19wcm9taXNlX3JlamVjdChjdHgsICZjbGllbnQtPnByb21pc2UsIGVycik7CiAgICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgZXJyKTsKICAgICAgfQogICAgICByZXR1cm4gLTE7CiAgICB9CgogICAgY2FzZSBMV1NfQ0FMTEJBQ0tfQ0xJRU5UX0hUVFBfQklORF9QUk9UT0NPTDogewogICAgICBzZXNzaW9uLT5yZXFfb2JqID0gSlNfTlVMTDsKICAgICAgc2Vzc2lvbi0+cmVzcF9vYmogPSBKU19OVUxMOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgTFdTX0NBTExCQUNLX0NMSUVOVF9IVFRQX0RST1BfUFJPVE9DT0w6IHsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIExXU19DQUxMQkFDS19DTElFTlRfQVBQRU5EX0hBTkRTSEFLRV9IRUFERVI6IHsKCiAgICAgIE1pbm5ldFJlcXVlc3QqIHJlcSA9IGNsaWVudC0+cmVxdWVzdDsKICAgICAgQnl0ZUJ1ZmZlciBidWYgPSBCVUZGRVJfTigqKHVpbnQ4X3QqKilpbiwgbGVuKTsKCiAgICAgIHJlcS0+aDIgPSB3c2lfaHR0cDIod3NpKTsKCiAgICAgIHNpemVfdCBuID0gaGVhZGVyc193cml0ZSgmYnVmLndyaXRlLCBidWYuZW5kLCAmcmVxLT5oZWFkZXJzLCB3c2kpOwoKICAgICAgREVCVUcoIkFQUEVORF9IQU5EU0hBS0VfSEVBREVSICV6dSAlemQgJyUuKnMnXG4iLCBuLCBidWZmZXJfSEVBRCgmYnVmKSwgKGludCluLCBidWYucmVhZCk7CiAgICAgICoodWludDhfdCoqKWluICs9IG47CgogICAgICBpZihtZXRob2RfbnVtYmVyKGNsaWVudC0+Y29ubmVjdF9pbmZvLm1ldGhvZCkgPT0gTUVUSE9EX1BPU1QgJiYgIWx3c19odHRwX2lzX3JlZGlyZWN0ZWRfdG9fZ2V0KHdzaSkpIHsKICAgICAgICBsd3NfY2xpZW50X2h0dHBfYm9keV9wZW5kaW5nKHdzaSwgMSk7CiAgICAgICAgbHdzX2NhbGxiYWNrX29uX3dyaXRhYmxlKHdzaSk7CiAgICAgIH0KICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBMV1NfQ0FMTEJBQ0tfV1NJX0RFU1RST1k6IHsKICAgICAgaWYoY2xpZW50LT53c2kgPT0gd3NpKSB7CiAgICAgICAgaWYoanNfcHJvbWlzZV9wZW5kaW5nKCZjbGllbnQtPnByb21pc2UpKQogICAgICAgICAganNfcHJvbWlzZV9yZXNvbHZlKGN0eCwgJmNsaWVudC0+cHJvbWlzZSwgSlNfVU5ERUZJTkVEKTsKICAgICAgfQogICAgICByZXR1cm4gLTE7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgTFdTX0NBTExCQUNLX0NMT1NFRF9DTElFTlRfSFRUUDogewogICAgICBpZihvcGFxdWUtPnN0YXR1cyA8IENMT1NFRCkgewogICAgICAgIG9wYXF1ZS0+c3RhdHVzID0gQ0xPU0VEOwogICAgICAgIGlmKGNsaWVudC0+b24uY2xvc2UuY3R4KSB7CiAgICAgICAgICBKU1ZhbHVlQ29uc3QgY2JfYXJndltdID0gewogICAgICAgICAgICAgIEpTX0R1cFZhbHVlKGNsaWVudC0+b24uY2xvc2UuY3R4LCBzZXNzaW9uLT53c19vYmopLAogICAgICAgICAgICAgIEpTX05ld0ludDMyKGNsaWVudC0+b24uY2xvc2UuY3R4LCAwKSwKICAgICAgICAgIH07CiAgICAgICAgICBjbGllbnRfZXhjZXB0aW9uKGNsaWVudCwgY2FsbGJhY2tfZW1pdCgmY2xpZW50LT5vbi5jbG9zZSwgY291bnRvZihjYl9hcmd2KSwgY2JfYXJndikpOwogICAgICAgICAgSlNfRnJlZVZhbHVlKGNsaWVudC0+b24uY2xvc2UuY3R4LCBjYl9hcmd2WzBdKTsKICAgICAgICAgIEpTX0ZyZWVWYWx1ZShjbGllbnQtPm9uLmNsb3NlLmN0eCwgY2JfYXJndlsxXSk7CiAgICAgICAgfQoKICAgICAgICBpZihvcGFxdWUtPnJlc3AtPmdlbmVyYXRvcikKICAgICAgICAgIGdlbmVyYXRvcl9jbG9zZShvcGFxdWUtPnJlc3AtPmdlbmVyYXRvciwgSlNfVU5ERUZJTkVEKTsKICAgICAgfQogICAgICBsd3NfY2FuY2VsX3NlcnZpY2UobHdzX2dldF9jb250ZXh0KHdzaSkpOyAvKiBhYm9ydCBwb2xsIHdhaXQgKi8KICAgICAgcmV0dXJuIC0xOwogICAgfQoKICAgIGNhc2UgTFdTX0NBTExCQUNLX0VTVEFCTElTSEVEX0NMSUVOVF9IVFRQOiB7CiAgICAgIGludCBzdGF0dXM7CiAgICAgIE1pbm5ldFJlc3BvbnNlKiByZXNwOwoKICAgICAgLy8gY2xpZW50LT5yZXEtPmgyID0gd3NpX2h0dHAyKHdzaSk7CgogICAgICBpZighKHJlc3AgPSBvcGFxdWUtPnJlc3ApKSB7CiAgICAgICAgcmVzcCA9IG9wYXF1ZS0+cmVzcCA9IHJlc3BvbnNlX25ldyhjdHgpOwogICAgICAgIHJlc3AtPmdlbmVyYXRvciA9IGdlbmVyYXRvcl9uZXcoY3R4KTsKICAgICAgICByZXNwLT5zdGF0dXMgPSBsd3NfaHR0cF9jbGllbnRfaHR0cF9yZXNwb25zZSh3c2kpOwogICAgICAgIGhlYWRlcnNfdG9idWZmZXIoY3R4LCAmb3BhcXVlLT5yZXNwLT5oZWFkZXJzLCB3c2kpOwogICAgICAgIHNlc3Npb24tPnJlc3Bfb2JqID0gbWlubmV0X3Jlc3BvbnNlX3dyYXAoY3R4LCBvcGFxdWUtPnJlc3ApOwogICAgICB9CgogICAgICBoZWFkZXJzX3RvYnVmZmVyKGN0eCwgJm9wYXF1ZS0+cmVzcC0+aGVhZGVycywgd3NpKTsKICAgICAgaWYoIXJlc3AtPnR5cGUpCiAgICAgICAgcmVzcC0+dHlwZSA9IGhlYWRlcnNfZ2V0KCZyZXNwLT5oZWFkZXJzLCAiY29udGVudC10eXBlIiwgY3R4KTsKICAgICAgaWYoIXN0cm5jbXAocmVzcC0+dHlwZSwgInRleHQvIiwgNSkpCiAgICAgICAgcmVzcC0+Z2VuZXJhdG9yLT5ibG9ja19mbiA9ICZibG9ja190b3N0cmluZzsKICAgICAgdXJsX2NvcHkoJnJlc3AtPnVybCwgY2xpZW50LT5yZXF1ZXN0LT51cmwsIGNsaWVudC0+b24uaHR0cC5jdHgpOwoKICAgICAgLy8gb3BhcXVlLT5yZXNwLT5oZWFkZXJzID0gaGVhZGVyc19nZXR0b2tlbihjdHgsIHdzaSwgV1NJX1RPS0VOX0hUVFBfQ09OVEVOVF9UWVBFKTsKCiAgICAgIGlmKCFvcGFxdWUtPndzKQogICAgICAgIG9wYXF1ZS0+d3MgPSB3c19uZXcod3NpLCBjdHgpOwogICAgICBzZXNzaW9uLT53c19vYmogPSBtaW5uZXRfd3Nfd3JhcChjdHgsIG9wYXF1ZS0+d3MpOwoKICAgICAgb3BhcXVlLT5yZXNwLT5zdGF0dXMgPSBzdGF0dXMgPSBsd3NfaHR0cF9jbGllbnRfaHR0cF9yZXNwb25zZSh3c2kpOwoKICAgICAgbHdzbF91c2VyKCJodHRwLWVzdGFibGlzaGVkICMxICIgRkdDKDE3MSwgIiUtMzhzIikgIiAgc2VydmVyIHJlc3BvbnNlOiAlZFxuIiwgbHdzX2NhbGxiYWNrX25hbWUocmVhc29uKSArIDEzLCBzdGF0dXMpOwogICAgICB7CiAgICAgICAgc2l6ZV90IGksIGhkcmxlbiA9IGx3c19oZHJfdG90YWxfbGVuZ3RoKHdzaSwgV1NJX1RPS0VOX0hUVFApOwogICAgICAgIGNoYXIgYnVmWygoKGhkcmxlbiArIDEpICsgNykgPj4gMykgPDwgM107CiAgICAgICAgbHdzX2hkcl9jb3B5KHdzaSwgYnVmLCBzaXplb2YoYnVmKSwgV1NJX1RPS0VOX0hUVFApOwogICAgICAgIGJ1ZltoZHJsZW5dID0gJ1wwJzsKICAgICAgICBpZihidWZbKGkgPSBieXRlX2NocihidWYsIGhkcmxlbiwgJyAnKSldKQogICAgICAgICAgaSArPSAxOwogICAgICAgIGNsaWVudC0+cmVzcG9uc2UtPnN0YXR1c190ZXh0ID0ganNfc3RyZHVwKGN0eCwgJmJ1ZltpXSk7CiAgICAgIH0KCiAgICAgIGlmKGNsaWVudC0+b24uaHR0cC5jdHgpIHsKICAgICAgICBKU1ZhbHVlIHJldDsKICAgICAgICByZXQgPSBjbGllbnRfZXhjZXB0aW9uKGNsaWVudCwgY2FsbGJhY2tfZW1pdF90aGlzKCZjbGllbnQtPm9uLmh0dHAsIHNlc3Npb24tPndzX29iaiwgMiwgJnNlc3Npb24tPnJlcV9vYmopKTsKICAgICAgICBKU19GcmVlVmFsdWUoY2xpZW50LT5vbi5odHRwLmN0eCwgcmV0KTsKICAgICAgfQoKICAgICAgaWYobWV0aG9kX251bWJlcihjbGllbnQtPmNvbm5lY3RfaW5mby5tZXRob2QpID09IE1FVEhPRF9QT1NUKSB7CiAgICAgICAgbHdzX2NsaWVudF9odHRwX2JvZHlfcGVuZGluZyh3c2ksIDEpOwogICAgICAgIGx3c19jYWxsYmFja19vbl93cml0YWJsZSh3c2kpOwogICAgICB9CiAgICAgIHJldHVybiAwOwogICAgfQoKICAgIGNhc2UgTFdTX0NBTExCQUNLX0NMSUVOVF9IVFRQX1dSSVRFQUJMRToKICAgICAgLyogIGNhc2UgTFdTX0NBTExCQUNLX0hUVFBfV1JJVEVBQkxFOiAqLyB7CiAgICAgICAgaWYobWV0aG9kX251bWJlcihjbGllbnQtPmNvbm5lY3RfaW5mby5tZXRob2QpID09IE1FVEhPRF9QT1NUKSB7CiAgICAgICAgICBKU1ZhbHVlIHZhbHVlOwogICAgICAgICAgaW50IG47CiAgICAgICAgICBzc2l6ZV90IHNpemUsIHI7CiAgICAgICAgICAvLyBNaW5uZXRSZXF1ZXN0KiByZXEgPSBjbGllbnQtPnJlcXVlc3Q7CiAgICAgICAgICBCeXRlQnVmZmVyIGJ1ZjsKICAgICAgICAgIGJ1ZmZlcl9hbGxvYygmYnVmLCAxMDI0KTsKCiAgICAgICAgICBpZihsd3NfaHR0cF9pc19yZWRpcmVjdGVkX3RvX2dldCh3c2kpKQogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGlmKEpTX0lzT2JqZWN0KGNsaWVudC0+Ym9keSkpIHsKICAgICAgICAgICAgd2hpbGUoIWNsaWVudC0+ZG9uZSkgewogICAgICAgICAgICAgIHZhbHVlID0ganNfaXRlcmF0b3JfbmV4dChjdHgsIGNsaWVudC0+Ym9keSwgJmNsaWVudC0+bmV4dCwgJmNsaWVudC0+ZG9uZSwgMCwgMCk7CgogICAgICAgICAgICAgIERFQlVHKCJqc19pdGVyYXRvcl9uZXh0KCkgPSAlcyAlaSBkb25lPSVpXG4iLCBKU19Ub0NTdHJpbmcoY3R4LCB2YWx1ZSksIEpTX1ZBTFVFX0dFVF9UQUcodmFsdWUpLCBjbGllbnQtPmRvbmUpOwoKICAgICAgICAgICAgICBpZihKU19Jc0V4Y2VwdGlvbih2YWx1ZSkpIHsKICAgICAgICAgICAgICAgIEpTVmFsdWUgZXhjZXB0aW9uID0gSlNfR2V0RXhjZXB0aW9uKGN0eCk7CiAgICAgICAgICAgICAgICBqc19lcnJvcl9wcmludChjdHgsIGV4Y2VwdGlvbik7CiAgICAgICAgICAgICAgICBKU19UaHJvdyhjdHgsIGV4Y2VwdGlvbik7CiAgICAgICAgICAgICAgfSBlbHNlIGlmKCFqc19pc19udWxsaXNoKHZhbHVlKSkgewogICAgICAgICAgICAgICAgSlNCdWZmZXIgaW5wdXQgPSBqc19idWZmZXJfbmV3KGN0eCwgdmFsdWUpOwogICAgICAgICAgICAgICAgLy8ganNfc3RkX2R1bXBfZXJyb3IoY3R4KTsKCiAgICAgICAgICAgICAgICBERUJVRygiXHgxYlsyS1xyeWllbGRlZCAlcCAlenVcbiIsIGlucHV0LmRhdGEsIGlucHV0LnNpemUpOwogICAgICAgICAgICAgICAgYnVmZmVyX2FwcGVuZCgmYnVmLCBpbnB1dC5kYXRhLCBpbnB1dC5zaXplKTsKICAgICAgICAgICAgICAgIERFQlVHKCJceDFiWzJLXHJidWZmZXJlZCAlenUvJXp1IGJ5dGVzXG4iLCBidWZmZXJfUkVNQUlOKCZidWYpLCBidWZmZXJfSEVBRCgmYnVmKSk7CiAgICAgICAgICAgICAgICBqc19idWZmZXJfZnJlZSgmaW5wdXQsIGN0eCk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgbiA9IGNsaWVudC0+ZG9uZSA/IExXU19XUklURV9IVFRQX0ZJTkFMIDogTFdTX1dSSVRFX0hUVFA7CiAgICAgICAgICBzaXplID0gYnVmLndyaXRlIC0gYnVmLnN0YXJ0OwogICAgICAgICAgaWYoKHIgPSBsd3Nfd3JpdGUod3NpLCBidWYuc3RhcnQsIHNpemUsIChlbnVtIGx3c193cml0ZV9wcm90b2NvbCluKSkgIT0gc2l6ZSkKICAgICAgICAgICAgcmV0dXJuIDE7CiAgICAgICAgICBERUJVRygiXHgxYlsyS1xyd3JvdGUgJXpkJXNcbiIsIHIsIG4gPT0gTFdTX1dSSVRFX0hUVFBfRklOQUwgPyAiIChmaW5hbCkiIDogIiIpOwogICAgICAgICAgaWYobiAhPSBMV1NfV1JJVEVfSFRUUF9GSU5BTCkKICAgICAgICAgICAgbHdzX2NhbGxiYWNrX29uX3dyaXRhYmxlKHdzaSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiAwOwogICAgICB9CgogICAgY2FzZSBMV1NfQ0FMTEJBQ0tfUkVDRUlWRV9DTElFTlRfSFRUUDogewogICAgICBpbnQgcmV0OwogICAgICBzdGF0aWMgdWludDhfdCBidWZmZXJbMTAyNCArIExXU19QUkVdOwogICAgICBCeXRlQnVmZmVyIGJ1ZiA9IEJVRkZFUihidWZmZXIpOwogICAgICBpbnQgbGVuID0gYnVmZmVyX0FWQUlMKCZidWYpOwogICAgICAvLyBsd3NsX3VzZXIoImh0dHAgIzEgICIgRkdDKDE3MSwgIiUtMzhzIikgIiBmZD0lZCBidWY9JXAgd3JpdGU9JXp1IGxlbj0lZFxuIiwgbHdzX2NhbGxiYWNrX25hbWUocmVhc29uKSArIDEzLCBsd3NfZ2V0X3NvY2tldF9mZCh3c2kpLCBibG9ja19CRUdJTigmYnVmKSwgYnVmZmVyX0hFQUQoJmJ1ZiksIGxlbik7CiAgICAgIHJldCA9IGx3c19odHRwX2NsaWVudF9yZWFkKHdzaSwgKGNoYXIqKikmYnVmLndyaXRlLCAmbGVuKTsKICAgICAgaWYocmV0KQogICAgICAgIHJldHVybiAtMTsKICAgICAgcmV0dXJuIDA7CiAgICB9CgogICAgY2FzZSBMV1NfQ0FMTEJBQ0tfUkVDRUlWRV9DTElFTlRfSFRUUF9SRUFEOiB7CiAgICAgIE1pbm5ldFJlc3BvbnNlKiByZXNwID0gb3BhcXVlLT5yZXNwOwoKICAgICAgTE9HQ0IoIkNMSUVOVC1IVFRQKDIpIiwgImxlbj0lenUgaW49JyUuKnMnIiwgbGVuLCBsZW4gPiAzMCA/IDMwIDogKGludClsZW4sIChjaGFyKilpbik7CgogICAgICBpZighSlNfSXNPYmplY3Qoc2Vzc2lvbi0+cmVzcF9vYmopKQogICAgICAgIHNlc3Npb24tPnJlc3Bfb2JqID0gbWlubmV0X3Jlc3BvbnNlX3dyYXAoY3R4LCBvcGFxdWUtPnJlc3ApOwoKICAgICAgREVCVUcoIkxXU19DQUxMQkFDS19SRUNFSVZFX0NMSUVOVF9IVFRQX1JFQUQgbGVuPSV6dSBpbj0nJS4qcyciLCBsZW4sIC8qbGVuID4gMzAgPyAzMCA6Ki8gKGludClsZW4sIChjaGFyKilpbik7CgogICAgICBnZW5lcmF0b3Jfd3JpdGUocmVzcC0+Z2VuZXJhdG9yLCBpbiwgbGVuLCBKU19VTkRFRklORUQpOwoKICAgICAgcmV0dXJuIDA7CiAgICB9CgogICAgY2FzZSBMV1NfQ0FMTEJBQ0tfQ09NUExFVEVEX0NMSUVOVF9IVFRQOiB7CiAgICAgIE1pbm5ldFJlc3BvbnNlKiByZXNwID0gb3BhcXVlLT5yZXNwOwogICAgICBHZW5lcmF0b3IqIGdlbiA9IHJlc3AtPmdlbmVyYXRvcjsKICAgICAgTE9HQ0IoIkNMSUVOVC1IVFRQKDIpIiwgImdlbi0+cT0lcCIsIGdlbi0+cSk7CgogICAgICBpZihnZW4gJiYgZ2VuLT5xKSB7CgogICAgICAgIGlmKGdlbi0+cS0+Y29udGludW91cyAmJiAhSlNfSXNOdWxsKGdlbi0+Y2FsbGJhY2spKSB7CiAgICAgICAgICBCT09MIGRvbmUgPSBGQUxTRTsKICAgICAgICAgIEpTVmFsdWUgcmV0ID0gZ2VuZXJhdG9yX2RlcXVldWUoZ2VuLCAmZG9uZSk7CgogICAgICAgICAgSlNfQ2FsbChjdHgsIGdlbi0+Y2FsbGJhY2ssIEpTX1VOREVGSU5FRCwgMSwgJnJldCk7CiAgICAgICAgICBKU19GcmVlVmFsdWUoY3R4LCByZXQpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgaWYoY2xpZW50LT5vbi5odHRwLmN0eCkgewogICAgICAgIC8qICAgICAgICBNaW5uZXRSZXF1ZXN0KiByZXE7CiAgICAgICAgICAgICAgICBNaW5uZXRSZXNwb25zZSogcmVzcCA9IG1pbm5ldF9yZXNwb25zZV9kYXRhMihjbGllbnQtPm9uLmh0dHAuY3R4LCBzZXNzaW9uLT5yZXNwX29iaik7CiAgICAgICAgICAgICAgICBpbnQzMl90IHJlc3VsdCA9IC0xOwogICAgICAgICAgICAgICAgSlNWYWx1ZSByZXQ7CiAgICAgICAgKi8KCiAgICAgICAgLy8gdXJsX2NvcHkoJnJlc3AtPnVybCwgY2xpZW50LT5yZXF1ZXN0LT51cmwsIGNsaWVudC0+b24uaHR0cC5jdHgpOwoKICAgICAgICAvLyByZXNwLT50eXBlID0gaGVhZGVyc19nZXQoJnJlc3AtPmhlYWRlcnMsICJjb250ZW50LXR5cGUiLCBjbGllbnQtPm9uLmh0dHAuY3R4KTsKCiAgICAgICAgLyogICAgcmV0ID0gY2xpZW50X2V4Y2VwdGlvbihjbGllbnQsIGNhbGxiYWNrX2VtaXRfdGhpcygmY2xpZW50LT5vbi5odHRwLCBzZXNzaW9uLT53c19vYmosIDIsICZzZXNzaW9uLT5yZXFfb2JqKSk7CgogICAgICAgICAgICBpZihKU19Jc051bWJlcihyZXQpKSB7CiAgICAgICAgICAgICAgSlNfVG9JbnQzMihjbGllbnQtPm9uLmh0dHAuY3R4LCAmcmVzdWx0LCByZXQpOwoKICAgICAgICAgICAgICAvL3ByaW50Zigib25IdHRwKCkgcmV0dXJuZWQ6ICUiIFBSSWQzMiAiXG4iLCByZXN1bHQpOwogICAgICAgICAgICAgIGNsaWVudC0+d3NpID0gd3NpOwoKICAgICAgICAgICAgfSBlbHNlIGlmKChyZXEgPSBtaW5uZXRfcmVxdWVzdF9kYXRhKHJldCkpKSB7CiAgICAgICAgICAgICAgdXJsX2luZm8ocmVxLT51cmwsICZjbGllbnQtPmNvbm5lY3RfaW5mbyk7CiAgICAgICAgICAgICAgY2xpZW50LT5jb25uZWN0X2luZm8ucHdzaSA9ICZjbGllbnQtPndzaTsKICAgICAgICAgICAgICBjbGllbnQtPmNvbm5lY3RfaW5mby5jb250ZXh0ID0gY2xpZW50LT5jb250ZXh0Lmx3czsKCiAgICAgICAgICAgICAgaWYoY2xpZW50LT5yZXF1ZXN0KSB7CiAgICAgICAgICAgICAgICByZXF1ZXN0X2ZyZWUoY2xpZW50LT5yZXF1ZXN0LCBjbGllbnQtPm9uLmh0dHAuY3R4KTsKICAgICAgICAgICAgICAgIGNsaWVudC0+cmVxdWVzdCA9IDA7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpZihjbGllbnQtPnJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICByZXNwb25zZV9mcmVlKGNsaWVudC0+cmVzcG9uc2UsIGNsaWVudC0+b24uaHR0cC5jdHgpOwogICAgICAgICAgICAgICAgY2xpZW50LT5yZXNwb25zZSA9IDA7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmKG9wYXF1ZS0+cmVzcCkgewogICAgICAgICAgICAgICAgcmVzcG9uc2VfZnJlZShvcGFxdWUtPnJlc3AsIGNsaWVudC0+b24uaHR0cC5jdHgpOwogICAgICAgICAgICAgICAgb3BhcXVlLT5yZXNwID0gMDsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGNsaWVudC0+cmVxdWVzdCA9IHJlcTsKICAgICAgICAgICAgICBjbGllbnQtPnJlc3BvbnNlID0gcmVzcG9uc2VfbmV3KGNsaWVudC0+b24uaHR0cC5jdHgpOwoKCiAgICAgICAgICAgICAgbHdzX2NsaWVudF9jb25uZWN0X3ZpYV9pbmZvKCZjbGllbnQtPmNvbm5lY3RfaW5mbyk7CgogICAgICAgICAgICAgIHJlc3VsdCA9IDA7CiAgICAgICAgICAgIH0gZWxzZSBpZihqc19pc19wcm9taXNlKGN0eCwgcmV0KSkgewogICAgICAgICAgICAgIEpTVmFsdWUgcHJvbWlzZSA9IGNsaWVudF9wcm9taXNlKGN0eCwgc2Vzc2lvbiwgcmVzcCwgd3NpLCByZXQpOwoKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBjb25zdCBjaGFyKiBzdHIgPSBKU19Ub0NTdHJpbmcoY3R4LCByZXQpOwogICAgICAgICAgICAgIEpTX1Rocm93SW50ZXJuYWxFcnJvcihjbGllbnQtPm9uLmh0dHAuY3R4LCAib25IdHRwIGRpZG4ndCByZXR1cm4gYSBudW1iZXI6ICVzIiwgc3RyKTsKICAgICAgICAgICAgICBpZihzdHIpCiAgICAgICAgICAgICAgICBKU19GcmVlQ1N0cmluZyhjdHgsIHN0cik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKHJlc3VsdCAhPSAwKSB7CiAgICAgICAgICAgICAgbHdzX2NhbmNlbF9zZXJ2aWNlKGx3c19nZXRfY29udGV4dCh3c2kpKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsqLwogICAgICB9CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBMV1NfQ0FMTEJBQ0tfUFJPVE9DT0xfREVTVFJPWTogewogICAgICBicmVhazsKICAgIH0KICAgIGRlZmF1bHQ6IHsKICAgICAgbWlubmV0X2x3c191bmhhbmRsZWQoX19mdW5jX18sIHJlYXNvbik7CiAgICAgIGJyZWFrOwogICAgfQogIH0KCiAgLyogaWYocmVhc29uIDwgTFdTX0NBTExCQUNLX0FERF9QT0xMX0ZEIHx8IHJlYXNvbiA+IExXU19DQUxMQkFDS19VTkxPQ0tfUE9MTCkKICAgICBsd3NsX25vdGljZSgiY2xpZW50LWh0dHAgICUtMzhzIGZkPSVpLCBpbj0nJS4qcydcbiIsIGx3c19jYWxsYmFja19uYW1lKHJlYXNvbikgKyAxMywgbHdzX2dldF9zb2NrZXRfZmQobHdzX2dldF9uZXR3b3JrX3dzaSh3c2kpKSwgKGludClsZW4sIChjaGFyKilpbik7CiAqLwogIHJldHVybiBsd3NfY2FsbGJhY2tfaHR0cF9kdW1teSh3c2ksIHJlYXNvbiwgdXNlciwgaW4sIGxlbik7Cn0KAAAAAAAAAAADNQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQygAAAAAAABDKAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAQygAAAAAAABDKAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAQygAAAAAAABDKAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAQygAAAAAAABDKAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/minnet-ringbuffer.c",
			"settings":
			{
				"buffer_size": 15007,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"",
					null,
					"AQAAAPQgAAAAAAAABCEAAAAAAAAPAAAASlNfTmV3Q0Nsb3N1cmUo",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/minnet-generator.c",
			"settings":
			{
				"buffer_size": 3681,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"",
					null,
					"BQAAAN0NAAAAAAAA7Q0AAAAAAAAPAAAASlNfTmV3Q0Nsb3N1cmUojAsAAAAAAACcCwAAAAAAAA8AAABKU19OZXdDQ2xvc3VyZSgoCgAAAAAAADgKAAAAAAAADwAAAEpTX05ld0NDbG9zdXJlKHYIAAAAAAAAhggAAAAAAAAPAAAASlNfTmV3Q0Nsb3N1cmUoDAgAAAAAAAAcCAAAAAAAAA8AAABKU19OZXdDQ2xvc3VyZSg",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABIDgAAI2luY2x1ZGUgIm1pbm5ldC1nZW5lcmF0b3IuaCIKI2luY2x1ZGUgImpzdXRpbHMuaCIKI2luY2x1ZGUgPHF1aWNranMuaD4KI2luY2x1ZGUgPGFzc2VydC5oPgojaW5jbHVkZSA8bGlid2Vic29ja2V0cy5oPgoKVEhSRUFEX0xPQ0FMIEpTQ2xhc3NJRCBtaW5uZXRfZ2VuZXJhdG9yX2NsYXNzX2lkOwpUSFJFQURfTE9DQUwgSlNWYWx1ZSBtaW5uZXRfZ2VuZXJhdG9yX3Byb3RvLCBtaW5uZXRfZ2VuZXJhdG9yX2N0b3I7CgpKU0NsYXNzRGVmIG1pbm5ldF9nZW5lcmF0b3JfY2xhc3MgPSB7CiAgICAiTWlubmV0R2VuZXJhdG9yIiwKICAgIC8vLmZpbmFsaXplciA9IG1pbm5ldF9nZW5lcmF0b3JfZmluYWxpemVyLAp9OwoKc3RhdGljIGNvbnN0IEpTQ0Z1bmN0aW9uTGlzdEVudHJ5IG1pbm5ldF9nZW5lcmF0b3JfZnVuY3NbXSA9IHsKICAgIEpTX0NGVU5DX0RFRigiW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSIsIDAsIChKU0NGdW5jdGlvbiopJkpTX0R1cFZhbHVlKSwKICAgIEpTX1BST1BfU1RSSU5HX0RFRigiW1N5bWJvbC50b1N0cmluZ1RhZ10iLCAiTWlubmV0R2VuZXJhdG9yIiwgSlNfUFJPUF9DT05GSUdVUkFCTEUpLAp9OwoKc3RhdGljIEpTVmFsdWUKbWlubmV0X2dlbmVyYXRvcl9uZXh0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QqIGFyZ3YsIGludCBtYWdpYywgdm9pZCogb3BhcXVlKSB7CiAgTWlubmV0R2VuZXJhdG9yKiBnZW4gPSAoTWlubmV0R2VuZXJhdG9yKilvcGFxdWU7CiAgSlNWYWx1ZSByZXQgPSBKU19VTkRFRklORUQ7CgogIHJldCA9IGdlbmVyYXRvcl9uZXh0KGdlbik7CgogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCm1pbm5ldF9nZW5lcmF0b3JfcHVzaChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2LCBpbnQgbWFnaWMsIHZvaWQqIG9wYXF1ZSkgewogIE1pbm5ldEdlbmVyYXRvciogZ2VuID0gKE1pbm5ldEdlbmVyYXRvciopb3BhcXVlOwogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEOwoKICBpZihhcmdjIDwgMSkKICAgIHJldHVybiBKU19UaHJvd0ludGVybmFsRXJyb3IoY3R4LCAiYXJndW1lbnQgcmVxdWlyZWQiKTsKCiAgSlNWYWx1ZSBjYWxsYmFjayA9IGFyZ2MgPiAxID8gSlNfRHVwVmFsdWUoY3R4LCBhcmd2WzFdKSA6IEpTX05VTEw7CgogIHJldCA9IGdlbmVyYXRvcl9wdXNoKGdlbiwgYXJndlswXSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgY2FsbGJhY2spOwogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCm1pbm5ldF9nZW5lcmF0b3Jfc3RvcChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2LCBpbnQgbWFnaWMsIHZvaWQqIG9wYXF1ZSkgewogIE1pbm5ldEdlbmVyYXRvciogZ2VuID0gKE1pbm5ldEdlbmVyYXRvciopb3BhcXVlOwogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEOwoKICBKU1ZhbHVlIGNhbGxiYWNrID0gYXJnYyA+IDEgPyBKU19EdXBWYWx1ZShjdHgsIGFyZ3ZbMV0pIDogSlNfTlVMTDsKCiAgcmV0ID0gSlNfTmV3Qm9vbChjdHgsIGdlbmVyYXRvcl9jbG9zZShnZW4sIGNhbGxiYWNrKSk7CgogIEpTX0ZyZWVWYWx1ZShjdHgsIGNhbGxiYWNrKTsKCiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQptaW5uZXRfZ2VuZXJhdG9yX2NvbnN0cnVjdG9yKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgbmV3X3RhcmdldCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pIHsKICBNaW5uZXRHZW5lcmF0b3IqIGdlbjsKICBKU1ZhbHVlIHJldCwgYXJnc1syXTsKCiAgaWYoIShnZW4gPSBnZW5lcmF0b3JfbmV3KGN0eCkpKQogICAgcmV0dXJuIEpTX1Rocm93T3V0T2ZNZW1vcnkoY3R4KTsKCiAgaWYoYXJnYyA8IDEgfHwgIUpTX0lzRnVuY3Rpb24oY3R4LCBhcmd2WzBdKSkKICAgIHJldHVybiBKU19UaHJvd0ludGVybmFsRXJyb3IoY3R4LCAiTWlubmV0R2VuZXJhdG9yIG5lZWRzIGEgZnVuY3Rpb24gcGFyYW1ldGVyIik7CgogIGFyZ3NbMF0gPSBqc19jY2xvc3VyZV9uZXcoY3R4LCBtaW5uZXRfZ2VuZXJhdG9yX3B1c2gsIDAsIDAsIGdlbmVyYXRvcl9kdXAoZ2VuKSwgKHZvaWQqKSZnZW5lcmF0b3JfZnJlZSk7CiAgYXJnc1sxXSA9IGpzX2NjbG9zdXJlX25ldyhjdHgsIG1pbm5ldF9nZW5lcmF0b3Jfc3RvcCwgMCwgMCwgZ2VuZXJhdG9yX2R1cChnZW4pLCAodm9pZCopJmdlbmVyYXRvcl9mcmVlKTsKCiAgcmV0ID0gSlNfQ2FsbChjdHgsIGFyZ3ZbMF0sIEpTX1VOREVGSU5FRCwgMiwgYXJncyk7CgogIEpTX0ZyZWVWYWx1ZShjdHgsIHJldCk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgYXJnc1swXSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgYXJnc1sxXSk7CgogIHJldHVybiBtaW5uZXRfZ2VuZXJhdG9yX2l0ZXJhdG9yKGN0eCwgZ2VuKTsKfQoKSlNWYWx1ZQptaW5uZXRfZ2VuZXJhdG9yX2l0ZXJhdG9yKEpTQ29udGV4dCogY3R4LCBNaW5uZXRHZW5lcmF0b3IqIGdlbikgewogIEpTVmFsdWUgcmV0ID0gSlNfTmV3T2JqZWN0KGN0eCk7CgogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgcmV0LCAibmV4dCIsIGpzX2NjbG9zdXJlX25ldyhjdHgsIG1pbm5ldF9nZW5lcmF0b3JfbmV4dCwgMCwgMCwgZ2VuZXJhdG9yX2R1cChnZW4pLCAodm9pZCopJmdlbmVyYXRvcl9mcmVlKSk7CiAgSlNfU2V0UHJvcGVydHlGdW5jdGlvbkxpc3QoY3R4LCByZXQsIG1pbm5ldF9nZW5lcmF0b3JfZnVuY3MsIGNvdW50b2YobWlubmV0X2dlbmVyYXRvcl9mdW5jcykpOwoKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCm1pbm5ldF9nZW5lcmF0b3JfcmVhZGVyKEpTQ29udGV4dCogY3R4LCBNaW5uZXRHZW5lcmF0b3IqIGdlbikgewogIEpTVmFsdWUgcmV0ID0gSlNfTmV3T2JqZWN0KGN0eCk7CgogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgcmV0LCAicmVhZCIsIGpzX2NjbG9zdXJlX25ldyhjdHgsIG1pbm5ldF9nZW5lcmF0b3JfbmV4dCwgMCwgMCwgZ2VuZXJhdG9yX2R1cChnZW4pLCAodm9pZCopJmdlbmVyYXRvcl9mcmVlKSk7CiAgSlNfU2V0UHJvcGVydHlGdW5jdGlvbkxpc3QoY3R4LCByZXQsIG1pbm5ldF9nZW5lcmF0b3JfZnVuY3MsIGNvdW50b2YobWlubmV0X2dlbmVyYXRvcl9mdW5jcykpOwoKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCm1pbm5ldF9nZW5lcmF0b3JfY3JlYXRlKEpTQ29udGV4dCogY3R4LCBNaW5uZXRHZW5lcmF0b3IqKiBnZW5fcCkgewogIGlmKCEqZ2VuX3ApCiAgICAqZ2VuX3AgPSBnZW5lcmF0b3JfbmV3KGN0eCk7CiAgZWxzZQogICAgZ2VuZXJhdG9yX2R1cCgqZ2VuX3ApOwoKICByZXR1cm4gbWlubmV0X2dlbmVyYXRvcl9pdGVyYXRvcihjdHgsICpnZW5fcCk7Cn0KCi8qCkpTVmFsdWUKbWlubmV0X2dlbmVyYXRvcl9pdGVyYXRvcihKU0NvbnRleHQqIGN0eCwgTWlubmV0R2VuZXJhdG9yKiBnZW4pIHsKICBKU1ZhbHVlIHJldCA9IEpTX05ld09iamVjdChjdHgpOwoKICAgICsrZ2VuLT5yZWZfY291bnQ7CgogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgcmV0LCAibmV4dCIsIGpzX2NjbG9zdXJlX25ldyhjdHgsIG1pbm5ldF9nZW5lcmF0b3JfbmV4dCwgMCwgMCwgZ2VuX3AsICh2b2lkKikmZ2VuZXJhdG9yX2ZyZWUpKTsKCiAgcmV0dXJuIHJldDsKfQoqLwoAAAAAAAAAAEgOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABIDgAAI2luY2x1ZGUgIm1pbm5ldC1nZW5lcmF0b3IuaCIKI2luY2x1ZGUgImpzdXRpbHMuaCIKI2luY2x1ZGUgPHF1aWNranMuaD4KI2luY2x1ZGUgPGFzc2VydC5oPgojaW5jbHVkZSA8bGlid2Vic29ja2V0cy5oPgoKVEhSRUFEX0xPQ0FMIEpTQ2xhc3NJRCBtaW5uZXRfZ2VuZXJhdG9yX2NsYXNzX2lkOwpUSFJFQURfTE9DQUwgSlNWYWx1ZSBtaW5uZXRfZ2VuZXJhdG9yX3Byb3RvLCBtaW5uZXRfZ2VuZXJhdG9yX2N0b3I7CgpKU0NsYXNzRGVmIG1pbm5ldF9nZW5lcmF0b3JfY2xhc3MgPSB7CiAgICAiTWlubmV0R2VuZXJhdG9yIiwKICAgIC8vLmZpbmFsaXplciA9IG1pbm5ldF9nZW5lcmF0b3JfZmluYWxpemVyLAp9OwoKc3RhdGljIGNvbnN0IEpTQ0Z1bmN0aW9uTGlzdEVudHJ5IG1pbm5ldF9nZW5lcmF0b3JfZnVuY3NbXSA9IHsKICAgIEpTX0NGVU5DX0RFRigiW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSIsIDAsIChKU0NGdW5jdGlvbiopJkpTX0R1cFZhbHVlKSwKICAgIEpTX1BST1BfU1RSSU5HX0RFRigiW1N5bWJvbC50b1N0cmluZ1RhZ10iLCAiTWlubmV0R2VuZXJhdG9yIiwgSlNfUFJPUF9DT05GSUdVUkFCTEUpLAp9OwoKc3RhdGljIEpTVmFsdWUKbWlubmV0X2dlbmVyYXRvcl9uZXh0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QqIGFyZ3YsIGludCBtYWdpYywgdm9pZCogb3BhcXVlKSB7CiAgTWlubmV0R2VuZXJhdG9yKiBnZW4gPSAoTWlubmV0R2VuZXJhdG9yKilvcGFxdWU7CiAgSlNWYWx1ZSByZXQgPSBKU19VTkRFRklORUQ7CgogIHJldCA9IGdlbmVyYXRvcl9uZXh0KGdlbik7CgogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCm1pbm5ldF9nZW5lcmF0b3JfcHVzaChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2LCBpbnQgbWFnaWMsIHZvaWQqIG9wYXF1ZSkgewogIE1pbm5ldEdlbmVyYXRvciogZ2VuID0gKE1pbm5ldEdlbmVyYXRvciopb3BhcXVlOwogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEOwoKICBpZihhcmdjIDwgMSkKICAgIHJldHVybiBKU19UaHJvd0ludGVybmFsRXJyb3IoY3R4LCAiYXJndW1lbnQgcmVxdWlyZWQiKTsKCiAgSlNWYWx1ZSBjYWxsYmFjayA9IGFyZ2MgPiAxID8gSlNfRHVwVmFsdWUoY3R4LCBhcmd2WzFdKSA6IEpTX05VTEw7CgogIHJldCA9IGdlbmVyYXRvcl9wdXNoKGdlbiwgYXJndlswXSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgY2FsbGJhY2spOwogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCm1pbm5ldF9nZW5lcmF0b3Jfc3RvcChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2LCBpbnQgbWFnaWMsIHZvaWQqIG9wYXF1ZSkgewogIE1pbm5ldEdlbmVyYXRvciogZ2VuID0gKE1pbm5ldEdlbmVyYXRvciopb3BhcXVlOwogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEOwoKICBKU1ZhbHVlIGNhbGxiYWNrID0gYXJnYyA+IDEgPyBKU19EdXBWYWx1ZShjdHgsIGFyZ3ZbMV0pIDogSlNfTlVMTDsKCiAgcmV0ID0gSlNfTmV3Qm9vbChjdHgsIGdlbmVyYXRvcl9jbG9zZShnZW4sIGNhbGxiYWNrKSk7CgogIEpTX0ZyZWVWYWx1ZShjdHgsIGNhbGxiYWNrKTsKCiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQptaW5uZXRfZ2VuZXJhdG9yX2NvbnN0cnVjdG9yKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgbmV3X3RhcmdldCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pIHsKICBNaW5uZXRHZW5lcmF0b3IqIGdlbjsKICBKU1ZhbHVlIHJldCwgYXJnc1syXTsKCiAgaWYoIShnZW4gPSBnZW5lcmF0b3JfbmV3KGN0eCkpKQogICAgcmV0dXJuIEpTX1Rocm93T3V0T2ZNZW1vcnkoY3R4KTsKCiAgaWYoYXJnYyA8IDEgfHwgIUpTX0lzRnVuY3Rpb24oY3R4LCBhcmd2WzBdKSkKICAgIHJldHVybiBKU19UaHJvd0ludGVybmFsRXJyb3IoY3R4LCAiTWlubmV0R2VuZXJhdG9yIG5lZWRzIGEgZnVuY3Rpb24gcGFyYW1ldGVyIik7CgogIGFyZ3NbMF0gPSBqc19jY2xvc3VyZV9uZXcoY3R4LCBtaW5uZXRfZ2VuZXJhdG9yX3B1c2gsIDAsIDAsIGdlbmVyYXRvcl9kdXAoZ2VuKSwgKHZvaWQqKSZnZW5lcmF0b3JfZnJlZSk7CiAgYXJnc1sxXSA9IGpzX2NjbG9zdXJlX25ldyhjdHgsIG1pbm5ldF9nZW5lcmF0b3Jfc3RvcCwgMCwgMCwgZ2VuZXJhdG9yX2R1cChnZW4pLCAodm9pZCopJmdlbmVyYXRvcl9mcmVlKTsKCiAgcmV0ID0gSlNfQ2FsbChjdHgsIGFyZ3ZbMF0sIEpTX1VOREVGSU5FRCwgMiwgYXJncyk7CgogIEpTX0ZyZWVWYWx1ZShjdHgsIHJldCk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgYXJnc1swXSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgYXJnc1sxXSk7CgogIHJldHVybiBtaW5uZXRfZ2VuZXJhdG9yX2l0ZXJhdG9yKGN0eCwgZ2VuKTsKfQoKSlNWYWx1ZQptaW5uZXRfZ2VuZXJhdG9yX2l0ZXJhdG9yKEpTQ29udGV4dCogY3R4LCBNaW5uZXRHZW5lcmF0b3IqIGdlbikgewogIEpTVmFsdWUgcmV0ID0gSlNfTmV3T2JqZWN0KGN0eCk7CgogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgcmV0LCAibmV4dCIsIGpzX2NjbG9zdXJlX25ldyhjdHgsIG1pbm5ldF9nZW5lcmF0b3JfbmV4dCwgMCwgMCwgZ2VuZXJhdG9yX2R1cChnZW4pLCAodm9pZCopJmdlbmVyYXRvcl9mcmVlKSk7CiAgSlNfU2V0UHJvcGVydHlGdW5jdGlvbkxpc3QoY3R4LCByZXQsIG1pbm5ldF9nZW5lcmF0b3JfZnVuY3MsIGNvdW50b2YobWlubmV0X2dlbmVyYXRvcl9mdW5jcykpOwoKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCm1pbm5ldF9nZW5lcmF0b3JfcmVhZGVyKEpTQ29udGV4dCogY3R4LCBNaW5uZXRHZW5lcmF0b3IqIGdlbikgewogIEpTVmFsdWUgcmV0ID0gSlNfTmV3T2JqZWN0KGN0eCk7CgogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgcmV0LCAicmVhZCIsIGpzX2NjbG9zdXJlX25ldyhjdHgsIG1pbm5ldF9nZW5lcmF0b3JfbmV4dCwgMCwgMCwgZ2VuZXJhdG9yX2R1cChnZW4pLCAodm9pZCopJmdlbmVyYXRvcl9mcmVlKSk7CiAgSlNfU2V0UHJvcGVydHlGdW5jdGlvbkxpc3QoY3R4LCByZXQsIG1pbm5ldF9nZW5lcmF0b3JfZnVuY3MsIGNvdW50b2YobWlubmV0X2dlbmVyYXRvcl9mdW5jcykpOwoKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCm1pbm5ldF9nZW5lcmF0b3JfY3JlYXRlKEpTQ29udGV4dCogY3R4LCBNaW5uZXRHZW5lcmF0b3IqKiBnZW5fcCkgewogIGlmKCEqZ2VuX3ApCiAgICAqZ2VuX3AgPSBnZW5lcmF0b3JfbmV3KGN0eCk7CiAgZWxzZQogICAgZ2VuZXJhdG9yX2R1cCgqZ2VuX3ApOwoKICByZXR1cm4gbWlubmV0X2dlbmVyYXRvcl9pdGVyYXRvcihjdHgsICpnZW5fcCk7Cn0KCi8qCkpTVmFsdWUKbWlubmV0X2dlbmVyYXRvcl9pdGVyYXRvcihKU0NvbnRleHQqIGN0eCwgTWlubmV0R2VuZXJhdG9yKiBnZW4pIHsKICBKU1ZhbHVlIHJldCA9IEpTX05ld09iamVjdChjdHgpOwoKICAgICsrZ2VuLT5yZWZfY291bnQ7CgogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgcmV0LCAibmV4dCIsIGpzX2NjbG9zdXJlX25ldyhjdHgsIG1pbm5ldF9nZW5lcmF0b3JfbmV4dCwgMCwgMCwgZ2VuX3AsICh2b2lkKikmZ2VuZXJhdG9yX2ZyZWUpKTsKCiAgcmV0dXJuIHJldDsKfQoqLwoAAAAAAAAAAGEOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABhDgAAI2luY2x1ZGUgIm1pbm5ldC1nZW5lcmF0b3IuaCIKI2luY2x1ZGUgImpzdXRpbHMuaCIKI2luY2x1ZGUgPHF1aWNranMuaD4KI2luY2x1ZGUgPGFzc2VydC5oPgojaW5jbHVkZSA8bGlid2Vic29ja2V0cy5oPgoKVEhSRUFEX0xPQ0FMIEpTQ2xhc3NJRCBtaW5uZXRfZ2VuZXJhdG9yX2NsYXNzX2lkOwpUSFJFQURfTE9DQUwgSlNWYWx1ZSBtaW5uZXRfZ2VuZXJhdG9yX3Byb3RvLCBtaW5uZXRfZ2VuZXJhdG9yX2N0b3I7CgpKU0NsYXNzRGVmIG1pbm5ldF9nZW5lcmF0b3JfY2xhc3MgPSB7CiAgICAiTWlubmV0R2VuZXJhdG9yIiwKICAgIC8vLmZpbmFsaXplciA9IG1pbm5ldF9nZW5lcmF0b3JfZmluYWxpemVyLAp9OwoKc3RhdGljIGNvbnN0IEpTQ0Z1bmN0aW9uTGlzdEVudHJ5IG1pbm5ldF9nZW5lcmF0b3JfZnVuY3NbXSA9IHsKICAgIEpTX0NGVU5DX0RFRigiW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSIsIDAsIChKU0NGdW5jdGlvbiopJkpTX0R1cFZhbHVlKSwKICAgIEpTX1BST1BfU1RSSU5HX0RFRigiW1N5bWJvbC50b1N0cmluZ1RhZ10iLCAiTWlubmV0R2VuZXJhdG9yIiwgSlNfUFJPUF9DT05GSUdVUkFCTEUpLAp9OwoKc3RhdGljIEpTVmFsdWUKbWlubmV0X2dlbmVyYXRvcl9uZXh0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QqIGFyZ3YsIGludCBtYWdpYywgdm9pZCogb3BhcXVlKSB7CiAgTWlubmV0R2VuZXJhdG9yKiBnZW4gPSAoTWlubmV0R2VuZXJhdG9yKilvcGFxdWU7CiAgSlNWYWx1ZSByZXQgPSBKU19VTkRFRklORUQ7CgogIHJldCA9IGdlbmVyYXRvcl9uZXh0KGdlbik7CgogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCm1pbm5ldF9nZW5lcmF0b3JfcHVzaChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2LCBpbnQgbWFnaWMsIHZvaWQqIG9wYXF1ZSkgewogIE1pbm5ldEdlbmVyYXRvciogZ2VuID0gKE1pbm5ldEdlbmVyYXRvciopb3BhcXVlOwogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEOwoKICBpZihhcmdjIDwgMSkKICAgIHJldHVybiBKU19UaHJvd0ludGVybmFsRXJyb3IoY3R4LCAiYXJndW1lbnQgcmVxdWlyZWQiKTsKCiAgSlNWYWx1ZSBjYWxsYmFjayA9IGFyZ2MgPiAxID8gSlNfRHVwVmFsdWUoY3R4LCBhcmd2WzFdKSA6IEpTX05VTEw7CgogIHJldCA9IGdlbmVyYXRvcl9wdXNoKGdlbiwgYXJndlswXSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgY2FsbGJhY2spOwogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCm1pbm5ldF9nZW5lcmF0b3Jfc3RvcChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2LCBpbnQgbWFnaWMsIHZvaWQqIG9wYXF1ZSkgewogIE1pbm5ldEdlbmVyYXRvciogZ2VuID0gKE1pbm5ldEdlbmVyYXRvciopb3BhcXVlOwogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEOwoKICBKU1ZhbHVlIGNhbGxiYWNrID0gYXJnYyA+IDEgPyBKU19EdXBWYWx1ZShjdHgsIGFyZ3ZbMV0pIDogSlNfTlVMTDsKCiAgcmV0ID0gSlNfTmV3Qm9vbChjdHgsIGdlbmVyYXRvcl9jbG9zZShnZW4sIGNhbGxiYWNrKSk7CgogIEpTX0ZyZWVWYWx1ZShjdHgsIGNhbGxiYWNrKTsKCiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQptaW5uZXRfZ2VuZXJhdG9yX2NvbnN0cnVjdG9yKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgbmV3X3RhcmdldCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pIHsKICBNaW5uZXRHZW5lcmF0b3IqIGdlbjsKICBKU1ZhbHVlIHJldCwgYXJnc1syXTsKCiAgaWYoIShnZW4gPSBnZW5lcmF0b3JfbmV3KGN0eCkpKQogICAgcmV0dXJuIEpTX1Rocm93T3V0T2ZNZW1vcnkoY3R4KTsKCiAgaWYoYXJnYyA8IDEgfHwgIUpTX0lzRnVuY3Rpb24oY3R4LCBhcmd2WzBdKSkKICAgIHJldHVybiBKU19UaHJvd0ludGVybmFsRXJyb3IoY3R4LCAiTWlubmV0R2VuZXJhdG9yIG5lZWRzIGEgZnVuY3Rpb24gcGFyYW1ldGVyIik7CgogIGFyZ3NbMF0gPSBqc19mdW5jdGlvbl9jY2xvc3VyZShjdHgsIG1pbm5ldF9nZW5lcmF0b3JfcHVzaCwgMCwgMCwgZ2VuZXJhdG9yX2R1cChnZW4pLCAodm9pZCopJmdlbmVyYXRvcl9mcmVlKTsKICBhcmdzWzFdID0ganNfZnVuY3Rpb25fY2Nsb3N1cmUoY3R4LCBtaW5uZXRfZ2VuZXJhdG9yX3N0b3AsIDAsIDAsIGdlbmVyYXRvcl9kdXAoZ2VuKSwgKHZvaWQqKSZnZW5lcmF0b3JfZnJlZSk7CgogIHJldCA9IEpTX0NhbGwoY3R4LCBhcmd2WzBdLCBKU19VTkRFRklORUQsIDIsIGFyZ3MpOwoKICBKU19GcmVlVmFsdWUoY3R4LCByZXQpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGFyZ3NbMF0pOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGFyZ3NbMV0pOwoKICByZXR1cm4gbWlubmV0X2dlbmVyYXRvcl9pdGVyYXRvcihjdHgsIGdlbik7Cn0KCkpTVmFsdWUKbWlubmV0X2dlbmVyYXRvcl9pdGVyYXRvcihKU0NvbnRleHQqIGN0eCwgTWlubmV0R2VuZXJhdG9yKiBnZW4pIHsKICBKU1ZhbHVlIHJldCA9IEpTX05ld09iamVjdChjdHgpOwoKICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIHJldCwgIm5leHQiLCBqc19mdW5jdGlvbl9jY2xvc3VyZShjdHgsIG1pbm5ldF9nZW5lcmF0b3JfbmV4dCwgMCwgMCwgZ2VuZXJhdG9yX2R1cChnZW4pLCAodm9pZCopJmdlbmVyYXRvcl9mcmVlKSk7CiAgSlNfU2V0UHJvcGVydHlGdW5jdGlvbkxpc3QoY3R4LCByZXQsIG1pbm5ldF9nZW5lcmF0b3JfZnVuY3MsIGNvdW50b2YobWlubmV0X2dlbmVyYXRvcl9mdW5jcykpOwoKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCm1pbm5ldF9nZW5lcmF0b3JfcmVhZGVyKEpTQ29udGV4dCogY3R4LCBNaW5uZXRHZW5lcmF0b3IqIGdlbikgewogIEpTVmFsdWUgcmV0ID0gSlNfTmV3T2JqZWN0KGN0eCk7CgogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgcmV0LCAicmVhZCIsIGpzX2Z1bmN0aW9uX2NjbG9zdXJlKGN0eCwgbWlubmV0X2dlbmVyYXRvcl9uZXh0LCAwLCAwLCBnZW5lcmF0b3JfZHVwKGdlbiksICh2b2lkKikmZ2VuZXJhdG9yX2ZyZWUpKTsKICBKU19TZXRQcm9wZXJ0eUZ1bmN0aW9uTGlzdChjdHgsIHJldCwgbWlubmV0X2dlbmVyYXRvcl9mdW5jcywgY291bnRvZihtaW5uZXRfZ2VuZXJhdG9yX2Z1bmNzKSk7CgogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKbWlubmV0X2dlbmVyYXRvcl9jcmVhdGUoSlNDb250ZXh0KiBjdHgsIE1pbm5ldEdlbmVyYXRvcioqIGdlbl9wKSB7CiAgaWYoISpnZW5fcCkKICAgICpnZW5fcCA9IGdlbmVyYXRvcl9uZXcoY3R4KTsKICBlbHNlCiAgICBnZW5lcmF0b3JfZHVwKCpnZW5fcCk7CgogIHJldHVybiBtaW5uZXRfZ2VuZXJhdG9yX2l0ZXJhdG9yKGN0eCwgKmdlbl9wKTsKfQoKLyoKSlNWYWx1ZQptaW5uZXRfZ2VuZXJhdG9yX2l0ZXJhdG9yKEpTQ29udGV4dCogY3R4LCBNaW5uZXRHZW5lcmF0b3IqIGdlbikgewogIEpTVmFsdWUgcmV0ID0gSlNfTmV3T2JqZWN0KGN0eCk7CgogICAgKytnZW4tPnJlZl9jb3VudDsKCiAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCByZXQsICJuZXh0IiwganNfZnVuY3Rpb25fY2Nsb3N1cmUoY3R4LCBtaW5uZXRfZ2VuZXJhdG9yX25leHQsIDAsIDAsIGdlbl9wLCAodm9pZCopJmdlbmVyYXRvcl9mcmVlKSk7CgogIHJldHVybiByZXQ7Cn0KKi8KAAAAAAAAAABhDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABhDgAAI2luY2x1ZGUgIm1pbm5ldC1nZW5lcmF0b3IuaCIKI2luY2x1ZGUgImpzdXRpbHMuaCIKI2luY2x1ZGUgPHF1aWNranMuaD4KI2luY2x1ZGUgPGFzc2VydC5oPgojaW5jbHVkZSA8bGlid2Vic29ja2V0cy5oPgoKVEhSRUFEX0xPQ0FMIEpTQ2xhc3NJRCBtaW5uZXRfZ2VuZXJhdG9yX2NsYXNzX2lkOwpUSFJFQURfTE9DQUwgSlNWYWx1ZSBtaW5uZXRfZ2VuZXJhdG9yX3Byb3RvLCBtaW5uZXRfZ2VuZXJhdG9yX2N0b3I7CgpKU0NsYXNzRGVmIG1pbm5ldF9nZW5lcmF0b3JfY2xhc3MgPSB7CiAgICAiTWlubmV0R2VuZXJhdG9yIiwKICAgIC8vLmZpbmFsaXplciA9IG1pbm5ldF9nZW5lcmF0b3JfZmluYWxpemVyLAp9OwoKc3RhdGljIGNvbnN0IEpTQ0Z1bmN0aW9uTGlzdEVudHJ5IG1pbm5ldF9nZW5lcmF0b3JfZnVuY3NbXSA9IHsKICAgIEpTX0NGVU5DX0RFRigiW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSIsIDAsIChKU0NGdW5jdGlvbiopJkpTX0R1cFZhbHVlKSwKICAgIEpTX1BST1BfU1RSSU5HX0RFRigiW1N5bWJvbC50b1N0cmluZ1RhZ10iLCAiTWlubmV0R2VuZXJhdG9yIiwgSlNfUFJPUF9DT05GSUdVUkFCTEUpLAp9OwoKc3RhdGljIEpTVmFsdWUKbWlubmV0X2dlbmVyYXRvcl9uZXh0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QqIGFyZ3YsIGludCBtYWdpYywgdm9pZCogb3BhcXVlKSB7CiAgTWlubmV0R2VuZXJhdG9yKiBnZW4gPSAoTWlubmV0R2VuZXJhdG9yKilvcGFxdWU7CiAgSlNWYWx1ZSByZXQgPSBKU19VTkRFRklORUQ7CgogIHJldCA9IGdlbmVyYXRvcl9uZXh0KGdlbik7CgogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCm1pbm5ldF9nZW5lcmF0b3JfcHVzaChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2LCBpbnQgbWFnaWMsIHZvaWQqIG9wYXF1ZSkgewogIE1pbm5ldEdlbmVyYXRvciogZ2VuID0gKE1pbm5ldEdlbmVyYXRvciopb3BhcXVlOwogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEOwoKICBpZihhcmdjIDwgMSkKICAgIHJldHVybiBKU19UaHJvd0ludGVybmFsRXJyb3IoY3R4LCAiYXJndW1lbnQgcmVxdWlyZWQiKTsKCiAgSlNWYWx1ZSBjYWxsYmFjayA9IGFyZ2MgPiAxID8gSlNfRHVwVmFsdWUoY3R4LCBhcmd2WzFdKSA6IEpTX05VTEw7CgogIHJldCA9IGdlbmVyYXRvcl9wdXNoKGdlbiwgYXJndlswXSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgY2FsbGJhY2spOwogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCm1pbm5ldF9nZW5lcmF0b3Jfc3RvcChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2LCBpbnQgbWFnaWMsIHZvaWQqIG9wYXF1ZSkgewogIE1pbm5ldEdlbmVyYXRvciogZ2VuID0gKE1pbm5ldEdlbmVyYXRvciopb3BhcXVlOwogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEOwoKICBKU1ZhbHVlIGNhbGxiYWNrID0gYXJnYyA+IDEgPyBKU19EdXBWYWx1ZShjdHgsIGFyZ3ZbMV0pIDogSlNfTlVMTDsKCiAgcmV0ID0gSlNfTmV3Qm9vbChjdHgsIGdlbmVyYXRvcl9jbG9zZShnZW4sIGNhbGxiYWNrKSk7CgogIEpTX0ZyZWVWYWx1ZShjdHgsIGNhbGxiYWNrKTsKCiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQptaW5uZXRfZ2VuZXJhdG9yX2NvbnN0cnVjdG9yKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgbmV3X3RhcmdldCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pIHsKICBNaW5uZXRHZW5lcmF0b3IqIGdlbjsKICBKU1ZhbHVlIHJldCwgYXJnc1syXTsKCiAgaWYoIShnZW4gPSBnZW5lcmF0b3JfbmV3KGN0eCkpKQogICAgcmV0dXJuIEpTX1Rocm93T3V0T2ZNZW1vcnkoY3R4KTsKCiAgaWYoYXJnYyA8IDEgfHwgIUpTX0lzRnVuY3Rpb24oY3R4LCBhcmd2WzBdKSkKICAgIHJldHVybiBKU19UaHJvd0ludGVybmFsRXJyb3IoY3R4LCAiTWlubmV0R2VuZXJhdG9yIG5lZWRzIGEgZnVuY3Rpb24gcGFyYW1ldGVyIik7CgogIGFyZ3NbMF0gPSBqc19mdW5jdGlvbl9jY2xvc3VyZShjdHgsIG1pbm5ldF9nZW5lcmF0b3JfcHVzaCwgMCwgMCwgZ2VuZXJhdG9yX2R1cChnZW4pLCAodm9pZCopJmdlbmVyYXRvcl9mcmVlKTsKICBhcmdzWzFdID0ganNfZnVuY3Rpb25fY2Nsb3N1cmUoY3R4LCBtaW5uZXRfZ2VuZXJhdG9yX3N0b3AsIDAsIDAsIGdlbmVyYXRvcl9kdXAoZ2VuKSwgKHZvaWQqKSZnZW5lcmF0b3JfZnJlZSk7CgogIHJldCA9IEpTX0NhbGwoY3R4LCBhcmd2WzBdLCBKU19VTkRFRklORUQsIDIsIGFyZ3MpOwoKICBKU19GcmVlVmFsdWUoY3R4LCByZXQpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGFyZ3NbMF0pOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGFyZ3NbMV0pOwoKICByZXR1cm4gbWlubmV0X2dlbmVyYXRvcl9pdGVyYXRvcihjdHgsIGdlbik7Cn0KCkpTVmFsdWUKbWlubmV0X2dlbmVyYXRvcl9pdGVyYXRvcihKU0NvbnRleHQqIGN0eCwgTWlubmV0R2VuZXJhdG9yKiBnZW4pIHsKICBKU1ZhbHVlIHJldCA9IEpTX05ld09iamVjdChjdHgpOwoKICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIHJldCwgIm5leHQiLCBqc19mdW5jdGlvbl9jY2xvc3VyZShjdHgsIG1pbm5ldF9nZW5lcmF0b3JfbmV4dCwgMCwgMCwgZ2VuZXJhdG9yX2R1cChnZW4pLCAodm9pZCopJmdlbmVyYXRvcl9mcmVlKSk7CiAgSlNfU2V0UHJvcGVydHlGdW5jdGlvbkxpc3QoY3R4LCByZXQsIG1pbm5ldF9nZW5lcmF0b3JfZnVuY3MsIGNvdW50b2YobWlubmV0X2dlbmVyYXRvcl9mdW5jcykpOwoKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCm1pbm5ldF9nZW5lcmF0b3JfcmVhZGVyKEpTQ29udGV4dCogY3R4LCBNaW5uZXRHZW5lcmF0b3IqIGdlbikgewogIEpTVmFsdWUgcmV0ID0gSlNfTmV3T2JqZWN0KGN0eCk7CgogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgcmV0LCAicmVhZCIsIGpzX2Z1bmN0aW9uX2NjbG9zdXJlKGN0eCwgbWlubmV0X2dlbmVyYXRvcl9uZXh0LCAwLCAwLCBnZW5lcmF0b3JfZHVwKGdlbiksICh2b2lkKikmZ2VuZXJhdG9yX2ZyZWUpKTsKICBKU19TZXRQcm9wZXJ0eUZ1bmN0aW9uTGlzdChjdHgsIHJldCwgbWlubmV0X2dlbmVyYXRvcl9mdW5jcywgY291bnRvZihtaW5uZXRfZ2VuZXJhdG9yX2Z1bmNzKSk7CgogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKbWlubmV0X2dlbmVyYXRvcl9jcmVhdGUoSlNDb250ZXh0KiBjdHgsIE1pbm5ldEdlbmVyYXRvcioqIGdlbl9wKSB7CiAgaWYoISpnZW5fcCkKICAgICpnZW5fcCA9IGdlbmVyYXRvcl9uZXcoY3R4KTsKICBlbHNlCiAgICBnZW5lcmF0b3JfZHVwKCpnZW5fcCk7CgogIHJldHVybiBtaW5uZXRfZ2VuZXJhdG9yX2l0ZXJhdG9yKGN0eCwgKmdlbl9wKTsKfQoKLyoKSlNWYWx1ZQptaW5uZXRfZ2VuZXJhdG9yX2l0ZXJhdG9yKEpTQ29udGV4dCogY3R4LCBNaW5uZXRHZW5lcmF0b3IqIGdlbikgewogIEpTVmFsdWUgcmV0ID0gSlNfTmV3T2JqZWN0KGN0eCk7CgogICAgKytnZW4tPnJlZl9jb3VudDsKCiAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCByZXQsICJuZXh0IiwganNfZnVuY3Rpb25fY2Nsb3N1cmUoY3R4LCBtaW5uZXRfZ2VuZXJhdG9yX25leHQsIDAsIDAsIGdlbl9wLCAodm9pZCopJmdlbmVyYXRvcl9mcmVlKSk7CgogIHJldHVybiByZXQ7Cn0KKi8KAAAAAAAAAABDDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABDDgAAI2luY2x1ZGUgIm1pbm5ldC1nZW5lcmF0b3IuaCIKI2luY2x1ZGUgImpzdXRpbHMuaCIKI2luY2x1ZGUgPHF1aWNranMuaD4KI2luY2x1ZGUgPGFzc2VydC5oPgojaW5jbHVkZSA8bGlid2Vic29ja2V0cy5oPgoKVEhSRUFEX0xPQ0FMIEpTQ2xhc3NJRCBtaW5uZXRfZ2VuZXJhdG9yX2NsYXNzX2lkOwpUSFJFQURfTE9DQUwgSlNWYWx1ZSBtaW5uZXRfZ2VuZXJhdG9yX3Byb3RvLCBtaW5uZXRfZ2VuZXJhdG9yX2N0b3I7CgpKU0NsYXNzRGVmIG1pbm5ldF9nZW5lcmF0b3JfY2xhc3MgPSB7CiAgICAiTWlubmV0R2VuZXJhdG9yIiwKICAgIC8vLmZpbmFsaXplciA9IG1pbm5ldF9nZW5lcmF0b3JfZmluYWxpemVyLAp9OwoKc3RhdGljIGNvbnN0IEpTQ0Z1bmN0aW9uTGlzdEVudHJ5IG1pbm5ldF9nZW5lcmF0b3JfZnVuY3NbXSA9IHsKICAgIEpTX0NGVU5DX0RFRigiW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSIsIDAsIChKU0NGdW5jdGlvbiopJkpTX0R1cFZhbHVlKSwKICAgIEpTX1BST1BfU1RSSU5HX0RFRigiW1N5bWJvbC50b1N0cmluZ1RhZ10iLCAiTWlubmV0R2VuZXJhdG9yIiwgSlNfUFJPUF9DT05GSUdVUkFCTEUpLAp9OwoKc3RhdGljIEpTVmFsdWUKbWlubmV0X2dlbmVyYXRvcl9uZXh0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QqIGFyZ3YsIGludCBtYWdpYywgdm9pZCogb3BhcXVlKSB7CiAgTWlubmV0R2VuZXJhdG9yKiBnZW4gPSAoTWlubmV0R2VuZXJhdG9yKilvcGFxdWU7CiAgSlNWYWx1ZSByZXQgPSBKU19VTkRFRklORUQ7CgogIHJldCA9IGdlbmVyYXRvcl9uZXh0KGdlbik7CgogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCm1pbm5ldF9nZW5lcmF0b3JfcHVzaChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2LCBpbnQgbWFnaWMsIHZvaWQqIG9wYXF1ZSkgewogIE1pbm5ldEdlbmVyYXRvciogZ2VuID0gKE1pbm5ldEdlbmVyYXRvciopb3BhcXVlOwogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEOwoKICBpZihhcmdjIDwgMSkKICAgIHJldHVybiBKU19UaHJvd0ludGVybmFsRXJyb3IoY3R4LCAiYXJndW1lbnQgcmVxdWlyZWQiKTsKCiAgSlNWYWx1ZSBjYWxsYmFjayA9IGFyZ2MgPiAxID8gSlNfRHVwVmFsdWUoY3R4LCBhcmd2WzFdKSA6IEpTX05VTEw7CgogIHJldCA9IGdlbmVyYXRvcl9wdXNoKGdlbiwgYXJndlswXSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgY2FsbGJhY2spOwogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCm1pbm5ldF9nZW5lcmF0b3Jfc3RvcChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2LCBpbnQgbWFnaWMsIHZvaWQqIG9wYXF1ZSkgewogIE1pbm5ldEdlbmVyYXRvciogZ2VuID0gKE1pbm5ldEdlbmVyYXRvciopb3BhcXVlOwogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEOwoKICBKU1ZhbHVlIGNhbGxiYWNrID0gYXJnYyA+IDEgPyBKU19EdXBWYWx1ZShjdHgsIGFyZ3ZbMV0pIDogSlNfTlVMTDsKCiAgcmV0ID0gSlNfTmV3Qm9vbChjdHgsIGdlbmVyYXRvcl9jbG9zZShnZW4sIGNhbGxiYWNrKSk7CgogIEpTX0ZyZWVWYWx1ZShjdHgsIGNhbGxiYWNrKTsKCiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQptaW5uZXRfZ2VuZXJhdG9yX2NvbnN0cnVjdG9yKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgbmV3X3RhcmdldCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pIHsKICBNaW5uZXRHZW5lcmF0b3IqIGdlbjsKICBKU1ZhbHVlIHJldCwgYXJnc1syXTsKCiAgaWYoIShnZW4gPSBnZW5lcmF0b3JfbmV3KGN0eCkpKQogICAgcmV0dXJuIEpTX1Rocm93T3V0T2ZNZW1vcnkoY3R4KTsKCiAgaWYoYXJnYyA8IDEgfHwgIUpTX0lzRnVuY3Rpb24oY3R4LCBhcmd2WzBdKSkKICAgIHJldHVybiBKU19UaHJvd0ludGVybmFsRXJyb3IoY3R4LCAiTWlubmV0R2VuZXJhdG9yIG5lZWRzIGEgZnVuY3Rpb24gcGFyYW1ldGVyIik7CgogIGFyZ3NbMF0gPSBKU19OZXdDQ2xvc3VyZShjdHgsIG1pbm5ldF9nZW5lcmF0b3JfcHVzaCwgMCwgMCwgZ2VuZXJhdG9yX2R1cChnZW4pLCAodm9pZCopJmdlbmVyYXRvcl9mcmVlKTsKICBhcmdzWzFdID0gSlNfTmV3Q0Nsb3N1cmUoY3R4LCBtaW5uZXRfZ2VuZXJhdG9yX3N0b3AsIDAsIDAsIGdlbmVyYXRvcl9kdXAoZ2VuKSwgKHZvaWQqKSZnZW5lcmF0b3JfZnJlZSk7CgogIHJldCA9IEpTX0NhbGwoY3R4LCBhcmd2WzBdLCBKU19VTkRFRklORUQsIDIsIGFyZ3MpOwoKICBKU19GcmVlVmFsdWUoY3R4LCByZXQpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGFyZ3NbMF0pOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGFyZ3NbMV0pOwoKICByZXR1cm4gbWlubmV0X2dlbmVyYXRvcl9pdGVyYXRvcihjdHgsIGdlbik7Cn0KCkpTVmFsdWUKbWlubmV0X2dlbmVyYXRvcl9pdGVyYXRvcihKU0NvbnRleHQqIGN0eCwgTWlubmV0R2VuZXJhdG9yKiBnZW4pIHsKICBKU1ZhbHVlIHJldCA9IEpTX05ld09iamVjdChjdHgpOwoKICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIHJldCwgIm5leHQiLCBKU19OZXdDQ2xvc3VyZShjdHgsIG1pbm5ldF9nZW5lcmF0b3JfbmV4dCwgMCwgMCwgZ2VuZXJhdG9yX2R1cChnZW4pLCAodm9pZCopJmdlbmVyYXRvcl9mcmVlKSk7CiAgSlNfU2V0UHJvcGVydHlGdW5jdGlvbkxpc3QoY3R4LCByZXQsIG1pbm5ldF9nZW5lcmF0b3JfZnVuY3MsIGNvdW50b2YobWlubmV0X2dlbmVyYXRvcl9mdW5jcykpOwoKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCm1pbm5ldF9nZW5lcmF0b3JfcmVhZGVyKEpTQ29udGV4dCogY3R4LCBNaW5uZXRHZW5lcmF0b3IqIGdlbikgewogIEpTVmFsdWUgcmV0ID0gSlNfTmV3T2JqZWN0KGN0eCk7CgogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgcmV0LCAicmVhZCIsIEpTX05ld0NDbG9zdXJlKGN0eCwgbWlubmV0X2dlbmVyYXRvcl9uZXh0LCAwLCAwLCBnZW5lcmF0b3JfZHVwKGdlbiksICh2b2lkKikmZ2VuZXJhdG9yX2ZyZWUpKTsKICBKU19TZXRQcm9wZXJ0eUZ1bmN0aW9uTGlzdChjdHgsIHJldCwgbWlubmV0X2dlbmVyYXRvcl9mdW5jcywgY291bnRvZihtaW5uZXRfZ2VuZXJhdG9yX2Z1bmNzKSk7CgogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKbWlubmV0X2dlbmVyYXRvcl9jcmVhdGUoSlNDb250ZXh0KiBjdHgsIE1pbm5ldEdlbmVyYXRvcioqIGdlbl9wKSB7CiAgaWYoISpnZW5fcCkKICAgICpnZW5fcCA9IGdlbmVyYXRvcl9uZXcoY3R4KTsKICBlbHNlCiAgICBnZW5lcmF0b3JfZHVwKCpnZW5fcCk7CgogIHJldHVybiBtaW5uZXRfZ2VuZXJhdG9yX2l0ZXJhdG9yKGN0eCwgKmdlbl9wKTsKfQoKLyoKSlNWYWx1ZQptaW5uZXRfZ2VuZXJhdG9yX2l0ZXJhdG9yKEpTQ29udGV4dCogY3R4LCBNaW5uZXRHZW5lcmF0b3IqIGdlbikgewogIEpTVmFsdWUgcmV0ID0gSlNfTmV3T2JqZWN0KGN0eCk7CgogICAgKytnZW4tPnJlZl9jb3VudDsKCiAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCByZXQsICJuZXh0IiwgSlNfTmV3Q0Nsb3N1cmUoY3R4LCBtaW5uZXRfZ2VuZXJhdG9yX25leHQsIDAsIDAsIGdlbl9wLCAodm9pZCopJmdlbmVyYXRvcl9mcmVlKSk7CgogIHJldHVybiByZXQ7Cn0KKi8KAAAAAAAAAABhDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/minnet-fetch.c",
			"settings":
			{
				"buffer_size": 3451,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"",
					null,
					"BAAAAAcLAAAAAAAAFwsAAAAAAAAPAAAASlNfTmV3Q0Nsb3N1cmUopgoAAAAAAAC2CgAAAAAAAA8AAABKU19OZXdDQ2xvc3VyZShFCgAAAAAAAFUKAAAAAAAADwAAAEpTX05ld0NDbG9zdXJlKOUJAAAAAAAA9QkAAAAAAAAPAAAASlNfTmV3Q0Nsb3N1cmUo",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABnDQAAI2RlZmluZSBfR05VX1NPVVJDRQojaW5jbHVkZSAibWlubmV0LXJlcXVlc3QuaCIKI2luY2x1ZGUgIm1pbm5ldC1yZXNwb25zZS5oIgojaW5jbHVkZSAibWlubmV0LWNsaWVudC5oIgojaW5jbHVkZSAibWlubmV0LmgiCiNpbmNsdWRlICJidWZmZXIuaCIKI2luY2x1ZGUgImNsb3N1cmUuaCIKI2luY2x1ZGUgImpzdXRpbHMuaCIKI2luY2x1ZGUgPHN0cmluZ3MuaD4KI2luY2x1ZGUgPHF1aWNranMuaD4KCmVudW0gewogIE9OX0hUVFAgPSAwLAogIE9OX0VSUk9SLAogIE9OX0NMT1NFLAogIE9OX0ZELAp9OwoKc3RhdGljIEpTVmFsdWUKZmV0Y2hfaGFuZGxlcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljLCB2b2lkKiBvcGFxdWUpIHsKICB1bmlvbiBjbG9zdXJlKiBjbG9zdXJlID0gb3BhcXVlOwogIE1pbm5ldENsaWVudCogY2xpZW50ID0gY2xvc3VyZS0+cG9pbnRlcjsKCiAgREVCVUcoIiVzIG1hZ2ljPSVzIGNsaWVudD0lcFxuIiwgX19mdW5jX18sIG1hZ2ljID09IE9OX0hUVFAgPyAiT05fSFRUUCIgOiBtYWdpYyA9PSBPTl9FUlJPUiA/ICJPTl9FUlJPUiIgOiAiT05fRkQiLCBjbGllbnQpOwoKICBzd2l0Y2gobWFnaWMpIHsKICAgIGNhc2UgT05fSFRUUDogewogICAgICBpZihqc19wcm9taXNlX3BlbmRpbmcoJmNsaWVudC0+cHJvbWlzZSkpCiAgICAgICAganNfcHJvbWlzZV9yZXNvbHZlKGN0eCwgJmNsaWVudC0+cHJvbWlzZSwgYXJndlsxXSk7CgogICAgICByZXR1cm4gSlNfTmV3SW50MzIoY3R4LCAwKTsKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBPTl9DTE9TRToKICAgIGNhc2UgT05fRVJST1I6IHsKICAgICAgY29uc3QgY2hhciogc3RyID0gSlNfVG9DU3RyaW5nKGN0eCwgYXJndlsxXSk7CiAgICAgIEpTVmFsdWUgZXJyID0ganNfZXJyb3JfbmV3KGN0eCwgIiVzOiAlcyIsIG1hZ2ljID09IE9OX0NMT1NFID8gIm9uQ2xvc2UiIDogIm9uRXJyb3IiLCBzdHIpOwogICAgICBKU19GcmVlQ1N0cmluZyhjdHgsIHN0cik7CgogICAgICAvLyAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBlcnIsICJtZXNzYWdlIiwgSlNfRHVwVmFsdWUoY3R4LCBhcmd2WzFdKSk7CiAgICAgIGlmKGpzX3Byb21pc2VfcGVuZGluZygmY2xpZW50LT5wcm9taXNlKSkKICAgICAgICBqc19wcm9taXNlX3JlamVjdChjdHgsICZjbGllbnQtPnByb21pc2UsIGVycik7CiAgICAgIEpTX0ZyZWVWYWx1ZShjdHgsIGVycik7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgT05fRkQ6IHsKICAgICAgSlNWYWx1ZSBvcywgdG1wLCBzZXRfd3JpdGUsIHNldF9yZWFkLCBhcmdzWzJdID0ge2FyZ3ZbMF0sIEpTX05VTEx9OwogICAgICBvcyA9IGpzX2dsb2JhbF9nZXQoY3R4LCAib3MiKTsKICAgICAgaWYoIUpTX0lzT2JqZWN0KG9zKSkKICAgICAgICByZXR1cm4gSlNfVGhyb3dUeXBlRXJyb3IoY3R4LCAiZ2xvYmFsVGhpcy5vcyBtdXN0IGJlIGltcG9ydGVkIG1vZHVsZSIpOwogICAgICBzZXRfcmVhZCA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgb3MsICJzZXRSZWFkSGFuZGxlciIpOwogICAgICBzZXRfd3JpdGUgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIG9zLCAic2V0V3JpdGVIYW5kbGVyIik7CiAgICAgIGFyZ3NbMV0gPSBhcmd2WzFdOwogICAgICB0bXAgPSBKU19DYWxsKGN0eCwgc2V0X3JlYWQsIG9zLCAyLCBhcmdzKTsKICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgdG1wKTsKICAgICAgYXJnc1sxXSA9IGFyZ3ZbMl07CiAgICAgIHRtcCA9IEpTX0NhbGwoY3R4LCBzZXRfd3JpdGUsIG9zLCAyLCBhcmdzKTsKICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgdG1wKTsKICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgb3MpOwogICAgICBKU19GcmVlVmFsdWUoY3R4LCBzZXRfd3JpdGUpOwogICAgICBKU19GcmVlVmFsdWUoY3R4LCBzZXRfcmVhZCk7CiAgICAgIGJyZWFrOwogICAgfQogIH0KCiAgcmV0dXJuIEpTX1VOREVGSU5FRDsKfQoKSlNWYWx1ZQptaW5uZXRfZmV0Y2goSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pIHsKICBKU1ZhbHVlIHJldCwgaGFuZGxlcnNbNF0sIGFyZ3NbMl07CiAgdW5pb24gY2xvc3VyZSogY2M7CiAgLy8gTWlubmV0RmV0Y2gqIGZjOwoKICBpZihhcmdjID49IDIgJiYgIUpTX0lzT2JqZWN0KGFyZ3ZbMV0pKQogICAgcmV0dXJuIEpTX1Rocm93VHlwZUVycm9yKGN0eCwgImFyZ3VtZW50IDIgbXVzdCBiZSBhbiBvYmplY3QiKTsKICAvKgogICAgaWYoIShmYyA9IGZldGNoX25ldyhjdHgpKSkKICAgICAgcmV0dXJuIEpTX1Rocm93T3V0T2ZNZW1vcnkoY3R4KTsqLwoKICBpZighKGNjID0gY2xvc3VyZV9uZXcoY3R4KSkpCiAgICByZXR1cm4gSlNfVGhyb3dPdXRPZk1lbW9yeShjdHgpOwoKICBhcmdzWzBdID0gYXJndlswXTsKICBhcmdzWzFdID0gYXJnYyA8PSAxID8gSlNfTmV3T2JqZWN0KGN0eCkgOiBKU19EdXBWYWx1ZShjdHgsIGFyZ3ZbMV0pOwoKICBoYW5kbGVyc1swXSA9IGpzX2NjbG9zdXJlX25ldyhjdHgsICZmZXRjaF9oYW5kbGVyLCAyLCBPTl9IVFRQLCBjbG9zdXJlX2R1cChjYyksIGNsb3N1cmVfZnJlZSk7CiAgaGFuZGxlcnNbMV0gPSBqc19jY2xvc3VyZV9uZXcoY3R4LCAmZmV0Y2hfaGFuZGxlciwgMiwgT05fRVJST1IsIGNsb3N1cmVfZHVwKGNjKSwgY2xvc3VyZV9mcmVlKTsKICBoYW5kbGVyc1syXSA9IGpzX2NjbG9zdXJlX25ldyhjdHgsICZmZXRjaF9oYW5kbGVyLCAyLCBPTl9DTE9TRSwgY2xvc3VyZV9kdXAoY2MpLCBjbG9zdXJlX2ZyZWUpOwogIGhhbmRsZXJzWzNdID0ganNfY2Nsb3N1cmVfbmV3KGN0eCwgJmZldGNoX2hhbmRsZXIsIDMsIE9OX0ZELCBjbG9zdXJlX2R1cChjYyksIGNsb3N1cmVfZnJlZSk7CgogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgYXJnc1sxXSwgIm9uSHR0cCIsIGhhbmRsZXJzWzBdKTsKICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIGFyZ3NbMV0sICJvbkVycm9yIiwgaGFuZGxlcnNbMV0pOwogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgYXJnc1sxXSwgIm9uQ2xvc2UiLCBoYW5kbGVyc1syXSk7CiAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBhcmdzWzFdLCAib25GZCIsIGhhbmRsZXJzWzNdKTsKICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIGFyZ3NbMV0sICJibG9jayIsIEpTX0ZBTFNFKTsKCiAgcmV0ID0gbWlubmV0X2NsaWVudF9jbG9zdXJlKGN0eCwgdGhpc192YWwsIDIsIGFyZ3MsIDAsIGNjKTsKCiAgSlNfRnJlZVZhbHVlKGN0eCwgYXJnc1sxXSk7CgogIERFQlVHKCIlcyB1cmw9JXMgY2xpZW50PSVwXG4iLCBfX2Z1bmNfXywgSlNfVG9DU3RyaW5nKGN0eCwgYXJnc1swXSksIGNjLT5wb2ludGVyKTsKCiAgY2MtPnBvaW50ZXIgPSBjbGllbnRfZHVwKGNjLT5wb2ludGVyKTsKCiAgcmV0dXJuIHJldDsKfQoAAAAAAAAAAGcNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABnDQAAI2RlZmluZSBfR05VX1NPVVJDRQojaW5jbHVkZSAibWlubmV0LXJlcXVlc3QuaCIKI2luY2x1ZGUgIm1pbm5ldC1yZXNwb25zZS5oIgojaW5jbHVkZSAibWlubmV0LWNsaWVudC5oIgojaW5jbHVkZSAibWlubmV0LmgiCiNpbmNsdWRlICJidWZmZXIuaCIKI2luY2x1ZGUgImNsb3N1cmUuaCIKI2luY2x1ZGUgImpzdXRpbHMuaCIKI2luY2x1ZGUgPHN0cmluZ3MuaD4KI2luY2x1ZGUgPHF1aWNranMuaD4KCmVudW0gewogIE9OX0hUVFAgPSAwLAogIE9OX0VSUk9SLAogIE9OX0NMT1NFLAogIE9OX0ZELAp9OwoKc3RhdGljIEpTVmFsdWUKZmV0Y2hfaGFuZGxlcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljLCB2b2lkKiBvcGFxdWUpIHsKICB1bmlvbiBjbG9zdXJlKiBjbG9zdXJlID0gb3BhcXVlOwogIE1pbm5ldENsaWVudCogY2xpZW50ID0gY2xvc3VyZS0+cG9pbnRlcjsKCiAgREVCVUcoIiVzIG1hZ2ljPSVzIGNsaWVudD0lcFxuIiwgX19mdW5jX18sIG1hZ2ljID09IE9OX0hUVFAgPyAiT05fSFRUUCIgOiBtYWdpYyA9PSBPTl9FUlJPUiA/ICJPTl9FUlJPUiIgOiAiT05fRkQiLCBjbGllbnQpOwoKICBzd2l0Y2gobWFnaWMpIHsKICAgIGNhc2UgT05fSFRUUDogewogICAgICBpZihqc19wcm9taXNlX3BlbmRpbmcoJmNsaWVudC0+cHJvbWlzZSkpCiAgICAgICAganNfcHJvbWlzZV9yZXNvbHZlKGN0eCwgJmNsaWVudC0+cHJvbWlzZSwgYXJndlsxXSk7CgogICAgICByZXR1cm4gSlNfTmV3SW50MzIoY3R4LCAwKTsKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBPTl9DTE9TRToKICAgIGNhc2UgT05fRVJST1I6IHsKICAgICAgY29uc3QgY2hhciogc3RyID0gSlNfVG9DU3RyaW5nKGN0eCwgYXJndlsxXSk7CiAgICAgIEpTVmFsdWUgZXJyID0ganNfZXJyb3JfbmV3KGN0eCwgIiVzOiAlcyIsIG1hZ2ljID09IE9OX0NMT1NFID8gIm9uQ2xvc2UiIDogIm9uRXJyb3IiLCBzdHIpOwogICAgICBKU19GcmVlQ1N0cmluZyhjdHgsIHN0cik7CgogICAgICAvLyAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBlcnIsICJtZXNzYWdlIiwgSlNfRHVwVmFsdWUoY3R4LCBhcmd2WzFdKSk7CiAgICAgIGlmKGpzX3Byb21pc2VfcGVuZGluZygmY2xpZW50LT5wcm9taXNlKSkKICAgICAgICBqc19wcm9taXNlX3JlamVjdChjdHgsICZjbGllbnQtPnByb21pc2UsIGVycik7CiAgICAgIEpTX0ZyZWVWYWx1ZShjdHgsIGVycik7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgT05fRkQ6IHsKICAgICAgSlNWYWx1ZSBvcywgdG1wLCBzZXRfd3JpdGUsIHNldF9yZWFkLCBhcmdzWzJdID0ge2FyZ3ZbMF0sIEpTX05VTEx9OwogICAgICBvcyA9IGpzX2dsb2JhbF9nZXQoY3R4LCAib3MiKTsKICAgICAgaWYoIUpTX0lzT2JqZWN0KG9zKSkKICAgICAgICByZXR1cm4gSlNfVGhyb3dUeXBlRXJyb3IoY3R4LCAiZ2xvYmFsVGhpcy5vcyBtdXN0IGJlIGltcG9ydGVkIG1vZHVsZSIpOwogICAgICBzZXRfcmVhZCA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgb3MsICJzZXRSZWFkSGFuZGxlciIpOwogICAgICBzZXRfd3JpdGUgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIG9zLCAic2V0V3JpdGVIYW5kbGVyIik7CiAgICAgIGFyZ3NbMV0gPSBhcmd2WzFdOwogICAgICB0bXAgPSBKU19DYWxsKGN0eCwgc2V0X3JlYWQsIG9zLCAyLCBhcmdzKTsKICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgdG1wKTsKICAgICAgYXJnc1sxXSA9IGFyZ3ZbMl07CiAgICAgIHRtcCA9IEpTX0NhbGwoY3R4LCBzZXRfd3JpdGUsIG9zLCAyLCBhcmdzKTsKICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgdG1wKTsKICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgb3MpOwogICAgICBKU19GcmVlVmFsdWUoY3R4LCBzZXRfd3JpdGUpOwogICAgICBKU19GcmVlVmFsdWUoY3R4LCBzZXRfcmVhZCk7CiAgICAgIGJyZWFrOwogICAgfQogIH0KCiAgcmV0dXJuIEpTX1VOREVGSU5FRDsKfQoKSlNWYWx1ZQptaW5uZXRfZmV0Y2goSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pIHsKICBKU1ZhbHVlIHJldCwgaGFuZGxlcnNbNF0sIGFyZ3NbMl07CiAgdW5pb24gY2xvc3VyZSogY2M7CiAgLy8gTWlubmV0RmV0Y2gqIGZjOwoKICBpZihhcmdjID49IDIgJiYgIUpTX0lzT2JqZWN0KGFyZ3ZbMV0pKQogICAgcmV0dXJuIEpTX1Rocm93VHlwZUVycm9yKGN0eCwgImFyZ3VtZW50IDIgbXVzdCBiZSBhbiBvYmplY3QiKTsKICAvKgogICAgaWYoIShmYyA9IGZldGNoX25ldyhjdHgpKSkKICAgICAgcmV0dXJuIEpTX1Rocm93T3V0T2ZNZW1vcnkoY3R4KTsqLwoKICBpZighKGNjID0gY2xvc3VyZV9uZXcoY3R4KSkpCiAgICByZXR1cm4gSlNfVGhyb3dPdXRPZk1lbW9yeShjdHgpOwoKICBhcmdzWzBdID0gYXJndlswXTsKICBhcmdzWzFdID0gYXJnYyA8PSAxID8gSlNfTmV3T2JqZWN0KGN0eCkgOiBKU19EdXBWYWx1ZShjdHgsIGFyZ3ZbMV0pOwoKICBoYW5kbGVyc1swXSA9IGpzX2NjbG9zdXJlX25ldyhjdHgsICZmZXRjaF9oYW5kbGVyLCAyLCBPTl9IVFRQLCBjbG9zdXJlX2R1cChjYyksIGNsb3N1cmVfZnJlZSk7CiAgaGFuZGxlcnNbMV0gPSBqc19jY2xvc3VyZV9uZXcoY3R4LCAmZmV0Y2hfaGFuZGxlciwgMiwgT05fRVJST1IsIGNsb3N1cmVfZHVwKGNjKSwgY2xvc3VyZV9mcmVlKTsKICBoYW5kbGVyc1syXSA9IGpzX2NjbG9zdXJlX25ldyhjdHgsICZmZXRjaF9oYW5kbGVyLCAyLCBPTl9DTE9TRSwgY2xvc3VyZV9kdXAoY2MpLCBjbG9zdXJlX2ZyZWUpOwogIGhhbmRsZXJzWzNdID0ganNfY2Nsb3N1cmVfbmV3KGN0eCwgJmZldGNoX2hhbmRsZXIsIDMsIE9OX0ZELCBjbG9zdXJlX2R1cChjYyksIGNsb3N1cmVfZnJlZSk7CgogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgYXJnc1sxXSwgIm9uSHR0cCIsIGhhbmRsZXJzWzBdKTsKICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIGFyZ3NbMV0sICJvbkVycm9yIiwgaGFuZGxlcnNbMV0pOwogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgYXJnc1sxXSwgIm9uQ2xvc2UiLCBoYW5kbGVyc1syXSk7CiAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBhcmdzWzFdLCAib25GZCIsIGhhbmRsZXJzWzNdKTsKICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIGFyZ3NbMV0sICJibG9jayIsIEpTX0ZBTFNFKTsKCiAgcmV0ID0gbWlubmV0X2NsaWVudF9jbG9zdXJlKGN0eCwgdGhpc192YWwsIDIsIGFyZ3MsIDAsIGNjKTsKCiAgSlNfRnJlZVZhbHVlKGN0eCwgYXJnc1sxXSk7CgogIERFQlVHKCIlcyB1cmw9JXMgY2xpZW50PSVwXG4iLCBfX2Z1bmNfXywgSlNfVG9DU3RyaW5nKGN0eCwgYXJnc1swXSksIGNjLT5wb2ludGVyKTsKCiAgY2MtPnBvaW50ZXIgPSBjbGllbnRfZHVwKGNjLT5wb2ludGVyKTsKCiAgcmV0dXJuIHJldDsKfQoAAAAAAAAAAHsNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB7DQAAI2RlZmluZSBfR05VX1NPVVJDRQojaW5jbHVkZSAibWlubmV0LXJlcXVlc3QuaCIKI2luY2x1ZGUgIm1pbm5ldC1yZXNwb25zZS5oIgojaW5jbHVkZSAibWlubmV0LWNsaWVudC5oIgojaW5jbHVkZSAibWlubmV0LmgiCiNpbmNsdWRlICJidWZmZXIuaCIKI2luY2x1ZGUgImNsb3N1cmUuaCIKI2luY2x1ZGUgImpzdXRpbHMuaCIKI2luY2x1ZGUgPHN0cmluZ3MuaD4KI2luY2x1ZGUgPHF1aWNranMuaD4KCmVudW0gewogIE9OX0hUVFAgPSAwLAogIE9OX0VSUk9SLAogIE9OX0NMT1NFLAogIE9OX0ZELAp9OwoKc3RhdGljIEpTVmFsdWUKZmV0Y2hfaGFuZGxlcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljLCB2b2lkKiBvcGFxdWUpIHsKICB1bmlvbiBjbG9zdXJlKiBjbG9zdXJlID0gb3BhcXVlOwogIE1pbm5ldENsaWVudCogY2xpZW50ID0gY2xvc3VyZS0+cG9pbnRlcjsKCiAgREVCVUcoIiVzIG1hZ2ljPSVzIGNsaWVudD0lcFxuIiwgX19mdW5jX18sIG1hZ2ljID09IE9OX0hUVFAgPyAiT05fSFRUUCIgOiBtYWdpYyA9PSBPTl9FUlJPUiA/ICJPTl9FUlJPUiIgOiAiT05fRkQiLCBjbGllbnQpOwoKICBzd2l0Y2gobWFnaWMpIHsKICAgIGNhc2UgT05fSFRUUDogewogICAgICBpZihqc19wcm9taXNlX3BlbmRpbmcoJmNsaWVudC0+cHJvbWlzZSkpCiAgICAgICAganNfcHJvbWlzZV9yZXNvbHZlKGN0eCwgJmNsaWVudC0+cHJvbWlzZSwgYXJndlsxXSk7CgogICAgICByZXR1cm4gSlNfTmV3SW50MzIoY3R4LCAwKTsKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBPTl9DTE9TRToKICAgIGNhc2UgT05fRVJST1I6IHsKICAgICAgY29uc3QgY2hhciogc3RyID0gSlNfVG9DU3RyaW5nKGN0eCwgYXJndlsxXSk7CiAgICAgIEpTVmFsdWUgZXJyID0ganNfZXJyb3JfbmV3KGN0eCwgIiVzOiAlcyIsIG1hZ2ljID09IE9OX0NMT1NFID8gIm9uQ2xvc2UiIDogIm9uRXJyb3IiLCBzdHIpOwogICAgICBKU19GcmVlQ1N0cmluZyhjdHgsIHN0cik7CgogICAgICAvLyAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBlcnIsICJtZXNzYWdlIiwgSlNfRHVwVmFsdWUoY3R4LCBhcmd2WzFdKSk7CiAgICAgIGlmKGpzX3Byb21pc2VfcGVuZGluZygmY2xpZW50LT5wcm9taXNlKSkKICAgICAgICBqc19wcm9taXNlX3JlamVjdChjdHgsICZjbGllbnQtPnByb21pc2UsIGVycik7CiAgICAgIEpTX0ZyZWVWYWx1ZShjdHgsIGVycik7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgT05fRkQ6IHsKICAgICAgSlNWYWx1ZSBvcywgdG1wLCBzZXRfd3JpdGUsIHNldF9yZWFkLCBhcmdzWzJdID0ge2FyZ3ZbMF0sIEpTX05VTEx9OwogICAgICBvcyA9IGpzX2dsb2JhbF9nZXQoY3R4LCAib3MiKTsKICAgICAgaWYoIUpTX0lzT2JqZWN0KG9zKSkKICAgICAgICByZXR1cm4gSlNfVGhyb3dUeXBlRXJyb3IoY3R4LCAiZ2xvYmFsVGhpcy5vcyBtdXN0IGJlIGltcG9ydGVkIG1vZHVsZSIpOwogICAgICBzZXRfcmVhZCA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgb3MsICJzZXRSZWFkSGFuZGxlciIpOwogICAgICBzZXRfd3JpdGUgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIG9zLCAic2V0V3JpdGVIYW5kbGVyIik7CiAgICAgIGFyZ3NbMV0gPSBhcmd2WzFdOwogICAgICB0bXAgPSBKU19DYWxsKGN0eCwgc2V0X3JlYWQsIG9zLCAyLCBhcmdzKTsKICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgdG1wKTsKICAgICAgYXJnc1sxXSA9IGFyZ3ZbMl07CiAgICAgIHRtcCA9IEpTX0NhbGwoY3R4LCBzZXRfd3JpdGUsIG9zLCAyLCBhcmdzKTsKICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgdG1wKTsKICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgb3MpOwogICAgICBKU19GcmVlVmFsdWUoY3R4LCBzZXRfd3JpdGUpOwogICAgICBKU19GcmVlVmFsdWUoY3R4LCBzZXRfcmVhZCk7CiAgICAgIGJyZWFrOwogICAgfQogIH0KCiAgcmV0dXJuIEpTX1VOREVGSU5FRDsKfQoKSlNWYWx1ZQptaW5uZXRfZmV0Y2goSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pIHsKICBKU1ZhbHVlIHJldCwgaGFuZGxlcnNbNF0sIGFyZ3NbMl07CiAgdW5pb24gY2xvc3VyZSogY2M7CiAgLy8gTWlubmV0RmV0Y2gqIGZjOwoKICBpZihhcmdjID49IDIgJiYgIUpTX0lzT2JqZWN0KGFyZ3ZbMV0pKQogICAgcmV0dXJuIEpTX1Rocm93VHlwZUVycm9yKGN0eCwgImFyZ3VtZW50IDIgbXVzdCBiZSBhbiBvYmplY3QiKTsKICAvKgogICAgaWYoIShmYyA9IGZldGNoX25ldyhjdHgpKSkKICAgICAgcmV0dXJuIEpTX1Rocm93T3V0T2ZNZW1vcnkoY3R4KTsqLwoKICBpZighKGNjID0gY2xvc3VyZV9uZXcoY3R4KSkpCiAgICByZXR1cm4gSlNfVGhyb3dPdXRPZk1lbW9yeShjdHgpOwoKICBhcmdzWzBdID0gYXJndlswXTsKICBhcmdzWzFdID0gYXJnYyA8PSAxID8gSlNfTmV3T2JqZWN0KGN0eCkgOiBKU19EdXBWYWx1ZShjdHgsIGFyZ3ZbMV0pOwoKICBoYW5kbGVyc1swXSA9IGpzX2Z1bmN0aW9uX2NjbG9zdXJlKGN0eCwgJmZldGNoX2hhbmRsZXIsIDIsIE9OX0hUVFAsIGNsb3N1cmVfZHVwKGNjKSwgY2xvc3VyZV9mcmVlKTsKICBoYW5kbGVyc1sxXSA9IGpzX2Z1bmN0aW9uX2NjbG9zdXJlKGN0eCwgJmZldGNoX2hhbmRsZXIsIDIsIE9OX0VSUk9SLCBjbG9zdXJlX2R1cChjYyksIGNsb3N1cmVfZnJlZSk7CiAgaGFuZGxlcnNbMl0gPSBqc19mdW5jdGlvbl9jY2xvc3VyZShjdHgsICZmZXRjaF9oYW5kbGVyLCAyLCBPTl9DTE9TRSwgY2xvc3VyZV9kdXAoY2MpLCBjbG9zdXJlX2ZyZWUpOwogIGhhbmRsZXJzWzNdID0ganNfZnVuY3Rpb25fY2Nsb3N1cmUoY3R4LCAmZmV0Y2hfaGFuZGxlciwgMywgT05fRkQsIGNsb3N1cmVfZHVwKGNjKSwgY2xvc3VyZV9mcmVlKTsKCiAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBhcmdzWzFdLCAib25IdHRwIiwgaGFuZGxlcnNbMF0pOwogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgYXJnc1sxXSwgIm9uRXJyb3IiLCBoYW5kbGVyc1sxXSk7CiAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBhcmdzWzFdLCAib25DbG9zZSIsIGhhbmRsZXJzWzJdKTsKICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIGFyZ3NbMV0sICJvbkZkIiwgaGFuZGxlcnNbM10pOwogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgYXJnc1sxXSwgImJsb2NrIiwgSlNfRkFMU0UpOwoKICByZXQgPSBtaW5uZXRfY2xpZW50X2Nsb3N1cmUoY3R4LCB0aGlzX3ZhbCwgMiwgYXJncywgMCwgY2MpOwoKICBKU19GcmVlVmFsdWUoY3R4LCBhcmdzWzFdKTsKCiAgREVCVUcoIiVzIHVybD0lcyBjbGllbnQ9JXBcbiIsIF9fZnVuY19fLCBKU19Ub0NTdHJpbmcoY3R4LCBhcmdzWzBdKSwgY2MtPnBvaW50ZXIpOwoKICBjYy0+cG9pbnRlciA9IGNsaWVudF9kdXAoY2MtPnBvaW50ZXIpOwoKICByZXR1cm4gcmV0Owp9CgAAAAAAAAAAew0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB7DQAAI2RlZmluZSBfR05VX1NPVVJDRQojaW5jbHVkZSAibWlubmV0LXJlcXVlc3QuaCIKI2luY2x1ZGUgIm1pbm5ldC1yZXNwb25zZS5oIgojaW5jbHVkZSAibWlubmV0LWNsaWVudC5oIgojaW5jbHVkZSAibWlubmV0LmgiCiNpbmNsdWRlICJidWZmZXIuaCIKI2luY2x1ZGUgImNsb3N1cmUuaCIKI2luY2x1ZGUgImpzdXRpbHMuaCIKI2luY2x1ZGUgPHN0cmluZ3MuaD4KI2luY2x1ZGUgPHF1aWNranMuaD4KCmVudW0gewogIE9OX0hUVFAgPSAwLAogIE9OX0VSUk9SLAogIE9OX0NMT1NFLAogIE9OX0ZELAp9OwoKc3RhdGljIEpTVmFsdWUKZmV0Y2hfaGFuZGxlcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljLCB2b2lkKiBvcGFxdWUpIHsKICB1bmlvbiBjbG9zdXJlKiBjbG9zdXJlID0gb3BhcXVlOwogIE1pbm5ldENsaWVudCogY2xpZW50ID0gY2xvc3VyZS0+cG9pbnRlcjsKCiAgREVCVUcoIiVzIG1hZ2ljPSVzIGNsaWVudD0lcFxuIiwgX19mdW5jX18sIG1hZ2ljID09IE9OX0hUVFAgPyAiT05fSFRUUCIgOiBtYWdpYyA9PSBPTl9FUlJPUiA/ICJPTl9FUlJPUiIgOiAiT05fRkQiLCBjbGllbnQpOwoKICBzd2l0Y2gobWFnaWMpIHsKICAgIGNhc2UgT05fSFRUUDogewogICAgICBpZihqc19wcm9taXNlX3BlbmRpbmcoJmNsaWVudC0+cHJvbWlzZSkpCiAgICAgICAganNfcHJvbWlzZV9yZXNvbHZlKGN0eCwgJmNsaWVudC0+cHJvbWlzZSwgYXJndlsxXSk7CgogICAgICByZXR1cm4gSlNfTmV3SW50MzIoY3R4LCAwKTsKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBPTl9DTE9TRToKICAgIGNhc2UgT05fRVJST1I6IHsKICAgICAgY29uc3QgY2hhciogc3RyID0gSlNfVG9DU3RyaW5nKGN0eCwgYXJndlsxXSk7CiAgICAgIEpTVmFsdWUgZXJyID0ganNfZXJyb3JfbmV3KGN0eCwgIiVzOiAlcyIsIG1hZ2ljID09IE9OX0NMT1NFID8gIm9uQ2xvc2UiIDogIm9uRXJyb3IiLCBzdHIpOwogICAgICBKU19GcmVlQ1N0cmluZyhjdHgsIHN0cik7CgogICAgICAvLyAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBlcnIsICJtZXNzYWdlIiwgSlNfRHVwVmFsdWUoY3R4LCBhcmd2WzFdKSk7CiAgICAgIGlmKGpzX3Byb21pc2VfcGVuZGluZygmY2xpZW50LT5wcm9taXNlKSkKICAgICAgICBqc19wcm9taXNlX3JlamVjdChjdHgsICZjbGllbnQtPnByb21pc2UsIGVycik7CiAgICAgIEpTX0ZyZWVWYWx1ZShjdHgsIGVycik7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgT05fRkQ6IHsKICAgICAgSlNWYWx1ZSBvcywgdG1wLCBzZXRfd3JpdGUsIHNldF9yZWFkLCBhcmdzWzJdID0ge2FyZ3ZbMF0sIEpTX05VTEx9OwogICAgICBvcyA9IGpzX2dsb2JhbF9nZXQoY3R4LCAib3MiKTsKICAgICAgaWYoIUpTX0lzT2JqZWN0KG9zKSkKICAgICAgICByZXR1cm4gSlNfVGhyb3dUeXBlRXJyb3IoY3R4LCAiZ2xvYmFsVGhpcy5vcyBtdXN0IGJlIGltcG9ydGVkIG1vZHVsZSIpOwogICAgICBzZXRfcmVhZCA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgb3MsICJzZXRSZWFkSGFuZGxlciIpOwogICAgICBzZXRfd3JpdGUgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIG9zLCAic2V0V3JpdGVIYW5kbGVyIik7CiAgICAgIGFyZ3NbMV0gPSBhcmd2WzFdOwogICAgICB0bXAgPSBKU19DYWxsKGN0eCwgc2V0X3JlYWQsIG9zLCAyLCBhcmdzKTsKICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgdG1wKTsKICAgICAgYXJnc1sxXSA9IGFyZ3ZbMl07CiAgICAgIHRtcCA9IEpTX0NhbGwoY3R4LCBzZXRfd3JpdGUsIG9zLCAyLCBhcmdzKTsKICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgdG1wKTsKICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgb3MpOwogICAgICBKU19GcmVlVmFsdWUoY3R4LCBzZXRfd3JpdGUpOwogICAgICBKU19GcmVlVmFsdWUoY3R4LCBzZXRfcmVhZCk7CiAgICAgIGJyZWFrOwogICAgfQogIH0KCiAgcmV0dXJuIEpTX1VOREVGSU5FRDsKfQoKSlNWYWx1ZQptaW5uZXRfZmV0Y2goSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pIHsKICBKU1ZhbHVlIHJldCwgaGFuZGxlcnNbNF0sIGFyZ3NbMl07CiAgdW5pb24gY2xvc3VyZSogY2M7CiAgLy8gTWlubmV0RmV0Y2gqIGZjOwoKICBpZihhcmdjID49IDIgJiYgIUpTX0lzT2JqZWN0KGFyZ3ZbMV0pKQogICAgcmV0dXJuIEpTX1Rocm93VHlwZUVycm9yKGN0eCwgImFyZ3VtZW50IDIgbXVzdCBiZSBhbiBvYmplY3QiKTsKICAvKgogICAgaWYoIShmYyA9IGZldGNoX25ldyhjdHgpKSkKICAgICAgcmV0dXJuIEpTX1Rocm93T3V0T2ZNZW1vcnkoY3R4KTsqLwoKICBpZighKGNjID0gY2xvc3VyZV9uZXcoY3R4KSkpCiAgICByZXR1cm4gSlNfVGhyb3dPdXRPZk1lbW9yeShjdHgpOwoKICBhcmdzWzBdID0gYXJndlswXTsKICBhcmdzWzFdID0gYXJnYyA8PSAxID8gSlNfTmV3T2JqZWN0KGN0eCkgOiBKU19EdXBWYWx1ZShjdHgsIGFyZ3ZbMV0pOwoKICBoYW5kbGVyc1swXSA9IGpzX2Z1bmN0aW9uX2NjbG9zdXJlKGN0eCwgJmZldGNoX2hhbmRsZXIsIDIsIE9OX0hUVFAsIGNsb3N1cmVfZHVwKGNjKSwgY2xvc3VyZV9mcmVlKTsKICBoYW5kbGVyc1sxXSA9IGpzX2Z1bmN0aW9uX2NjbG9zdXJlKGN0eCwgJmZldGNoX2hhbmRsZXIsIDIsIE9OX0VSUk9SLCBjbG9zdXJlX2R1cChjYyksIGNsb3N1cmVfZnJlZSk7CiAgaGFuZGxlcnNbMl0gPSBqc19mdW5jdGlvbl9jY2xvc3VyZShjdHgsICZmZXRjaF9oYW5kbGVyLCAyLCBPTl9DTE9TRSwgY2xvc3VyZV9kdXAoY2MpLCBjbG9zdXJlX2ZyZWUpOwogIGhhbmRsZXJzWzNdID0ganNfZnVuY3Rpb25fY2Nsb3N1cmUoY3R4LCAmZmV0Y2hfaGFuZGxlciwgMywgT05fRkQsIGNsb3N1cmVfZHVwKGNjKSwgY2xvc3VyZV9mcmVlKTsKCiAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBhcmdzWzFdLCAib25IdHRwIiwgaGFuZGxlcnNbMF0pOwogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgYXJnc1sxXSwgIm9uRXJyb3IiLCBoYW5kbGVyc1sxXSk7CiAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBhcmdzWzFdLCAib25DbG9zZSIsIGhhbmRsZXJzWzJdKTsKICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIGFyZ3NbMV0sICJvbkZkIiwgaGFuZGxlcnNbM10pOwogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgYXJnc1sxXSwgImJsb2NrIiwgSlNfRkFMU0UpOwoKICByZXQgPSBtaW5uZXRfY2xpZW50X2Nsb3N1cmUoY3R4LCB0aGlzX3ZhbCwgMiwgYXJncywgMCwgY2MpOwoKICBKU19GcmVlVmFsdWUoY3R4LCBhcmdzWzFdKTsKCiAgREVCVUcoIiVzIHVybD0lcyBjbGllbnQ9JXBcbiIsIF9fZnVuY19fLCBKU19Ub0NTdHJpbmcoY3R4LCBhcmdzWzBdKSwgY2MtPnBvaW50ZXIpOwoKICBjYy0+cG9pbnRlciA9IGNsaWVudF9kdXAoY2MtPnBvaW50ZXIpOwoKICByZXR1cm4gcmV0Owp9CgAAAAAAAAAAYw0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABjDQAAI2RlZmluZSBfR05VX1NPVVJDRQojaW5jbHVkZSAibWlubmV0LXJlcXVlc3QuaCIKI2luY2x1ZGUgIm1pbm5ldC1yZXNwb25zZS5oIgojaW5jbHVkZSAibWlubmV0LWNsaWVudC5oIgojaW5jbHVkZSAibWlubmV0LmgiCiNpbmNsdWRlICJidWZmZXIuaCIKI2luY2x1ZGUgImNsb3N1cmUuaCIKI2luY2x1ZGUgImpzdXRpbHMuaCIKI2luY2x1ZGUgPHN0cmluZ3MuaD4KI2luY2x1ZGUgPHF1aWNranMuaD4KCmVudW0gewogIE9OX0hUVFAgPSAwLAogIE9OX0VSUk9SLAogIE9OX0NMT1NFLAogIE9OX0ZELAp9OwoKc3RhdGljIEpTVmFsdWUKZmV0Y2hfaGFuZGxlcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljLCB2b2lkKiBvcGFxdWUpIHsKICB1bmlvbiBjbG9zdXJlKiBjbG9zdXJlID0gb3BhcXVlOwogIE1pbm5ldENsaWVudCogY2xpZW50ID0gY2xvc3VyZS0+cG9pbnRlcjsKCiAgREVCVUcoIiVzIG1hZ2ljPSVzIGNsaWVudD0lcFxuIiwgX19mdW5jX18sIG1hZ2ljID09IE9OX0hUVFAgPyAiT05fSFRUUCIgOiBtYWdpYyA9PSBPTl9FUlJPUiA/ICJPTl9FUlJPUiIgOiAiT05fRkQiLCBjbGllbnQpOwoKICBzd2l0Y2gobWFnaWMpIHsKICAgIGNhc2UgT05fSFRUUDogewogICAgICBpZihqc19wcm9taXNlX3BlbmRpbmcoJmNsaWVudC0+cHJvbWlzZSkpCiAgICAgICAganNfcHJvbWlzZV9yZXNvbHZlKGN0eCwgJmNsaWVudC0+cHJvbWlzZSwgYXJndlsxXSk7CgogICAgICByZXR1cm4gSlNfTmV3SW50MzIoY3R4LCAwKTsKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBPTl9DTE9TRToKICAgIGNhc2UgT05fRVJST1I6IHsKICAgICAgY29uc3QgY2hhciogc3RyID0gSlNfVG9DU3RyaW5nKGN0eCwgYXJndlsxXSk7CiAgICAgIEpTVmFsdWUgZXJyID0ganNfZXJyb3JfbmV3KGN0eCwgIiVzOiAlcyIsIG1hZ2ljID09IE9OX0NMT1NFID8gIm9uQ2xvc2UiIDogIm9uRXJyb3IiLCBzdHIpOwogICAgICBKU19GcmVlQ1N0cmluZyhjdHgsIHN0cik7CgogICAgICAvLyAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBlcnIsICJtZXNzYWdlIiwgSlNfRHVwVmFsdWUoY3R4LCBhcmd2WzFdKSk7CiAgICAgIGlmKGpzX3Byb21pc2VfcGVuZGluZygmY2xpZW50LT5wcm9taXNlKSkKICAgICAgICBqc19wcm9taXNlX3JlamVjdChjdHgsICZjbGllbnQtPnByb21pc2UsIGVycik7CiAgICAgIEpTX0ZyZWVWYWx1ZShjdHgsIGVycik7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgT05fRkQ6IHsKICAgICAgSlNWYWx1ZSBvcywgdG1wLCBzZXRfd3JpdGUsIHNldF9yZWFkLCBhcmdzWzJdID0ge2FyZ3ZbMF0sIEpTX05VTEx9OwogICAgICBvcyA9IGpzX2dsb2JhbF9nZXQoY3R4LCAib3MiKTsKICAgICAgaWYoIUpTX0lzT2JqZWN0KG9zKSkKICAgICAgICByZXR1cm4gSlNfVGhyb3dUeXBlRXJyb3IoY3R4LCAiZ2xvYmFsVGhpcy5vcyBtdXN0IGJlIGltcG9ydGVkIG1vZHVsZSIpOwogICAgICBzZXRfcmVhZCA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgb3MsICJzZXRSZWFkSGFuZGxlciIpOwogICAgICBzZXRfd3JpdGUgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIG9zLCAic2V0V3JpdGVIYW5kbGVyIik7CiAgICAgIGFyZ3NbMV0gPSBhcmd2WzFdOwogICAgICB0bXAgPSBKU19DYWxsKGN0eCwgc2V0X3JlYWQsIG9zLCAyLCBhcmdzKTsKICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgdG1wKTsKICAgICAgYXJnc1sxXSA9IGFyZ3ZbMl07CiAgICAgIHRtcCA9IEpTX0NhbGwoY3R4LCBzZXRfd3JpdGUsIG9zLCAyLCBhcmdzKTsKICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgdG1wKTsKICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgb3MpOwogICAgICBKU19GcmVlVmFsdWUoY3R4LCBzZXRfd3JpdGUpOwogICAgICBKU19GcmVlVmFsdWUoY3R4LCBzZXRfcmVhZCk7CiAgICAgIGJyZWFrOwogICAgfQogIH0KCiAgcmV0dXJuIEpTX1VOREVGSU5FRDsKfQoKSlNWYWx1ZQptaW5uZXRfZmV0Y2goSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pIHsKICBKU1ZhbHVlIHJldCwgaGFuZGxlcnNbNF0sIGFyZ3NbMl07CiAgdW5pb24gY2xvc3VyZSogY2M7CiAgLy8gTWlubmV0RmV0Y2gqIGZjOwoKICBpZihhcmdjID49IDIgJiYgIUpTX0lzT2JqZWN0KGFyZ3ZbMV0pKQogICAgcmV0dXJuIEpTX1Rocm93VHlwZUVycm9yKGN0eCwgImFyZ3VtZW50IDIgbXVzdCBiZSBhbiBvYmplY3QiKTsKICAvKgogICAgaWYoIShmYyA9IGZldGNoX25ldyhjdHgpKSkKICAgICAgcmV0dXJuIEpTX1Rocm93T3V0T2ZNZW1vcnkoY3R4KTsqLwoKICBpZighKGNjID0gY2xvc3VyZV9uZXcoY3R4KSkpCiAgICByZXR1cm4gSlNfVGhyb3dPdXRPZk1lbW9yeShjdHgpOwoKICBhcmdzWzBdID0gYXJndlswXTsKICBhcmdzWzFdID0gYXJnYyA8PSAxID8gSlNfTmV3T2JqZWN0KGN0eCkgOiBKU19EdXBWYWx1ZShjdHgsIGFyZ3ZbMV0pOwoKICBoYW5kbGVyc1swXSA9IEpTX05ld0NDbG9zdXJlKGN0eCwgJmZldGNoX2hhbmRsZXIsIDIsIE9OX0hUVFAsIGNsb3N1cmVfZHVwKGNjKSwgY2xvc3VyZV9mcmVlKTsKICBoYW5kbGVyc1sxXSA9IEpTX05ld0NDbG9zdXJlKGN0eCwgJmZldGNoX2hhbmRsZXIsIDIsIE9OX0VSUk9SLCBjbG9zdXJlX2R1cChjYyksIGNsb3N1cmVfZnJlZSk7CiAgaGFuZGxlcnNbMl0gPSBKU19OZXdDQ2xvc3VyZShjdHgsICZmZXRjaF9oYW5kbGVyLCAyLCBPTl9DTE9TRSwgY2xvc3VyZV9kdXAoY2MpLCBjbG9zdXJlX2ZyZWUpOwogIGhhbmRsZXJzWzNdID0gSlNfTmV3Q0Nsb3N1cmUoY3R4LCAmZmV0Y2hfaGFuZGxlciwgMywgT05fRkQsIGNsb3N1cmVfZHVwKGNjKSwgY2xvc3VyZV9mcmVlKTsKCiAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBhcmdzWzFdLCAib25IdHRwIiwgaGFuZGxlcnNbMF0pOwogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgYXJnc1sxXSwgIm9uRXJyb3IiLCBoYW5kbGVyc1sxXSk7CiAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBhcmdzWzFdLCAib25DbG9zZSIsIGhhbmRsZXJzWzJdKTsKICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIGFyZ3NbMV0sICJvbkZkIiwgaGFuZGxlcnNbM10pOwogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgYXJnc1sxXSwgImJsb2NrIiwgSlNfRkFMU0UpOwoKICByZXQgPSBtaW5uZXRfY2xpZW50X2Nsb3N1cmUoY3R4LCB0aGlzX3ZhbCwgMiwgYXJncywgMCwgY2MpOwoKICBKU19GcmVlVmFsdWUoY3R4LCBhcmdzWzFdKTsKCiAgREVCVUcoIiVzIHVybD0lcyBjbGllbnQ9JXBcbiIsIF9fZnVuY19fLCBKU19Ub0NTdHJpbmcoY3R4LCBhcmdzWzBdKSwgY2MtPnBvaW50ZXIpOwoKICBjYy0+cG9pbnRlciA9IGNsaWVudF9kdXAoY2MtPnBvaW50ZXIpOwoKICByZXR1cm4gcmV0Owp9CgAAAAAAAAAAew0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Build debug",
					""
				],
				[
					"CMake",
					""
				],
				[
					"Rebuild CScope",
					""
				],
				[
					"Rebuild CTags",
					""
				],
				[
					"clang-format",
					""
				],
				[
					"make",
					""
				],
				[
					"prettier",
					""
				],
				[
					"Packages/C++/C Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/NinjaBuild/ninja.sublime-build",
					""
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				"Clean"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"lua",
				"Pretty Lua: Format"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-net",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/tests"
	],
	"file_history":
	[
		"/home/roman/Projects/mariadb-10.3-10.3.38/libmariadb/include/mysql.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-server-ws.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/build-libwebsockets.sh",
		"/home/roman/Projects/openssl-3.0.2/Makefile",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/premake5.lua",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/build/build.ninja",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-client-http.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/build.ninja",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/server.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/test-apps/test-server.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/lws-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/deferred.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/ref.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/ref.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/premake4.lua",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/plugins/protocol_lws_mirror.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-server-http.c",
		"/home/roman/Projects/nanovg/premake4.lua",
		"/home/roman/Projects/c-parse/nanosvg/premake4.lua",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/opaque.h",
		"/home/roman/Projects/an-tronics/eagle/Simple-Bug-2SC9014.brd",
		"/home/roman/Projects/an-tronics/eagle/Simple-Bug-2SC9014.sch",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/lws-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/context.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-server.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/context.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-server.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/test-server-http.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/session.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/include/libwebsockets/lws-http.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-server/minimal-http-server-custom-headers/minimal-http-server-custom-headers.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-server/minimal-http-server-sse/minimal-http-server-sse.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/include/libwebsockets/lws-callbacks.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/response.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/response.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/include/libwebsockets/lws-write.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/callback.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/session.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-server-http.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/ws.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/opaque.c",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-client.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-url.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/url.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-request.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/url.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-websocket.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-generator.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/jsutils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/jsutils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-url.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-response.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-request.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/request.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/request.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/form-parser.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/form-parser.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-server/minimal-http-server-eventlib-demos/minimal-http-server-eventlib-demos.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/test-apps/test.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/test-apps/lws-common.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/include/libwebsockets/lws-client.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/ws-client/minimal-ws-client-rx/minimal-ws-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/plugins/raw-proxy/protocol_lws_raw_proxy.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/wscli.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-form-parser.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-form-parser.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/core-net/socks5-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/plugins/mirror.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/asynciterator.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/deferred.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/generator.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/generator.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/ringbuffer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/ws.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/test-server-ws.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-url.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-websocket.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-url.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-response.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-websocket.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server-http.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/buffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server-ws.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/buffer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-request.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/headers.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/closure.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/closure.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-ringbuffer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/poll.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/allocated.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/js/minnet.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-generator.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/asynciterator.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/list.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-hash.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/callback.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/test-generator.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server-http.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-client-http.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/js/request.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/client.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-server/minimal-http-server-eventlib/mount-origin/strict-csp.svg",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/test-client-http.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-generator.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/log.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/test-client.js",
		"/home/roman/Projects/plot-cv/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/roles/http/server/server.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/core-net/dummy-callback.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/functions.cmake"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 146.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv/quickjs/qjs-net,*.c,*.h,*.js,/home/roman/Projects/plot-cv/quickjs/qjs-net/lib,*.c,*.h,-*/build/*,-*/libwebsockets/*",
			"/home/roman/Projects/plot-cv/quickjs/qjs-net,*.c,*.h,*.js,/home/roman/Projects/plot-cv/quickjs/qjs-net/lib,*.c,*.h,-*/build/*,-*/xlibwebsockets/*",
			"/home/roman/Projects/plot-cv/quickjs/qjs-net,*.c,*.h,*.js,/home/roman/Projects/plot-cv/quickjs/qjs-net/lib,*.c,*.h,-*/build/*,-*/libwebsockets/*",
			"/home/roman/Projects/plot-cv/quickjs/qjs-net,*.c,*.h,*.js,/home/roman/Projects/plot-cv/quickjs/qjs-net/lib,*.c,*.h,-*/build/*,-*/xlibwebsockets/*",
			"/home/roman/Projects/plot-cv/quickjs/qjs-net,*.c,*.h,*.js,/home/roman/Projects/plot-cv/quickjs/qjs-net/lib,*.c,*.h,-*/build/*,-*/libwebsockets/*",
			"/home/roman/Projects/plot-cv/quickjs/qjs-net,*.c,*.h,*.js,/home/roman/Projects/plot-cv/quickjs/qjs-net/lib,*.c,*.h,-*/build/*",
			"/home/roman/Projects/plot-cv/quickjs/qjs-net,*.c,*.h,/home/roman/Projects/plot-cv/quickjs/qjs-net/lib,*.c,*.h,-*/build/*",
			"/home/roman/Projects/plot-cv/quickjs/qjs-net,*.c,*.h,/home/roman/Projects/plot-cv/quickjs/qjs-net/lib,*.c,*.h",
			"/home/roman/Projects/plot-cv/quickjs/qjs-net,*.c,*.h,/home/roman/Projects/plot-cv/quickjs/qjs-net/lib,*.c,*.h,-*/libwebsockets/*",
			"/home/roman/Projects/plot-cv/quickjs/qjs-net,*.c,*.h,/home/roman/Projects/plot-cv/quickjs/qjs-net/lib,*.c,*.h",
			"/home/roman/Projects/plot-cv/quickjs/qjs-net,*.c,*.h",
			"<project filters>,*.c,*.h,-*/build/*,-*/libwebsockets/*",
			"<project filters>,*.[ch],-*/build/*,-*/libwebsockets/*",
			"<project filters>,-*/build/*,-*/libwebsockets/*",
			"<project filters>",
			"*.[ch],lib/*.[ch]",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"js_function_cc",
			"js_cclosure_class_id",
			"cfcr",
			"js_cclosure_record",
			"js_cclosure_fRecord",
			"JS_NewCF",
			"JS_NewCClosure",
			"JS_NewCClosure\\(",
			"JS_NewCClosure",
			"CFunctionClosure",
			"^typedef.*;$",
			"^typedef ",
			"^typedef",
			"_new\\(",
			"^MYSQL \\*",
			"real_query_start",
			"'push",
			"REQUEST_HEADER",
			"wait_resolve=",
			"wait_resolve",
			"minnet_log_this",
			"block",
			"opt_block",
			"\"block\"",
			"connecting to",
			"'Client conn",
			"lient connecting",
			"connecting",
			"'MinnetClient",
			"onClose",
			"open\\(",
			"readable",
			"connecting",
			"pr\\[",
			"onHttp",
			"setLog\\(",
			"setLog",
			"open\\(",
			"setLog",
			"log\\(",
			"'promise'",
			"promise",
			"Fetch",
			"TestFetch",
			"respond_",
			"respond",
			"_respond",
			"\\$TYPE",
			"CFLAGS=",
			"minnet",
			"net\\.so",
			"install_sw",
			"-g ",
			"\"(openssl|libwebsockets)\"",
			"\"quickjs\"",
			"flags",
			"DEBUG\"",
			"\\, ",
			"}",
			"{",
			"StaticLib",
			"_CRT_SECURE_NO_WARNINGS",
			"openssl_prefix",
			"extra_",
			"/usr/local",
			" -I ",
			"/opt/libwebsockets-x86_64",
			"is_h2",
			"lws-utils",
			"ref.o",
			"ref\\.o",
			"ref.o",
			"/opt/libressl\\-3\\.5\\.1\\-x86_64",
			"pad\"",
			"pad",
			"libraries",
			"opaque_from_wsi",
			"LWS_PLUGIN_PROTOCOL_MIRROR",
			"lws_mirror",
			"serve_callback",
			"serve_callback\\(",
			"serve_generator\\(",
			"closure->",
			"opaque",
			"typedef.*struct session_data",
			"wsi",
			"opaque->",
			"http_closure",
			"http_server_writable",
			"http_closure",
			"opaque",
			"opaque->",
			"serve_promise\\(",
			"wsi",
			"serve_promise\\(",
			"closure->resp",
			"HTTPAsyncResolveClosure",
			"serve_promise",
			"resp",
			"serve_generator.*resp",
			"ctx",
			" JSValue gen = session->generator; // callback_emit_this(cb, session->ws_obj, 2, &session->req_obj);\n  gen = server_exception(lws_server(wsi), gen);",
			"_callback\\(",
			"serve_callback\\(",
			"session_callback\\(",
			"session_ws(session)->lwsi",
			"minnet_response_data",
			"session_callback",
			"serve_callback\\(",
			"serve_callback",
			"response_session",
			"_WRITEABLE:",
			"serve_callback",
			"serve_callback\\(",
			"callback_emit_this",
			"http_server_writable",
			"_writable",
			"_final",
			"start",
			"LWS_CALLBACK_HTTP_WRITEABLE:",
			"_WRITEABLE",
			"lws_http_transaction_completed",
			"user =",
			"lws_get_context",
			"IsError",
			"165",
			"^serve_resolve",
			"_resolve"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"ccr",
			"JSCClosureRecord",
			"js_cclosure_record",
			"js_cclosure_new(",
			"js_cclosure_f",
			"\"with-\\1\"",
			"\"with-quickjs\"",
			"\\n    ",
			" }",
			"{ ",
			"SharedLib",
			"JS_SHARED_LIBRARY",
			"$quickjs_prefix",
			" -I",
			"$libwebsockets_prefix",
			"${OPENSSL_PREFIX}",
			"OPENSSL_PREFIX",
			"",
			"cb->ctx",
			"session_callback",
			"struct socket",
			"struct form_parser",
			"QJSNET_LIB_LWS_UTILS_H",
			"\\1",
			"",
			")",
			"push_value",
			"push_block",
			"session",
			"opaque_list",
			"session",
			",",
			"\\1#\\2",
			"resp",
			"opaque",
			"}\\n\n    case ",
			"tail_bind",
			"tail_decorate",
			"RINGBUFFER_COUNT",
			"RINGBUFFER_BYTELEN",
			"RINGBUFFER_ELEMENTLEN",
			"RINGBUFFER_INSERTRANGE",
			"RINGBUFFER_LINEARINSERTRANGE",
			"linearInsertRange",
			"RINGBUFFER_ELEMENTLENGTH",
			"rb",
			"buf.",
			"FinalizerFunction",
			"DeferredFunction",
			"FunctionPointer",
			"av[",
			"session",
			"MinnetHttpMount",
			"MinnetResponse",
			"wsi",
			"ws->lwsi",
			"QJSNET_LIB_ASYNCITERATOR_H",
			"JS_FreeValueRT(rt,",
			"client->request",
			"MINNET",
			"MINNET_RINGBUFFER_H",
			"WJSNET_LIBQJSNET_LIB_RESPONSE_H",
			"WJSNET_LIBQJSNET_LIB_REQUEST_H",
			"WJSNET_LIBQJSNET_LIB_URL_H",
			"WJSNET_LIBQJSNET_LIB_WS_H",
			"WJSNET_LIB",
			"response",
			"arequest",
			"\\1//console",
			"log",
			"\\1",
			"\\1//DEBUG",
			"fp",
			"JS_FreeValueRT(rt,",
			"DEBUG(",
			"printf(",
			"printf(\"",
			" DEBUG(",
			"is_h2",
			"get_host_and_port",
			"JSCallback",
			"MINNET_GENERATOR_H",
			"MINNET_RINGBUFFER_H",
			"QUICKJS_NET_LIB_POLL_H",
			"(wsi_token_exists(\\1))",
			"h2",
			"closure_free",
			"closure_dup(cc)",
			"fetch_",
			"MinnetFetch",
			"MinnetHandler",
			"js_entry_reset",
			"js_entry_clear",
			"req->url."
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4372,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/jsutils.c",
							"function_name_status_row": 37,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									8,
									19
								],
								[
									169,
									181
								],
								[
									371,
									392
								],
								[
									568,
									587
								],
								[
									1076,
									1090
								],
								[
									1347,
									1364
								],
								[
									1829,
									1845
								],
								[
									2180,
									2198
								],
								[
									2312,
									2333
								],
								[
									2472,
									2495
								],
								[
									3107,
									3123
								],
								[
									3882,
									3903
								],
								[
									4058,
									4076
								],
								[
									4315,
									4331
								],
								[
									5638,
									5656
								],
								[
									6013,
									6035
								],
								[
									6358,
									6372
								],
								[
									6497,
									6510
								],
								[
									6920,
									6939
								],
								[
									7076,
									7090
								],
								[
									7257,
									7272
								],
								[
									7464,
									7476
								],
								[
									7594,
									7607
								],
								[
									7843,
									7858
								],
								[
									7930,
									7945
								],
								[
									8102,
									8116
								],
								[
									8261,
									8278
								],
								[
									8437,
									8451
								],
								[
									8537,
									8551
								],
								[
									8933,
									8947
								],
								[
									9146,
									9167
								],
								[
									9384,
									9405
								],
								[
									9612,
									9634
								],
								[
									9846,
									9865
								],
								[
									10235,
									10253
								],
								[
									10456,
									10470
								],
								[
									10539,
									10552
								],
								[
									10764,
									10776
								],
								[
									10841,
									10850
								],
								[
									11033,
									11047
								],
								[
									11329,
									11344
								],
								[
									11581,
									11594
								],
								[
									11876,
									11893
								],
								[
									12439,
									12456
								],
								[
									12918,
									12934
								],
								[
									13162,
									13187
								],
								[
									13292,
									13320
								],
								[
									13443,
									13468
								],
								[
									13738,
									13752
								],
								[
									14035,
									14046
								],
								[
									14136,
									14145
								],
								[
									14390,
									14407
								],
								[
									14544,
									14559
								],
								[
									14720,
									14738
								],
								[
									14903,
									14921
								],
								[
									15115,
									15132
								],
								[
									15322,
									15337
								],
								[
									15409,
									15427
								],
								[
									15516,
									15531
								],
								[
									15622,
									15637
								],
								[
									15766,
									15782
								],
								[
									15909,
									15922
								],
								[
									16126,
									16138
								],
								[
									16418,
									16432
								],
								[
									17485,
									17497
								],
								[
									17732,
									17755
								],
								[
									18006,
									18030
								],
								[
									18250,
									18275
								],
								[
									18493,
									18511
								],
								[
									18709,
									18723
								],
								[
									19077,
									19089
								],
								[
									19339,
									19353
								],
								[
									19625,
									19641
								],
								[
									19838,
									19859
								],
								[
									20546,
									20562
								],
								[
									20628,
									20649
								],
								[
									20845,
									20860
								],
								[
									21199,
									21215
								],
								[
									21579,
									21600
								],
								[
									21735,
									21751
								],
								[
									22313,
									22329
								],
								[
									22552,
									22568
								],
								[
									23168,
									23190
								],
								[
									23374,
									23391
								],
								[
									23485,
									23502
								],
								[
									23678,
									23695
								],
								[
									23875,
									23890
								],
								[
									25135,
									25149
								],
								[
									25550,
									25563
								],
								[
									25775,
									25793
								],
								[
									26067,
									26084
								],
								[
									26250,
									26264
								],
								[
									26698,
									26714
								],
								[
									26853,
									26868
								],
								[
									27246,
									27257
								],
								[
									27578,
									27603
								],
								[
									27863,
									27880
								],
								[
									28465,
									28481
								],
								[
									28569,
									28585
								],
								[
									28695,
									28712
								],
								[
									28827,
									28843
								],
								[
									29482,
									29503
								],
								[
									29855,
									29875
								]
							],
							"symlist":
							[
								"\tⓂ  _GNU_SOURCE … — macro object",
								"—Ⓕ– vector2array ( ) { … } — function",
								"—Ⓕ– js_object_constructor ( ) { … } — function",
								"—Ⓕ– js_object_classname ( ) { … } — function",
								"—Ⓕ– js_console_log ( ) { … } — function",
								"—Ⓕ– js_function_bound ( ) { … } — function",
								"—Ⓕ– js_function_bind ( ) { … } — function",
								"—Ⓕ– js_function_bind_1 ( ) { … } — function",
								"—Ⓕ– js_function_bind_this ( ) { … } — function",
								"—Ⓕ– js_function_bind_this_1 ( ) { … } — function",
								"—Ⓕ– js_function_name ( ) { … } — function",
								"—Ⓕ– js_function_prototype ( ) { … } — function",
								"—Ⓕ– js_iterator_result ( ) { … } — function",
								"—Ⓕ– js_iterator_next ( ) { … } — function",
								"—Ⓕ– js_copy_properties ( ) { … } — function",
								"—Ⓕ– js_buffer_free_default ( ) { … } — function",
								"—Ⓕ– js_buffer_from ( ) { … } — function",
								"—Ⓕ– js_buffer_new ( ) { … } — function",
								"—Ⓕ– js_buffer_fromblock ( ) { … } — function",
								"—Ⓕ– js_buffer_data ( ) { … } — function",
								"—Ⓕ– js_buffer_alloc ( ) { … } — function",
								"—Ⓕ– js_buffer_to ( ) { … } — function",
								"—Ⓕ– js_buffer_to3 ( ) { … } — function",
								"—Ⓕ– js_buffer_valid ( ) { … } — function",
								"—Ⓕ– js_buffer_clone ( ) { … } — function",
								"—Ⓕ– js_buffer_dump ( ) { … } — function",
								"—Ⓕ– js_buffer_free_rt ( ) { … } — function",
								"—Ⓕ– js_buffer_free ( ) { … } — function",
								"—Ⓕ– js_is_iterable ( ) { … } — function",
								"—Ⓕ– js_is_iterator ( ) { … } — function",
								"—Ⓕ– js_is_async_generator ( ) { … } — function",
								"—Ⓕ– js_symbol_static_atom ( ) { … } — function",
								"—Ⓕ– js_symbol_static_value ( ) { … } — function",
								"—Ⓕ– js_symbol_for_value ( ) { … } — function",
								"—Ⓕ– js_symbol_for_atom ( ) { … } — function",
								"—Ⓕ– js_symbol_ctor ( ) { … } — function",
								"—Ⓕ– js_global_get ( ) { … } — function",
								"—Ⓕ– js_global_os ( ) { … } — function",
								"—Ⓕ– js_os_get ( ) { … } — function",
								"—Ⓕ– js_timer_start ( ) { … } — function",
								"—Ⓕ– js_timer_cancel ( ) { … } — function",
								"—Ⓕ– js_timer_free ( ) { … } — function",
								"—Ⓕ– js_timer_callback ( ) { … } — function",
								"—Ⓕ– js_timer_interval ( ) { … } — function",
								"—Ⓕ– js_timer_restart ( ) { … } — function",
								"—Ⓕ– js_resolve_functions_zero ( ) { … } — function",
								"—Ⓕ– js_resolve_functions_is_null ( ) { … } — function",
								"—Ⓕ– js_resolve_functions_call ( ) { … } — function",
								"—Ⓕ– js_tostringlen ( ) { … } — function",
								"—Ⓕ– js_tostring ( ) { … } — function",
								"—Ⓕ– js_invoke ( ) { … } — function",
								"—Ⓕ– js_promise_create ( ) { … } — function",
								"—Ⓕ– js_promise_free ( ) { … } — function",
								"—Ⓕ– js_promise_free_rt ( ) { … } — function",
								"—Ⓕ– js_promise_resolve ( ) { … } — function",
								"—Ⓕ– js_promise_reject ( ) { … } — function",
								"—Ⓕ– js_promise_zero ( ) { … } — function",
								"—Ⓕ– js_promise_pending ( ) { … } — function",
								"—Ⓕ– js_promise_done ( ) { … } — function",
								"—Ⓕ– js_promise_then ( ) { … } — function",
								"—Ⓕ– js_promise_catch ( ) { … } — function",
								"—Ⓕ– js_is_promise ( ) { … } — function",
								"—Ⓕ– js_error_new ( ) { … } — function",
								"—Ⓕ– js_error_print ( ) { … } — function",
								"—Ⓕ– js_toptrsize ( ) { … } — function",
								"—Ⓕ– js_get_propertystr_bool ( ) { … } — function",
								"—Ⓕ– js_get_propertystr_int64 ( ) { … } — function",
								"—Ⓕ– js_get_propertystr_uint32 ( ) { … } — function",
								"—Ⓕ– js_has_propertystr ( ) { … } — function",
								"—Ⓕ– js_module_list ( ) { … } — function",
								"—Ⓕ– js_module_at ( ) { … } — function",
								"—Ⓕ– js_module_find ( ) { … } — function",
								"—Ⓕ– js_module_find_s ( ) { … } — function",
								"—Ⓕ– js_module_export_find ( ) { … } — function",
								"—Ⓕ– js_module_loader ( ) { … } — function",
								"—Ⓕ– js_module_import_meta ( ) { … } — function",
								"—Ⓕ– js_array_length ( ) { … } — function",
								"—Ⓕ– js_array_to_argv ( ) { … } — function",
								"—Ⓕ– js_arraybuffer_length ( ) { … } — function",
								"—Ⓕ– js_offset_length ( ) { … } — function",
								"—Ⓕ– js_argv_to_array ( ) { … } — function",
								"—Ⓕ– js_atom_is_index ( ) { … } — function",
								"—Ⓕ– js_atom_compare_string ( ) { … } — function",
								"—Ⓕ– js_atom_is_length ( ) { … } — function",
								"—Ⓕ– js_atom_is_symbol ( ) { … } — function",
								"—Ⓕ– js_atom_is_string ( ) { … } — function",
								"—Ⓕ– js_input_buffer ( ) { … } — function",
								"—Ⓕ– js_input_chars ( ) { … } — function",
								"—Ⓕ– js_input_args ( ) { … } — function",
								"—Ⓕ– js_buffer_fromargs ( ) { … } — function",
								"—Ⓕ– js_is_arraybuffer ( ) { … } — function",
								"—Ⓕ– js_is_dataview ( ) { … } — function",
								"—Ⓕ– js_is_typedarray ( ) { … } — function",
								"—Ⓕ– js_is_generator ( ) { … } — function",
								"—Ⓕ– js_is_( ) { … } — function",
								"—Ⓕ– js_typedarray_constructor ( ) { … } — function",
								"—Ⓕ– js_typedarray_new ( ) { … } — function",
								"\tⓉ  JSCClosureRecord ; — typedef",
								"—Ⓕ– js_cclosure_data ( ) { … } — function",
								"—Ⓕ– js_cclosure_data2 ( ) { … } — function",
								"—Ⓕ– js_cclosure_call ( ) { … } — function",
								"—Ⓕ– js_cclosure_finalizer ( ) { … } — function",
								"—Ⓕ– js_function_cclosure ( ) { … } — function"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679678764.67,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 408.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "src/minnet-server-http.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35292,
						"regions":
						{
						},
						"selection":
						[
							[
								21806,
								21808
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 756,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679679083.32,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12103.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/minnet.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16661,
						"regions":
						{
						},
						"selection":
						[
							[
								3655,
								3662
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 147,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679445499.01,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1919.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "lib/ws.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3023,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"function_name_status_row": 0,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "lib/deferred.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3259,
						"regions":
						{
						},
						"selection":
						[
							[
								54,
								54
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 2,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679677389.23,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "tests/test-client-http.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2058,
						"regions":
						{
						},
						"selection":
						[
							[
								1449,
								1494
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 46,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679450991.33,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 135.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "tests/fetch.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1210,
						"regions":
						{
						},
						"selection":
						[
							[
								797,
								801
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 27,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679677861.06,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "tests/test-fetch.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4454,
						"regions":
						{
						},
						"selection":
						[
							[
								427,
								425
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 13,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679212381.89,
							"tabs_extra_last_activated_sheet_index": 2,
							"tabs_extra_moving":
							[
								5,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "tests/test-client.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4096,
						"regions":
						{
						},
						"selection":
						[
							[
								3570,
								3570
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 115,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679445873.93,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "tests/client.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3556,
						"regions":
						{
						},
						"selection":
						[
							[
								3235,
								3235
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 113,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679677066.85,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 920.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "lib/jsutils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13758,
						"regions":
						{
						},
						"selection":
						[
							[
								2702,
								2702
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 95,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679679132.45,
							"tabs_extra_last_activated_sheet_index": 9,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1427.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/minnet-client.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19065,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"function_name_status_row": 0,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "lib/jsutils.c",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30820,
						"regions":
						{
						},
						"selection":
						[
							[
								30040,
								30040
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": -1,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679680902.79,
							"tabs_extra_last_activated_sheet_index": 11,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 20195.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "/home/roman/Projects/plot-cv/quickjs/quickjs.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 40236,
						"regions":
						{
						},
						"selection":
						[
							[
								34727,
								34742
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 905,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679680078.47,
							"tabs_extra_last_activated_sheet_index": 12,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14925.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "src/minnet-server.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18477,
						"regions":
						{
						},
						"selection":
						[
							[
								12609,
								12609
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 376,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679452714.77,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5640.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "tests/common.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1697,
						"regions":
						{
						},
						"selection":
						[
							[
								1504,
								1575
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 63,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679445971.86,
							"tabs_extra_last_activated_sheet_index": 9,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 270.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "tests/log.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2014,
						"regions":
						{
						},
						"selection":
						[
							[
								1090,
								1177
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 39,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679211427.08,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 90.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "src/minnet-client-http.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13571,
						"regions":
						{
						},
						"selection":
						[
							[
								10307,
								10307
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 298,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679445937.06,
							"tabs_extra_last_activated_sheet_index": 11,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3666.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "src/minnet-ringbuffer.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15007,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"function_name_status_row": 0,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "src/minnet-generator.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3681,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"function_name_status_row": 0,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "src/minnet-fetch.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3451,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"function_name_status_row": 0,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 0.0
	},
	"output.Debugger Console":
	{
		"height": 108.0
	},
	"output.coffeecompile_output":
	{
		"height": 132.0
	},
	"output.exec":
	{
		"height": 120.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "minnet.sublime-project",
	"replace":
	{
		"height": 68.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"jsut",
				"lib/jsutils.h"
			],
			[
				"minnet-server-ht",
				"src/minnet-server-http.c"
			],
			[
				"jsutils.c",
				"lib/jsutils.c"
			],
			[
				"test-client",
				"tests/test-client-http.js"
			],
			[
				"minnet-server",
				"src/minnet-server.c"
			],
			[
				"log.js",
				"tests/log.js"
			],
			[
				"server-ht",
				"src/minnet-server-http.c"
			],
			[
				"build-lib",
				"build-libwebsockets.sh"
			],
			[
				"premake5",
				"premake5.lua"
			],
			[
				"server-ws",
				"src/minnet-server-ws.c"
			],
			[
				"minnet-client-htt",
				"src/minnet-client-http.c"
			],
			[
				"premake",
				"premake5.lua"
			],
			[
				"minnet.h",
				"src/minnet.h"
			],
			[
				"server-htt",
				"src/minnet-server-http.c"
			],
			[
				"ref.c",
				"lib/ref.c"
			],
			[
				"utils.c",
				"lib/utils.c"
			],
			[
				"lws-utils",
				"lib/lws-utils.c"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"lws_mirr",
				"libwebsockets/plugins/protocol_lws_mirror.c"
			],
			[
				"server-http.c ",
				"src/minnet-server-http.c"
			],
			[
				"callback",
				"lib/callback.h"
			],
			[
				"lws-call",
				"libwebsockets/include/libwebsockets/lws-callbacks.h"
			],
			[
				"lws-write",
				"libwebsockets/include/libwebsockets/lws-write.h"
			],
			[
				"context.h",
				"lib/context.h"
			],
			[
				"context.c",
				"lib/context.c"
			],
			[
				"minnet-webso",
				"src/minnet-websocket.c"
			],
			[
				"ws.h",
				"lib/ws.h"
			],
			[
				"lws-util",
				"lib/lws-utils.h"
			],
			[
				"minnet.c",
				"src/minnet.c"
			],
			[
				"mirror",
				"libwebsockets/plugins/protocol_lws_mirror.c"
			],
			[
				"minnet-url",
				"src/minnet-url.c"
			],
			[
				"conso",
				"libwebsockets/lib/core-net/socks5-client.c"
			],
			[
				"wscli",
				"wscli.js"
			],
			[
				"lws_mi",
				"libwebsockets/plugins/protocol_lws_mirror.c"
			],
			[
				"_mirror",
				"libwebsockets/plugins/protocol_lws_mirror.c"
			],
			[
				"wscli.js",
				"wscli.js"
			],
			[
				"minnet-clie",
				"src/minnet-client.c"
			],
			[
				"lws_raw_",
				"libwebsockets/plugins/raw-proxy/protocol_lws_raw_proxy.c"
			],
			[
				"request.c",
				"lib/request.c"
			],
			[
				"url.c",
				"lib/url.c"
			],
			[
				"lws-ut",
				"lib/lws-utils.h"
			],
			[
				"server-ws.c",
				"minnet-server-ws.c"
			],
			[
				"minnet-server-ws",
				"minnet-server-ws.c"
			],
			[
				"minnet.js",
				"js/minnet.js"
			],
			[
				"minnet-server-htt",
				"minnet-server-http.c"
			],
			[
				"CMakeLists",
				"CMakeLists.txt"
			],
			[
				"queue.h",
				"lib/queue.h"
			],
			[
				"closure.h",
				"lib/closure.h"
			],
			[
				"test-ge",
				"tests/test-generator.js"
			],
			[
				"minnet-ge",
				"minnet-generator.c"
			],
			[
				"hash.c",
				"minnet-hash.c"
			],
			[
				"minnet-has",
				"minnet-hash.c"
			],
			[
				"server-http",
				"minnet-server-http.c"
			],
			[
				"-ws",
				"minnet-server-ws.c"
			],
			[
				"session.h",
				"lib/session.h"
			],
			[
				"minnet.cv",
				"libwebsockets/minimal-examples/http-server/minimal-http-server-eventlib/mount-origin/strict-csp.svg"
			],
			[
				"-ws.c",
				"minnet-server-ws.c"
			],
			[
				"opaque.h",
				"lib/opaque.h"
			],
			[
				"session",
				"lib/session.h"
			],
			[
				"minnet-web",
				"minnet-websocket.c"
			],
			[
				"client.js",
				"tests/client.js"
			],
			[
				"test-clie",
				"tests/test-client-http.js"
			],
			[
				"test-client-ht",
				"tests/test-client-http.js"
			],
			[
				"test-client-htt",
				"tests/test-client-http.js"
			],
			[
				"-gene",
				"tests/test-generator.js"
			],
			[
				"queue.c",
				"lib/queue.c"
			],
			[
				"respo",
				"lib/response.c"
			],
			[
				"client-htt",
				"minnet-client-http.c"
			],
			[
				"minnet-we",
				"minnet-websocket.c"
			],
			[
				"test-rpc",
				"test-rpc.js"
			],
			[
				"utils.h",
				"lib/utils.h"
			],
			[
				"headers",
				"lib/headers.h"
			],
			[
				"headers.h",
				"lib/headers.h"
			],
			[
				"lws-htt",
				"libwebsockets/include/libwebsockets/lws-http.h"
			],
			[
				"server-ring",
				"libwebsockets/minimal-examples/ws-server/minimal-ws-server-ring/protocol_lws_minimal.c"
			],
			[
				"sse-",
				"libwebsockets/minimal-examples/http-server/minimal-http-server-sse-ring/minimal-http-server-sse-ring.c"
			],
			[
				"jsuti",
				"lib/jsutils.c"
			],
			[
				"lws-ring.c",
				"libwebsockets/lib/misc/lws-ring.c"
			],
			[
				"lws-ring",
				"libwebsockets/include/libwebsockets/lws-ring.h"
			],
			[
				"sse-ring",
				"libwebsockets/minimal-examples/http-server/minimal-http-server-sse-ring/minimal-http-server-sse-ring.c"
			],
			[
				"ring",
				"lib/ringbuffer.c"
			],
			[
				"lws-rin",
				"libwebsockets/include/libwebsockets/lws-ring.h"
			],
			[
				"test-cli",
				"tests/test-client.js"
			],
			[
				"rpc.js",
				"rpc.js"
			],
			[
				"lws-misc",
				"libwebsockets/include/libwebsockets/lws-misc.h"
			],
			[
				"openssl-tls",
				"libwebsockets/lib/tls/openssl/openssl-tls.c"
			],
			[
				"rpc",
				"rpc.js"
			],
			[
				"callba",
				"lib/callback.h"
			],
			[
				"jsutils.h",
				"lib/jsutils.h"
			],
			[
				"minnet-server-",
				"minnet-server-http.c"
			],
			[
				"buffer.h",
				"lib/buffer.h"
			],
			[
				"buffer.c",
				"lib/buffer.c"
			],
			[
				"server.js",
				"tests/server.js"
			],
			[
				"server-h",
				"minnet-server-http.c"
			],
			[
				"-vhost",
				"libwebsockets/include/libwebsockets/lws-context-vhost.h"
			],
			[
				"url.h",
				"lib/url.h"
			],
			[
				"lws-proto",
				"libwebsockets/include/libwebsockets/lws-protocols-plugins.h"
			],
			[
				"minnet-req",
				"minnet-request.c"
			],
			[
				"minnet-request",
				"minnet-request.h"
			],
			[
				"lws-network",
				"libwebsockets/include/libwebsockets/lws-network-helper.h"
			],
			[
				"-request",
				"minnet-request.c"
			],
			[
				"generator.c",
				"lib/generator.c"
			],
			[
				"generator.h",
				"lib/generator.h"
			],
			[
				"lws-",
				"libwebsockets/include/libwebsockets/lws-http.h"
			],
			[
				"long",
				"libwebsockets/READMEs/README.h2-long-poll.md"
			],
			[
				"server.c",
				"libwebsockets/lib/roles/http/server/server.c"
			],
			[
				"dummy",
				"libwebsockets/lib/core-net/dummy-callback.c"
			],
			[
				"openssl-clie",
				"libwebsockets/lib/tls/openssl/openssl-client.c"
			],
			[
				"430",
				"libwebsockets/build/x86_64-linux-gnu/include/libwebsockets/lws-ssd1306-i2c.h"
			],
			[
				"minnet-client.c",
				"minnet-client.c"
			],
			[
				"minnet-client",
				"minnet-client.c"
			],
			[
				"ws",
				"wscli.js"
			],
			[
				"client-ht",
				"minnet-client-http.c"
			],
			[
				"413",
				"libwebsockets/build/x86_64-linux-gnu/include/libwebsockets/lws-ssd1306-i2c.h"
			],
			[
				"minnet-cli",
				"minnet-client.c"
			],
			[
				"header",
				"lib/headers.c"
			],
			[
				"wsi-time",
				"libwebsockets/lib/core-net/wsi-timeout.c"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"upload",
				"upload.html"
			],
			[
				"map.html",
				"map.html"
			],
			[
				"upload-server",
				"upload-server.js"
			],
			[
				"ol-help",
				"ol-helpers.js"
			],
			[
				"object-he",
				"object-helpers.js"
			],
			[
				"ol-map.js",
				"ol-map.js"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"xml2react",
				"xml2react.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"layer.js",
				"lib/dom/layer.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 592.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 308.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
