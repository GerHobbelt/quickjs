{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"LIBWEB",
				"LIBWEBSOCKETS_LIBRARY_DIR"
			],
			[
				"vhost_",
				"vhost_options_create"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"CURL",
				"CURL_LIBRARY"
			],
			[
				"LI",
				"LIBWEBSOCKETS_LIBRARY_DIR"
			],
			[
				"target_link_",
				"target_link_directories"
			],
			[
				"CURL_",
				"CURL_LIBRARY_DEBUG"
			],
			[
				"minnet",
				"minnet_client_lws"
			],
			[
				"JS_To",
				"JS_ToCString"
			],
			[
				"JS_GetP",
				"JS_GetPropertyUint32"
			],
			[
				"OP",
				"OPENSSL_LIBRARY_DIR"
			],
			[
				"Content",
				"Content-Disposition"
			],
			[
				"MBED",
				"MBEDTLS_LIBRARY_DIR"
			],
			[
				"LIBWEBSO",
				"LIBWEBSOCKETS_LIBRARY_DIR"
			],
			[
				"CMAKE_",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"JS_Throw",
				"JS_ThrowOutOfMemory"
			],
			[
				"opt_P",
				"opt_private_key"
			],
			[
				"JS_FRee",
				"JS_FreeValue"
			],
			[
				"LWS_WR",
				"LWS_WRITE_HTTP_FINAL"
			],
			[
				"MBEDTLS_LIB",
				"MBEDTLS_LIBRARY_DIR"
			],
			[
				"curl_mul",
				"curl_multi_cleanup"
			],
			[
				"LWS_CALLBACK_",
				"LWS_CALLBACK_HTTP_WRITEABLE"
			],
			[
				"lws_get",
				"lws_get_opaque_user_data"
			],
			[
				"Event",
				"EventTarget"
			],
			[
				"http_",
				"http_response"
			],
			[
				"STREAM",
				"STREAM_TEXT"
			],
			[
				"moun",
				"mountpoint_len"
			],
			[
				"ori",
				"origin_protocol"
			],
			[
				"mount",
				"mountpoint_len"
			],
			[
				"LWS",
				"LWSMPRO_CALLBACK"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"Minn",
				"MinnetWebsocket"
			],
			[
				"BUILD_",
				"BUILD_LIBWEBSOCKETS"
			],
			[
				"minnet_request",
				"minnet_request_class_id"
			],
			[
				"getOwn",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"break",
				"stringBreakNewline"
			],
			[
				"define",
				"defineProperty"
			],
			[
				"sy",
				"syntaxerror_ctor"
			],
			[
				"child_pr",
				"child_process_proto"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"targtet_",
				"target_compile_definitions"
			],
			[
				"jsm_module",
				"jsm_module_loader_so"
			],
			[
				"base",
				"base_name"
			],
			[
				"ATOM",
				"ATOM_TO_VALUE"
			],
			[
				"prop",
				"propenum_tab"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"js_loca",
				"js_location_data"
			],
			[
				"loca",
				"location_proto"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"HAVE_QUI",
				"HAVE_QUICKJS_LIBRARY"
			],
			[
				"jsm_load",
				"jsm_load_packages_json"
			],
			[
				"js_sy",
				"js_syntaxerror_class_id"
			],
			[
				"synta",
				"syntaxerror_proto"
			],
			[
				"property_",
				"property_enumeration_key"
			],
			[
				"jsm_mo",
				"jsm_module_loader_path"
			],
			[
				"inspe",
				"inspect_custom_node"
			],
			[
				"inspect",
				"inspect_custom_node"
			],
			[
				"property",
				"property_enumeration_circular"
			],
			[
				"Reg",
				"RegExpCompare"
			],
			[
				"property_enum",
				"property_enumeration_length"
			],
			[
				"Opera",
				"OperatorsObjects"
			],
			[
				"else",
				"elseif"
			],
			[
				"ABC",
				"ABCDEF"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  client_callback\n  close_status\n  close_reason\n  sslcert_client\n  connect_client\n  minnet_ws_client\n  client_callback",
			"settings":
			{
				"buffer_size": 118,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					106,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAALEAAAICAuTG9nV3JhcCA9IGZ1bmN0aW9uIExvZ1dyYXAobG9nKQogIGxvZyA9ICguLi5hcmdzKSA9PgogIGxvZyA9ICguLi5hcmdzKSA9PgogICh2YWx1ZSwgLi4uYXJncykgPT4KVmZuQWRhcHRlciA9IHZmbiA9PgogIGdldDogayA9PgogIHNldDogKGssIHYpID0+ClZmbkRlY29yYXRvciA9IHZmbiA9PgogIC5HZXRDbGFzc2VzID0gZnVuY3Rpb24qR2V0Q2xhc3NlcyhvYmopCk1hcHBlcihtYXAgPSAKKCkpCiAgc2VsZiA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpCk1hcHBlcgpNYXBwZXIucHJvdG90eXBlID0gZnVuY3Rpb24oKQpNYXBwZXIKRGVmYXVsdENvbnN0cnVjdG9yKG1hcHBlciwgZm4gPSAoLi4uYXJncykgPT4gCiguLi5hcmdzKSkKICBzZWxmID0gZnVuY3Rpb24oLi4uYXJncykKRGVmYXVsdENvbnN0cnVjdG9yCkRlZmF1bHRDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBmdW5jdGlvbigpCkRlZmF1bHRDb25zdHJ1Y3RvcgpFdmVudExvZ2dlcihpbnN0YW5jZSA9IHt9LCBjYWxsYmFjayA9IChuYW1lLCBldmVudCwgdGhpc09iaikgPT4gY29uc29sZS5sb2coJ0V2ZW50TG9nZ2VyJywgeyBuYW1lLCBldmVudCwgdGhpc09iaiB9KSkKV3JhcEV2ZW50KGhhbmRsZXIsIG5hbWUpCiAgZnVuY3Rpb24oZSkKICBnZXQob2JqLCBwcm9wKQpNZXNzYWdlUmVjZWl2ZXIKICBvbm1lc3NhZ2UobXNnKQpNZXNzYWdlVHJhbnNtaXR0ZXIKICBzZW5kTWVzc2FnZSgpCk1lc3NhZ2VUcmFuc2NlaXZlcigpCk1lc3NhZ2VUcmFuc2NlaXZlcgpNZXNzYWdlUmVjZWl2ZXIKTWVzc2FnZVRyYW5zbWl0dGVyCiAgdmFsdWU6IGluc3RhbmNlID0+CiAgY3RvciA9PgogIG5vbmUoKQogIGVuY29kZTogdiA9PgogIGRlY29kZTogdiA9PgogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIGVuY29kZTogdiA9PgogIGRlY29kZTogdiA9PgogIC5qcyA9IGZ1bmN0aW9uIGpzKHZlcmJvc2UgPSBmYWxzZSkKICBlbmNvZGU6IHYgPT4KICBkZWNvZGU6IHYgPT4KICAuYmpzb24gPSBmdW5jdGlvbiBianNvbigpCiAgZW5jb2RlOiB2ID0+CiAgZGVjb2RlOiB2ID0+ClJQQ0FwaShjKQpSUENBcGkKICBvID0+ClJQQ1Byb3h5KGMpClJQQ09iamVjdChpZCwgY29ubmVjdGlvbikKICByID0+ClJQQ09iamVjdApSUENGYWN0b3J5KGFwaSkKRmFjdG9yeShvcHRzKQpSUENPYmplY3QKUlBDRmFjdG9yeS5wcm90b3R5cGUgPSBmdW5jdGlvbigpClJQQ0ZhY3RvcnkKQ29ubmVjdGlvbgogIHN0YXRpYyBlcXVhbChhLCBiKQogIHN0YXRpYyBnZXQgbGFzdCgpCiAgbWFrZVNlcSgpCiAgY29uc3RydWN0b3Ioc29ja2V0LCBpbnN0YW5jZSwgbG9nLCBjb2RlYyA9ICdub25lJykKICBsb2coLi4uYXJncykKICBlcnJvcihtZXNzYWdlKQogIGNsb3NlKHN0YXR1cywgcmVhc29uKQogIG9ubWVzc2FnZShtc2cpCiAgciA9PgogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICAobXNnLCAuLi5hcmdzKSA9PgogICgpID0+CiAgaGFuZGxlID0gKHNvY2ssIGV2ZW50LCAuLi5hcmdzKSA9PgogIHRoZW46IGZuID0+CiAgcmVtb3ZlID0gc29jayA9PgogIG9uQ29ubmVjdChzb2NrLCByZXEpCiAgb25PcGVuKHNvY2spCiAgb25NZXNzYWdlKHNvY2ssIG1zZykKICBvbkVycm9yKHNvY2ssIGVycm9yKQogIG9uQ2xvc2Uoc29jaywgY29kZSwgd2h5KQogIG9uUG9uZyhzb2NrLCBkYXRhKQpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQooeyBpZCB9LCByZXNwb25kKSA9PgooeyBvYmosIG1ldGhvZCwgYXJncyA9IFtdIH0sIHJlc3BvbmQpID0+CiAgcmVzdWx0ID0+CiAgZXJyb3IgPT4KKHsgb2JqLCBlbnVtZXJhYmxlID0gdHJ1ZSB9LCByZXNwb25kKSA9PgogIG9iaiA9PgogIG9iaiA9PgooeyBvYmosIGVudW1lcmFibGUgPSB0cnVlIH0sIHJlc3BvbmQpID0+CiAgb2JqID0+Cih7IG9iaiwgZW51bWVyYWJsZSA9IHRydWUgfSwgcmVzcG9uZCkgPT4KICBvYmogPT4KICBzeW0gPT4KICB2ID0+CiAgdiA9PgooeyBvYmosIHByb3BlcnR5IH0sIHJlc3BvbmQpID0+Cih7IG9iaiwgcHJvcGVydHksIHZhbHVlIH0sIHJlc3BvbmQpID0+ClJQQ1NlcnZlcgogIG1ha2VJZCgpCiAgcHJvY2Vzc01lc3NhZ2UoZGF0YSkKUlBDU2VydmVyClJQQ0NsaWVudAogIGUgPT4KICBnZXQoKQogIHByb2Nlc3NNZXNzYWdlKHJlc3BvbnNlKQogIGNvbW1hbmQobmFtZSwgcGFyYW1zKQooYWNjZXB0LCByZWplY3QpID0+CiAgcmVzcG9uc2UgPT4KICBlID0+ClJQQ0NsaWVudApSUENTb2NrZXQodXJsLCBzZXJ2aWNlID0gUlBDU2VydmVyLCB2ZXJib3NpdHkgPSAxKQogICguLi5hcmdzKSA9PgogIGdldCBmZCgpCiAgZ2V0IHNvY2tldCgpCiAgZ2V0IGNvbm5lY3Rpb24oKQogIHJlZ2lzdGVyKGN0b3IpCiAgbGlzdGVuKG5ld193cywgb3MgPSBnbG9iYWxUaGlzLm9zKQooKSA9PgogIGNvbm5lY3QobmV3X3dzLCBvcyA9IGdsb2JhbFRoaXMub3MpCiAgZ2V0IGNvbm5lY3RlZCgpCiAgZ2V0IGxpc3QoKQogIGdldCBsYXN0KCkKUlBDU29ja2V0Ck1ha2VXZWJTb2NrZXQodXJsLCBjYWxsYmFja3MpCiAgLm9uY29ubmVjdCA9ICgpID0+CiAgLm9ub3BlbiA9ICgpID0+CiAgLm9uZXJyb3IgPSBlcnJvciA9PgogIC5vbm1lc3NhZ2UgPSBtc2cgPT4KICAub25wb25nID0gcG9uZyA9PgogIC5vbmNsb3NlID0gcmVhc29uID0+CiAgaXNUaGVuYWJsZSh2YWx1ZSkKICBoYXNIYW5kbGVyKG9iaiwgZXZlbnROYW1lKQogIGNhbGxIYW5kbGVyKG9iaiwgZXZlbnROYW1lLCAuLi5hcmdzKQogIHBhcnNlVVJMKHVybF9vcl9wb3J0KQogIHRvU3RyaW5nKCkKR2V0UHJvcGVydGllcyhvYmosIG1ldGhvZCA9IG9iaiA9PiBPYmplY3QuCihvYmopLCBwcmVkID0gKG9iaiwgZGVwdGgpID0+IG9iaiAhPT0gT2JqZWN0LnByb3RvdHlwZSkKR2V0S2V5cyhvYmosIHByZWQgPSAob2JqLCBkZXB0aCkgPT4gb2JqICE9PSBPYmplY3QucHJvdG90eXBlKQogIG9iaiA9PgogIG9iaiA9PgogIGdldFByb3BlcnR5RGVzY3JpcHRvcnMob2JqLCBtZXJnZSA9IHRydWUsIHByZWQgPSAocHJvdG8sIGRlcHRoKSA9PiB0cnVlKQogIGRlZmluZShvYmosIC4uLmFyZ3MpCiAgc2V0SGFuZGxlcnMob3MsIGhhbmRsZXJzKQogIC5vbkZkID0gZnVuY3Rpb24oZmQsIHJlYWRhYmxlLCB3cml0YWJsZSkKICBzdGF0dXNSZXNwb25zZShzdWNjZXNzLCByZXN1bHRfb3JfZXJyb3IsIGRhdGEpCiAgb2JqZWN0Q29tbWFuZChmbikKICBmdW5jdGlvbihkYXRhKQogIHJlc3BvbmQgPSAoc3VjY2VzcywgcmVzdWx0KSA9PgpNYWtlTGlzdENvbW1hbmQocHJlZCA9IHYgPT4gdHlwZW9mIHYgIT0gJ2Z1bmN0aW9uJywgZGVmYXVsdHMgPSB7IG1heERlcHRoOiBJbmZpbml0eSB9KQooZGF0YSwgcmVzcG9uZCkgPT4KICAocHJvdG8sIGRlcHRoKSA9PgooYWNjLCBrZXkpID0+CiAgZ2V0UHJvdG90eXBlTmFtZShwcm90bykKRGVzZXJpYWxpemVFbnRyaWVzKGUpCiAgYSA9PgpEZXNlcmlhbGl6ZUtleXMoZSkKKFtrXSkgPT4KRGVzZXJpYWxpemVNYXAoZSkKRGVzZXJpYWxpemVPYmplY3QoZSkKRm9yd2FyZE1ldGhvZHMoZSwgcmV0ID0ge30sIHRoaXNPYmopCiAgbyA9PgpGb3J3YXJkT2JqZWN0KGUsIHRoaXNPYmopCk1ha2VDb21tYW5kRnVuY3Rpb24oY21kLCBnZXRDb25uZWN0aW9uLCB0aGlzT2JqLCB0KQogIGdldENvbm5lY3Rpb24gPSBvYmogPT4KICBmdW5jdGlvbihwYXJhbXMgPSB7fSkKKHJlc29sdmUsIHJlamVjdCkgPT4KICByID0+CiAgZnVuY3Rpb24ocGFyYW1zID0ge30pClNlcmlhbGl6ZVZhbHVlKHZhbHVlLCBzb3VyY2UgPSBmYWxzZSkKRGVzZXJpYWxpemVTeW1ib2xzKG5hbWVzKQogIG4gPT4KICBuID0+CkRlc2VyaWFsaXplVmFsdWUoZGVzYykKUlBDQ29ubmVjdCA9ICh1cmwsIHNlcnZpY2UgPSBSUENDbGllbnQpID0+ClJQQ0xpc3RlbiA9ICh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIpID0+AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					107,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/rpc.js",
						"symkeys":
						[
							[
								220,
								252
							],
							[
								309,
								327
							],
							[
								379,
								397
							],
							[
								432,
								452
							],
							[
								501,
								520
							],
							[
								526,
								535
							],
							[
								546,
								560
							],
							[
								589,
								610
							],
							[
								985,
								1024
							],
							[
								1266,
								1289
							],
							[
								1300,
								1303
							],
							[
								1320,
								1347
							],
							[
								1490,
								1496
							],
							[
								1511,
								1540
							],
							[
								1545,
								1551
							],
							[
								1591,
								1646
							],
							[
								1656,
								1666
							],
							[
								1683,
								1707
							],
							[
								1983,
								2001
							],
							[
								2017,
								2058
							],
							[
								2063,
								2081
							],
							[
								2133,
								2260
							],
							[
								2263,
								2298
							],
							[
								2311,
								2323
							],
							[
								2411,
								2425
							],
							[
								2608,
								2623
							],
							[
								2751,
								2765
							],
							[
								2889,
								2907
							],
							[
								3022,
								3035
							],
							[
								3213,
								3243
							],
							[
								3262,
								3280
							],
							[
								3292,
								3307
							],
							[
								3319,
								3337
							],
							[
								3417,
								3435
							],
							[
								3480,
								3487
							],
							[
								3548,
								3554
							],
							[
								3596,
								3608
							],
							[
								3618,
								3630
							],
							[
								3647,
								3668
							],
							[
								3710,
								3722
							],
							[
								3779,
								3791
							],
							[
								3854,
								3888
							],
							[
								3928,
								3940
							],
							[
								4009,
								4021
							],
							[
								4083,
								4108
							],
							[
								4151,
								4163
							],
							[
								4186,
								4198
							],
							[
								4234,
								4253
							],
							[
								4462,
								4468
							],
							[
								4510,
								4515
							],
							[
								4538,
								4559
							],
							[
								4677,
								4712
							],
							[
								4828,
								4832
							],
							[
								4859,
								4868
							],
							[
								4921,
								4946
							],
							[
								4951,
								4979
							],
							[
								5209,
								5218
							],
							[
								5320,
								5353
							],
							[
								5358,
								5368
							],
							[
								5462,
								5472
							],
							[
								5558,
								5576
							],
							[
								5687,
								5704
							],
							[
								5741,
								5750
							],
							[
								5787,
								5837
							],
							[
								5954,
								5966
							],
							[
								6427,
								6441
							],
							[
								6744,
								6765
							],
							[
								6958,
								6972
							],
							[
								7525,
								7529
							],
							[
								7623,
								7643
							],
							[
								7749,
								7764
							],
							[
								7942,
								7954
							],
							[
								8009,
								8023
							],
							[
								8148,
								8166
							],
							[
								8293,
								8302
							],
							[
								8392,
								8408
							],
							[
								8778,
								8811
							],
							[
								9316,
								9360
							],
							[
								9468,
								9486
							],
							[
								9516,
								9522
							],
							[
								9607,
								9641
							],
							[
								9897,
								9908
							],
							[
								9966,
								9982
							],
							[
								10063,
								10083
							],
							[
								10478,
								10490
							],
							[
								10697,
								10717
							],
							[
								10812,
								10832
							],
							[
								10996,
								11020
							],
							[
								11146,
								11164
							],
							[
								11457,
								11497
							],
							[
								11515,
								11546
							],
							[
								11876,
								11882
							],
							[
								12047,
								12067
							],
							[
								12163,
								12203
							],
							[
								12363,
								12372
							],
							[
								12402,
								12410
							],
							[
								12588,
								12628
							],
							[
								12689,
								12696
							],
							[
								12715,
								12722
							],
							[
								12791,
								12831
							],
							[
								12896,
								12903
							],
							[
								12981,
								13021
							],
							[
								13086,
								13093
							],
							[
								13133,
								13139
							],
							[
								13206,
								13210
							],
							[
								13265,
								13269
							],
							[
								13341,
								13372
							],
							[
								13635,
								13673
							],
							[
								13757,
								13766
							],
							[
								14242,
								14250
							],
							[
								14286,
								14306
							],
							[
								14887,
								14896
							],
							[
								15206,
								15215
							],
							[
								15615,
								15620
							],
							[
								15796,
								15801
							],
							[
								15887,
								15911
							],
							[
								16164,
								16185
							],
							[
								16211,
								16230
							],
							[
								16260,
								16272
							],
							[
								16316,
								16321
							],
							[
								16395,
								16404
							],
							[
								16712,
								16772
							],
							[
								17382,
								17395
							],
							[
								17572,
								17580
							],
							[
								17698,
								17710
							],
							[
								17767,
								17783
							],
							[
								18209,
								18223
							],
							[
								18443,
								18477
							],
							[
								18776,
								18781
							],
							[
								18876,
								18917
							],
							[
								19211,
								19226
							],
							[
								19687,
								19697
							],
							[
								19734,
								19744
							],
							[
								19813,
								19822
							],
							[
								19880,
								19918
							],
							[
								20051,
								20069
							],
							[
								20099,
								20114
							],
							[
								20141,
								20160
							],
							[
								20195,
								20214
							],
							[
								20249,
								20266
							],
							[
								20299,
								20319
							],
							[
								20411,
								20438
							],
							[
								20537,
								20573
							],
							[
								20731,
								20777
							],
							[
								20876,
								20907
							],
							[
								21464,
								21474
							],
							[
								21608,
								21660
							],
							[
								21679,
								21734
							],
							[
								22053,
								22124
							],
							[
								22186,
								22193
							],
							[
								22284,
								22291
							],
							[
								22378,
								22460
							],
							[
								23002,
								23032
							],
							[
								23400,
								23435
							],
							[
								23448,
								23488
							],
							[
								23667,
								23723
							],
							[
								23952,
								23979
							],
							[
								23990,
								24005
							],
							[
								24018,
								24048
							],
							[
								24305,
								24401
							],
							[
								24427,
								24445
							],
							[
								24693,
								24711
							],
							[
								24814,
								24827
							],
							[
								25411,
								25444
							],
							[
								25513,
								25543
							],
							[
								25582,
								25586
							],
							[
								25673,
								25700
							],
							[
								25739,
								25747
							],
							[
								25827,
								25853
							],
							[
								25899,
								25928
							],
							[
								25985,
								26030
							],
							[
								26130,
								26135
							],
							[
								26235,
								26269
							],
							[
								26386,
								26446
							],
							[
								26661,
								26683
							],
							[
								26849,
								26871
							],
							[
								26969,
								26989
							],
							[
								27021,
								27026
							],
							[
								27155,
								27182
							],
							[
								27414,
								27461
							],
							[
								28279,
								28314
							],
							[
								28336,
								28340
							],
							[
								28372,
								28376
							],
							[
								28398,
								28430
							],
							[
								28564,
								28606
							],
							[
								28659,
								28700
							]
						],
						"symlist":
						[
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"VfnAdapter = vfn =>",
							"get: k =>",
							"set: (k, v) =>",
							"VfnDecorator = vfn =>",
							".GetClasses = function* GetClasses(obj)",
							" function Mapper(map = ",
							"())",
							"self = function(key, value)",
							"Mapper",
							"Mapper.prototype = function()",
							"Mapper",
							" function DefaultConstructor(mapper, fn = (...args) => ",
							"(...args))",
							"self = function(...args)",
							"DefaultConstructor",
							"DefaultConstructor.prototype = function()",
							"DefaultConstructor",
							" function EventLogger(instance = {}, callback = (name, event, thisObj) => console.log('EventLogger', { name, event, thisObj }))",
							" function WrapEvent(handler, name)",
							" function(e)",
							"get(obj, prop)",
							"MessageReceiver",
							"onmessage(msg)",
							"MessageTransmitter",
							"sendMessage()",
							" function MessageTransceiver()",
							"MessageTransceiver",
							"MessageReceiver",
							"MessageTransmitter",
							"value: instance =>",
							"ctor =>",
							"none()",
							"encode: v =>",
							"decode: v =>",
							"json(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".js = function js(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".bjson = function bjson()",
							"encode: v =>",
							"decode: v =>",
							" function RPCApi(c)",
							"RPCApi",
							" o =>",
							" function RPCProxy(c)",
							" function RPCObject(id, connection)",
							"r =>",
							"RPCObject",
							" function RPCFactory(api)",
							"async function Factory(opts)",
							"RPCObject",
							"RPCFactory.prototype = function()",
							"RPCFactory",
							"Connection",
							"static equal(a, b)",
							"static get last()",
							"makeSeq()",
							"constructor(socket, instance, log, codec = 'none')",
							"log(...args)",
							"error(message)",
							"close(status, reason)",
							"onmessage(msg)",
							"r =>",
							"processMessage(data)",
							"onconnect(sock)",
							"onpong(data)",
							"onerror(error)",
							"onclose(code, why)",
							"cleanup()",
							"sendMessage(obj)",
							"sendCommand(command, params = {})",
							"static getCallbacks(instance, verbosity = 0)",
							" (msg, ...args) =>",
							" () =>",
							"handle = (sock, event, ...args) =>",
							"then: fn =>",
							"remove = sock =>",
							"onConnect(sock, req)",
							"onOpen(sock)",
							"onMessage(sock, msg)",
							"onError(sock, error)",
							"onClose(sock, code, why)",
							"onPong(sock, data)",
							"function RPCServerEndpoint(classes = {})",
							"new({ class: name, args = [] })",
							"list()",
							"({ id }, respond) =>",
							"({ obj, method, args = [] }, respond) =>",
							"result =>",
							"error =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"sym =>",
							"v =>",
							"v =>",
							"({ obj, property }, respond) =>",
							"({ obj, property, value }, respond) =>",
							"RPCServer",
							"makeId()",
							"processMessage(data)",
							"RPCServer",
							"RPCClient",
							" e =>",
							"get()",
							"processMessage(response)",
							"command(name, params)",
							"(accept, reject) =>",
							" response =>",
							" e =>",
							"RPCClient",
							" function RPCSocket(url, service = RPCServer, verbosity = 1)",
							" (...args) =>",
							"get fd()",
							"get socket()",
							"get connection()",
							"register(ctor)",
							"listen(new_ws, os = globalThis.os)",
							"() =>",
							"async connect(new_ws, os = globalThis.os)",
							"get connected()",
							"get list()",
							"get last()",
							"RPCSocket",
							"function MakeWebSocket(url, callbacks)",
							".onconnect = () =>",
							".onopen = () =>",
							".onerror = error =>",
							".onmessage = msg =>",
							".onpong = pong =>",
							".onclose = reason =>",
							" function isThenable(value)",
							" function hasHandler(obj, eventName)",
							" function callHandler(obj, eventName, ...args)",
							" function parseURL(url_or_port)",
							"toString()",
							" function GetProperties(obj, method = obj => Object.",
							"(obj), pred = (obj, depth) => obj !== Object.prototype)",
							" function GetKeys(obj, pred = (obj, depth) => obj !== Object.prototype)",
							" obj =>",
							" obj =>",
							" function getPropertyDescriptors(obj, merge = true, pred = (proto, depth) => true)",
							" function define(obj, ...args)",
							" function setHandlers(os, handlers)",
							".onFd = function(fd, readable, writable)",
							" function statusResponse(success, result_or_error, data)",
							" function objectCommand(fn)",
							" function(data)",
							"respond = (success, result) =>",
							" function MakeListCommand(pred = v => typeof v != 'function', defaults = { maxDepth: Infinity })",
							"(data, respond) =>",
							" (proto, depth) =>",
							"(acc, key) =>",
							" function getPrototypeName(proto)",
							"function DeserializeEntries(e)",
							"a =>",
							"function DeserializeKeys(e)",
							"([k]) =>",
							"function DeserializeMap(e)",
							"function DeserializeObject(e)",
							"function ForwardMethods(e, ret = {}, thisObj)",
							" o =>",
							"function ForwardObject(e, thisObj)",
							"function MakeCommandFunction(cmd, getConnection, thisObj, t)",
							"getConnection = obj =>",
							" function(params = {})",
							"(resolve, reject) =>",
							" r =>",
							"async function(params = {})",
							" function SerializeValue(value, source = false)",
							" function DeserializeSymbols(names)",
							"n =>",
							"n =>",
							" function DeserializeValue(desc)",
							"RPCConnect = (url, service = RPCClient) =>",
							"RPCListen = (url, service = RPCServer) =>"
						]
					},
					"AQAAAAAAAAAAAAAACxAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					108,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/rpc.js",
						"symkeys":
						[
							[
								232,
								264
							],
							[
								321,
								339
							],
							[
								391,
								409
							],
							[
								444,
								464
							],
							[
								513,
								532
							],
							[
								538,
								547
							],
							[
								558,
								572
							],
							[
								601,
								622
							],
							[
								997,
								1036
							],
							[
								1278,
								1301
							],
							[
								1312,
								1315
							],
							[
								1332,
								1359
							],
							[
								1502,
								1508
							],
							[
								1523,
								1552
							],
							[
								1557,
								1563
							],
							[
								1603,
								1658
							],
							[
								1668,
								1678
							],
							[
								1695,
								1719
							],
							[
								1995,
								2013
							],
							[
								2029,
								2070
							],
							[
								2075,
								2093
							],
							[
								2145,
								2272
							],
							[
								2275,
								2310
							],
							[
								2323,
								2335
							],
							[
								2423,
								2437
							],
							[
								2620,
								2635
							],
							[
								2763,
								2777
							],
							[
								2901,
								2919
							],
							[
								3034,
								3047
							],
							[
								3225,
								3255
							],
							[
								3274,
								3292
							],
							[
								3304,
								3319
							],
							[
								3331,
								3349
							],
							[
								3429,
								3447
							],
							[
								3492,
								3499
							],
							[
								3560,
								3566
							],
							[
								3608,
								3620
							],
							[
								3630,
								3642
							],
							[
								3659,
								3680
							],
							[
								3722,
								3734
							],
							[
								3791,
								3803
							],
							[
								3866,
								3900
							],
							[
								3940,
								3952
							],
							[
								4021,
								4033
							],
							[
								4095,
								4120
							],
							[
								4163,
								4175
							],
							[
								4198,
								4210
							],
							[
								4246,
								4265
							],
							[
								4474,
								4480
							],
							[
								4522,
								4527
							],
							[
								4550,
								4571
							],
							[
								4689,
								4724
							],
							[
								4840,
								4844
							],
							[
								4871,
								4880
							],
							[
								4933,
								4958
							],
							[
								4963,
								4991
							],
							[
								5221,
								5230
							],
							[
								5332,
								5365
							],
							[
								5370,
								5380
							],
							[
								5474,
								5484
							],
							[
								5570,
								5588
							],
							[
								5699,
								5716
							],
							[
								5753,
								5762
							],
							[
								5799,
								5849
							],
							[
								5966,
								5978
							],
							[
								6439,
								6453
							],
							[
								6756,
								6777
							],
							[
								6970,
								6984
							],
							[
								7537,
								7541
							],
							[
								7635,
								7655
							],
							[
								7761,
								7776
							],
							[
								7954,
								7966
							],
							[
								8021,
								8035
							],
							[
								8160,
								8178
							],
							[
								8305,
								8314
							],
							[
								8404,
								8420
							],
							[
								8790,
								8823
							],
							[
								9328,
								9372
							],
							[
								9480,
								9498
							],
							[
								9528,
								9534
							],
							[
								9619,
								9653
							],
							[
								9909,
								9920
							],
							[
								9978,
								9994
							],
							[
								10075,
								10095
							],
							[
								10490,
								10502
							],
							[
								10709,
								10729
							],
							[
								10824,
								10844
							],
							[
								11008,
								11032
							],
							[
								11158,
								11176
							],
							[
								11469,
								11509
							],
							[
								11527,
								11558
							],
							[
								11888,
								11894
							],
							[
								12059,
								12079
							],
							[
								12175,
								12215
							],
							[
								12375,
								12384
							],
							[
								12414,
								12422
							],
							[
								12600,
								12640
							],
							[
								12701,
								12708
							],
							[
								12727,
								12734
							],
							[
								12803,
								12843
							],
							[
								12908,
								12915
							],
							[
								12993,
								13033
							],
							[
								13098,
								13105
							],
							[
								13145,
								13151
							],
							[
								13218,
								13222
							],
							[
								13277,
								13281
							],
							[
								13353,
								13384
							],
							[
								13647,
								13685
							],
							[
								13769,
								13778
							],
							[
								14254,
								14262
							],
							[
								14298,
								14318
							],
							[
								14899,
								14908
							],
							[
								15218,
								15227
							],
							[
								15627,
								15632
							],
							[
								15808,
								15813
							],
							[
								15899,
								15923
							],
							[
								16176,
								16197
							],
							[
								16223,
								16242
							],
							[
								16272,
								16284
							],
							[
								16328,
								16333
							],
							[
								16407,
								16416
							],
							[
								16724,
								16784
							],
							[
								17394,
								17407
							],
							[
								17584,
								17592
							],
							[
								17710,
								17722
							],
							[
								17779,
								17795
							],
							[
								18221,
								18235
							],
							[
								18455,
								18489
							],
							[
								18788,
								18793
							],
							[
								18888,
								18929
							],
							[
								19223,
								19238
							],
							[
								19699,
								19709
							],
							[
								19746,
								19756
							],
							[
								19825,
								19834
							],
							[
								19892,
								19930
							],
							[
								20063,
								20081
							],
							[
								20111,
								20126
							],
							[
								20153,
								20172
							],
							[
								20207,
								20226
							],
							[
								20261,
								20278
							],
							[
								20311,
								20331
							],
							[
								20423,
								20450
							],
							[
								20549,
								20585
							],
							[
								20743,
								20789
							],
							[
								20888,
								20919
							],
							[
								21476,
								21486
							],
							[
								21620,
								21672
							],
							[
								21691,
								21746
							],
							[
								22065,
								22136
							],
							[
								22198,
								22205
							],
							[
								22296,
								22303
							],
							[
								22390,
								22472
							],
							[
								23014,
								23044
							],
							[
								23412,
								23447
							],
							[
								23460,
								23500
							],
							[
								23679,
								23735
							],
							[
								23964,
								23991
							],
							[
								24002,
								24017
							],
							[
								24030,
								24060
							],
							[
								24317,
								24413
							],
							[
								24439,
								24457
							],
							[
								24705,
								24723
							],
							[
								24826,
								24839
							],
							[
								25423,
								25456
							],
							[
								25525,
								25555
							],
							[
								25594,
								25598
							],
							[
								25685,
								25712
							],
							[
								25751,
								25759
							],
							[
								25839,
								25865
							],
							[
								25911,
								25940
							],
							[
								25997,
								26042
							],
							[
								26142,
								26147
							],
							[
								26247,
								26281
							],
							[
								26398,
								26458
							],
							[
								26673,
								26695
							],
							[
								26861,
								26883
							],
							[
								26981,
								27001
							],
							[
								27033,
								27038
							],
							[
								27167,
								27194
							],
							[
								27426,
								27473
							],
							[
								28291,
								28326
							],
							[
								28348,
								28352
							],
							[
								28384,
								28388
							],
							[
								28410,
								28442
							],
							[
								28576,
								28618
							],
							[
								28671,
								28712
							]
						],
						"symlist":
						[
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"VfnAdapter = vfn =>",
							"get: k =>",
							"set: (k, v) =>",
							"VfnDecorator = vfn =>",
							".GetClasses = function* GetClasses(obj)",
							" function Mapper(map = ",
							"())",
							"self = function(key, value)",
							"Mapper",
							"Mapper.prototype = function()",
							"Mapper",
							" function DefaultConstructor(mapper, fn = (...args) => ",
							"(...args))",
							"self = function(...args)",
							"DefaultConstructor",
							"DefaultConstructor.prototype = function()",
							"DefaultConstructor",
							" function EventLogger(instance = {}, callback = (name, event, thisObj) => console.log('EventLogger', { name, event, thisObj }))",
							" function WrapEvent(handler, name)",
							" function(e)",
							"get(obj, prop)",
							"MessageReceiver",
							"onmessage(msg)",
							"MessageTransmitter",
							"sendMessage()",
							" function MessageTransceiver()",
							"MessageTransceiver",
							"MessageReceiver",
							"MessageTransmitter",
							"value: instance =>",
							"ctor =>",
							"none()",
							"encode: v =>",
							"decode: v =>",
							"json(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".js = function js(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".bjson = function bjson()",
							"encode: v =>",
							"decode: v =>",
							" function RPCApi(c)",
							"RPCApi",
							" o =>",
							" function RPCProxy(c)",
							" function RPCObject(id, connection)",
							"r =>",
							"RPCObject",
							" function RPCFactory(api)",
							"async function Factory(opts)",
							"RPCObject",
							"RPCFactory.prototype = function()",
							"RPCFactory",
							"Connection",
							"static equal(a, b)",
							"static get last()",
							"makeSeq()",
							"constructor(socket, instance, log, codec = 'none')",
							"log(...args)",
							"error(message)",
							"close(status, reason)",
							"onmessage(msg)",
							"r =>",
							"processMessage(data)",
							"onconnect(sock)",
							"onpong(data)",
							"onerror(error)",
							"onclose(code, why)",
							"cleanup()",
							"sendMessage(obj)",
							"sendCommand(command, params = {})",
							"static getCallbacks(instance, verbosity = 0)",
							" (msg, ...args) =>",
							" () =>",
							"handle = (sock, event, ...args) =>",
							"then: fn =>",
							"remove = sock =>",
							"onConnect(sock, req)",
							"onOpen(sock)",
							"onMessage(sock, msg)",
							"onError(sock, error)",
							"onClose(sock, code, why)",
							"onPong(sock, data)",
							"function RPCServerEndpoint(classes = {})",
							"new({ class: name, args = [] })",
							"list()",
							"({ id }, respond) =>",
							"({ obj, method, args = [] }, respond) =>",
							"result =>",
							"error =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"sym =>",
							"v =>",
							"v =>",
							"({ obj, property }, respond) =>",
							"({ obj, property, value }, respond) =>",
							"RPCServer",
							"makeId()",
							"processMessage(data)",
							"RPCServer",
							"RPCClient",
							" e =>",
							"get()",
							"processMessage(response)",
							"command(name, params)",
							"(accept, reject) =>",
							" response =>",
							" e =>",
							"RPCClient",
							" function RPCSocket(url, service = RPCServer, verbosity = 1)",
							" (...args) =>",
							"get fd()",
							"get socket()",
							"get connection()",
							"register(ctor)",
							"listen(new_ws, os = globalThis.os)",
							"() =>",
							"async connect(new_ws, os = globalThis.os)",
							"get connected()",
							"get list()",
							"get last()",
							"RPCSocket",
							"function MakeWebSocket(url, callbacks)",
							".onconnect = () =>",
							".onopen = () =>",
							".onerror = error =>",
							".onmessage = msg =>",
							".onpong = pong =>",
							".onclose = reason =>",
							" function isThenable(value)",
							" function hasHandler(obj, eventName)",
							" function callHandler(obj, eventName, ...args)",
							" function parseURL(url_or_port)",
							"toString()",
							" function GetProperties(obj, method = obj => Object.",
							"(obj), pred = (obj, depth) => obj !== Object.prototype)",
							" function GetKeys(obj, pred = (obj, depth) => obj !== Object.prototype)",
							" obj =>",
							" obj =>",
							" function getPropertyDescriptors(obj, merge = true, pred = (proto, depth) => true)",
							" function define(obj, ...args)",
							" function setHandlers(os, handlers)",
							".onFd = function(fd, readable, writable)",
							" function statusResponse(success, result_or_error, data)",
							" function objectCommand(fn)",
							" function(data)",
							"respond = (success, result) =>",
							" function MakeListCommand(pred = v => typeof v != 'function', defaults = { maxDepth: Infinity })",
							"(data, respond) =>",
							" (proto, depth) =>",
							"(acc, key) =>",
							" function getPrototypeName(proto)",
							"function DeserializeEntries(e)",
							"a =>",
							"function DeserializeKeys(e)",
							"([k]) =>",
							"function DeserializeMap(e)",
							"function DeserializeObject(e)",
							"function ForwardMethods(e, ret = {}, thisObj)",
							" o =>",
							"function ForwardObject(e, thisObj)",
							"function MakeCommandFunction(cmd, getConnection, thisObj, t)",
							"getConnection = obj =>",
							" function(params = {})",
							"(resolve, reject) =>",
							" r =>",
							"async function(params = {})",
							" function SerializeValue(value, source = false)",
							" function DeserializeSymbols(names)",
							"n =>",
							"n =>",
							" function DeserializeValue(desc)",
							"RPCConnect = (url, service = RPCClient) =>",
							"RPCListen = (url, service = RPCServer) =>"
						]
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					109,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/rpc.js",
						"symkeys":
						[
							[
								234,
								266
							],
							[
								323,
								341
							],
							[
								393,
								411
							],
							[
								446,
								466
							],
							[
								515,
								534
							],
							[
								540,
								549
							],
							[
								560,
								574
							],
							[
								603,
								624
							],
							[
								999,
								1038
							],
							[
								1280,
								1303
							],
							[
								1314,
								1317
							],
							[
								1334,
								1361
							],
							[
								1504,
								1510
							],
							[
								1525,
								1554
							],
							[
								1559,
								1565
							],
							[
								1605,
								1660
							],
							[
								1670,
								1680
							],
							[
								1697,
								1721
							],
							[
								1997,
								2015
							],
							[
								2031,
								2072
							],
							[
								2077,
								2095
							],
							[
								2147,
								2274
							],
							[
								2277,
								2312
							],
							[
								2325,
								2337
							],
							[
								2425,
								2439
							],
							[
								2622,
								2637
							],
							[
								2765,
								2779
							],
							[
								2903,
								2921
							],
							[
								3036,
								3049
							],
							[
								3227,
								3257
							],
							[
								3276,
								3294
							],
							[
								3306,
								3321
							],
							[
								3333,
								3351
							],
							[
								3431,
								3449
							],
							[
								3494,
								3501
							],
							[
								3562,
								3568
							],
							[
								3610,
								3622
							],
							[
								3632,
								3644
							],
							[
								3661,
								3682
							],
							[
								3724,
								3736
							],
							[
								3793,
								3805
							],
							[
								3868,
								3902
							],
							[
								3942,
								3954
							],
							[
								4023,
								4035
							],
							[
								4097,
								4122
							],
							[
								4165,
								4177
							],
							[
								4200,
								4212
							],
							[
								4248,
								4267
							],
							[
								4476,
								4482
							],
							[
								4524,
								4529
							],
							[
								4552,
								4573
							],
							[
								4691,
								4726
							],
							[
								4842,
								4846
							],
							[
								4873,
								4882
							],
							[
								4935,
								4960
							],
							[
								4965,
								4993
							],
							[
								5223,
								5232
							],
							[
								5334,
								5367
							],
							[
								5372,
								5382
							],
							[
								5476,
								5486
							],
							[
								5572,
								5590
							],
							[
								5701,
								5718
							],
							[
								5755,
								5764
							],
							[
								5801,
								5851
							],
							[
								5968,
								5980
							],
							[
								6441,
								6455
							],
							[
								6758,
								6779
							],
							[
								6972,
								6986
							],
							[
								7539,
								7543
							],
							[
								7637,
								7657
							],
							[
								7763,
								7778
							],
							[
								7956,
								7968
							],
							[
								8023,
								8037
							],
							[
								8162,
								8180
							],
							[
								8307,
								8316
							],
							[
								8406,
								8422
							],
							[
								8792,
								8825
							],
							[
								9330,
								9374
							],
							[
								9482,
								9500
							],
							[
								9530,
								9536
							],
							[
								9621,
								9655
							],
							[
								9911,
								9922
							],
							[
								9980,
								9996
							],
							[
								10077,
								10097
							],
							[
								10492,
								10504
							],
							[
								10711,
								10731
							],
							[
								10826,
								10846
							],
							[
								11010,
								11034
							],
							[
								11160,
								11178
							],
							[
								11471,
								11511
							],
							[
								11529,
								11560
							],
							[
								11890,
								11896
							],
							[
								12061,
								12081
							],
							[
								12177,
								12217
							],
							[
								12377,
								12386
							],
							[
								12416,
								12424
							],
							[
								12602,
								12642
							],
							[
								12703,
								12710
							],
							[
								12729,
								12736
							],
							[
								12805,
								12845
							],
							[
								12910,
								12917
							],
							[
								12995,
								13035
							],
							[
								13100,
								13107
							],
							[
								13147,
								13153
							],
							[
								13220,
								13224
							],
							[
								13279,
								13283
							],
							[
								13355,
								13386
							],
							[
								13649,
								13687
							],
							[
								13771,
								13780
							],
							[
								14256,
								14264
							],
							[
								14300,
								14320
							],
							[
								14901,
								14910
							],
							[
								15220,
								15229
							],
							[
								15629,
								15634
							],
							[
								15810,
								15815
							],
							[
								15901,
								15925
							],
							[
								16178,
								16199
							],
							[
								16225,
								16244
							],
							[
								16274,
								16286
							],
							[
								16330,
								16335
							],
							[
								16409,
								16418
							],
							[
								16726,
								16786
							],
							[
								17396,
								17409
							],
							[
								17586,
								17594
							],
							[
								17712,
								17724
							],
							[
								17781,
								17797
							],
							[
								18223,
								18237
							],
							[
								18457,
								18491
							],
							[
								18790,
								18795
							],
							[
								18890,
								18931
							],
							[
								19225,
								19240
							],
							[
								19701,
								19711
							],
							[
								19748,
								19758
							],
							[
								19827,
								19836
							],
							[
								19894,
								19932
							],
							[
								20065,
								20083
							],
							[
								20113,
								20128
							],
							[
								20155,
								20174
							],
							[
								20209,
								20228
							],
							[
								20263,
								20280
							],
							[
								20313,
								20333
							],
							[
								20425,
								20452
							],
							[
								20551,
								20587
							],
							[
								20745,
								20791
							],
							[
								20890,
								20921
							],
							[
								21478,
								21488
							],
							[
								21622,
								21674
							],
							[
								21693,
								21748
							],
							[
								22067,
								22138
							],
							[
								22200,
								22207
							],
							[
								22298,
								22305
							],
							[
								22392,
								22474
							],
							[
								23016,
								23046
							],
							[
								23414,
								23449
							],
							[
								23462,
								23502
							],
							[
								23681,
								23737
							],
							[
								23966,
								23993
							],
							[
								24004,
								24019
							],
							[
								24032,
								24062
							],
							[
								24319,
								24415
							],
							[
								24441,
								24459
							],
							[
								24707,
								24725
							],
							[
								24828,
								24841
							],
							[
								25425,
								25458
							],
							[
								25527,
								25557
							],
							[
								25596,
								25600
							],
							[
								25687,
								25714
							],
							[
								25753,
								25761
							],
							[
								25841,
								25867
							],
							[
								25913,
								25942
							],
							[
								25999,
								26044
							],
							[
								26144,
								26149
							],
							[
								26249,
								26283
							],
							[
								26400,
								26460
							],
							[
								26675,
								26697
							],
							[
								26863,
								26885
							],
							[
								26983,
								27003
							],
							[
								27035,
								27040
							],
							[
								27169,
								27196
							],
							[
								27428,
								27475
							],
							[
								28293,
								28328
							],
							[
								28350,
								28354
							],
							[
								28386,
								28390
							],
							[
								28412,
								28444
							],
							[
								28578,
								28620
							],
							[
								28673,
								28714
							]
						],
						"symlist":
						[
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"VfnAdapter = vfn =>",
							"get: k =>",
							"set: (k, v) =>",
							"VfnDecorator = vfn =>",
							".GetClasses = function* GetClasses(obj)",
							" function Mapper(map = ",
							"())",
							"self = function(key, value)",
							"Mapper",
							"Mapper.prototype = function()",
							"Mapper",
							" function DefaultConstructor(mapper, fn = (...args) => ",
							"(...args))",
							"self = function(...args)",
							"DefaultConstructor",
							"DefaultConstructor.prototype = function()",
							"DefaultConstructor",
							" function EventLogger(instance = {}, callback = (name, event, thisObj) => console.log('EventLogger', { name, event, thisObj }))",
							" function WrapEvent(handler, name)",
							" function(e)",
							"get(obj, prop)",
							"MessageReceiver",
							"onmessage(msg)",
							"MessageTransmitter",
							"sendMessage()",
							" function MessageTransceiver()",
							"MessageTransceiver",
							"MessageReceiver",
							"MessageTransmitter",
							"value: instance =>",
							"ctor =>",
							"none()",
							"encode: v =>",
							"decode: v =>",
							"json(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".js = function js(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".bjson = function bjson()",
							"encode: v =>",
							"decode: v =>",
							" function RPCApi(c)",
							"RPCApi",
							" o =>",
							" function RPCProxy(c)",
							" function RPCObject(id, connection)",
							"r =>",
							"RPCObject",
							" function RPCFactory(api)",
							"async function Factory(opts)",
							"RPCObject",
							"RPCFactory.prototype = function()",
							"RPCFactory",
							"Connection",
							"static equal(a, b)",
							"static get last()",
							"makeSeq()",
							"constructor(socket, instance, log, codec = 'none')",
							"log(...args)",
							"error(message)",
							"close(status, reason)",
							"onmessage(msg)",
							"r =>",
							"processMessage(data)",
							"onconnect(sock)",
							"onpong(data)",
							"onerror(error)",
							"onclose(code, why)",
							"cleanup()",
							"sendMessage(obj)",
							"sendCommand(command, params = {})",
							"static getCallbacks(instance, verbosity = 0)",
							" (msg, ...args) =>",
							" () =>",
							"handle = (sock, event, ...args) =>",
							"then: fn =>",
							"remove = sock =>",
							"onConnect(sock, req)",
							"onOpen(sock)",
							"onMessage(sock, msg)",
							"onError(sock, error)",
							"onClose(sock, code, why)",
							"onPong(sock, data)",
							"function RPCServerEndpoint(classes = {})",
							"new({ class: name, args = [] })",
							"list()",
							"({ id }, respond) =>",
							"({ obj, method, args = [] }, respond) =>",
							"result =>",
							"error =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"sym =>",
							"v =>",
							"v =>",
							"({ obj, property }, respond) =>",
							"({ obj, property, value }, respond) =>",
							"RPCServer",
							"makeId()",
							"processMessage(data)",
							"RPCServer",
							"RPCClient",
							" e =>",
							"get()",
							"processMessage(response)",
							"command(name, params)",
							"(accept, reject) =>",
							" response =>",
							" e =>",
							"RPCClient",
							" function RPCSocket(url, service = RPCServer, verbosity = 1)",
							" (...args) =>",
							"get fd()",
							"get socket()",
							"get connection()",
							"register(ctor)",
							"listen(new_ws, os = globalThis.os)",
							"() =>",
							"async connect(new_ws, os = globalThis.os)",
							"get connected()",
							"get list()",
							"get last()",
							"RPCSocket",
							"function MakeWebSocket(url, callbacks)",
							".onconnect = () =>",
							".onopen = () =>",
							".onerror = error =>",
							".onmessage = msg =>",
							".onpong = pong =>",
							".onclose = reason =>",
							" function isThenable(value)",
							" function hasHandler(obj, eventName)",
							" function callHandler(obj, eventName, ...args)",
							" function parseURL(url_or_port)",
							"toString()",
							" function GetProperties(obj, method = obj => Object.",
							"(obj), pred = (obj, depth) => obj !== Object.prototype)",
							" function GetKeys(obj, pred = (obj, depth) => obj !== Object.prototype)",
							" obj =>",
							" obj =>",
							" function getPropertyDescriptors(obj, merge = true, pred = (proto, depth) => true)",
							" function define(obj, ...args)",
							" function setHandlers(os, handlers)",
							".onFd = function(fd, readable, writable)",
							" function statusResponse(success, result_or_error, data)",
							" function objectCommand(fn)",
							" function(data)",
							"respond = (success, result) =>",
							" function MakeListCommand(pred = v => typeof v != 'function', defaults = { maxDepth: Infinity })",
							"(data, respond) =>",
							" (proto, depth) =>",
							"(acc, key) =>",
							" function getPrototypeName(proto)",
							"function DeserializeEntries(e)",
							"a =>",
							"function DeserializeKeys(e)",
							"([k]) =>",
							"function DeserializeMap(e)",
							"function DeserializeObject(e)",
							"function ForwardMethods(e, ret = {}, thisObj)",
							" o =>",
							"function ForwardObject(e, thisObj)",
							"function MakeCommandFunction(cmd, getConnection, thisObj, t)",
							"getConnection = obj =>",
							" function(params = {})",
							"(resolve, reject) =>",
							" r =>",
							"async function(params = {})",
							" function SerializeValue(value, source = false)",
							" function DeserializeSymbols(names)",
							"n =>",
							"n =>",
							" function DeserializeValue(desc)",
							"RPCConnect = (url, service = RPCClient) =>",
							"RPCListen = (url, service = RPCServer) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAALEAAAICAuTG9nV3JhcCA9IGZ1bmN0aW9uIExvZ1dyYXAobG9nKQogIGxvZyA9ICguLi5hcmdzKSA9PgogIGxvZyA9ICguLi5hcmdzKSA9PgogICh2YWx1ZSwgLi4uYXJncykgPT4KVmZuQWRhcHRlciA9IHZmbiA9PgogIGdldDogayA9PgogIHNldDogKGssIHYpID0+ClZmbkRlY29yYXRvciA9IHZmbiA9PgogIC5HZXRDbGFzc2VzID0gZnVuY3Rpb24qR2V0Q2xhc3NlcyhvYmopCk1hcHBlcihtYXAgPSAKKCkpCiAgc2VsZiA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpCk1hcHBlcgpNYXBwZXIucHJvdG90eXBlID0gZnVuY3Rpb24oKQpNYXBwZXIKRGVmYXVsdENvbnN0cnVjdG9yKG1hcHBlciwgZm4gPSAoLi4uYXJncykgPT4gCiguLi5hcmdzKSkKICBzZWxmID0gZnVuY3Rpb24oLi4uYXJncykKRGVmYXVsdENvbnN0cnVjdG9yCkRlZmF1bHRDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBmdW5jdGlvbigpCkRlZmF1bHRDb25zdHJ1Y3RvcgpFdmVudExvZ2dlcihpbnN0YW5jZSA9IHt9LCBjYWxsYmFjayA9IChuYW1lLCBldmVudCwgdGhpc09iaikgPT4gY29uc29sZS5sb2coJ0V2ZW50TG9nZ2VyJywgeyBuYW1lLCBldmVudCwgdGhpc09iaiB9KSkKV3JhcEV2ZW50KGhhbmRsZXIsIG5hbWUpCiAgZnVuY3Rpb24oZSkKICBnZXQob2JqLCBwcm9wKQpNZXNzYWdlUmVjZWl2ZXIKICBvbm1lc3NhZ2UobXNnKQpNZXNzYWdlVHJhbnNtaXR0ZXIKICBzZW5kTWVzc2FnZSgpCk1lc3NhZ2VUcmFuc2NlaXZlcigpCk1lc3NhZ2VUcmFuc2NlaXZlcgpNZXNzYWdlUmVjZWl2ZXIKTWVzc2FnZVRyYW5zbWl0dGVyCiAgdmFsdWU6IGluc3RhbmNlID0+CiAgY3RvciA9PgogIG5vbmUoKQogIGVuY29kZTogdiA9PgogIGRlY29kZTogdiA9PgogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIGVuY29kZTogdiA9PgogIGRlY29kZTogdiA9PgogIC5qcyA9IGZ1bmN0aW9uIGpzKHZlcmJvc2UgPSBmYWxzZSkKICBlbmNvZGU6IHYgPT4KICBkZWNvZGU6IHYgPT4KICAuYmpzb24gPSBmdW5jdGlvbiBianNvbigpCiAgZW5jb2RlOiB2ID0+CiAgZGVjb2RlOiB2ID0+ClJQQ0FwaShjKQpSUENBcGkKICBvID0+ClJQQ1Byb3h5KGMpClJQQ09iamVjdChpZCwgY29ubmVjdGlvbikKICByID0+ClJQQ09iamVjdApSUENGYWN0b3J5KGFwaSkKRmFjdG9yeShvcHRzKQpSUENPYmplY3QKUlBDRmFjdG9yeS5wcm90b3R5cGUgPSBmdW5jdGlvbigpClJQQ0ZhY3RvcnkKQ29ubmVjdGlvbgogIHN0YXRpYyBlcXVhbChhLCBiKQogIHN0YXRpYyBnZXQgbGFzdCgpCiAgbWFrZVNlcSgpCiAgY29uc3RydWN0b3Ioc29ja2V0LCBpbnN0YW5jZSwgbG9nLCBjb2RlYyA9ICdub25lJykKICBsb2coLi4uYXJncykKICBlcnJvcihtZXNzYWdlKQogIGNsb3NlKHN0YXR1cywgcmVhc29uKQogIG9ubWVzc2FnZShtc2cpCiAgciA9PgogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICAobXNnLCAuLi5hcmdzKSA9PgogICgpID0+CiAgaGFuZGxlID0gKHNvY2ssIGV2ZW50LCAuLi5hcmdzKSA9PgogIHRoZW46IGZuID0+CiAgcmVtb3ZlID0gc29jayA9PgogIG9uQ29ubmVjdChzb2NrLCByZXEpCiAgb25PcGVuKHNvY2spCiAgb25NZXNzYWdlKHNvY2ssIG1zZykKICBvbkVycm9yKHNvY2ssIGVycm9yKQogIG9uQ2xvc2Uoc29jaywgY29kZSwgd2h5KQogIG9uUG9uZyhzb2NrLCBkYXRhKQpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQooeyBpZCB9LCByZXNwb25kKSA9PgooeyBvYmosIG1ldGhvZCwgYXJncyA9IFtdIH0sIHJlc3BvbmQpID0+CiAgcmVzdWx0ID0+CiAgZXJyb3IgPT4KKHsgb2JqLCBlbnVtZXJhYmxlID0gdHJ1ZSB9LCByZXNwb25kKSA9PgogIG9iaiA9PgogIG9iaiA9PgooeyBvYmosIGVudW1lcmFibGUgPSB0cnVlIH0sIHJlc3BvbmQpID0+CiAgb2JqID0+Cih7IG9iaiwgZW51bWVyYWJsZSA9IHRydWUgfSwgcmVzcG9uZCkgPT4KICBvYmogPT4KICBzeW0gPT4KICB2ID0+CiAgdiA9PgooeyBvYmosIHByb3BlcnR5IH0sIHJlc3BvbmQpID0+Cih7IG9iaiwgcHJvcGVydHksIHZhbHVlIH0sIHJlc3BvbmQpID0+ClJQQ1NlcnZlcgogIG1ha2VJZCgpCiAgcHJvY2Vzc01lc3NhZ2UoZGF0YSkKUlBDU2VydmVyClJQQ0NsaWVudAogIGUgPT4KICBnZXQoKQogIHByb2Nlc3NNZXNzYWdlKHJlc3BvbnNlKQogIGNvbW1hbmQobmFtZSwgcGFyYW1zKQooYWNjZXB0LCByZWplY3QpID0+CiAgcmVzcG9uc2UgPT4KICBlID0+ClJQQ0NsaWVudApSUENTb2NrZXQodXJsLCBzZXJ2aWNlID0gUlBDU2VydmVyLCB2ZXJib3NpdHkgPSAxKQogICguLi5hcmdzKSA9PgogIGdldCBmZCgpCiAgZ2V0IHNvY2tldCgpCiAgZ2V0IGNvbm5lY3Rpb24oKQogIHJlZ2lzdGVyKGN0b3IpCiAgbGlzdGVuKG5ld193cywgb3MgPSBnbG9iYWxUaGlzLm9zKQooKSA9PgogIGNvbm5lY3QobmV3X3dzLCBvcyA9IGdsb2JhbFRoaXMub3MpCiAgZ2V0IGNvbm5lY3RlZCgpCiAgZ2V0IGxpc3QoKQogIGdldCBsYXN0KCkKUlBDU29ja2V0Ck1ha2VXZWJTb2NrZXQodXJsLCBjYWxsYmFja3MpCiAgLm9uY29ubmVjdCA9ICgpID0+CiAgLm9ub3BlbiA9ICgpID0+CiAgLm9uZXJyb3IgPSBlcnJvciA9PgogIC5vbm1lc3NhZ2UgPSBtc2cgPT4KICAub25wb25nID0gcG9uZyA9PgogIC5vbmNsb3NlID0gcmVhc29uID0+CiAgaXNUaGVuYWJsZSh2YWx1ZSkKICBoYXNIYW5kbGVyKG9iaiwgZXZlbnROYW1lKQogIGNhbGxIYW5kbGVyKG9iaiwgZXZlbnROYW1lLCAuLi5hcmdzKQogIHBhcnNlVVJMKHVybF9vcl9wb3J0KQogIHRvU3RyaW5nKCkKR2V0UHJvcGVydGllcyhvYmosIG1ldGhvZCA9IG9iaiA9PiBPYmplY3QuCihvYmopLCBwcmVkID0gKG9iaiwgZGVwdGgpID0+IG9iaiAhPT0gT2JqZWN0LnByb3RvdHlwZSkKR2V0S2V5cyhvYmosIHByZWQgPSAob2JqLCBkZXB0aCkgPT4gb2JqICE9PSBPYmplY3QucHJvdG90eXBlKQogIG9iaiA9PgogIG9iaiA9PgogIGdldFByb3BlcnR5RGVzY3JpcHRvcnMob2JqLCBtZXJnZSA9IHRydWUsIHByZWQgPSAocHJvdG8sIGRlcHRoKSA9PiB0cnVlKQogIGRlZmluZShvYmosIC4uLmFyZ3MpCiAgc2V0SGFuZGxlcnMob3MsIGhhbmRsZXJzKQogIC5vbkZkID0gZnVuY3Rpb24oZmQsIHJlYWRhYmxlLCB3cml0YWJsZSkKICBzdGF0dXNSZXNwb25zZShzdWNjZXNzLCByZXN1bHRfb3JfZXJyb3IsIGRhdGEpCiAgb2JqZWN0Q29tbWFuZChmbikKICBmdW5jdGlvbihkYXRhKQogIHJlc3BvbmQgPSAoc3VjY2VzcywgcmVzdWx0KSA9PgpNYWtlTGlzdENvbW1hbmQocHJlZCA9IHYgPT4gdHlwZW9mIHYgIT0gJ2Z1bmN0aW9uJywgZGVmYXVsdHMgPSB7IG1heERlcHRoOiBJbmZpbml0eSB9KQooZGF0YSwgcmVzcG9uZCkgPT4KICAocHJvdG8sIGRlcHRoKSA9PgooYWNjLCBrZXkpID0+CiAgZ2V0UHJvdG90eXBlTmFtZShwcm90bykKRGVzZXJpYWxpemVFbnRyaWVzKGUpCiAgYSA9PgpEZXNlcmlhbGl6ZUtleXMoZSkKKFtrXSkgPT4KRGVzZXJpYWxpemVNYXAoZSkKRGVzZXJpYWxpemVPYmplY3QoZSkKRm9yd2FyZE1ldGhvZHMoZSwgcmV0ID0ge30sIHRoaXNPYmopCiAgbyA9PgpGb3J3YXJkT2JqZWN0KGUsIHRoaXNPYmopCk1ha2VDb21tYW5kRnVuY3Rpb24oY21kLCBnZXRDb25uZWN0aW9uLCB0aGlzT2JqLCB0KQogIGdldENvbm5lY3Rpb24gPSBvYmogPT4KICBmdW5jdGlvbihwYXJhbXMgPSB7fSkKKHJlc29sdmUsIHJlamVjdCkgPT4KICByID0+CiAgZnVuY3Rpb24ocGFyYW1zID0ge30pClNlcmlhbGl6ZVZhbHVlKHZhbHVlLCBzb3VyY2UgPSBmYWxzZSkKRGVzZXJpYWxpemVTeW1ib2xzKG5hbWVzKQogIG4gPT4KICBuID0+CkRlc2VyaWFsaXplVmFsdWUoZGVzYykKUlBDQ29ubmVjdCA9ICh1cmwsIHNlcnZpY2UgPSBSUENDbGllbnQpID0+ClJQQ0xpc3RlbiA9ICh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIpID0+AAAAAAAAAAALEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					110,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAALEAAAICAuTG9nV3JhcCA9IGZ1bmN0aW9uIExvZ1dyYXAobG9nKQogIGxvZyA9ICguLi5hcmdzKSA9PgogIGxvZyA9ICguLi5hcmdzKSA9PgogICh2YWx1ZSwgLi4uYXJncykgPT4KVmZuQWRhcHRlciA9IHZmbiA9PgogIGdldDogayA9PgogIHNldDogKGssIHYpID0+ClZmbkRlY29yYXRvciA9IHZmbiA9PgogIC5HZXRDbGFzc2VzID0gZnVuY3Rpb24qR2V0Q2xhc3NlcyhvYmopCk1hcHBlcihtYXAgPSAKKCkpCiAgc2VsZiA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpCk1hcHBlcgpNYXBwZXIucHJvdG90eXBlID0gZnVuY3Rpb24oKQpNYXBwZXIKRGVmYXVsdENvbnN0cnVjdG9yKG1hcHBlciwgZm4gPSAoLi4uYXJncykgPT4gCiguLi5hcmdzKSkKICBzZWxmID0gZnVuY3Rpb24oLi4uYXJncykKRGVmYXVsdENvbnN0cnVjdG9yCkRlZmF1bHRDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBmdW5jdGlvbigpCkRlZmF1bHRDb25zdHJ1Y3RvcgpFdmVudExvZ2dlcihpbnN0YW5jZSA9IHt9LCBjYWxsYmFjayA9IChuYW1lLCBldmVudCwgdGhpc09iaikgPT4gY29uc29sZS5sb2coJ0V2ZW50TG9nZ2VyJywgeyBuYW1lLCBldmVudCwgdGhpc09iaiB9KSkKV3JhcEV2ZW50KGhhbmRsZXIsIG5hbWUpCiAgZnVuY3Rpb24oZSkKICBnZXQob2JqLCBwcm9wKQpNZXNzYWdlUmVjZWl2ZXIKICBvbm1lc3NhZ2UobXNnKQpNZXNzYWdlVHJhbnNtaXR0ZXIKICBzZW5kTWVzc2FnZSgpCk1lc3NhZ2VUcmFuc2NlaXZlcigpCk1lc3NhZ2VUcmFuc2NlaXZlcgpNZXNzYWdlUmVjZWl2ZXIKTWVzc2FnZVRyYW5zbWl0dGVyCiAgdmFsdWU6IGluc3RhbmNlID0+CiAgY3RvciA9PgogIG5vbmUoKQogIGVuY29kZTogdiA9PgogIGRlY29kZTogdiA9PgogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIGVuY29kZTogdiA9PgogIGRlY29kZTogdiA9PgogIC5qcyA9IGZ1bmN0aW9uIGpzKHZlcmJvc2UgPSBmYWxzZSkKICBlbmNvZGU6IHYgPT4KICBkZWNvZGU6IHYgPT4KICAuYmpzb24gPSBmdW5jdGlvbiBianNvbigpCiAgZW5jb2RlOiB2ID0+CiAgZGVjb2RlOiB2ID0+ClJQQ0FwaShjKQpSUENBcGkKICBvID0+ClJQQ1Byb3h5KGMpClJQQ09iamVjdChpZCwgY29ubmVjdGlvbikKICByID0+ClJQQ09iamVjdApSUENGYWN0b3J5KGFwaSkKRmFjdG9yeShvcHRzKQpSUENPYmplY3QKUlBDRmFjdG9yeS5wcm90b3R5cGUgPSBmdW5jdGlvbigpClJQQ0ZhY3RvcnkKQ29ubmVjdGlvbgogIHN0YXRpYyBlcXVhbChhLCBiKQogIHN0YXRpYyBnZXQgbGFzdCgpCiAgbWFrZVNlcSgpCiAgY29uc3RydWN0b3Ioc29ja2V0LCBpbnN0YW5jZSwgbG9nLCBjb2RlYyA9ICdub25lJykKICBsb2coLi4uYXJncykKICBlcnJvcihtZXNzYWdlKQogIGNsb3NlKHN0YXR1cywgcmVhc29uKQogIG9ubWVzc2FnZShtc2cpCiAgciA9PgogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICAobXNnLCAuLi5hcmdzKSA9PgogICgpID0+CiAgaGFuZGxlID0gKHNvY2ssIGV2ZW50LCAuLi5hcmdzKSA9PgogIHRoZW46IGZuID0+CiAgcmVtb3ZlID0gc29jayA9PgogIG9uQ29ubmVjdChzb2NrLCByZXEpCiAgb25PcGVuKHNvY2spCiAgb25NZXNzYWdlKHNvY2ssIG1zZykKICBvbkVycm9yKHNvY2ssIGVycm9yKQogIG9uQ2xvc2Uoc29jaywgY29kZSwgd2h5KQogIG9uUG9uZyhzb2NrLCBkYXRhKQpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQooeyBpZCB9LCByZXNwb25kKSA9PgooeyBvYmosIG1ldGhvZCwgYXJncyA9IFtdIH0sIHJlc3BvbmQpID0+CiAgcmVzdWx0ID0+CiAgZXJyb3IgPT4KKHsgb2JqLCBlbnVtZXJhYmxlID0gdHJ1ZSB9LCByZXNwb25kKSA9PgogIG9iaiA9PgogIG9iaiA9PgooeyBvYmosIGVudW1lcmFibGUgPSB0cnVlIH0sIHJlc3BvbmQpID0+CiAgb2JqID0+Cih7IG9iaiwgZW51bWVyYWJsZSA9IHRydWUgfSwgcmVzcG9uZCkgPT4KICBvYmogPT4KICBzeW0gPT4KICB2ID0+CiAgdiA9PgooeyBvYmosIHByb3BlcnR5IH0sIHJlc3BvbmQpID0+Cih7IG9iaiwgcHJvcGVydHksIHZhbHVlIH0sIHJlc3BvbmQpID0+ClJQQ1NlcnZlcgogIG1ha2VJZCgpCiAgcHJvY2Vzc01lc3NhZ2UoZGF0YSkKUlBDU2VydmVyClJQQ0NsaWVudAogIGUgPT4KICBnZXQoKQogIHByb2Nlc3NNZXNzYWdlKHJlc3BvbnNlKQogIGNvbW1hbmQobmFtZSwgcGFyYW1zKQooYWNjZXB0LCByZWplY3QpID0+CiAgcmVzcG9uc2UgPT4KICBlID0+ClJQQ0NsaWVudApSUENTb2NrZXQodXJsLCBzZXJ2aWNlID0gUlBDU2VydmVyLCB2ZXJib3NpdHkgPSAxKQogICguLi5hcmdzKSA9PgogIGdldCBmZCgpCiAgZ2V0IHNvY2tldCgpCiAgZ2V0IGNvbm5lY3Rpb24oKQogIHJlZ2lzdGVyKGN0b3IpCiAgbGlzdGVuKG5ld193cywgb3MgPSBnbG9iYWxUaGlzLm9zKQooKSA9PgogIGNvbm5lY3QobmV3X3dzLCBvcyA9IGdsb2JhbFRoaXMub3MpCiAgZ2V0IGNvbm5lY3RlZCgpCiAgZ2V0IGxpc3QoKQogIGdldCBsYXN0KCkKUlBDU29ja2V0Ck1ha2VXZWJTb2NrZXQodXJsLCBjYWxsYmFja3MpCiAgLm9uY29ubmVjdCA9ICgpID0+CiAgLm9ub3BlbiA9ICgpID0+CiAgLm9uZXJyb3IgPSBlcnJvciA9PgogIC5vbm1lc3NhZ2UgPSBtc2cgPT4KICAub25wb25nID0gcG9uZyA9PgogIC5vbmNsb3NlID0gcmVhc29uID0+CiAgaXNUaGVuYWJsZSh2YWx1ZSkKICBoYXNIYW5kbGVyKG9iaiwgZXZlbnROYW1lKQogIGNhbGxIYW5kbGVyKG9iaiwgZXZlbnROYW1lLCAuLi5hcmdzKQogIHBhcnNlVVJMKHVybF9vcl9wb3J0KQogIHRvU3RyaW5nKCkKR2V0UHJvcGVydGllcyhvYmosIG1ldGhvZCA9IG9iaiA9PiBPYmplY3QuCihvYmopLCBwcmVkID0gKG9iaiwgZGVwdGgpID0+IG9iaiAhPT0gT2JqZWN0LnByb3RvdHlwZSkKR2V0S2V5cyhvYmosIHByZWQgPSAob2JqLCBkZXB0aCkgPT4gb2JqICE9PSBPYmplY3QucHJvdG90eXBlKQogIG9iaiA9PgogIG9iaiA9PgogIGdldFByb3BlcnR5RGVzY3JpcHRvcnMob2JqLCBtZXJnZSA9IHRydWUsIHByZWQgPSAocHJvdG8sIGRlcHRoKSA9PiB0cnVlKQogIGRlZmluZShvYmosIC4uLmFyZ3MpCiAgc2V0SGFuZGxlcnMob3MsIGhhbmRsZXJzKQogIC5vbkZkID0gZnVuY3Rpb24oZmQsIHJlYWRhYmxlLCB3cml0YWJsZSkKICBzdGF0dXNSZXNwb25zZShzdWNjZXNzLCByZXN1bHRfb3JfZXJyb3IsIGRhdGEpCiAgb2JqZWN0Q29tbWFuZChmbikKICBmdW5jdGlvbihkYXRhKQogIHJlc3BvbmQgPSAoc3VjY2VzcywgcmVzdWx0KSA9PgpNYWtlTGlzdENvbW1hbmQocHJlZCA9IHYgPT4gdHlwZW9mIHYgIT0gJ2Z1bmN0aW9uJywgZGVmYXVsdHMgPSB7IG1heERlcHRoOiBJbmZpbml0eSB9KQooZGF0YSwgcmVzcG9uZCkgPT4KICAocHJvdG8sIGRlcHRoKSA9PgooYWNjLCBrZXkpID0+CiAgZ2V0UHJvdG90eXBlTmFtZShwcm90bykKRGVzZXJpYWxpemVFbnRyaWVzKGUpCiAgYSA9PgpEZXNlcmlhbGl6ZUtleXMoZSkKKFtrXSkgPT4KRGVzZXJpYWxpemVNYXAoZSkKRGVzZXJpYWxpemVPYmplY3QoZSkKRm9yd2FyZE1ldGhvZHMoZSwgcmV0ID0ge30sIHRoaXNPYmopCiAgbyA9PgpGb3J3YXJkT2JqZWN0KGUsIHRoaXNPYmopCk1ha2VDb21tYW5kRnVuY3Rpb24oY21kLCBnZXRDb25uZWN0aW9uLCB0aGlzT2JqLCB0KQogIGdldENvbm5lY3Rpb24gPSBvYmogPT4KICBmdW5jdGlvbihwYXJhbXMgPSB7fSkKKHJlc29sdmUsIHJlamVjdCkgPT4KICByID0+CiAgZnVuY3Rpb24ocGFyYW1zID0ge30pClNlcmlhbGl6ZVZhbHVlKHZhbHVlLCBzb3VyY2UgPSBmYWxzZSkKRGVzZXJpYWxpemVTeW1ib2xzKG5hbWVzKQogIG4gPT4KICBuID0+CkRlc2VyaWFsaXplVmFsdWUoZGVzYykKUlBDQ29ubmVjdCA9ICh1cmwsIHNlcnZpY2UgPSBSUENDbGllbnQpID0+ClJQQ0xpc3RlbiA9ICh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIpID0+AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					111,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/rpc.js",
						"symkeys":
						[
							[
								234,
								266
							],
							[
								323,
								341
							],
							[
								393,
								411
							],
							[
								446,
								466
							],
							[
								515,
								534
							],
							[
								540,
								549
							],
							[
								560,
								574
							],
							[
								603,
								624
							],
							[
								999,
								1038
							],
							[
								1280,
								1303
							],
							[
								1314,
								1317
							],
							[
								1334,
								1361
							],
							[
								1504,
								1510
							],
							[
								1525,
								1554
							],
							[
								1559,
								1565
							],
							[
								1605,
								1660
							],
							[
								1670,
								1680
							],
							[
								1697,
								1721
							],
							[
								1997,
								2015
							],
							[
								2031,
								2072
							],
							[
								2077,
								2095
							],
							[
								2147,
								2274
							],
							[
								2277,
								2312
							],
							[
								2325,
								2337
							],
							[
								2425,
								2439
							],
							[
								2622,
								2637
							],
							[
								2765,
								2779
							],
							[
								2903,
								2921
							],
							[
								3036,
								3049
							],
							[
								3227,
								3257
							],
							[
								3276,
								3294
							],
							[
								3306,
								3321
							],
							[
								3333,
								3351
							],
							[
								3431,
								3449
							],
							[
								3494,
								3501
							],
							[
								3562,
								3568
							],
							[
								3610,
								3622
							],
							[
								3632,
								3644
							],
							[
								3661,
								3682
							],
							[
								3724,
								3736
							],
							[
								3793,
								3805
							],
							[
								3868,
								3902
							],
							[
								3942,
								3954
							],
							[
								4023,
								4035
							],
							[
								4097,
								4122
							],
							[
								4165,
								4177
							],
							[
								4200,
								4212
							],
							[
								4248,
								4267
							],
							[
								4476,
								4482
							],
							[
								4524,
								4529
							],
							[
								4552,
								4573
							],
							[
								4691,
								4726
							],
							[
								4842,
								4846
							],
							[
								4873,
								4882
							],
							[
								4935,
								4960
							],
							[
								4965,
								4993
							],
							[
								5223,
								5232
							],
							[
								5334,
								5367
							],
							[
								5372,
								5382
							],
							[
								5476,
								5486
							],
							[
								5572,
								5590
							],
							[
								5701,
								5718
							],
							[
								5755,
								5764
							],
							[
								5801,
								5851
							],
							[
								5968,
								5980
							],
							[
								6441,
								6455
							],
							[
								6758,
								6779
							],
							[
								6972,
								6986
							],
							[
								7539,
								7543
							],
							[
								7637,
								7657
							],
							[
								7763,
								7778
							],
							[
								7956,
								7968
							],
							[
								8023,
								8037
							],
							[
								8162,
								8180
							],
							[
								8307,
								8316
							],
							[
								8406,
								8422
							],
							[
								8792,
								8825
							],
							[
								9330,
								9374
							],
							[
								9482,
								9500
							],
							[
								9530,
								9536
							],
							[
								9621,
								9655
							],
							[
								9911,
								9922
							],
							[
								9980,
								9996
							],
							[
								10077,
								10097
							],
							[
								10492,
								10504
							],
							[
								10711,
								10731
							],
							[
								10826,
								10846
							],
							[
								11010,
								11034
							],
							[
								11160,
								11178
							],
							[
								11471,
								11511
							],
							[
								11529,
								11560
							],
							[
								11890,
								11896
							],
							[
								12061,
								12081
							],
							[
								12177,
								12217
							],
							[
								12377,
								12386
							],
							[
								12416,
								12424
							],
							[
								12602,
								12642
							],
							[
								12703,
								12710
							],
							[
								12729,
								12736
							],
							[
								12805,
								12845
							],
							[
								12910,
								12917
							],
							[
								12995,
								13035
							],
							[
								13100,
								13107
							],
							[
								13147,
								13153
							],
							[
								13220,
								13224
							],
							[
								13279,
								13283
							],
							[
								13355,
								13386
							],
							[
								13649,
								13687
							],
							[
								13771,
								13780
							],
							[
								14256,
								14264
							],
							[
								14300,
								14320
							],
							[
								14901,
								14910
							],
							[
								15220,
								15229
							],
							[
								15629,
								15634
							],
							[
								15810,
								15815
							],
							[
								15901,
								15925
							],
							[
								16178,
								16199
							],
							[
								16225,
								16244
							],
							[
								16274,
								16286
							],
							[
								16330,
								16335
							],
							[
								16409,
								16418
							],
							[
								16726,
								16786
							],
							[
								17396,
								17409
							],
							[
								17586,
								17594
							],
							[
								17712,
								17724
							],
							[
								17781,
								17797
							],
							[
								18223,
								18237
							],
							[
								18457,
								18491
							],
							[
								18790,
								18795
							],
							[
								18890,
								18931
							],
							[
								19225,
								19240
							],
							[
								19701,
								19711
							],
							[
								19748,
								19758
							],
							[
								19827,
								19836
							],
							[
								19894,
								19932
							],
							[
								20065,
								20083
							],
							[
								20113,
								20128
							],
							[
								20155,
								20174
							],
							[
								20209,
								20228
							],
							[
								20263,
								20280
							],
							[
								20313,
								20333
							],
							[
								20425,
								20452
							],
							[
								20551,
								20587
							],
							[
								20745,
								20791
							],
							[
								20890,
								20921
							],
							[
								21478,
								21488
							],
							[
								21622,
								21674
							],
							[
								21693,
								21748
							],
							[
								22067,
								22138
							],
							[
								22200,
								22207
							],
							[
								22298,
								22305
							],
							[
								22392,
								22474
							],
							[
								23016,
								23046
							],
							[
								23414,
								23449
							],
							[
								23462,
								23502
							],
							[
								23681,
								23737
							],
							[
								23966,
								23993
							],
							[
								24004,
								24019
							],
							[
								24032,
								24062
							],
							[
								24319,
								24415
							],
							[
								24441,
								24459
							],
							[
								24707,
								24725
							],
							[
								24828,
								24841
							],
							[
								25425,
								25458
							],
							[
								25527,
								25557
							],
							[
								25596,
								25600
							],
							[
								25687,
								25714
							],
							[
								25753,
								25761
							],
							[
								25841,
								25867
							],
							[
								25913,
								25942
							],
							[
								25999,
								26044
							],
							[
								26144,
								26149
							],
							[
								26249,
								26283
							],
							[
								26400,
								26460
							],
							[
								26675,
								26697
							],
							[
								26863,
								26885
							],
							[
								26983,
								27003
							],
							[
								27035,
								27040
							],
							[
								27169,
								27196
							],
							[
								27428,
								27475
							],
							[
								28293,
								28328
							],
							[
								28350,
								28354
							],
							[
								28386,
								28390
							],
							[
								28412,
								28444
							],
							[
								28578,
								28620
							],
							[
								28673,
								28714
							]
						],
						"symlist":
						[
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"VfnAdapter = vfn =>",
							"get: k =>",
							"set: (k, v) =>",
							"VfnDecorator = vfn =>",
							".GetClasses = function* GetClasses(obj)",
							" function Mapper(map = ",
							"())",
							"self = function(key, value)",
							"Mapper",
							"Mapper.prototype = function()",
							"Mapper",
							" function DefaultConstructor(mapper, fn = (...args) => ",
							"(...args))",
							"self = function(...args)",
							"DefaultConstructor",
							"DefaultConstructor.prototype = function()",
							"DefaultConstructor",
							" function EventLogger(instance = {}, callback = (name, event, thisObj) => console.log('EventLogger', { name, event, thisObj }))",
							" function WrapEvent(handler, name)",
							" function(e)",
							"get(obj, prop)",
							"MessageReceiver",
							"onmessage(msg)",
							"MessageTransmitter",
							"sendMessage()",
							" function MessageTransceiver()",
							"MessageTransceiver",
							"MessageReceiver",
							"MessageTransmitter",
							"value: instance =>",
							"ctor =>",
							"none()",
							"encode: v =>",
							"decode: v =>",
							"json(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".js = function js(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".bjson = function bjson()",
							"encode: v =>",
							"decode: v =>",
							" function RPCApi(c)",
							"RPCApi",
							" o =>",
							" function RPCProxy(c)",
							" function RPCObject(id, connection)",
							"r =>",
							"RPCObject",
							" function RPCFactory(api)",
							"async function Factory(opts)",
							"RPCObject",
							"RPCFactory.prototype = function()",
							"RPCFactory",
							"Connection",
							"static equal(a, b)",
							"static get last()",
							"makeSeq()",
							"constructor(socket, instance, log, codec = 'none')",
							"log(...args)",
							"error(message)",
							"close(status, reason)",
							"onmessage(msg)",
							"r =>",
							"processMessage(data)",
							"onconnect(sock)",
							"onpong(data)",
							"onerror(error)",
							"onclose(code, why)",
							"cleanup()",
							"sendMessage(obj)",
							"sendCommand(command, params = {})",
							"static getCallbacks(instance, verbosity = 0)",
							" (msg, ...args) =>",
							" () =>",
							"handle = (sock, event, ...args) =>",
							"then: fn =>",
							"remove = sock =>",
							"onConnect(sock, req)",
							"onOpen(sock)",
							"onMessage(sock, msg)",
							"onError(sock, error)",
							"onClose(sock, code, why)",
							"onPong(sock, data)",
							"function RPCServerEndpoint(classes = {})",
							"new({ class: name, args = [] })",
							"list()",
							"({ id }, respond) =>",
							"({ obj, method, args = [] }, respond) =>",
							"result =>",
							"error =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"sym =>",
							"v =>",
							"v =>",
							"({ obj, property }, respond) =>",
							"({ obj, property, value }, respond) =>",
							"RPCServer",
							"makeId()",
							"processMessage(data)",
							"RPCServer",
							"RPCClient",
							" e =>",
							"get()",
							"processMessage(response)",
							"command(name, params)",
							"(accept, reject) =>",
							" response =>",
							" e =>",
							"RPCClient",
							" function RPCSocket(url, service = RPCServer, verbosity = 1)",
							" (...args) =>",
							"get fd()",
							"get socket()",
							"get connection()",
							"register(ctor)",
							"listen(new_ws, os = globalThis.os)",
							"() =>",
							"async connect(new_ws, os = globalThis.os)",
							"get connected()",
							"get list()",
							"get last()",
							"RPCSocket",
							"function MakeWebSocket(url, callbacks)",
							".onconnect = () =>",
							".onopen = () =>",
							".onerror = error =>",
							".onmessage = msg =>",
							".onpong = pong =>",
							".onclose = reason =>",
							" function isThenable(value)",
							" function hasHandler(obj, eventName)",
							" function callHandler(obj, eventName, ...args)",
							" function parseURL(url_or_port)",
							"toString()",
							" function GetProperties(obj, method = obj => Object.",
							"(obj), pred = (obj, depth) => obj !== Object.prototype)",
							" function GetKeys(obj, pred = (obj, depth) => obj !== Object.prototype)",
							" obj =>",
							" obj =>",
							" function getPropertyDescriptors(obj, merge = true, pred = (proto, depth) => true)",
							" function define(obj, ...args)",
							" function setHandlers(os, handlers)",
							".onFd = function(fd, readable, writable)",
							" function statusResponse(success, result_or_error, data)",
							" function objectCommand(fn)",
							" function(data)",
							"respond = (success, result) =>",
							" function MakeListCommand(pred = v => typeof v != 'function', defaults = { maxDepth: Infinity })",
							"(data, respond) =>",
							" (proto, depth) =>",
							"(acc, key) =>",
							" function getPrototypeName(proto)",
							"function DeserializeEntries(e)",
							"a =>",
							"function DeserializeKeys(e)",
							"([k]) =>",
							"function DeserializeMap(e)",
							"function DeserializeObject(e)",
							"function ForwardMethods(e, ret = {}, thisObj)",
							" o =>",
							"function ForwardObject(e, thisObj)",
							"function MakeCommandFunction(cmd, getConnection, thisObj, t)",
							"getConnection = obj =>",
							" function(params = {})",
							"(resolve, reject) =>",
							" r =>",
							"async function(params = {})",
							" function SerializeValue(value, source = false)",
							" function DeserializeSymbols(names)",
							"n =>",
							"n =>",
							" function DeserializeValue(desc)",
							"RPCConnect = (url, service = RPCClient) =>",
							"RPCListen = (url, service = RPCServer) =>"
						]
					},
					"AQAAAAAAAAAAAAAACxAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					112,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/rpc.js",
						"symkeys":
						[
							[
								99,
								131
							],
							[
								188,
								206
							],
							[
								258,
								276
							],
							[
								311,
								331
							],
							[
								380,
								399
							],
							[
								405,
								414
							],
							[
								425,
								439
							],
							[
								468,
								489
							],
							[
								864,
								903
							],
							[
								1145,
								1168
							],
							[
								1179,
								1182
							],
							[
								1199,
								1226
							],
							[
								1369,
								1375
							],
							[
								1390,
								1419
							],
							[
								1424,
								1430
							],
							[
								1470,
								1525
							],
							[
								1535,
								1545
							],
							[
								1562,
								1586
							],
							[
								1862,
								1880
							],
							[
								1896,
								1937
							],
							[
								1942,
								1960
							],
							[
								2012,
								2139
							],
							[
								2142,
								2177
							],
							[
								2190,
								2202
							],
							[
								2290,
								2304
							],
							[
								2487,
								2502
							],
							[
								2630,
								2644
							],
							[
								2768,
								2786
							],
							[
								2901,
								2914
							],
							[
								3092,
								3122
							],
							[
								3141,
								3159
							],
							[
								3171,
								3186
							],
							[
								3198,
								3216
							],
							[
								3296,
								3314
							],
							[
								3359,
								3366
							],
							[
								3427,
								3433
							],
							[
								3475,
								3487
							],
							[
								3497,
								3509
							],
							[
								3526,
								3547
							],
							[
								3589,
								3601
							],
							[
								3658,
								3670
							],
							[
								3733,
								3767
							],
							[
								3807,
								3819
							],
							[
								3888,
								3900
							],
							[
								3962,
								3987
							],
							[
								4030,
								4042
							],
							[
								4065,
								4077
							],
							[
								4113,
								4132
							],
							[
								4341,
								4347
							],
							[
								4389,
								4394
							],
							[
								4417,
								4438
							],
							[
								4556,
								4591
							],
							[
								4707,
								4711
							],
							[
								4738,
								4747
							],
							[
								4800,
								4825
							],
							[
								4830,
								4858
							],
							[
								5088,
								5097
							],
							[
								5199,
								5232
							],
							[
								5237,
								5247
							],
							[
								5341,
								5351
							],
							[
								5437,
								5455
							],
							[
								5566,
								5583
							],
							[
								5620,
								5629
							],
							[
								5666,
								5716
							],
							[
								5833,
								5845
							],
							[
								6306,
								6320
							],
							[
								6623,
								6644
							],
							[
								6837,
								6851
							],
							[
								7404,
								7408
							],
							[
								7502,
								7522
							],
							[
								7628,
								7643
							],
							[
								7821,
								7833
							],
							[
								7888,
								7902
							],
							[
								8027,
								8045
							],
							[
								8172,
								8181
							],
							[
								8271,
								8287
							],
							[
								8657,
								8690
							],
							[
								9195,
								9239
							],
							[
								9347,
								9365
							],
							[
								9395,
								9401
							],
							[
								9486,
								9520
							],
							[
								9776,
								9787
							],
							[
								9845,
								9861
							],
							[
								9942,
								9962
							],
							[
								10357,
								10369
							],
							[
								10576,
								10596
							],
							[
								10691,
								10711
							],
							[
								10875,
								10899
							],
							[
								11025,
								11043
							],
							[
								11336,
								11376
							],
							[
								11394,
								11425
							],
							[
								11755,
								11761
							],
							[
								11926,
								11946
							],
							[
								12042,
								12082
							],
							[
								12242,
								12251
							],
							[
								12281,
								12289
							],
							[
								12467,
								12507
							],
							[
								12568,
								12575
							],
							[
								12594,
								12601
							],
							[
								12670,
								12710
							],
							[
								12775,
								12782
							],
							[
								12860,
								12900
							],
							[
								12965,
								12972
							],
							[
								13012,
								13018
							],
							[
								13085,
								13089
							],
							[
								13144,
								13148
							],
							[
								13220,
								13251
							],
							[
								13514,
								13552
							],
							[
								13636,
								13645
							],
							[
								14121,
								14129
							],
							[
								14165,
								14185
							],
							[
								14766,
								14775
							],
							[
								15085,
								15094
							],
							[
								15494,
								15499
							],
							[
								15675,
								15680
							],
							[
								15766,
								15790
							],
							[
								16043,
								16064
							],
							[
								16090,
								16109
							],
							[
								16139,
								16151
							],
							[
								16195,
								16200
							],
							[
								16274,
								16283
							],
							[
								16591,
								16651
							],
							[
								17261,
								17274
							],
							[
								17451,
								17459
							],
							[
								17577,
								17589
							],
							[
								17646,
								17662
							],
							[
								18088,
								18102
							],
							[
								18322,
								18356
							],
							[
								18655,
								18660
							],
							[
								18755,
								18796
							],
							[
								19090,
								19105
							],
							[
								19566,
								19576
							],
							[
								19613,
								19623
							],
							[
								19692,
								19701
							],
							[
								19759,
								19797
							],
							[
								19930,
								19948
							],
							[
								19978,
								19993
							],
							[
								20020,
								20039
							],
							[
								20074,
								20093
							],
							[
								20128,
								20145
							],
							[
								20178,
								20198
							],
							[
								20290,
								20317
							],
							[
								20416,
								20452
							],
							[
								20610,
								20656
							],
							[
								20755,
								20786
							],
							[
								21343,
								21353
							],
							[
								21487,
								21539
							],
							[
								21558,
								21613
							],
							[
								21932,
								22003
							],
							[
								22065,
								22072
							],
							[
								22163,
								22170
							],
							[
								22257,
								22339
							],
							[
								22881,
								22911
							],
							[
								23279,
								23314
							],
							[
								23327,
								23367
							],
							[
								23546,
								23602
							],
							[
								23831,
								23858
							],
							[
								23869,
								23884
							],
							[
								23897,
								23927
							],
							[
								24184,
								24280
							],
							[
								24306,
								24324
							],
							[
								24572,
								24590
							],
							[
								24693,
								24706
							],
							[
								25290,
								25323
							],
							[
								25392,
								25422
							],
							[
								25461,
								25465
							],
							[
								25552,
								25579
							],
							[
								25618,
								25626
							],
							[
								25706,
								25732
							],
							[
								25778,
								25807
							],
							[
								25864,
								25909
							],
							[
								26009,
								26014
							],
							[
								26114,
								26148
							],
							[
								26265,
								26325
							],
							[
								26540,
								26562
							],
							[
								26728,
								26750
							],
							[
								26848,
								26868
							],
							[
								26900,
								26905
							],
							[
								27034,
								27061
							],
							[
								27293,
								27340
							],
							[
								28158,
								28193
							],
							[
								28215,
								28219
							],
							[
								28251,
								28255
							],
							[
								28277,
								28309
							],
							[
								28443,
								28485
							],
							[
								28538,
								28579
							]
						],
						"symlist":
						[
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"VfnAdapter = vfn =>",
							"get: k =>",
							"set: (k, v) =>",
							"VfnDecorator = vfn =>",
							".GetClasses = function* GetClasses(obj)",
							" function Mapper(map = ",
							"())",
							"self = function(key, value)",
							"Mapper",
							"Mapper.prototype = function()",
							"Mapper",
							" function DefaultConstructor(mapper, fn = (...args) => ",
							"(...args))",
							"self = function(...args)",
							"DefaultConstructor",
							"DefaultConstructor.prototype = function()",
							"DefaultConstructor",
							" function EventLogger(instance = {}, callback = (name, event, thisObj) => console.log('EventLogger', { name, event, thisObj }))",
							" function WrapEvent(handler, name)",
							" function(e)",
							"get(obj, prop)",
							"MessageReceiver",
							"onmessage(msg)",
							"MessageTransmitter",
							"sendMessage()",
							" function MessageTransceiver()",
							"MessageTransceiver",
							"MessageReceiver",
							"MessageTransmitter",
							"value: instance =>",
							"ctor =>",
							"none()",
							"encode: v =>",
							"decode: v =>",
							"json(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".js = function js(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".bjson = function bjson()",
							"encode: v =>",
							"decode: v =>",
							" function RPCApi(c)",
							"RPCApi",
							" o =>",
							" function RPCProxy(c)",
							" function RPCObject(id, connection)",
							"r =>",
							"RPCObject",
							" function RPCFactory(api)",
							"async function Factory(opts)",
							"RPCObject",
							"RPCFactory.prototype = function()",
							"RPCFactory",
							"Connection",
							"static equal(a, b)",
							"static get last()",
							"makeSeq()",
							"constructor(socket, instance, log, codec = 'none')",
							"log(...args)",
							"error(message)",
							"close(status, reason)",
							"onmessage(msg)",
							"r =>",
							"processMessage(data)",
							"onconnect(sock)",
							"onpong(data)",
							"onerror(error)",
							"onclose(code, why)",
							"cleanup()",
							"sendMessage(obj)",
							"sendCommand(command, params = {})",
							"static getCallbacks(instance, verbosity = 0)",
							" (msg, ...args) =>",
							" () =>",
							"handle = (sock, event, ...args) =>",
							"then: fn =>",
							"remove = sock =>",
							"onConnect(sock, req)",
							"onOpen(sock)",
							"onMessage(sock, msg)",
							"onError(sock, error)",
							"onClose(sock, code, why)",
							"onPong(sock, data)",
							"function RPCServerEndpoint(classes = {})",
							"new({ class: name, args = [] })",
							"list()",
							"({ id }, respond) =>",
							"({ obj, method, args = [] }, respond) =>",
							"result =>",
							"error =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"sym =>",
							"v =>",
							"v =>",
							"({ obj, property }, respond) =>",
							"({ obj, property, value }, respond) =>",
							"RPCServer",
							"makeId()",
							"processMessage(data)",
							"RPCServer",
							"RPCClient",
							" e =>",
							"get()",
							"processMessage(response)",
							"command(name, params)",
							"(accept, reject) =>",
							" response =>",
							" e =>",
							"RPCClient",
							" function RPCSocket(url, service = RPCServer, verbosity = 1)",
							" (...args) =>",
							"get fd()",
							"get socket()",
							"get connection()",
							"register(ctor)",
							"listen(new_ws, os = globalThis.os)",
							"() =>",
							"async connect(new_ws, os = globalThis.os)",
							"get connected()",
							"get list()",
							"get last()",
							"RPCSocket",
							"function MakeWebSocket(url, callbacks)",
							".onconnect = () =>",
							".onopen = () =>",
							".onerror = error =>",
							".onmessage = msg =>",
							".onpong = pong =>",
							".onclose = reason =>",
							" function isThenable(value)",
							" function hasHandler(obj, eventName)",
							" function callHandler(obj, eventName, ...args)",
							" function parseURL(url_or_port)",
							"toString()",
							" function GetProperties(obj, method = obj => Object.",
							"(obj), pred = (obj, depth) => obj !== Object.prototype)",
							" function GetKeys(obj, pred = (obj, depth) => obj !== Object.prototype)",
							" obj =>",
							" obj =>",
							" function getPropertyDescriptors(obj, merge = true, pred = (proto, depth) => true)",
							" function define(obj, ...args)",
							" function setHandlers(os, handlers)",
							".onFd = function(fd, readable, writable)",
							" function statusResponse(success, result_or_error, data)",
							" function objectCommand(fn)",
							" function(data)",
							"respond = (success, result) =>",
							" function MakeListCommand(pred = v => typeof v != 'function', defaults = { maxDepth: Infinity })",
							"(data, respond) =>",
							" (proto, depth) =>",
							"(acc, key) =>",
							" function getPrototypeName(proto)",
							"function DeserializeEntries(e)",
							"a =>",
							"function DeserializeKeys(e)",
							"([k]) =>",
							"function DeserializeMap(e)",
							"function DeserializeObject(e)",
							"function ForwardMethods(e, ret = {}, thisObj)",
							" o =>",
							"function ForwardObject(e, thisObj)",
							"function MakeCommandFunction(cmd, getConnection, thisObj, t)",
							"getConnection = obj =>",
							" function(params = {})",
							"(resolve, reject) =>",
							" r =>",
							"async function(params = {})",
							" function SerializeValue(value, source = false)",
							" function DeserializeSymbols(names)",
							"n =>",
							"n =>",
							" function DeserializeValue(desc)",
							"RPCConnect = (url, service = RPCClient) =>",
							"RPCListen = (url, service = RPCServer) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAALEAAAICAuTG9nV3JhcCA9IGZ1bmN0aW9uIExvZ1dyYXAobG9nKQogIGxvZyA9ICguLi5hcmdzKSA9PgogIGxvZyA9ICguLi5hcmdzKSA9PgogICh2YWx1ZSwgLi4uYXJncykgPT4KVmZuQWRhcHRlciA9IHZmbiA9PgogIGdldDogayA9PgogIHNldDogKGssIHYpID0+ClZmbkRlY29yYXRvciA9IHZmbiA9PgogIC5HZXRDbGFzc2VzID0gZnVuY3Rpb24qR2V0Q2xhc3NlcyhvYmopCk1hcHBlcihtYXAgPSAKKCkpCiAgc2VsZiA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpCk1hcHBlcgpNYXBwZXIucHJvdG90eXBlID0gZnVuY3Rpb24oKQpNYXBwZXIKRGVmYXVsdENvbnN0cnVjdG9yKG1hcHBlciwgZm4gPSAoLi4uYXJncykgPT4gCiguLi5hcmdzKSkKICBzZWxmID0gZnVuY3Rpb24oLi4uYXJncykKRGVmYXVsdENvbnN0cnVjdG9yCkRlZmF1bHRDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBmdW5jdGlvbigpCkRlZmF1bHRDb25zdHJ1Y3RvcgpFdmVudExvZ2dlcihpbnN0YW5jZSA9IHt9LCBjYWxsYmFjayA9IChuYW1lLCBldmVudCwgdGhpc09iaikgPT4gY29uc29sZS5sb2coJ0V2ZW50TG9nZ2VyJywgeyBuYW1lLCBldmVudCwgdGhpc09iaiB9KSkKV3JhcEV2ZW50KGhhbmRsZXIsIG5hbWUpCiAgZnVuY3Rpb24oZSkKICBnZXQob2JqLCBwcm9wKQpNZXNzYWdlUmVjZWl2ZXIKICBvbm1lc3NhZ2UobXNnKQpNZXNzYWdlVHJhbnNtaXR0ZXIKICBzZW5kTWVzc2FnZSgpCk1lc3NhZ2VUcmFuc2NlaXZlcigpCk1lc3NhZ2VUcmFuc2NlaXZlcgpNZXNzYWdlUmVjZWl2ZXIKTWVzc2FnZVRyYW5zbWl0dGVyCiAgdmFsdWU6IGluc3RhbmNlID0+CiAgY3RvciA9PgogIG5vbmUoKQogIGVuY29kZTogdiA9PgogIGRlY29kZTogdiA9PgogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIGVuY29kZTogdiA9PgogIGRlY29kZTogdiA9PgogIC5qcyA9IGZ1bmN0aW9uIGpzKHZlcmJvc2UgPSBmYWxzZSkKICBlbmNvZGU6IHYgPT4KICBkZWNvZGU6IHYgPT4KICAuYmpzb24gPSBmdW5jdGlvbiBianNvbigpCiAgZW5jb2RlOiB2ID0+CiAgZGVjb2RlOiB2ID0+ClJQQ0FwaShjKQpSUENBcGkKICBvID0+ClJQQ1Byb3h5KGMpClJQQ09iamVjdChpZCwgY29ubmVjdGlvbikKICByID0+ClJQQ09iamVjdApSUENGYWN0b3J5KGFwaSkKRmFjdG9yeShvcHRzKQpSUENPYmplY3QKUlBDRmFjdG9yeS5wcm90b3R5cGUgPSBmdW5jdGlvbigpClJQQ0ZhY3RvcnkKQ29ubmVjdGlvbgogIHN0YXRpYyBlcXVhbChhLCBiKQogIHN0YXRpYyBnZXQgbGFzdCgpCiAgbWFrZVNlcSgpCiAgY29uc3RydWN0b3Ioc29ja2V0LCBpbnN0YW5jZSwgbG9nLCBjb2RlYyA9ICdub25lJykKICBsb2coLi4uYXJncykKICBlcnJvcihtZXNzYWdlKQogIGNsb3NlKHN0YXR1cywgcmVhc29uKQogIG9ubWVzc2FnZShtc2cpCiAgciA9PgogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICAobXNnLCAuLi5hcmdzKSA9PgogICgpID0+CiAgaGFuZGxlID0gKHNvY2ssIGV2ZW50LCAuLi5hcmdzKSA9PgogIHRoZW46IGZuID0+CiAgcmVtb3ZlID0gc29jayA9PgogIG9uQ29ubmVjdChzb2NrLCByZXEpCiAgb25PcGVuKHNvY2spCiAgb25NZXNzYWdlKHNvY2ssIG1zZykKICBvbkVycm9yKHNvY2ssIGVycm9yKQogIG9uQ2xvc2Uoc29jaywgY29kZSwgd2h5KQogIG9uUG9uZyhzb2NrLCBkYXRhKQpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQooeyBpZCB9LCByZXNwb25kKSA9PgooeyBvYmosIG1ldGhvZCwgYXJncyA9IFtdIH0sIHJlc3BvbmQpID0+CiAgcmVzdWx0ID0+CiAgZXJyb3IgPT4KKHsgb2JqLCBlbnVtZXJhYmxlID0gdHJ1ZSB9LCByZXNwb25kKSA9PgogIG9iaiA9PgogIG9iaiA9PgooeyBvYmosIGVudW1lcmFibGUgPSB0cnVlIH0sIHJlc3BvbmQpID0+CiAgb2JqID0+Cih7IG9iaiwgZW51bWVyYWJsZSA9IHRydWUgfSwgcmVzcG9uZCkgPT4KICBvYmogPT4KICBzeW0gPT4KICB2ID0+CiAgdiA9PgooeyBvYmosIHByb3BlcnR5IH0sIHJlc3BvbmQpID0+Cih7IG9iaiwgcHJvcGVydHksIHZhbHVlIH0sIHJlc3BvbmQpID0+ClJQQ1NlcnZlcgogIG1ha2VJZCgpCiAgcHJvY2Vzc01lc3NhZ2UoZGF0YSkKUlBDU2VydmVyClJQQ0NsaWVudAogIGUgPT4KICBnZXQoKQogIHByb2Nlc3NNZXNzYWdlKHJlc3BvbnNlKQogIGNvbW1hbmQobmFtZSwgcGFyYW1zKQooYWNjZXB0LCByZWplY3QpID0+CiAgcmVzcG9uc2UgPT4KICBlID0+ClJQQ0NsaWVudApSUENTb2NrZXQodXJsLCBzZXJ2aWNlID0gUlBDU2VydmVyLCB2ZXJib3NpdHkgPSAxKQogICguLi5hcmdzKSA9PgogIGdldCBmZCgpCiAgZ2V0IHNvY2tldCgpCiAgZ2V0IGNvbm5lY3Rpb24oKQogIHJlZ2lzdGVyKGN0b3IpCiAgbGlzdGVuKG5ld193cywgb3MgPSBnbG9iYWxUaGlzLm9zKQooKSA9PgogIGNvbm5lY3QobmV3X3dzLCBvcyA9IGdsb2JhbFRoaXMub3MpCiAgZ2V0IGNvbm5lY3RlZCgpCiAgZ2V0IGxpc3QoKQogIGdldCBsYXN0KCkKUlBDU29ja2V0Ck1ha2VXZWJTb2NrZXQodXJsLCBjYWxsYmFja3MpCiAgLm9uY29ubmVjdCA9ICgpID0+CiAgLm9ub3BlbiA9ICgpID0+CiAgLm9uZXJyb3IgPSBlcnJvciA9PgogIC5vbm1lc3NhZ2UgPSBtc2cgPT4KICAub25wb25nID0gcG9uZyA9PgogIC5vbmNsb3NlID0gcmVhc29uID0+CiAgaXNUaGVuYWJsZSh2YWx1ZSkKICBoYXNIYW5kbGVyKG9iaiwgZXZlbnROYW1lKQogIGNhbGxIYW5kbGVyKG9iaiwgZXZlbnROYW1lLCAuLi5hcmdzKQogIHBhcnNlVVJMKHVybF9vcl9wb3J0KQogIHRvU3RyaW5nKCkKR2V0UHJvcGVydGllcyhvYmosIG1ldGhvZCA9IG9iaiA9PiBPYmplY3QuCihvYmopLCBwcmVkID0gKG9iaiwgZGVwdGgpID0+IG9iaiAhPT0gT2JqZWN0LnByb3RvdHlwZSkKR2V0S2V5cyhvYmosIHByZWQgPSAob2JqLCBkZXB0aCkgPT4gb2JqICE9PSBPYmplY3QucHJvdG90eXBlKQogIG9iaiA9PgogIG9iaiA9PgogIGdldFByb3BlcnR5RGVzY3JpcHRvcnMob2JqLCBtZXJnZSA9IHRydWUsIHByZWQgPSAocHJvdG8sIGRlcHRoKSA9PiB0cnVlKQogIGRlZmluZShvYmosIC4uLmFyZ3MpCiAgc2V0SGFuZGxlcnMob3MsIGhhbmRsZXJzKQogIC5vbkZkID0gZnVuY3Rpb24oZmQsIHJlYWRhYmxlLCB3cml0YWJsZSkKICBzdGF0dXNSZXNwb25zZShzdWNjZXNzLCByZXN1bHRfb3JfZXJyb3IsIGRhdGEpCiAgb2JqZWN0Q29tbWFuZChmbikKICBmdW5jdGlvbihkYXRhKQogIHJlc3BvbmQgPSAoc3VjY2VzcywgcmVzdWx0KSA9PgpNYWtlTGlzdENvbW1hbmQocHJlZCA9IHYgPT4gdHlwZW9mIHYgIT0gJ2Z1bmN0aW9uJywgZGVmYXVsdHMgPSB7IG1heERlcHRoOiBJbmZpbml0eSB9KQooZGF0YSwgcmVzcG9uZCkgPT4KICAocHJvdG8sIGRlcHRoKSA9PgooYWNjLCBrZXkpID0+CiAgZ2V0UHJvdG90eXBlTmFtZShwcm90bykKRGVzZXJpYWxpemVFbnRyaWVzKGUpCiAgYSA9PgpEZXNlcmlhbGl6ZUtleXMoZSkKKFtrXSkgPT4KRGVzZXJpYWxpemVNYXAoZSkKRGVzZXJpYWxpemVPYmplY3QoZSkKRm9yd2FyZE1ldGhvZHMoZSwgcmV0ID0ge30sIHRoaXNPYmopCiAgbyA9PgpGb3J3YXJkT2JqZWN0KGUsIHRoaXNPYmopCk1ha2VDb21tYW5kRnVuY3Rpb24oY21kLCBnZXRDb25uZWN0aW9uLCB0aGlzT2JqLCB0KQogIGdldENvbm5lY3Rpb24gPSBvYmogPT4KICBmdW5jdGlvbihwYXJhbXMgPSB7fSkKKHJlc29sdmUsIHJlamVjdCkgPT4KICByID0+CiAgZnVuY3Rpb24ocGFyYW1zID0ge30pClNlcmlhbGl6ZVZhbHVlKHZhbHVlLCBzb3VyY2UgPSBmYWxzZSkKRGVzZXJpYWxpemVTeW1ib2xzKG5hbWVzKQogIG4gPT4KICBuID0+CkRlc2VyaWFsaXplVmFsdWUoZGVzYykKUlBDQ29ubmVjdCA9ICh1cmwsIHNlcnZpY2UgPSBSUENDbGllbnQpID0+ClJQQ0xpc3RlbiA9ICh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIpID0+AAAAAAAAAAALEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					113,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/poll.c",
						"symkeys":
						[
							[
								2682,
								2697
							],
							[
								2779,
								2793
							],
							[
								3521,
								3549
							],
							[
								3685,
								3701
							],
							[
								3800,
								3823
							],
							[
								4126,
								4149
							],
							[
								7069,
								7099
							],
							[
								8168,
								8183
							],
							[
								9786,
								9790
							]
						],
						"symlist":
						[
							"IsConsoleHandle",
							"IsSocketHandle",
							"PFILE_PIPE_LOCAL_INFORMATION",
							"PIO_STATUS_BLOCK",
							"PFILE_INFORMATION_CLASS",
							"windows_compute_revents",
							"windows_compute_revents_socket",
							"compute_revents",
							"poll"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAALEAAAICAuTG9nV3JhcCA9IGZ1bmN0aW9uIExvZ1dyYXAobG9nKQogIGxvZyA9ICguLi5hcmdzKSA9PgogIGxvZyA9ICguLi5hcmdzKSA9PgogICh2YWx1ZSwgLi4uYXJncykgPT4KVmZuQWRhcHRlciA9IHZmbiA9PgogIGdldDogayA9PgogIHNldDogKGssIHYpID0+ClZmbkRlY29yYXRvciA9IHZmbiA9PgogIC5HZXRDbGFzc2VzID0gZnVuY3Rpb24qR2V0Q2xhc3NlcyhvYmopCk1hcHBlcihtYXAgPSAKKCkpCiAgc2VsZiA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpCk1hcHBlcgpNYXBwZXIucHJvdG90eXBlID0gZnVuY3Rpb24oKQpNYXBwZXIKRGVmYXVsdENvbnN0cnVjdG9yKG1hcHBlciwgZm4gPSAoLi4uYXJncykgPT4gCiguLi5hcmdzKSkKICBzZWxmID0gZnVuY3Rpb24oLi4uYXJncykKRGVmYXVsdENvbnN0cnVjdG9yCkRlZmF1bHRDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBmdW5jdGlvbigpCkRlZmF1bHRDb25zdHJ1Y3RvcgpFdmVudExvZ2dlcihpbnN0YW5jZSA9IHt9LCBjYWxsYmFjayA9IChuYW1lLCBldmVudCwgdGhpc09iaikgPT4gY29uc29sZS5sb2coJ0V2ZW50TG9nZ2VyJywgeyBuYW1lLCBldmVudCwgdGhpc09iaiB9KSkKV3JhcEV2ZW50KGhhbmRsZXIsIG5hbWUpCiAgZnVuY3Rpb24oZSkKICBnZXQob2JqLCBwcm9wKQpNZXNzYWdlUmVjZWl2ZXIKICBvbm1lc3NhZ2UobXNnKQpNZXNzYWdlVHJhbnNtaXR0ZXIKICBzZW5kTWVzc2FnZSgpCk1lc3NhZ2VUcmFuc2NlaXZlcigpCk1lc3NhZ2VUcmFuc2NlaXZlcgpNZXNzYWdlUmVjZWl2ZXIKTWVzc2FnZVRyYW5zbWl0dGVyCiAgdmFsdWU6IGluc3RhbmNlID0+CiAgY3RvciA9PgogIG5vbmUoKQogIGVuY29kZTogdiA9PgogIGRlY29kZTogdiA9PgogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIGVuY29kZTogdiA9PgogIGRlY29kZTogdiA9PgogIC5qcyA9IGZ1bmN0aW9uIGpzKHZlcmJvc2UgPSBmYWxzZSkKICBlbmNvZGU6IHYgPT4KICBkZWNvZGU6IHYgPT4KICAuYmpzb24gPSBmdW5jdGlvbiBianNvbigpCiAgZW5jb2RlOiB2ID0+CiAgZGVjb2RlOiB2ID0+ClJQQ0FwaShjKQpSUENBcGkKICBvID0+ClJQQ1Byb3h5KGMpClJQQ09iamVjdChpZCwgY29ubmVjdGlvbikKICByID0+ClJQQ09iamVjdApSUENGYWN0b3J5KGFwaSkKRmFjdG9yeShvcHRzKQpSUENPYmplY3QKUlBDRmFjdG9yeS5wcm90b3R5cGUgPSBmdW5jdGlvbigpClJQQ0ZhY3RvcnkKQ29ubmVjdGlvbgogIHN0YXRpYyBlcXVhbChhLCBiKQogIHN0YXRpYyBnZXQgbGFzdCgpCiAgbWFrZVNlcSgpCiAgY29uc3RydWN0b3Ioc29ja2V0LCBpbnN0YW5jZSwgbG9nLCBjb2RlYyA9ICdub25lJykKICBsb2coLi4uYXJncykKICBlcnJvcihtZXNzYWdlKQogIGNsb3NlKHN0YXR1cywgcmVhc29uKQogIG9ubWVzc2FnZShtc2cpCiAgciA9PgogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICAobXNnLCAuLi5hcmdzKSA9PgogICgpID0+CiAgaGFuZGxlID0gKHNvY2ssIGV2ZW50LCAuLi5hcmdzKSA9PgogIHRoZW46IGZuID0+CiAgcmVtb3ZlID0gc29jayA9PgogIG9uQ29ubmVjdChzb2NrLCByZXEpCiAgb25PcGVuKHNvY2spCiAgb25NZXNzYWdlKHNvY2ssIG1zZykKICBvbkVycm9yKHNvY2ssIGVycm9yKQogIG9uQ2xvc2Uoc29jaywgY29kZSwgd2h5KQogIG9uUG9uZyhzb2NrLCBkYXRhKQpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQooeyBpZCB9LCByZXNwb25kKSA9PgooeyBvYmosIG1ldGhvZCwgYXJncyA9IFtdIH0sIHJlc3BvbmQpID0+CiAgcmVzdWx0ID0+CiAgZXJyb3IgPT4KKHsgb2JqLCBlbnVtZXJhYmxlID0gdHJ1ZSB9LCByZXNwb25kKSA9PgogIG9iaiA9PgogIG9iaiA9PgooeyBvYmosIGVudW1lcmFibGUgPSB0cnVlIH0sIHJlc3BvbmQpID0+CiAgb2JqID0+Cih7IG9iaiwgZW51bWVyYWJsZSA9IHRydWUgfSwgcmVzcG9uZCkgPT4KICBvYmogPT4KICBzeW0gPT4KICB2ID0+CiAgdiA9PgooeyBvYmosIHByb3BlcnR5IH0sIHJlc3BvbmQpID0+Cih7IG9iaiwgcHJvcGVydHksIHZhbHVlIH0sIHJlc3BvbmQpID0+ClJQQ1NlcnZlcgogIG1ha2VJZCgpCiAgcHJvY2Vzc01lc3NhZ2UoZGF0YSkKUlBDU2VydmVyClJQQ0NsaWVudAogIGUgPT4KICBnZXQoKQogIHByb2Nlc3NNZXNzYWdlKHJlc3BvbnNlKQogIGNvbW1hbmQobmFtZSwgcGFyYW1zKQooYWNjZXB0LCByZWplY3QpID0+CiAgcmVzcG9uc2UgPT4KICBlID0+ClJQQ0NsaWVudApSUENTb2NrZXQodXJsLCBzZXJ2aWNlID0gUlBDU2VydmVyLCB2ZXJib3NpdHkgPSAxKQogICguLi5hcmdzKSA9PgogIGdldCBmZCgpCiAgZ2V0IHNvY2tldCgpCiAgZ2V0IGNvbm5lY3Rpb24oKQogIHJlZ2lzdGVyKGN0b3IpCiAgbGlzdGVuKG5ld193cywgb3MgPSBnbG9iYWxUaGlzLm9zKQooKSA9PgogIGNvbm5lY3QobmV3X3dzLCBvcyA9IGdsb2JhbFRoaXMub3MpCiAgZ2V0IGNvbm5lY3RlZCgpCiAgZ2V0IGxpc3QoKQogIGdldCBsYXN0KCkKUlBDU29ja2V0Ck1ha2VXZWJTb2NrZXQodXJsLCBjYWxsYmFja3MpCiAgLm9uY29ubmVjdCA9ICgpID0+CiAgLm9ub3BlbiA9ICgpID0+CiAgLm9uZXJyb3IgPSBlcnJvciA9PgogIC5vbm1lc3NhZ2UgPSBtc2cgPT4KICAub25wb25nID0gcG9uZyA9PgogIC5vbmNsb3NlID0gcmVhc29uID0+CiAgaXNUaGVuYWJsZSh2YWx1ZSkKICBoYXNIYW5kbGVyKG9iaiwgZXZlbnROYW1lKQogIGNhbGxIYW5kbGVyKG9iaiwgZXZlbnROYW1lLCAuLi5hcmdzKQogIHBhcnNlVVJMKHVybF9vcl9wb3J0KQogIHRvU3RyaW5nKCkKR2V0UHJvcGVydGllcyhvYmosIG1ldGhvZCA9IG9iaiA9PiBPYmplY3QuCihvYmopLCBwcmVkID0gKG9iaiwgZGVwdGgpID0+IG9iaiAhPT0gT2JqZWN0LnByb3RvdHlwZSkKR2V0S2V5cyhvYmosIHByZWQgPSAob2JqLCBkZXB0aCkgPT4gb2JqICE9PSBPYmplY3QucHJvdG90eXBlKQogIG9iaiA9PgogIG9iaiA9PgogIGdldFByb3BlcnR5RGVzY3JpcHRvcnMob2JqLCBtZXJnZSA9IHRydWUsIHByZWQgPSAocHJvdG8sIGRlcHRoKSA9PiB0cnVlKQogIGRlZmluZShvYmosIC4uLmFyZ3MpCiAgc2V0SGFuZGxlcnMob3MsIGhhbmRsZXJzKQogIC5vbkZkID0gZnVuY3Rpb24oZmQsIHJlYWRhYmxlLCB3cml0YWJsZSkKICBzdGF0dXNSZXNwb25zZShzdWNjZXNzLCByZXN1bHRfb3JfZXJyb3IsIGRhdGEpCiAgb2JqZWN0Q29tbWFuZChmbikKICBmdW5jdGlvbihkYXRhKQogIHJlc3BvbmQgPSAoc3VjY2VzcywgcmVzdWx0KSA9PgpNYWtlTGlzdENvbW1hbmQocHJlZCA9IHYgPT4gdHlwZW9mIHYgIT0gJ2Z1bmN0aW9uJywgZGVmYXVsdHMgPSB7IG1heERlcHRoOiBJbmZpbml0eSB9KQooZGF0YSwgcmVzcG9uZCkgPT4KICAocHJvdG8sIGRlcHRoKSA9PgooYWNjLCBrZXkpID0+CiAgZ2V0UHJvdG90eXBlTmFtZShwcm90bykKRGVzZXJpYWxpemVFbnRyaWVzKGUpCiAgYSA9PgpEZXNlcmlhbGl6ZUtleXMoZSkKKFtrXSkgPT4KRGVzZXJpYWxpemVNYXAoZSkKRGVzZXJpYWxpemVPYmplY3QoZSkKRm9yd2FyZE1ldGhvZHMoZSwgcmV0ID0ge30sIHRoaXNPYmopCiAgbyA9PgpGb3J3YXJkT2JqZWN0KGUsIHRoaXNPYmopCk1ha2VDb21tYW5kRnVuY3Rpb24oY21kLCBnZXRDb25uZWN0aW9uLCB0aGlzT2JqLCB0KQogIGdldENvbm5lY3Rpb24gPSBvYmogPT4KICBmdW5jdGlvbihwYXJhbXMgPSB7fSkKKHJlc29sdmUsIHJlamVjdCkgPT4KICByID0+CiAgZnVuY3Rpb24ocGFyYW1zID0ge30pClNlcmlhbGl6ZVZhbHVlKHZhbHVlLCBzb3VyY2UgPSBmYWxzZSkKRGVzZXJpYWxpemVTeW1ib2xzKG5hbWVzKQogIG4gPT4KICBuID0+CkRlc2VyaWFsaXplVmFsdWUoZGVzYykKUlBDQ29ubmVjdCA9ICh1cmwsIHNlcnZpY2UgPSBSUENDbGllbnQpID0+ClJQQ0xpc3RlbiA9ICh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIpID0+AAAAAAAAAAC4AAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-client.c",
						"symkeys":
						[
							[
								203,
								218
							],
							[
								623,
								635
							],
							[
								811,
								823
							],
							[
								972,
								986
							],
							[
								1619,
								1633
							],
							[
								2444,
								2460
							],
							[
								5343,
								5358
							]
						],
						"symlist":
						[
							"client_callback",
							"close_status",
							"close_reason",
							"sslcert_client",
							"connect_client",
							"minnet_ws_client",
							"client_callback"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC4AAAASXNDb25zb2xlSGFuZGxlCklzU29ja2V0SGFuZGxlClBGSUxFX1BJUEVfTE9DQUxfSU5GT1JNQVRJT04KUElPX1NUQVRVU19CTE9DSwpQRklMRV9JTkZPUk1BVElPTl9DTEFTUwogIHdpbmRvd3NfY29tcHV0ZV9yZXZlbnRzCiAgd2luZG93c19jb21wdXRlX3JldmVudHNfc29ja2V0CiAgY29tcHV0ZV9yZXZlbnRzCiAgcG9sbAAAAAAAAAAAdgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server-http.c",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB2AAAAICBjbGllbnRfY2FsbGJhY2sKICBjbG9zZV9zdGF0dXMKICBjbG9zZV9yZWFzb24KICBzc2xjZXJ0X2NsaWVudAogIGNvbm5lY3RfY2xpZW50CiAgbWlubmV0X3dzX2NsaWVudAogIGNsaWVudF9jYWxsYmFjawAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server.c",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/poll.c",
						"symkeys":
						[
							[
								2682,
								2697
							],
							[
								2779,
								2793
							],
							[
								3521,
								3549
							],
							[
								3685,
								3701
							],
							[
								3800,
								3823
							],
							[
								4126,
								4149
							],
							[
								7069,
								7099
							],
							[
								8168,
								8183
							],
							[
								9786,
								9790
							]
						],
						"symlist":
						[
							"IsConsoleHandle",
							"IsSocketHandle",
							"PFILE_PIPE_LOCAL_INFORMATION",
							"PIO_STATUS_BLOCK",
							"PFILE_INFORMATION_CLASS",
							"windows_compute_revents",
							"windows_compute_revents_socket",
							"compute_revents",
							"poll"
						]
					},
					"AQAAAAAAAAAAAAAAuAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-client.c",
						"symkeys":
						[
							[
								203,
								218
							],
							[
								623,
								635
							],
							[
								811,
								823
							],
							[
								972,
								986
							],
							[
								1619,
								1633
							],
							[
								2444,
								2460
							],
							[
								5343,
								5358
							]
						],
						"symlist":
						[
							"client_callback",
							"close_status",
							"close_reason",
							"sslcert_client",
							"connect_client",
							"minnet_ws_client",
							"client_callback"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC4AAAASXNDb25zb2xlSGFuZGxlCklzU29ja2V0SGFuZGxlClBGSUxFX1BJUEVfTE9DQUxfSU5GT1JNQVRJT04KUElPX1NUQVRVU19CTE9DSwpQRklMRV9JTkZPUk1BVElPTl9DTEFTUwogIHdpbmRvd3NfY29tcHV0ZV9yZXZlbnRzCiAgd2luZG93c19jb21wdXRlX3JldmVudHNfc29ja2V0CiAgY29tcHV0ZV9yZXZlbnRzCiAgcG9sbAAAAAAAAAAAdgAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/event-emitter.js",
						"symkeys":
						[
							[
								6,
								37
							],
							[
								100,
								112
							],
							[
								134,
								147
							],
							[
								154,
								173
							],
							[
								293,
								324
							],
							[
								586,
								611
							],
							[
								754,
								773
							],
							[
								859,
								879
							],
							[
								1019,
								1040
							],
							[
								1053,
								1076
							]
						],
						"symlist":
						[
							"indexOf = (haystack, needle) =>",
							"EventEmitter",
							"constructor()",
							"on(event, listener)",
							"removeListener(event, listener)",
							"removeAllListeners(event)",
							"rawListeners(event)",
							"emit(event, ...args)",
							"once(event, listener)",
							"callback = (...args) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB2AAAAICBjbGllbnRfY2FsbGJhY2sKICBjbG9zZV9zdGF0dXMKICBjbG9zZV9yZWFzb24KICBzc2xjZXJ0X2NsaWVudAogIGNvbm5lY3RfY2xpZW50CiAgbWlubmV0X3dzX2NsaWVudAogIGNsaWVudF9jYWxsYmFjawAAAAAAAAAA8QAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-client.c",
						"symkeys":
						[
							[
								203,
								218
							],
							[
								623,
								635
							],
							[
								811,
								823
							],
							[
								972,
								986
							],
							[
								1619,
								1633
							],
							[
								2444,
								2460
							],
							[
								5343,
								5358
							]
						],
						"symlist":
						[
							"client_callback",
							"close_status",
							"close_reason",
							"sslcert_client",
							"connect_client",
							"minnet_ws_client",
							"client_callback"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADxAAAAICBpbmRleE9mID0gKGhheXN0YWNrLCBuZWVkbGUpID0+CkV2ZW50RW1pdHRlcgogIGNvbnN0cnVjdG9yKCkKICBvbihldmVudCwgbGlzdGVuZXIpCiAgcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyKQogIHJlbW92ZUFsbExpc3RlbmVycyhldmVudCkKICByYXdMaXN0ZW5lcnMoZXZlbnQpCiAgZW1pdChldmVudCwgLi4uYXJncykKICBvbmNlKGV2ZW50LCBsaXN0ZW5lcikKICBjYWxsYmFjayA9ICguLi5hcmdzKSA9PgAAAAAAAAAAdgAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					8,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/rpc.js",
						"symkeys":
						[
							[
								99,
								131
							],
							[
								188,
								206
							],
							[
								258,
								276
							],
							[
								311,
								331
							],
							[
								380,
								399
							],
							[
								405,
								414
							],
							[
								425,
								439
							],
							[
								468,
								489
							],
							[
								864,
								903
							],
							[
								1145,
								1168
							],
							[
								1179,
								1182
							],
							[
								1199,
								1226
							],
							[
								1369,
								1375
							],
							[
								1390,
								1419
							],
							[
								1424,
								1430
							],
							[
								1470,
								1525
							],
							[
								1535,
								1545
							],
							[
								1562,
								1586
							],
							[
								1862,
								1880
							],
							[
								1896,
								1937
							],
							[
								1942,
								1960
							],
							[
								2012,
								2139
							],
							[
								2142,
								2177
							],
							[
								2190,
								2202
							],
							[
								2290,
								2304
							],
							[
								2487,
								2502
							],
							[
								2630,
								2644
							],
							[
								2768,
								2786
							],
							[
								2901,
								2914
							],
							[
								3092,
								3122
							],
							[
								3141,
								3159
							],
							[
								3171,
								3186
							],
							[
								3198,
								3216
							],
							[
								3296,
								3314
							],
							[
								3359,
								3366
							],
							[
								3427,
								3433
							],
							[
								3475,
								3487
							],
							[
								3497,
								3509
							],
							[
								3526,
								3547
							],
							[
								3589,
								3601
							],
							[
								3658,
								3670
							],
							[
								3733,
								3767
							],
							[
								3807,
								3819
							],
							[
								3888,
								3900
							],
							[
								3962,
								3987
							],
							[
								4030,
								4042
							],
							[
								4065,
								4077
							],
							[
								4113,
								4132
							],
							[
								4341,
								4347
							],
							[
								4389,
								4394
							],
							[
								4417,
								4438
							],
							[
								4556,
								4591
							],
							[
								4707,
								4711
							],
							[
								4738,
								4747
							],
							[
								4800,
								4825
							],
							[
								4830,
								4858
							],
							[
								5088,
								5097
							],
							[
								5199,
								5232
							],
							[
								5237,
								5247
							],
							[
								5341,
								5351
							],
							[
								5437,
								5455
							],
							[
								5566,
								5583
							],
							[
								5620,
								5629
							],
							[
								5666,
								5716
							],
							[
								5833,
								5845
							],
							[
								6306,
								6320
							],
							[
								6623,
								6644
							],
							[
								6837,
								6851
							],
							[
								7404,
								7408
							],
							[
								7502,
								7522
							],
							[
								7628,
								7643
							],
							[
								7821,
								7833
							],
							[
								7888,
								7902
							],
							[
								8027,
								8045
							],
							[
								8172,
								8181
							],
							[
								8271,
								8287
							],
							[
								8657,
								8690
							],
							[
								9195,
								9239
							],
							[
								9347,
								9365
							],
							[
								9395,
								9401
							],
							[
								9486,
								9520
							],
							[
								9776,
								9787
							],
							[
								9845,
								9861
							],
							[
								9942,
								9962
							],
							[
								10357,
								10369
							],
							[
								10576,
								10596
							],
							[
								10691,
								10711
							],
							[
								10875,
								10899
							],
							[
								11025,
								11043
							],
							[
								11336,
								11376
							],
							[
								11394,
								11425
							],
							[
								11755,
								11761
							],
							[
								11926,
								11946
							],
							[
								12042,
								12082
							],
							[
								12242,
								12251
							],
							[
								12281,
								12289
							],
							[
								12467,
								12507
							],
							[
								12568,
								12575
							],
							[
								12594,
								12601
							],
							[
								12670,
								12710
							],
							[
								12775,
								12782
							],
							[
								12860,
								12900
							],
							[
								12965,
								12972
							],
							[
								13012,
								13018
							],
							[
								13085,
								13089
							],
							[
								13144,
								13148
							],
							[
								13220,
								13251
							],
							[
								13514,
								13552
							],
							[
								13636,
								13645
							],
							[
								14121,
								14129
							],
							[
								14165,
								14185
							],
							[
								14766,
								14775
							],
							[
								15085,
								15094
							],
							[
								15494,
								15499
							],
							[
								15675,
								15680
							],
							[
								15766,
								15790
							],
							[
								16043,
								16064
							],
							[
								16090,
								16109
							],
							[
								16139,
								16151
							],
							[
								16195,
								16200
							],
							[
								16274,
								16283
							],
							[
								16591,
								16651
							],
							[
								17261,
								17274
							],
							[
								17451,
								17459
							],
							[
								17577,
								17589
							],
							[
								17646,
								17662
							],
							[
								18088,
								18102
							],
							[
								18322,
								18356
							],
							[
								18655,
								18660
							],
							[
								18755,
								18796
							],
							[
								19090,
								19105
							],
							[
								19566,
								19576
							],
							[
								19613,
								19623
							],
							[
								19692,
								19701
							],
							[
								19759,
								19797
							],
							[
								19930,
								19948
							],
							[
								19978,
								19993
							],
							[
								20020,
								20039
							],
							[
								20074,
								20093
							],
							[
								20128,
								20145
							],
							[
								20178,
								20198
							],
							[
								20290,
								20317
							],
							[
								20416,
								20452
							],
							[
								20610,
								20656
							],
							[
								20755,
								20786
							],
							[
								21343,
								21353
							],
							[
								21487,
								21539
							],
							[
								21558,
								21613
							],
							[
								21932,
								22003
							],
							[
								22065,
								22072
							],
							[
								22163,
								22170
							],
							[
								22257,
								22339
							],
							[
								22881,
								22911
							],
							[
								23279,
								23314
							],
							[
								23327,
								23367
							],
							[
								23546,
								23602
							],
							[
								23831,
								23858
							],
							[
								23869,
								23884
							],
							[
								23897,
								23927
							],
							[
								24184,
								24280
							],
							[
								24306,
								24324
							],
							[
								24572,
								24590
							],
							[
								24693,
								24706
							],
							[
								25290,
								25323
							],
							[
								25392,
								25422
							],
							[
								25461,
								25465
							],
							[
								25552,
								25579
							],
							[
								25618,
								25626
							],
							[
								25706,
								25732
							],
							[
								25778,
								25807
							],
							[
								25864,
								25909
							],
							[
								26009,
								26014
							],
							[
								26114,
								26148
							],
							[
								26265,
								26325
							],
							[
								26540,
								26562
							],
							[
								26728,
								26750
							],
							[
								26848,
								26868
							],
							[
								26900,
								26905
							],
							[
								27034,
								27061
							],
							[
								27293,
								27340
							],
							[
								28158,
								28193
							],
							[
								28215,
								28219
							],
							[
								28251,
								28255
							],
							[
								28277,
								28309
							],
							[
								28443,
								28485
							],
							[
								28538,
								28579
							]
						],
						"symlist":
						[
							".LogWrap = function LogWrap(log)",
							"log = (...args) =>",
							"log = (...args) =>",
							" (value, ...args) =>",
							"VfnAdapter = vfn =>",
							"get: k =>",
							"set: (k, v) =>",
							"VfnDecorator = vfn =>",
							".GetClasses = function* GetClasses(obj)",
							" function Mapper(map = ",
							"())",
							"self = function(key, value)",
							"Mapper",
							"Mapper.prototype = function()",
							"Mapper",
							" function DefaultConstructor(mapper, fn = (...args) => ",
							"(...args))",
							"self = function(...args)",
							"DefaultConstructor",
							"DefaultConstructor.prototype = function()",
							"DefaultConstructor",
							" function EventLogger(instance = {}, callback = (name, event, thisObj) => console.log('EventLogger', { name, event, thisObj }))",
							" function WrapEvent(handler, name)",
							" function(e)",
							"get(obj, prop)",
							"MessageReceiver",
							"onmessage(msg)",
							"MessageTransmitter",
							"sendMessage()",
							" function MessageTransceiver()",
							"MessageTransceiver",
							"MessageReceiver",
							"MessageTransmitter",
							"value: instance =>",
							"ctor =>",
							"none()",
							"encode: v =>",
							"decode: v =>",
							"json(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".js = function js(verbose = false)",
							"encode: v =>",
							"decode: v =>",
							".bjson = function bjson()",
							"encode: v =>",
							"decode: v =>",
							" function RPCApi(c)",
							"RPCApi",
							" o =>",
							" function RPCProxy(c)",
							" function RPCObject(id, connection)",
							"r =>",
							"RPCObject",
							" function RPCFactory(api)",
							"async function Factory(opts)",
							"RPCObject",
							"RPCFactory.prototype = function()",
							"RPCFactory",
							"Connection",
							"static equal(a, b)",
							"static get last()",
							"makeSeq()",
							"constructor(socket, instance, log, codec = 'none')",
							"log(...args)",
							"error(message)",
							"close(status, reason)",
							"onmessage(msg)",
							"r =>",
							"processMessage(data)",
							"onconnect(sock)",
							"onpong(data)",
							"onerror(error)",
							"onclose(code, why)",
							"cleanup()",
							"sendMessage(obj)",
							"sendCommand(command, params = {})",
							"static getCallbacks(instance, verbosity = 0)",
							" (msg, ...args) =>",
							" () =>",
							"handle = (sock, event, ...args) =>",
							"then: fn =>",
							"remove = sock =>",
							"onConnect(sock, req)",
							"onOpen(sock)",
							"onMessage(sock, msg)",
							"onError(sock, error)",
							"onClose(sock, code, why)",
							"onPong(sock, data)",
							"function RPCServerEndpoint(classes = {})",
							"new({ class: name, args = [] })",
							"list()",
							"({ id }, respond) =>",
							"({ obj, method, args = [] }, respond) =>",
							"result =>",
							"error =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"({ obj, enumerable = true }, respond) =>",
							" obj =>",
							"sym =>",
							"v =>",
							"v =>",
							"({ obj, property }, respond) =>",
							"({ obj, property, value }, respond) =>",
							"RPCServer",
							"makeId()",
							"processMessage(data)",
							"RPCServer",
							"RPCClient",
							" e =>",
							"get()",
							"processMessage(response)",
							"command(name, params)",
							"(accept, reject) =>",
							" response =>",
							" e =>",
							"RPCClient",
							" function RPCSocket(url, service = RPCServer, verbosity = 1)",
							" (...args) =>",
							"get fd()",
							"get socket()",
							"get connection()",
							"register(ctor)",
							"listen(new_ws, os = globalThis.os)",
							"() =>",
							"async connect(new_ws, os = globalThis.os)",
							"get connected()",
							"get list()",
							"get last()",
							"RPCSocket",
							"function MakeWebSocket(url, callbacks)",
							".onconnect = () =>",
							".onopen = () =>",
							".onerror = error =>",
							".onmessage = msg =>",
							".onpong = pong =>",
							".onclose = reason =>",
							" function isThenable(value)",
							" function hasHandler(obj, eventName)",
							" function callHandler(obj, eventName, ...args)",
							" function parseURL(url_or_port)",
							"toString()",
							" function GetProperties(obj, method = obj => Object.",
							"(obj), pred = (obj, depth) => obj !== Object.prototype)",
							" function GetKeys(obj, pred = (obj, depth) => obj !== Object.prototype)",
							" obj =>",
							" obj =>",
							" function getPropertyDescriptors(obj, merge = true, pred = (proto, depth) => true)",
							" function define(obj, ...args)",
							" function setHandlers(os, handlers)",
							".onFd = function(fd, readable, writable)",
							" function statusResponse(success, result_or_error, data)",
							" function objectCommand(fn)",
							" function(data)",
							"respond = (success, result) =>",
							" function MakeListCommand(pred = v => typeof v != 'function', defaults = { maxDepth: Infinity })",
							"(data, respond) =>",
							" (proto, depth) =>",
							"(acc, key) =>",
							" function getPrototypeName(proto)",
							"function DeserializeEntries(e)",
							"a =>",
							"function DeserializeKeys(e)",
							"([k]) =>",
							"function DeserializeMap(e)",
							"function DeserializeObject(e)",
							"function ForwardMethods(e, ret = {}, thisObj)",
							" o =>",
							"function ForwardObject(e, thisObj)",
							"function MakeCommandFunction(cmd, getConnection, thisObj, t)",
							"getConnection = obj =>",
							" function(params = {})",
							"(resolve, reject) =>",
							" r =>",
							"async function(params = {})",
							" function SerializeValue(value, source = false)",
							" function DeserializeSymbols(names)",
							"n =>",
							"n =>",
							" function DeserializeValue(desc)",
							"RPCConnect = (url, service = RPCClient) =>",
							"RPCListen = (url, service = RPCServer) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB2AAAAICBjbGllbnRfY2FsbGJhY2sKICBjbG9zZV9zdGF0dXMKICBjbG9zZV9yZWFzb24KICBzc2xjZXJ0X2NsaWVudAogIGNvbm5lY3RfY2xpZW50CiAgbWlubmV0X3dzX2NsaWVudAogIGNsaWVudF9jYWxsYmFjawAAAAAAAAAACxAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					9,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-client.c",
						"symkeys":
						[
							[
								203,
								218
							],
							[
								623,
								635
							],
							[
								811,
								823
							],
							[
								972,
								986
							],
							[
								1619,
								1633
							],
							[
								2444,
								2460
							],
							[
								5343,
								5358
							]
						],
						"symlist":
						[
							"client_callback",
							"close_status",
							"close_reason",
							"sslcert_client",
							"connect_client",
							"minnet_ws_client",
							"client_callback"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAALEAAAICAuTG9nV3JhcCA9IGZ1bmN0aW9uIExvZ1dyYXAobG9nKQogIGxvZyA9ICguLi5hcmdzKSA9PgogIGxvZyA9ICguLi5hcmdzKSA9PgogICh2YWx1ZSwgLi4uYXJncykgPT4KVmZuQWRhcHRlciA9IHZmbiA9PgogIGdldDogayA9PgogIHNldDogKGssIHYpID0+ClZmbkRlY29yYXRvciA9IHZmbiA9PgogIC5HZXRDbGFzc2VzID0gZnVuY3Rpb24qR2V0Q2xhc3NlcyhvYmopCk1hcHBlcihtYXAgPSAKKCkpCiAgc2VsZiA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpCk1hcHBlcgpNYXBwZXIucHJvdG90eXBlID0gZnVuY3Rpb24oKQpNYXBwZXIKRGVmYXVsdENvbnN0cnVjdG9yKG1hcHBlciwgZm4gPSAoLi4uYXJncykgPT4gCiguLi5hcmdzKSkKICBzZWxmID0gZnVuY3Rpb24oLi4uYXJncykKRGVmYXVsdENvbnN0cnVjdG9yCkRlZmF1bHRDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBmdW5jdGlvbigpCkRlZmF1bHRDb25zdHJ1Y3RvcgpFdmVudExvZ2dlcihpbnN0YW5jZSA9IHt9LCBjYWxsYmFjayA9IChuYW1lLCBldmVudCwgdGhpc09iaikgPT4gY29uc29sZS5sb2coJ0V2ZW50TG9nZ2VyJywgeyBuYW1lLCBldmVudCwgdGhpc09iaiB9KSkKV3JhcEV2ZW50KGhhbmRsZXIsIG5hbWUpCiAgZnVuY3Rpb24oZSkKICBnZXQob2JqLCBwcm9wKQpNZXNzYWdlUmVjZWl2ZXIKICBvbm1lc3NhZ2UobXNnKQpNZXNzYWdlVHJhbnNtaXR0ZXIKICBzZW5kTWVzc2FnZSgpCk1lc3NhZ2VUcmFuc2NlaXZlcigpCk1lc3NhZ2VUcmFuc2NlaXZlcgpNZXNzYWdlUmVjZWl2ZXIKTWVzc2FnZVRyYW5zbWl0dGVyCiAgdmFsdWU6IGluc3RhbmNlID0+CiAgY3RvciA9PgogIG5vbmUoKQogIGVuY29kZTogdiA9PgogIGRlY29kZTogdiA9PgogIGpzb24odmVyYm9zZSA9IGZhbHNlKQogIGVuY29kZTogdiA9PgogIGRlY29kZTogdiA9PgogIC5qcyA9IGZ1bmN0aW9uIGpzKHZlcmJvc2UgPSBmYWxzZSkKICBlbmNvZGU6IHYgPT4KICBkZWNvZGU6IHYgPT4KICAuYmpzb24gPSBmdW5jdGlvbiBianNvbigpCiAgZW5jb2RlOiB2ID0+CiAgZGVjb2RlOiB2ID0+ClJQQ0FwaShjKQpSUENBcGkKICBvID0+ClJQQ1Byb3h5KGMpClJQQ09iamVjdChpZCwgY29ubmVjdGlvbikKICByID0+ClJQQ09iamVjdApSUENGYWN0b3J5KGFwaSkKRmFjdG9yeShvcHRzKQpSUENPYmplY3QKUlBDRmFjdG9yeS5wcm90b3R5cGUgPSBmdW5jdGlvbigpClJQQ0ZhY3RvcnkKQ29ubmVjdGlvbgogIHN0YXRpYyBlcXVhbChhLCBiKQogIHN0YXRpYyBnZXQgbGFzdCgpCiAgbWFrZVNlcSgpCiAgY29uc3RydWN0b3Ioc29ja2V0LCBpbnN0YW5jZSwgbG9nLCBjb2RlYyA9ICdub25lJykKICBsb2coLi4uYXJncykKICBlcnJvcihtZXNzYWdlKQogIGNsb3NlKHN0YXR1cywgcmVhc29uKQogIG9ubWVzc2FnZShtc2cpCiAgciA9PgogIHByb2Nlc3NNZXNzYWdlKGRhdGEpCiAgb25jb25uZWN0KHNvY2spCiAgb25wb25nKGRhdGEpCiAgb25lcnJvcihlcnJvcikKICBvbmNsb3NlKGNvZGUsIHdoeSkKICBjbGVhbnVwKCkKICBzZW5kTWVzc2FnZShvYmopCiAgc2VuZENvbW1hbmQoY29tbWFuZCwgcGFyYW1zID0ge30pCiAgc3RhdGljIGdldENhbGxiYWNrcyhpbnN0YW5jZSwgdmVyYm9zaXR5ID0gMCkKICAobXNnLCAuLi5hcmdzKSA9PgogICgpID0+CiAgaGFuZGxlID0gKHNvY2ssIGV2ZW50LCAuLi5hcmdzKSA9PgogIHRoZW46IGZuID0+CiAgcmVtb3ZlID0gc29jayA9PgogIG9uQ29ubmVjdChzb2NrLCByZXEpCiAgb25PcGVuKHNvY2spCiAgb25NZXNzYWdlKHNvY2ssIG1zZykKICBvbkVycm9yKHNvY2ssIGVycm9yKQogIG9uQ2xvc2Uoc29jaywgY29kZSwgd2h5KQogIG9uUG9uZyhzb2NrLCBkYXRhKQpSUENTZXJ2ZXJFbmRwb2ludChjbGFzc2VzID0ge30pCiAgbmV3KHsgY2xhc3M6IG5hbWUsIGFyZ3MgPSBbXSB9KQogIGxpc3QoKQooeyBpZCB9LCByZXNwb25kKSA9PgooeyBvYmosIG1ldGhvZCwgYXJncyA9IFtdIH0sIHJlc3BvbmQpID0+CiAgcmVzdWx0ID0+CiAgZXJyb3IgPT4KKHsgb2JqLCBlbnVtZXJhYmxlID0gdHJ1ZSB9LCByZXNwb25kKSA9PgogIG9iaiA9PgogIG9iaiA9PgooeyBvYmosIGVudW1lcmFibGUgPSB0cnVlIH0sIHJlc3BvbmQpID0+CiAgb2JqID0+Cih7IG9iaiwgZW51bWVyYWJsZSA9IHRydWUgfSwgcmVzcG9uZCkgPT4KICBvYmogPT4KICBzeW0gPT4KICB2ID0+CiAgdiA9PgooeyBvYmosIHByb3BlcnR5IH0sIHJlc3BvbmQpID0+Cih7IG9iaiwgcHJvcGVydHksIHZhbHVlIH0sIHJlc3BvbmQpID0+ClJQQ1NlcnZlcgogIG1ha2VJZCgpCiAgcHJvY2Vzc01lc3NhZ2UoZGF0YSkKUlBDU2VydmVyClJQQ0NsaWVudAogIGUgPT4KICBnZXQoKQogIHByb2Nlc3NNZXNzYWdlKHJlc3BvbnNlKQogIGNvbW1hbmQobmFtZSwgcGFyYW1zKQooYWNjZXB0LCByZWplY3QpID0+CiAgcmVzcG9uc2UgPT4KICBlID0+ClJQQ0NsaWVudApSUENTb2NrZXQodXJsLCBzZXJ2aWNlID0gUlBDU2VydmVyLCB2ZXJib3NpdHkgPSAxKQogICguLi5hcmdzKSA9PgogIGdldCBmZCgpCiAgZ2V0IHNvY2tldCgpCiAgZ2V0IGNvbm5lY3Rpb24oKQogIHJlZ2lzdGVyKGN0b3IpCiAgbGlzdGVuKG5ld193cywgb3MgPSBnbG9iYWxUaGlzLm9zKQooKSA9PgogIGNvbm5lY3QobmV3X3dzLCBvcyA9IGdsb2JhbFRoaXMub3MpCiAgZ2V0IGNvbm5lY3RlZCgpCiAgZ2V0IGxpc3QoKQogIGdldCBsYXN0KCkKUlBDU29ja2V0Ck1ha2VXZWJTb2NrZXQodXJsLCBjYWxsYmFja3MpCiAgLm9uY29ubmVjdCA9ICgpID0+CiAgLm9ub3BlbiA9ICgpID0+CiAgLm9uZXJyb3IgPSBlcnJvciA9PgogIC5vbm1lc3NhZ2UgPSBtc2cgPT4KICAub25wb25nID0gcG9uZyA9PgogIC5vbmNsb3NlID0gcmVhc29uID0+CiAgaXNUaGVuYWJsZSh2YWx1ZSkKICBoYXNIYW5kbGVyKG9iaiwgZXZlbnROYW1lKQogIGNhbGxIYW5kbGVyKG9iaiwgZXZlbnROYW1lLCAuLi5hcmdzKQogIHBhcnNlVVJMKHVybF9vcl9wb3J0KQogIHRvU3RyaW5nKCkKR2V0UHJvcGVydGllcyhvYmosIG1ldGhvZCA9IG9iaiA9PiBPYmplY3QuCihvYmopLCBwcmVkID0gKG9iaiwgZGVwdGgpID0+IG9iaiAhPT0gT2JqZWN0LnByb3RvdHlwZSkKR2V0S2V5cyhvYmosIHByZWQgPSAob2JqLCBkZXB0aCkgPT4gb2JqICE9PSBPYmplY3QucHJvdG90eXBlKQogIG9iaiA9PgogIG9iaiA9PgogIGdldFByb3BlcnR5RGVzY3JpcHRvcnMob2JqLCBtZXJnZSA9IHRydWUsIHByZWQgPSAocHJvdG8sIGRlcHRoKSA9PiB0cnVlKQogIGRlZmluZShvYmosIC4uLmFyZ3MpCiAgc2V0SGFuZGxlcnMob3MsIGhhbmRsZXJzKQogIC5vbkZkID0gZnVuY3Rpb24oZmQsIHJlYWRhYmxlLCB3cml0YWJsZSkKICBzdGF0dXNSZXNwb25zZShzdWNjZXNzLCByZXN1bHRfb3JfZXJyb3IsIGRhdGEpCiAgb2JqZWN0Q29tbWFuZChmbikKICBmdW5jdGlvbihkYXRhKQogIHJlc3BvbmQgPSAoc3VjY2VzcywgcmVzdWx0KSA9PgpNYWtlTGlzdENvbW1hbmQocHJlZCA9IHYgPT4gdHlwZW9mIHYgIT0gJ2Z1bmN0aW9uJywgZGVmYXVsdHMgPSB7IG1heERlcHRoOiBJbmZpbml0eSB9KQooZGF0YSwgcmVzcG9uZCkgPT4KICAocHJvdG8sIGRlcHRoKSA9PgooYWNjLCBrZXkpID0+CiAgZ2V0UHJvdG90eXBlTmFtZShwcm90bykKRGVzZXJpYWxpemVFbnRyaWVzKGUpCiAgYSA9PgpEZXNlcmlhbGl6ZUtleXMoZSkKKFtrXSkgPT4KRGVzZXJpYWxpemVNYXAoZSkKRGVzZXJpYWxpemVPYmplY3QoZSkKRm9yd2FyZE1ldGhvZHMoZSwgcmV0ID0ge30sIHRoaXNPYmopCiAgbyA9PgpGb3J3YXJkT2JqZWN0KGUsIHRoaXNPYmopCk1ha2VDb21tYW5kRnVuY3Rpb24oY21kLCBnZXRDb25uZWN0aW9uLCB0aGlzT2JqLCB0KQogIGdldENvbm5lY3Rpb24gPSBvYmogPT4KICBmdW5jdGlvbihwYXJhbXMgPSB7fSkKKHJlc29sdmUsIHJlamVjdCkgPT4KICByID0+CiAgZnVuY3Rpb24ocGFyYW1zID0ge30pClNlcmlhbGl6ZVZhbHVlKHZhbHVlLCBzb3VyY2UgPSBmYWxzZSkKRGVzZXJpYWxpemVTeW1ib2xzKG5hbWVzKQogIG4gPT4KICBuID0+CkRlc2VyaWFsaXplVmFsdWUoZGVzYykKUlBDQ29ubmVjdCA9ICh1cmwsIHNlcnZpY2UgPSBSUENDbGllbnQpID0+ClJQQ0xpc3RlbiA9ICh1cmwsIHNlcnZpY2UgPSBSUENTZXJ2ZXIpID0+AAAAAAAAAAB2AAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					10,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/CMakeLists.txt",
						"symkeys":
						[
							[
								59,
								73
							],
							[
								302,
								312
							],
							[
								540,
								560
							],
							[
								657,
								681
							],
							[
								716,
								740
							],
							[
								778,
								802
							],
							[
								841,
								865
							],
							[
								954,
								970
							],
							[
								1633,
								1643
							],
							[
								1671,
								1681
							],
							[
								1915,
								1935
							],
							[
								1982,
								1994
							],
							[
								2044,
								2056
							],
							[
								2087,
								2099
							],
							[
								2136,
								2152
							],
							[
								2156,
								2172
							],
							[
								2321,
								2333
							],
							[
								2337,
								2355
							],
							[
								2431,
								2443
							],
							[
								2446,
								2466
							],
							[
								2669,
								2679
							],
							[
								2877,
								2901
							],
							[
								2933,
								2942
							],
							[
								2993,
								3002
							],
							[
								3096,
								3120
							],
							[
								3152,
								3161
							],
							[
								3302,
								3326
							],
							[
								3838,
								3850
							],
							[
								3873,
								3889
							],
							[
								3893,
								3917
							],
							[
								3936,
								3952
							],
							[
								3956,
								3980
							],
							[
								4018,
								4042
							],
							[
								4094,
								4106
							],
							[
								4115,
								4127
							],
							[
								4131,
								4143
							],
							[
								4727,
								4746
							],
							[
								4772,
								4791
							],
							[
								4795,
								4814
							],
							[
								4871,
								4890
							],
							[
								5001,
								5020
							],
							[
								5048,
								5067
							],
							[
								5071,
								5090
							],
							[
								5149,
								5168
							],
							[
								5248,
								5272
							],
							[
								5354,
								5380
							],
							[
								5384,
								5404
							],
							[
								5427,
								5450
							],
							[
								5454,
								5470
							],
							[
								5474,
								5494
							],
							[
								5498,
								5518
							],
							[
								5522,
								5539
							],
							[
								5609,
								5628
							],
							[
								5898,
								5916
							],
							[
								5927,
								5948
							],
							[
								5994,
								6002
							],
							[
								6108,
								6132
							],
							[
								6247,
								6260
							],
							[
								6333,
								6357
							],
							[
								6396,
								6409
							],
							[
								6425,
								6443
							],
							[
								6447,
								6471
							],
							[
								6493,
								6508
							],
							[
								6512,
								6525
							],
							[
								6539,
								6558
							],
							[
								6634,
								6653
							],
							[
								6666,
								6687
							],
							[
								6693,
								6712
							],
							[
								6716,
								6737
							],
							[
								7192,
								7216
							],
							[
								7327,
								7339
							],
							[
								7410,
								7434
							],
							[
								7472,
								7484
							],
							[
								7500,
								7514
							],
							[
								7518,
								7531
							],
							[
								7545,
								7563
							],
							[
								7636,
								7654
							],
							[
								7667,
								7688
							],
							[
								7694,
								7712
							],
							[
								7716,
								7737
							],
							[
								7799,
								7823
							],
							[
								8377,
								8396
							],
							[
								8407,
								8426
							],
							[
								8430,
								8446
							],
							[
								8450,
								8469
							],
							[
								8501,
								8520
							],
							[
								8524,
								8549
							],
							[
								8553,
								8569
							],
							[
								8573,
								8592
							],
							[
								8613,
								8632
							],
							[
								8657,
								8676
							],
							[
								8680,
								8706
							],
							[
								8710,
								8726
							],
							[
								8730,
								8749
							],
							[
								8773,
								8792
							],
							[
								8840,
								8871
							],
							[
								8907,
								8918
							],
							[
								9266,
								9272
							],
							[
								9278,
								9282
							],
							[
								9317,
								9320
							],
							[
								9329,
								9335
							],
							[
								9339,
								9342
							],
							[
								9351,
								9355
							],
							[
								9361,
								9364
							],
							[
								9374,
								9379
							],
							[
								9383,
								9386
							],
							[
								9494,
								9513
							],
							[
								9622,
								9647
							],
							[
								9662,
								9681
							],
							[
								9685,
								9701
							],
							[
								9710,
								9727
							],
							[
								9731,
								9750
							],
							[
								9754,
								9776
							],
							[
								9866,
								9892
							],
							[
								9896,
								9912
							],
							[
								9985,
								10004
							],
							[
								10008,
								10024
							],
							[
								10028,
								10047
							],
							[
								10132,
								10157
							],
							[
								10161,
								10180
							],
							[
								10184,
								10203
							],
							[
								10249,
								10274
							],
							[
								10278,
								10297
							],
							[
								10470,
								10495
							],
							[
								10549,
								10574
							],
							[
								10593,
								10618
							],
							[
								10671,
								10690
							],
							[
								10733,
								10748
							],
							[
								10752,
								10775
							],
							[
								10779,
								10795
							],
							[
								10799,
								10819
							],
							[
								10823,
								10843
							],
							[
								10847,
								10864
							],
							[
								10868,
								10880
							],
							[
								10906,
								10923
							],
							[
								10927,
								10943
							],
							[
								10993,
								11016
							],
							[
								11035,
								11052
							],
							[
								11068,
								11080
							],
							[
								11099,
								11118
							],
							[
								11122,
								11144
							],
							[
								11209,
								11234
							],
							[
								11253,
								11272
							],
							[
								11288,
								11304
							],
							[
								11323,
								11342
							],
							[
								11386,
								11406
							],
							[
								11410,
								11430
							],
							[
								11434,
								11454
							],
							[
								11545,
								11565
							],
							[
								11740,
								11764
							],
							[
								11788,
								11809
							]
						],
						"symlist":
						[
							"DISABLE_WERROR",
							"LOCAL_CURL",
							"CMAKE_INSTALL_LIBDIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"SOCKET_LIBRARIES",
							"LOCAL_CURL",
							"LOCAL_CURL",
							"CMAKE_INSTALL_PREFIX",
							"CURL_LIBRARY",
							"CURL_LIBRARY",
							"CURL_LIBRARY",
							"CURL_LIBRARY_DIR",
							"CURL_LIBRARY_DIR",
							"CURL_LIBRARY",
							"CURL_LIBRARY_DEBUG",
							"CURL_LIBRARY",
							"pkgcfg_lib_CURL_curl",
							"BUILD_CURL",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CURL_REPO",
							"CURL_REPO",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CURL_REPO",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CURL_LIBRARY",
							"CURL_LIBRARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CURL_INCLUDE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CURL_LIBRARY",
							"CURL_LIBRARY",
							"CURL_LIBRARY",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_CURRENT_SOURCE_DIR",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"OPENSSL_INCLUDE_DIRS",
							"LIBWEBSOCKETS_LIBRARIES",
							"BROTLI_LIBRARIES",
							"ZLIB_LIBRARY_RELEASE",
							"pkgcfg_lib_CURL_curl",
							"OPENSSL_LIBRARIES",
							"BUILD_LIBWEBSOCKETS",
							"LIBWEBSOCKETS_DEPS",
							"LIBWEBSOCKETS_C_FLAGS",
							"WITH_SSL",
							"CMAKE_CURRENT_SOURCE_DIR",
							"BUILD_MBEDTLS",
							"CMAKE_CURRENT_SOURCE_DIR",
							"MBEDTLS_DEBUG",
							"MBEDTLS_SOURCE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"MBEDTLS_C_FLAGS",
							"CMAKE_C_FLAGS",
							"MBEDTLS_TARGET_NAME",
							"MBEDTLS_TARGET_NAME",
							"LIBWEBSOCKETS_C_FLAGS",
							"MBEDTLS_INCLUDE_DIR",
							"LIBWEBSOCKETS_C_FLAGS",
							"CMAKE_CURRENT_SOURCE_DIR",
							"BUILD_BROTLI",
							"CMAKE_CURRENT_SOURCE_DIR",
							"BROTLI_DEBUG",
							"BROTLI_C_FLAGS",
							"CMAKE_C_FLAGS",
							"BROTLI_TARGET_NAME",
							"BROTLI_TARGET_NAME",
							"LIBWEBSOCKETS_C_FLAGS",
							"BROTLI_INCLUDE_DIR",
							"LIBWEBSOCKETS_C_FLAGS",
							"CMAKE_CURRENT_SOURCE_DIR",
							"OPENSSL_INCLUDE_DIR",
							"CMAKE_INSTALL_RPATH",
							"CURL_LIBRARY_DIR",
							"OPENSSL_LIBRARY_DIR",
							"QUICKJS_LIBRARY_DIR",
							"LIBWEBSOCKETS_LIBRARY_DIR",
							"CURL_LIBRARY_DIR",
							"OPENSSL_LIBRARY_DIR",
							"MBEDTLS_LIBRARY_DIR",
							"QUICKJS_INCLUDE_DIR",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"CURL_INCLUDE_DIR",
							"OPENSSL_INCLUDE_DIR",
							"MBEDTLS_INCLUDE_DIR",
							"CMAKE_POSITION_INDEPENDENT_CODE",
							"DUMP_TARGET",
							"TARGET",
							"PROP",
							"ESC",
							"TARGET",
							"ESC",
							"PROP",
							"ESC",
							"VALUE",
							"ESC",
							"JS_BINDINGS_SOURCES",
							"CMAKE_SHARED_LINKER_FLAGS",
							"CMAKE_INSTALL_RPATH",
							"CURL_LIBRARY_DIR",
							"OPENSSL_LIBRARIES",
							"OPENSSL_SSL_LIBRARY",
							"OPENSSL_CRYPTO_LIBRARY",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"CURL_INCLUDE_DIR",
							"CMAKE_INSTALL_RPATH",
							"CURL_LIBRARY_DIR",
							"MBEDTLS_LIBRARY_DIR",
							"LIBWEBSOCKETS_LIBRARY_DIR",
							"OPENSSL_LIBRARY_DIR",
							"MBEDTLS_LIBRARY_DIR",
							"LIBWEBSOCKETS_LIBRARY_DIR",
							"MBEDTLS_LIBRARY_DIR",
							"LIBWEBSOCKETS_LIBRARY_DIR",
							"LIBWEBSOCKETS_LIBRARY_DIR",
							"LIBWEBSOCKETS_LIBRARY_DIR",
							"QUICKJS_LIBRARY_DIR",
							"QUICKJS_LIBRARY",
							"LIBWEBSOCKETS_LIBRARIES",
							"BROTLI_LIBRARIES",
							"ZLIB_LIBRARY_RELEASE",
							"pkgcfg_lib_CURL_curl",
							"MBEDTLS_LIBRARIES",
							"CURL_LIBRARY",
							"OPENSSL_LIBRARIES",
							"SOCKET_LIBRARIES",
							"LIBWEBSOCKETS_LIBRARIES",
							"MBEDTLS_LIBRARIES",
							"CURL_LIBRARY",
							"OPENSSL_SSL_LIBRARY",
							"OPENSSL_CRYPTO_LIBRARY",
							"LIBWEBSOCKETS_LIBRARY_DIR",
							"MBEDTLS_LIBRARY_DIR",
							"CURL_LIBRARY_DIR",
							"OPENSSL_LIBRARY_DIR",
							"QUICKJS_C_MODULE_DIR",
							"CMAKE_INSTALL_PREFIX",
							"CMAKE_INSTALL_LIBDIR",
							"QUICKJS_C_MODULE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"QUICKJS_JS_MODULE_DIR"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB2AAAAICBjbGllbnRfY2FsbGJhY2sKICBjbG9zZV9zdGF0dXMKICBjbG9zZV9yZWFzb24KICBzc2xjZXJ0X2NsaWVudAogIGNvbm5lY3RfY2xpZW50CiAgbWlubmV0X3dzX2NsaWVudAogIGNsaWVudF9jYWxsYmFjawAAAAAAAAAACQsAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					11,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-client.c",
						"symkeys":
						[
							[
								203,
								218
							],
							[
								623,
								635
							],
							[
								811,
								823
							],
							[
								972,
								986
							],
							[
								1619,
								1633
							],
							[
								2444,
								2460
							],
							[
								5343,
								5358
							]
						],
						"symlist":
						[
							"client_callback",
							"close_status",
							"close_reason",
							"sslcert_client",
							"connect_client",
							"minnet_ws_client",
							"client_callback"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAJCwAARElTQUJMRV9XRVJST1IKTE9DQUxfQ1VSTApDTUFLRV9JTlNUQUxMX0xJQkRJUgpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKQ01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSCkNNQUtFX0NVUlJFTlRfU09VUkNFX0RJUgpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKU09DS0VUX0xJQlJBUklFUwpMT0NBTF9DVVJMCkxPQ0FMX0NVUkwKQ01BS0VfSU5TVEFMTF9QUkVGSVgKQ1VSTF9MSUJSQVJZCkNVUkxfTElCUkFSWQpDVVJMX0xJQlJBUlkKQ1VSTF9MSUJSQVJZX0RJUgpDVVJMX0xJQlJBUllfRElSCkNVUkxfTElCUkFSWQpDVVJMX0xJQlJBUllfREVCVUcKQ1VSTF9MSUJSQVJZCiAgcGtnY2ZnX2xpYl9DVVJMX2N1cmwKQlVJTERfQ1VSTApDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKQ1VSTF9SRVBPCkNVUkxfUkVQTwpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKQ1VSTF9SRVBPCkNNQUtFX0NVUlJFTlRfU09VUkNFX0RJUgpDVVJMX0xJQlJBUlkKQ1VSTF9MSUJSQVJZX0RJUgpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKQ1VSTF9JTkNMVURFX0RJUgpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSCkNVUkxfTElCUkFSWQpDVVJMX0xJQlJBUlkKQ1VSTF9MSUJSQVJZCkNNQUtFX0NfRkxBR1NfREVCVUcKQ01BS0VfQ19GTEFHU19ERUJVRwpDTUFLRV9DX0ZMQUdTX0RFQlVHCkNNQUtFX0NfRkxBR1NfREVCVUcKQ01BS0VfQ19GTEFHU19ERUJVRwpDTUFLRV9DX0ZMQUdTX0RFQlVHCkNNQUtFX0NfRkxBR1NfREVCVUcKQ01BS0VfQ19GTEFHU19ERUJVRwpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKTElCV0VCU09DS0VUU19JTkNMVURFX0RJUlMKT1BFTlNTTF9JTkNMVURFX0RJUlMKTElCV0VCU09DS0VUU19MSUJSQVJJRVMKQlJPVExJX0xJQlJBUklFUwpaTElCX0xJQlJBUllfUkVMRUFTRQogIHBrZ2NmZ19saWJfQ1VSTF9jdXJsCk9QRU5TU0xfTElCUkFSSUVTCkJVSUxEX0xJQldFQlNPQ0tFVFMKTElCV0VCU09DS0VUU19ERVBTCkxJQldFQlNPQ0tFVFNfQ19GTEFHUwpXSVRIX1NTTApDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKQlVJTERfTUJFRFRMUwpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKTUJFRFRMU19ERUJVRwpNQkVEVExTX1NPVVJDRV9ESVIKQ01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSCk1CRURUTFNfQ19GTEFHUwpDTUFLRV9DX0ZMQUdTCk1CRURUTFNfVEFSR0VUX05BTUUKTUJFRFRMU19UQVJHRVRfTkFNRQpMSUJXRUJTT0NLRVRTX0NfRkxBR1MKTUJFRFRMU19JTkNMVURFX0RJUgpMSUJXRUJTT0NLRVRTX0NfRkxBR1MKQ01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSCkJVSUxEX0JST1RMSQpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKQlJPVExJX0RFQlVHCkJST1RMSV9DX0ZMQUdTCkNNQUtFX0NfRkxBR1MKQlJPVExJX1RBUkdFVF9OQU1FCkJST1RMSV9UQVJHRVRfTkFNRQpMSUJXRUJTT0NLRVRTX0NfRkxBR1MKQlJPVExJX0lOQ0xVREVfRElSCkxJQldFQlNPQ0tFVFNfQ19GTEFHUwpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKT1BFTlNTTF9JTkNMVURFX0RJUgpDTUFLRV9JTlNUQUxMX1JQQVRICkNVUkxfTElCUkFSWV9ESVIKT1BFTlNTTF9MSUJSQVJZX0RJUgpRVUlDS0pTX0xJQlJBUllfRElSCkxJQldFQlNPQ0tFVFNfTElCUkFSWV9ESVIKQ1VSTF9MSUJSQVJZX0RJUgpPUEVOU1NMX0xJQlJBUllfRElSCk1CRURUTFNfTElCUkFSWV9ESVIKUVVJQ0tKU19JTkNMVURFX0RJUgpMSUJXRUJTT0NLRVRTX0lOQ0xVREVfRElSUwpDVVJMX0lOQ0xVREVfRElSCk9QRU5TU0xfSU5DTFVERV9ESVIKTUJFRFRMU19JTkNMVURFX0RJUgpDTUFLRV9QT1NJVElPTl9JTkRFUEVOREVOVF9DT0RFCkRVTVBfVEFSR0VUClRBUkdFVApQUk9QCkVTQwpUQVJHRVQKRVNDClBST1AKRVNDClZBTFVFCkVTQwpKU19CSU5ESU5HU19TT1VSQ0VTCkNNQUtFX1NIQVJFRF9MSU5LRVJfRkxBR1MKQ01BS0VfSU5TVEFMTF9SUEFUSApDVVJMX0xJQlJBUllfRElSCk9QRU5TU0xfTElCUkFSSUVTCk9QRU5TU0xfU1NMX0xJQlJBUlkKT1BFTlNTTF9DUllQVE9fTElCUkFSWQpMSUJXRUJTT0NLRVRTX0lOQ0xVREVfRElSUwpDVVJMX0lOQ0xVREVfRElSCkNNQUtFX0lOU1RBTExfUlBBVEgKQ1VSTF9MSUJSQVJZX0RJUgpNQkVEVExTX0xJQlJBUllfRElSCkxJQldFQlNPQ0tFVFNfTElCUkFSWV9ESVIKT1BFTlNTTF9MSUJSQVJZX0RJUgpNQkVEVExTX0xJQlJBUllfRElSCkxJQldFQlNPQ0tFVFNfTElCUkFSWV9ESVIKTUJFRFRMU19MSUJSQVJZX0RJUgpMSUJXRUJTT0NLRVRTX0xJQlJBUllfRElSCkxJQldFQlNPQ0tFVFNfTElCUkFSWV9ESVIKTElCV0VCU09DS0VUU19MSUJSQVJZX0RJUgpRVUlDS0pTX0xJQlJBUllfRElSClFVSUNLSlNfTElCUkFSWQpMSUJXRUJTT0NLRVRTX0xJQlJBUklFUwpCUk9UTElfTElCUkFSSUVTClpMSUJfTElCUkFSWV9SRUxFQVNFCiAgcGtnY2ZnX2xpYl9DVVJMX2N1cmwKTUJFRFRMU19MSUJSQVJJRVMKQ1VSTF9MSUJSQVJZCk9QRU5TU0xfTElCUkFSSUVTClNPQ0tFVF9MSUJSQVJJRVMKTElCV0VCU09DS0VUU19MSUJSQVJJRVMKTUJFRFRMU19MSUJSQVJJRVMKQ1VSTF9MSUJSQVJZCk9QRU5TU0xfU1NMX0xJQlJBUlkKT1BFTlNTTF9DUllQVE9fTElCUkFSWQpMSUJXRUJTT0NLRVRTX0xJQlJBUllfRElSCk1CRURUTFNfTElCUkFSWV9ESVIKQ1VSTF9MSUJSQVJZX0RJUgpPUEVOU1NMX0xJQlJBUllfRElSClFVSUNLSlNfQ19NT0RVTEVfRElSCkNNQUtFX0lOU1RBTExfUFJFRklYCkNNQUtFX0lOU1RBTExfTElCRElSClFVSUNLSlNfQ19NT0RVTEVfRElSCkNNQUtFX0NVUlJFTlRfU09VUkNFX0RJUgpRVUlDS0pTX0pTX01PRFVMRV9ESVIAAAAAAAAAAHYAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					12,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/BuildLibwebsockets.cmake",
						"symkeys":
						[
							[
								6,
								25
							],
							[
								224,
								244
							],
							[
								257,
								280
							],
							[
								293,
								314
							],
							[
								327,
								350
							],
							[
								363,
								388
							],
							[
								436,
								451
							],
							[
								510,
								525
							],
							[
								620,
								646
							],
							[
								655,
								679
							],
							[
								705,
								729
							],
							[
								753,
								777
							],
							[
								808,
								827
							],
							[
								871,
								894
							],
							[
								898,
								915
							],
							[
								997,
								1021
							],
							[
								1067,
								1090
							],
							[
								1094,
								1118
							],
							[
								1189,
								1212
							],
							[
								1232,
								1256
							],
							[
								1302,
								1325
							],
							[
								1341,
								1364
							],
							[
								1385,
								1409
							],
							[
								1454,
								1480
							],
							[
								1484,
								1510
							],
							[
								1565,
								1590
							],
							[
								1593,
								1617
							],
							[
								1879,
								1897
							],
							[
								1921,
								1929
							],
							[
								1957,
								1969
							],
							[
								2001,
								2019
							],
							[
								2031,
								2049
							],
							[
								2084,
								2101
							],
							[
								2139,
								2158
							],
							[
								2233,
								2251
							],
							[
								2254,
								2272
							],
							[
								2307,
								2324
							],
							[
								2389,
								2408
							],
							[
								2487,
								2505
							],
							[
								2564,
								2568
							],
							[
								2631,
								2655
							],
							[
								2688,
								2712
							],
							[
								2901,
								2917
							],
							[
								2952,
								2973
							],
							[
								3015,
								3037
							],
							[
								3078,
								3097
							],
							[
								3172,
								3188
							],
							[
								3226,
								3244
							],
							[
								3248,
								3272
							],
							[
								3284,
								3308
							],
							[
								3326,
								3344
							],
							[
								4293,
								4313
							],
							[
								4347,
								4363
							],
							[
								4405,
								4429
							],
							[
								5211,
								5215
							]
						],
						"symlist":
						[
							"build_libwebsockets",
							"LWS_WITHOUT_TESTAPPS",
							"LWS_WITHOUT_TEST_SERVER",
							"LWS_WITHOUT_TEST_PING",
							"LWS_WITHOUT_TEST_CLIENT",
							"LWS_LINK_TESTAPPS_DYNAMIC",
							"LWS_WITH_STATIC",
							"LWS_HAVE_LIBCAP",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"LIBWEBSOCKETS_FOUND",
							"LIBWEBSOCKETS_LIBRARIES",
							"MBEDTLS_LIBRARIES",
							"CMAKE_CURRENT_BINARY_DIR",
							"LIBWEBSOCKETS_LIBRARIES",
							"CMAKE_CURRENT_BINARY_DIR",
							"LIBWEBSOCKETS_LIBRARIES",
							"CMAKE_CURRENT_BINARY_DIR",
							"LIBWEBSOCKETS_LIBRARIES",
							"LIBWEBSOCKETS_LIBRARIES",
							"CMAKE_CURRENT_BINARY_DIR",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"LIBWEBSOCKETS_LIBRARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"LIBWEBSOCKETS_ARGS",
							"WITH_SSL",
							"WITH_MBEDTLS",
							"LIBWEBSOCKETS_ARGS",
							"LIBWEBSOCKETS_ARGS",
							"MBEDTLS_LIBRARIES",
							"MBEDTLS_INCLUDE_DIR",
							"LIBWEBSOCKETS_ARGS",
							"LIBWEBSOCKETS_ARGS",
							"OPENSSL_LIBRARIES",
							"OPENSSL_INCLUDE_DIR",
							"LIBWEBSOCKETS_ARGS",
							"ARGS",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_C_COMPILER",
							"LIBWEBSOCKETS_C_FLAGS",
							"CMAKE_VERBOSE_MAKEFILE",
							"MBEDTLS_LIBRARY_DIR",
							"CMAKE_BUILD_TYPE",
							"CMAKE_LIBRARY_PATH",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"LIBWEBSOCKETS_ARGS",
							"LWS_WITH_PLUGINS_API",
							"LWS_WITH_PLUGINS",
							"LWS_WITH_PLUGINS_BUILTIN",
							"ARGN"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB2AAAAICBjbGllbnRfY2FsbGJhY2sKICBjbG9zZV9zdGF0dXMKICBjbG9zZV9yZWFzb24KICBzc2xjZXJ0X2NsaWVudAogIGNvbm5lY3RfY2xpZW50CiAgbWlubmV0X3dzX2NsaWVudAogIGNsaWVudF9jYWxsYmFjawAAAAAAAAAAhQQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					13,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-client.c",
						"symkeys":
						[
							[
								203,
								218
							],
							[
								623,
								635
							],
							[
								811,
								823
							],
							[
								972,
								986
							],
							[
								1619,
								1633
							],
							[
								2444,
								2460
							],
							[
								5343,
								5358
							]
						],
						"symlist":
						[
							"client_callback",
							"close_status",
							"close_reason",
							"sslcert_client",
							"connect_client",
							"minnet_ws_client",
							"client_callback"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACFBAAAICBidWlsZF9saWJ3ZWJzb2NrZXRzCkxXU19XSVRIT1VUX1RFU1RBUFBTCkxXU19XSVRIT1VUX1RFU1RfU0VSVkVSCkxXU19XSVRIT1VUX1RFU1RfUElORwpMV1NfV0lUSE9VVF9URVNUX0NMSUVOVApMV1NfTElOS19URVNUQVBQU19EWU5BTUlDCkxXU19XSVRIX1NUQVRJQwpMV1NfSEFWRV9MSUJDQVAKTElCV0VCU09DS0VUU19JTkNMVURFX0RJUlMKQ01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSCkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKTElCV0VCU09DS0VUU19GT1VORApMSUJXRUJTT0NLRVRTX0xJQlJBUklFUwpNQkVEVExTX0xJQlJBUklFUwpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKTElCV0VCU09DS0VUU19MSUJSQVJJRVMKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSCkxJQldFQlNPQ0tFVFNfTElCUkFSSUVTCkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpMSUJXRUJTT0NLRVRTX0xJQlJBUklFUwpMSUJXRUJTT0NLRVRTX0xJQlJBUklFUwpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKTElCV0VCU09DS0VUU19JTkNMVURFX0RJUlMKTElCV0VCU09DS0VUU19JTkNMVURFX0RJUlMKTElCV0VCU09DS0VUU19MSUJSQVJZX0RJUgpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKTElCV0VCU09DS0VUU19BUkdTCldJVEhfU1NMCldJVEhfTUJFRFRMUwpMSUJXRUJTT0NLRVRTX0FSR1MKTElCV0VCU09DS0VUU19BUkdTCk1CRURUTFNfTElCUkFSSUVTCk1CRURUTFNfSU5DTFVERV9ESVIKTElCV0VCU09DS0VUU19BUkdTCkxJQldFQlNPQ0tFVFNfQVJHUwpPUEVOU1NMX0xJQlJBUklFUwpPUEVOU1NMX0lOQ0xVREVfRElSCkxJQldFQlNPQ0tFVFNfQVJHUwpBUkdTCkNNQUtFX0NVUlJFTlRfU09VUkNFX0RJUgpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKQ01BS0VfQ19DT01QSUxFUgpMSUJXRUJTT0NLRVRTX0NfRkxBR1MKQ01BS0VfVkVSQk9TRV9NQUtFRklMRQpNQkVEVExTX0xJQlJBUllfRElSCkNNQUtFX0JVSUxEX1RZUEUKQ01BS0VfTElCUkFSWV9QQVRICkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKTElCV0VCU09DS0VUU19BUkdTCkxXU19XSVRIX1BMVUdJTlNfQVBJCkxXU19XSVRIX1BMVUdJTlMKTFdTX1dJVEhfUExVR0lOU19CVUlMVElOCkFSR04AAAAAAAAAAHYAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					14,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/wscli.js",
						"symkeys":
						[
							[
								206,
								241
							],
							[
								381,
								395
							],
							[
								409,
								431
							],
							[
								540,
								544
							],
							[
								1698,
								1701
							],
							[
								1719,
								1739
							],
							[
								2109,
								2114
							],
							[
								2282,
								2295
							],
							[
								2387,
								2393
							],
							[
								2400,
								2409
							],
							[
								2515,
								2530
							],
							[
								2715,
								2737
							],
							[
								2960,
								2970
							],
							[
								3653,
								3700
							],
							[
								3783,
								3787
							],
							[
								3864,
								3878
							],
							[
								3974,
								3994
							],
							[
								4535,
								4553
							],
							[
								4825,
								4859
							],
							[
								5011,
								5027
							],
							[
								5265,
								5281
							],
							[
								5413,
								5431
							],
							[
								5486,
								5504
							],
							[
								5604,
								5621
							],
							[
								5688,
								5708
							]
						],
						"symlist":
						[
							"function GetOpt(options = {}, args)",
							"findOpt = a =>",
							"([optname, option]) =>",
							"o =>",
							"CLI",
							"constructor(prompt2)",
							"() =>",
							" (...args) =>",
							"help()",
							"show(arg)",
							"handleCmd(data)",
							"function main(...args)",
							" (a, v) =>",
							" function createWS(url, callbacks, listen = 0)",
							"a =>",
							"(acc, part) =>",
							" (level, ...args) =>",
							"onConnect(ws, req)",
							"onClose(ws, status, reason, error)",
							"onHttp(req, rsp)",
							"onFd(fd, rd, wr)",
							"onMessage(ws, msg)",
							"onError(ws, error)",
							"get connections()",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB2AAAAICBjbGllbnRfY2FsbGJhY2sKICBjbG9zZV9zdGF0dXMKICBjbG9zZV9yZWFzb24KICBzc2xjZXJ0X2NsaWVudAogIGNvbm5lY3RfY2xpZW50CiAgbWlubmV0X3dzX2NsaWVudAogIGNsaWVudF9jYWxsYmFjawAAAAAAAAAAuQEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					15,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-client.c",
						"symkeys":
						[
							[
								203,
								218
							],
							[
								623,
								635
							],
							[
								811,
								823
							],
							[
								972,
								986
							],
							[
								1619,
								1633
							],
							[
								2444,
								2460
							],
							[
								5343,
								5358
							]
						],
						"symlist":
						[
							"client_callback",
							"close_status",
							"close_reason",
							"sslcert_client",
							"connect_client",
							"minnet_ws_client",
							"client_callback"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC5AQAAR2V0T3B0KG9wdGlvbnMgPSB7fSwgYXJncykKICBmaW5kT3B0ID0gYSA9PgooW29wdG5hbWUsIG9wdGlvbl0pID0+CiAgbyA9PgpDTEkKICBjb25zdHJ1Y3Rvcihwcm9tcHQyKQooKSA9PgogICguLi5hcmdzKSA9PgogIGhlbHAoKQogIHNob3coYXJnKQogIGhhbmRsZUNtZChkYXRhKQogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICBjcmVhdGVXUyh1cmwsIGNhbGxiYWNrcywgbGlzdGVuID0gMCkKICBhID0+CihhY2MsIHBhcnQpID0+CiAgKGxldmVsLCAuLi5hcmdzKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIG9uQ2xvc2Uod3MsIHN0YXR1cywgcmVhc29uLCBlcnJvcikKICBvbkh0dHAocmVxLCByc3ApCiAgb25GZChmZCwgcmQsIHdyKQogIG9uTWVzc2FnZSh3cywgbXNnKQogIG9uRXJyb3Iod3MsIGVycm9yKQogIGdldCBjb25uZWN0aW9ucygpCiAgcXVpdCh3aHkpAAAAAAAAAAB2AAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					16,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/FindBrotli.cmake",
						"symkeys":
						[
							[
								6,
								17
							],
							[
								314,
								332
							],
							[
								672,
								684
							],
							[
								701,
								715
							],
							[
								718,
								735
							],
							[
								739,
								756
							],
							[
								760,
								780
							],
							[
								898,
								916
							],
							[
								983,
								997
							],
							[
								1054,
								1084
							],
							[
								1124,
								1154
							],
							[
								1213,
								1243
							],
							[
								1299,
								1329
							],
							[
								1369,
								1399
							],
							[
								1458,
								1488
							],
							[
								1547,
								1580
							],
							[
								1620,
								1653
							],
							[
								1715,
								1748
							],
							[
								1761,
								1780
							],
							[
								1783,
								1813
							],
							[
								1817,
								1847
							],
							[
								1879,
								1915
							],
							[
								1926,
								1944
							],
							[
								1947,
								1972
							],
							[
								1983,
								1995
							],
							[
								2114,
								2132
							],
							[
								2136,
								2161
							],
							[
								2326,
								2342
							],
							[
								2346,
								2363
							],
							[
								2367,
								2384
							],
							[
								2388,
								2408
							],
							[
								2584,
								2600
							],
							[
								2797,
								2815
							],
							[
								2819,
								2844
							]
						],
						"symlist":
						[
							"find_brotli",
							"BROTLICOMMON_FOUND",
							"BROTLI_FOUND",
							"BROTLI_LIBRARY",
							"BROTLIDEC_LIBRARY",
							"BROTLIENC_LIBRARY",
							"BROTLICOMMON_LIBRARY",
							"BROTLICOMMON_FOUND",
							"BROTLI_LIBRARY",
							"pkgcfg_lib_BROTLIENC_brotlienc",
							"pkgcfg_lib_BROTLIENC_brotlienc",
							"pkgcfg_lib_BROTLIENC_brotlienc",
							"pkgcfg_lib_BROTLIENC_brotlidec",
							"pkgcfg_lib_BROTLIENC_brotlidec",
							"pkgcfg_lib_BROTLIENC_brotlidec",
							"pkgcfg_lib_BROTLIENC_brotlicommon",
							"pkgcfg_lib_BROTLIENC_brotlicommon",
							"pkgcfg_lib_BROTLIENC_brotlicommon",
							"BROTLI_LINK_LIBRARY",
							"pkgcfg_lib_BROTLIENC_brotlienc",
							"pkgcfg_lib_BROTLIDEC_brotlidec",
							"pkgcfg_lib_BROTLICOMMON_brotlicommon",
							"BROTLI_LIBRARY_DIR",
							"BROTLICOMMON_LIBRARY_DIRS",
							"BROTLI_FOUND",
							"BROTLI_INCLUDE_DIR",
							"BROTLICOMMON_INCLUDE_DIRS",
							"BROTLI_LIBRARIES",
							"BROTLIENC_LIBRARY",
							"BROTLIDEC_LIBRARY",
							"BROTLICOMMON_LIBRARY",
							"BROTLI_LIBRARIES",
							"BROTLI_LIBRARY_DIR",
							"BROTLICOMMON_LIBRARY_DIRS"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB2AAAAICBjbGllbnRfY2FsbGJhY2sKICBjbG9zZV9zdGF0dXMKICBjbG9zZV9yZWFzb24KICBzc2xjZXJ0X2NsaWVudAogIGNvbm5lY3RfY2xpZW50CiAgbWlubmV0X3dzX2NsaWVudAogIGNsaWVudF9jYWxsYmFjawAAAAAAAAAANQMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					17,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-client.c",
						"symkeys":
						[
							[
								203,
								218
							],
							[
								623,
								635
							],
							[
								811,
								823
							],
							[
								972,
								986
							],
							[
								1619,
								1633
							],
							[
								2444,
								2460
							],
							[
								5343,
								5358
							]
						],
						"symlist":
						[
							"client_callback",
							"close_status",
							"close_reason",
							"sslcert_client",
							"connect_client",
							"minnet_ws_client",
							"client_callback"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA1AwAAICBmaW5kX2Jyb3RsaQpCUk9UTElDT01NT05fRk9VTkQKQlJPVExJX0ZPVU5ECkJST1RMSV9MSUJSQVJZCkJST1RMSURFQ19MSUJSQVJZCkJST1RMSUVOQ19MSUJSQVJZCkJST1RMSUNPTU1PTl9MSUJSQVJZCkJST1RMSUNPTU1PTl9GT1VORApCUk9UTElfTElCUkFSWQogIHBrZ2NmZ19saWJfQlJPVExJRU5DX2Jyb3RsaWVuYwogIHBrZ2NmZ19saWJfQlJPVExJRU5DX2Jyb3RsaWVuYwogIHBrZ2NmZ19saWJfQlJPVExJRU5DX2Jyb3RsaWVuYwogIHBrZ2NmZ19saWJfQlJPVExJRU5DX2Jyb3RsaWRlYwogIHBrZ2NmZ19saWJfQlJPVExJRU5DX2Jyb3RsaWRlYwogIHBrZ2NmZ19saWJfQlJPVExJRU5DX2Jyb3RsaWRlYwogIHBrZ2NmZ19saWJfQlJPVExJRU5DX2Jyb3RsaWNvbW1vbgogIHBrZ2NmZ19saWJfQlJPVExJRU5DX2Jyb3RsaWNvbW1vbgogIHBrZ2NmZ19saWJfQlJPVExJRU5DX2Jyb3RsaWNvbW1vbgpCUk9UTElfTElOS19MSUJSQVJZCiAgcGtnY2ZnX2xpYl9CUk9UTElFTkNfYnJvdGxpZW5jCiAgcGtnY2ZnX2xpYl9CUk9UTElERUNfYnJvdGxpZGVjCiAgcGtnY2ZnX2xpYl9CUk9UTElDT01NT05fYnJvdGxpY29tbW9uCkJST1RMSV9MSUJSQVJZX0RJUgpCUk9UTElDT01NT05fTElCUkFSWV9ESVJTCkJST1RMSV9GT1VORApCUk9UTElfSU5DTFVERV9ESVIKQlJPVExJQ09NTU9OX0lOQ0xVREVfRElSUwpCUk9UTElfTElCUkFSSUVTCkJST1RMSUVOQ19MSUJSQVJZCkJST1RMSURFQ19MSUJSQVJZCkJST1RMSUNPTU1PTl9MSUJSQVJZCkJST1RMSV9MSUJSQVJJRVMKQlJPVExJX0xJQlJBUllfRElSCkJST1RMSUNPTU1PTl9MSUJSQVJZX0RJUlMAAAAAAAAAAHYAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					18,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/FindLibwebsockets.cmake",
						"symkeys":
						[
							[
								6,
								24
							],
							[
								400,
								419
							],
							[
								423,
								445
							],
							[
								560,
								582
							],
							[
								586,
								611
							],
							[
								814,
								831
							],
							[
								835,
								854
							],
							[
								858,
								880
							],
							[
								996,
								1031
							],
							[
								1043,
								1066
							],
							[
								1070,
								1105
							],
							[
								1167,
								1202
							],
							[
								1212,
								1235
							],
							[
								1239,
								1262
							],
							[
								1342,
								1365
							],
							[
								1492,
								1515
							],
							[
								1678,
								1701
							],
							[
								1786,
								1809
							],
							[
								1864,
								1883
							],
							[
								1887,
								1912
							],
							[
								1916,
								1935
							],
							[
								2009,
								2028
							],
							[
								2032,
								2057
							],
							[
								2131,
								2156
							],
							[
								2160,
								2185
							],
							[
								2240,
								2266
							],
							[
								2270,
								2296
							],
							[
								2300,
								2320
							]
						],
						"symlist":
						[
							"find_libwebsockets",
							"OPENSSL_SSL_LIBRARY",
							"pkgcfg_lib_OPENSSL_ssl",
							"OPENSSL_CRYPTO_LIBRARY",
							"pkgcfg_lib_OPENSSL_crypto",
							"OPENSSL_LIBRARIES",
							"OPENSSL_SSL_LIBRARY",
							"OPENSSL_CRYPTO_LIBRARY",
							"pkgcfg_lib_LIBWEBSOCKETS_websockets",
							"LIBWEBSOCKETS_LIBRARIES",
							"pkgcfg_lib_LIBWEBSOCKETS_websockets",
							"pkgcfg_lib_LIBWEBSOCKETS_websockets",
							"LIBWEBSOCKETS_LIBRARIES",
							"LIBWEBSOCKETS_LIBRARIES",
							"LIBWEBSOCKETS_LIBRARIES",
							"LIBWEBSOCKETS_LIBRARIES",
							"LIBWEBSOCKETS_LIBRARIES",
							"LIBWEBSOCKETS_LIBRARIES",
							"CMAKE_INSTALL_RPATH",
							"LIBWEBSOCKETS_LIBRARY_DIR",
							"CMAKE_INSTALL_RPATH",
							"CMAKE_INSTALL_RPATH",
							"LIBWEBSOCKETS_LIBRARY_DIR",
							"LIBWEBSOCKETS_LIBRARY_DIR",
							"LIBWEBSOCKETS_LIBRARY_DIR",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"LIBWEBSOCKETS_INCLUDE_DIRS",
							"OPENSSL_INCLUDE_DIRS"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB2AAAAICBjbGllbnRfY2FsbGJhY2sKICBjbG9zZV9zdGF0dXMKICBjbG9zZV9yZWFzb24KICBzc2xjZXJ0X2NsaWVudAogIGNvbm5lY3RfY2xpZW50CiAgbWlubmV0X3dzX2NsaWVudAogIGNsaWVudF9jYWxsYmFjawAAAAAAAAAAugIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					19,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-client.c",
						"symkeys":
						[
							[
								203,
								218
							],
							[
								623,
								635
							],
							[
								811,
								823
							],
							[
								972,
								986
							],
							[
								1619,
								1633
							],
							[
								2444,
								2460
							],
							[
								5343,
								5358
							]
						],
						"symlist":
						[
							"client_callback",
							"close_status",
							"close_reason",
							"sslcert_client",
							"connect_client",
							"minnet_ws_client",
							"client_callback"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC6AgAAICBmaW5kX2xpYndlYnNvY2tldHMKT1BFTlNTTF9TU0xfTElCUkFSWQogIHBrZ2NmZ19saWJfT1BFTlNTTF9zc2wKT1BFTlNTTF9DUllQVE9fTElCUkFSWQogIHBrZ2NmZ19saWJfT1BFTlNTTF9jcnlwdG8KT1BFTlNTTF9MSUJSQVJJRVMKT1BFTlNTTF9TU0xfTElCUkFSWQpPUEVOU1NMX0NSWVBUT19MSUJSQVJZCiAgcGtnY2ZnX2xpYl9MSUJXRUJTT0NLRVRTX3dlYnNvY2tldHMKTElCV0VCU09DS0VUU19MSUJSQVJJRVMKICBwa2djZmdfbGliX0xJQldFQlNPQ0tFVFNfd2Vic29ja2V0cwogIHBrZ2NmZ19saWJfTElCV0VCU09DS0VUU193ZWJzb2NrZXRzCkxJQldFQlNPQ0tFVFNfTElCUkFSSUVTCkxJQldFQlNPQ0tFVFNfTElCUkFSSUVTCkxJQldFQlNPQ0tFVFNfTElCUkFSSUVTCkxJQldFQlNPQ0tFVFNfTElCUkFSSUVTCkxJQldFQlNPQ0tFVFNfTElCUkFSSUVTCkxJQldFQlNPQ0tFVFNfTElCUkFSSUVTCkNNQUtFX0lOU1RBTExfUlBBVEgKTElCV0VCU09DS0VUU19MSUJSQVJZX0RJUgpDTUFLRV9JTlNUQUxMX1JQQVRICkNNQUtFX0lOU1RBTExfUlBBVEgKTElCV0VCU09DS0VUU19MSUJSQVJZX0RJUgpMSUJXRUJTT0NLRVRTX0xJQlJBUllfRElSCkxJQldFQlNPQ0tFVFNfTElCUkFSWV9ESVIKTElCV0VCU09DS0VUU19JTkNMVURFX0RJUlMKTElCV0VCU09DS0VUU19JTkNMVURFX0RJUlMKT1BFTlNTTF9JTkNMVURFX0RJUlMAAAAAAAAAAHYAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					20,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/functions.cmake",
						"symkeys":
						[
							[
								9,
								13
							],
							[
								31,
								35
							],
							[
								48,
								57
							],
							[
								83,
								92
							],
							[
								116,
								125
							],
							[
								152,
								155
							],
							[
								162,
								165
							],
							[
								217,
								220
							],
							[
								264,
								265
							],
							[
								301,
								310
							],
							[
								318,
								319
							],
							[
								340,
								343
							],
							[
								349,
								350
							],
							[
								373,
								377
							],
							[
								408,
								420
							],
							[
								485,
								488
							],
							[
								535,
								542
							],
							[
								566,
								573
							],
							[
								595,
								605
							],
							[
								611,
								618
							],
							[
								686,
								694
							],
							[
								754,
								757
							],
							[
								802,
								806
							],
							[
								825,
								832
							],
							[
								860,
								870
							],
							[
								876,
								883
							],
							[
								948,
								957
							],
							[
								983,
								989
							],
							[
								1010,
								1014
							],
							[
								1043,
								1049
							],
							[
								1052,
								1055
							],
							[
								1078,
								1082
							],
							[
								1094,
								1104
							],
							[
								1110,
								1116
							],
							[
								1184,
								1193
							],
							[
								1219,
								1225
							],
							[
								1246,
								1250
							],
							[
								1279,
								1282
							],
							[
								1285,
								1291
							],
							[
								1314,
								1318
							],
							[
								1330,
								1340
							],
							[
								1346,
								1352
							],
							[
								1420,
								1433
							],
							[
								1461,
								1465
							],
							[
								1487,
								1491
							],
							[
								1524,
								1535
							],
							[
								1541,
								1544
							],
							[
								1572,
								1575
							],
							[
								1598,
								1602
							],
							[
								1615,
								1622
							],
							[
								1628,
								1632
							],
							[
								1703,
								1716
							],
							[
								1728,
								1732
							],
							[
								1738,
								1741
							],
							[
								1767,
								1771
							],
							[
								1783,
								1786
							],
							[
								1792,
								1796
							]
						],
						"symlist":
						[
							"DUMP",
							"ARGN",
							"SEPARATOR",
							"SEPARATOR",
							"SEPARATOR",
							"VAR",
							"VAR",
							"VAR",
							"A",
							"SEPARATOR",
							"A",
							"VAR",
							"A",
							"ARGN",
							"CANONICALIZE",
							"STR",
							"TMP_STR",
							"TMP_STR",
							"OUTPUT_VAR",
							"TMP_STR",
							"BASENAME",
							"STR",
							"ARGN",
							"TMP_STR",
							"OUTPUT_VAR",
							"TMP_STR",
							"ADDPREFIX",
							"OUTPUT",
							"ARGN",
							"PREFIX",
							"ARG",
							"ARGN",
							"OUTPUT_VAR",
							"OUTPUT",
							"ADDSUFFIX",
							"OUTPUT",
							"ARGN",
							"ARG",
							"SUFFIX",
							"ARGN",
							"OUTPUT_VAR",
							"OUTPUT",
							"RELATIVE_PATH",
							"LIST",
							"ARGN",
							"RELATIVE_TO",
							"ARG",
							"ARG",
							"ARGN",
							"OUT_VAR",
							"LIST",
							"APPEND_PARENT",
							"LIST",
							"VAR",
							"ARGN",
							"VAR",
							"LIST"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB2AAAAICBjbGllbnRfY2FsbGJhY2sKICBjbG9zZV9zdGF0dXMKICBjbG9zZV9yZWFzb24KICBzc2xjZXJ0X2NsaWVudAogIGNvbm5lY3RfY2xpZW50CiAgbWlubmV0X3dzX2NsaWVudAogIGNsaWVudF9jYWxsYmFjawAAAAAAAAAAgAEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					21,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-client.c",
						"symkeys":
						[
							[
								203,
								218
							],
							[
								623,
								635
							],
							[
								811,
								823
							],
							[
								972,
								986
							],
							[
								1619,
								1633
							],
							[
								2444,
								2460
							],
							[
								5343,
								5358
							]
						],
						"symlist":
						[
							"client_callback",
							"close_status",
							"close_reason",
							"sslcert_client",
							"connect_client",
							"minnet_ws_client",
							"client_callback"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACAAQAARFVNUApBUkdOClNFUEFSQVRPUgpTRVBBUkFUT1IKU0VQQVJBVE9SClZBUgpWQVIKVkFSCkEKU0VQQVJBVE9SCkEKVkFSCkEKQVJHTgpDQU5PTklDQUxJWkUKU1RSClRNUF9TVFIKVE1QX1NUUgpPVVRQVVRfVkFSClRNUF9TVFIKQkFTRU5BTUUKU1RSCkFSR04KVE1QX1NUUgpPVVRQVVRfVkFSClRNUF9TVFIKQUREUFJFRklYCk9VVFBVVApBUkdOClBSRUZJWApBUkcKQVJHTgpPVVRQVVRfVkFSCk9VVFBVVApBRERTVUZGSVgKT1VUUFVUCkFSR04KQVJHClNVRkZJWApBUkdOCk9VVFBVVF9WQVIKT1VUUFVUClJFTEFUSVZFX1BBVEgKTElTVApBUkdOClJFTEFUSVZFX1RPCkFSRwpBUkcKQVJHTgpPVVRfVkFSCkxJU1QKQVBQRU5EX1BBUkVOVApMSVNUClZBUgpBUkdOClZBUgpMSVNUAAAAAAAAAAB2AAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					22,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-client.c",
						"symkeys":
						[
							[
								203,
								218
							],
							[
								623,
								635
							],
							[
								811,
								823
							],
							[
								972,
								986
							],
							[
								1619,
								1633
							],
							[
								2444,
								2460
							],
							[
								5359,
								5374
							]
						],
						"symlist":
						[
							"client_callback",
							"close_status",
							"close_reason",
							"sslcert_client",
							"connect_client",
							"minnet_ws_client",
							"client_callback"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB2AAAAICBjbGllbnRfY2FsbGJhY2sKICBjbG9zZV9zdGF0dXMKICBjbG9zZV9yZWFzb24KICBzc2xjZXJ0X2NsaWVudAogIGNvbm5lY3RfY2xpZW50CiAgbWlubmV0X3dzX2NsaWVudAogIGNsaWVudF9jYWxsYmFjawAAAAAAAAAAdgAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					23,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-client.c",
						"symkeys":
						[
							[
								203,
								218
							],
							[
								623,
								635
							],
							[
								811,
								823
							],
							[
								972,
								986
							],
							[
								1619,
								1633
							],
							[
								2444,
								2460
							],
							[
								5359,
								5374
							]
						],
						"symlist":
						[
							"client_callback",
							"close_status",
							"close_reason",
							"sslcert_client",
							"connect_client",
							"minnet_ws_client",
							"client_callback"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAB2AAAAICBjbGllbnRfY2FsbGJhY2sKICBjbG9zZV9zdGF0dXMKICBjbG9zZV9yZWFzb24KICBzc2xjZXJ0X2NsaWVudAogIGNvbm5lY3RfY2xpZW50CiAgbWlubmV0X3dzX2NsaWVudAogIGNsaWVudF9jYWxsYmFjawAAAAAAAAAAdgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHYAAAAgIGNsaWVudF9jYWxsYmFjawogIGNsb3NlX3N0YXR1cwogIGNsb3NlX3JlYXNvbgogIHNzbGNlcnRfY2xpZW50CiAgY29ubmVjdF9jbGllbnQKICBtaW5uZXRfd3NfY2xpZW50CiAgY2xpZW50X2NhbGxiYWNrAAAAAAAAAAB2AAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "minnet-client.c",
			"settings":
			{
				"buffer_size": 10266,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"insert",
					{
						"characters": "client"
					},
					"BgAAAJgRAAAAAAAAmREAAAAAAAAAAAAAmREAAAAAAACaEQAAAAAAAAAAAACaEQAAAAAAAJsRAAAAAAAAAAAAAJsRAAAAAAAAnBEAAAAAAAAAAAAAnBEAAAAAAACdEQAAAAAAAAAAAACdEQAAAAAAAJ4RAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmBEAAAAAAACYEQAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJ4RAAAAAAAAnxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnhEAAAAAAACeEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"cut",
					null,
					"AQAAAJgRAAAAAAAAmBEAAAAAAAAHAAAAY2xpZW50IA",
					"AQAAAAAAAAABAAAAnxEAAAAAAACYEQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"paste",
					null,
					"AQAAAIoRAAAAAAAAkREAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAihEAAAAAAACKEQAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAJERAAAAAAAAkhEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkREAAAAAAACREQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					2,
					"left_delete",
					null,
					"AgAAAJERAAAAAAAAkREAAAAAAAABAAAAOpARAAAAAAAAkBEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAkhEAAAAAAACSEQAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAJARAAAAAAAAkREAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkBEAAAAAAACQEQAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJERAAAAAAAAkhEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkREAAAAAAACREQAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"paste",
					null,
					"AQAAANoRAAAAAAAA4hEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2hEAAAAAAADaEQAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"Install",
				"Package Control: Install Package"
			],
			[
				"inde",
				"Indentation: Detect"
			],
			[
				"add repo",
				"Package Control: Add Repository"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"cmake",
				"CMake Format: Format Selection"
			],
			[
				"edi",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"prettier",
				"Build With: prettier"
			],
			[
				"edit current",
				"SchemeEditor: Edit Current Scheme"
			],
			[
				"edit curr",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 393.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-net",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/FindLibwebsockets.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/FindBrotli.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/wscli.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/BuildLibwebsockets.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/rpc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/event-emitter.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/poll.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server-http.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/test-rpc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-fetch.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-client.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/roles/http/server/server.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-server/minimal-http-server-deaddrop/minimal-http-server-deaddrop.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/include/libwebsockets/lws-context-vhost.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/include/libwebsockets/lws-protocols-plugins.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server-http.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server.h",
		"/home/roman/.config/sublime-text/Packages/User/Themes/stark-contrast.tmTheme",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-stream.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/include/libwebsockets/lws-callbacks.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-stream.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-websocket.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-websocket.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server-proxy.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/build/rpi4/libwebsockets/include/libwebsockets/lws-context-vhost.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/plugins/raw-proxy/protocol_lws_raw_proxy.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/ws-server/minimal-ws-raw-proxy/minimal-ws-raw-proxy.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server-proxy.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/ws-server/minimal-ws-raw-proxy/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/include/libwebsockets/lws-logs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/include/libwebsockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/jsutils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/core-net/output.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/roles/h2/ops-h2.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/core-net/client/connect3.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/Makefile",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/core-net/client/connect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/core-net/close.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/roles/h1/ops-h1.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/raw/minimal-raw-proxy-fallback/minimal-raw-proxy-fallback.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/raw/minimal-raw-proxy-fallback/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/build/rpi4/libwebsockets/include/libwebsockets/lws-logs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/raw/minimal-raw-fallback-http-server/minimal-raw-fallback-http-server.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-server/minimal-http-server-proxy/minimal-http-server-proxy.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/UseMultiArch.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/poll.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/test-apps/test.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/raw/minimal-raw-fallback-http-server/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/build/x86_64-w64-mingw32/libwebsockets/src/libwebsockets-stamp/libwebsockets-configure-err.log",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/build/x86_64-w64-mingw32/libwebsockets/src/libwebsockets-stamp/libwebsockets-configure-out.log",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/buffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server-ws.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/ws-client/minimal-ws-client-spam/minimal-ws-client-spam.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/raw/minimal-raw-netcat/minimal-raw-netcat.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/gtk/minimal-gtk/main.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/raw/minimal-raw-adopt-tcp/minimal-raw-adopt-tcp.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/client-server/minimal-ws-proxy/protocol_lws_minimal.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/abstract/transports/raw-skt.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-client/minimal-http-client-captive-portal/minimal-http-client-captive-portal.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-client/minimal-http-client-certinfo/minimal-http-client-certinfo.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/include/libwebsockets/lws-client.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-client/minimal-http-client-custom-headers/minimal-http-client-custom-headers.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-client/minimal-http-client-h2-rxflow/minimal-http-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-client/minimal-http-client-attach/minimal-http-client-attach.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/test-apps/test-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-client/minimal-http-client/minimal-http-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/ws-client/minimal-ws-client/minimal-ws-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-client/minimal-http-client-multi/minimal-http-client-multi.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/ws-client/minimal-ws-client-rx/minimal-ws-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/jsutils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/roles/http/client/client-http.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/buffer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-server/minimal-http-server-mimetypes/minimal-http-server-mimetypes.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-request.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-response.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet.sublime-project",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/build/x86_64-linux-xenial/libwebsockets/include/libwebsockets/lws-writeable.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/build/x86_64-linux-xenial/libwebsockets/include/libwebsockets/lws-protocols-plugins.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/plugins/deaddrop/protocol_lws_deaddrop.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-server/minimal-http-server-dynamic/minimal-http-server-dynamic.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-server/minimal-http-server-form-post-file/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-server/minimal-http-server-form-post/minimal-http-server-form-post.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-server/minimal-http-server-form-post-lwsac/minimal-http-server-form-post.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-server/minimal-http-server-form-post-file/minimal-http-server-form-post-file.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/include/libwebsockets/lws-http.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/raw/minimal-raw-proxy/minimal-raw-proxy.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/ws-client/minimal-ws-client-rx/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/ws-server/minimal-ws-server-threadpool/minimal-ws-server-threadpool.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/plugin-standalone/protocol_example_standalone.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/test-apps/test-server.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-server/minimal-http-server/minimal-http-server.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/build/x86_64-linux-xenial/libwebsockets/include/libwebsockets/lws-context-vhost.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-server/minimal-http-server-h2-long-poll/minimal-http-server.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-server/minimal-http-server-sse/minimal-http-server-sse.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-server/minimal-http-server-sse-ring/minimal-http-server-sse-ring.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-server/minimal-http-server-tls/minimal-http-server-tls.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-server/minimal-http-server-tls-mem/minimal-http-server-tls-mem.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/roles/http/server/lejp-conf.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/READMEs/README.http-fallback.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/READMEs/README.lwsws.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/http-server/minimal-http-server-tls-mem/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-response.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/include/libwebsockets/lws-button.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/tls/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/FindMbedTLS.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/BuildBrotli.cmake",
		"/home/roman/.config/sublime-text/Packages/User/SearchInProject.sublime-settings",
		"/home/roman/.config/sublime-text/Packages/Search in Project/SearchInProject.sublime-settings",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/BuildMbedTLS.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/CMakeLists.txt.user",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/include/libwebsockets/lws-misc.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/api-tests/api-test-lws_smd/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/FindQuickJS.cmake",
		"/home/roman/.config/sublime-text/Packages/User/Themes/Material.tmTheme",
		"/home/roman/Projects/c-utils/cfg.sh",
		"/home/roman/Projects/shish/cfg-autotools.sh",
		"/home/roman/Projects/shish/cfg.sh",
		"/home/roman/Projects/libunistring-0.9.10/cfg-android.sh",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/build/x86_64-linux-debug/libwebsockets/include/libwebsockets/lws-context-vhost.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-request.h"
	],
	"find":
	{
		"height": 41.0
	},
	"find_in_files":
	{
		"height": 109.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv/quickjs/qjs-net,*.c,*.h,*.txt,*.cmake,-*/build/*,-*/mbedtls/*,-*/brotli/*,/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets,*.h,*.c",
			"/home/roman/Projects/plot-cv/quickjs/qjs-net,*.c,*.h,*.txt,*.cmake,-*/build/*,-*/mbedtls/*,-*/brotli/*,-*/libwebsockets/*,/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets,*.h,*.c",
			"/home/roman/Projects/plot-cv/quickjs/qjs-net,*.c,*.h,*.txt,*.cmake,-*/build/*,-*/mbedtls/*,-*/brotli/*,-*/libwebsockets/*,/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/include,*.h",
			"/home/roman/Projects/plot-cv/quickjs/qjs-net,*.c,*.h,*.txt,*.cmake,-*/build/*,-*/mbedtls/*,-*/brotli/*,/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/include,*.h",
			"/home/roman/Projects/plot-cv/quickjs/qjs-net,/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/include,*.c,*.h,*.txt,*.cmake,-*/build/*,-*/mbedtls/*,-*/brotli/*",
			",/home/roman/Projects/plot-cv/quickjs/qjs-net,*.c,*.h,*.txt,*.cmake,-*/build/*,-*/mbedtls/*,-*/brotli/*",
			",/home/roman/Projects/plot-cv/quickjs/qjs-net,*.c,*.h,*.txt,*.cmake,-*/build/*,-*/mbedtls/*,-*/brotli/*,-*/libwebsockets*/*",
			",/home/roman/Projects/plot-cv/quickjs/qjs-net,*.c,*.h,*.txt,*.cmake,-*/build/*,-*/mbedtls/*,-*/brotli/*,-*/libwebsockets/*",
			",/home/roman/Projects/plot-cv/quickjs/qjs-net,*.c,*.h,*.txt,*.cmake,-*/build/*,-*/mbedtls/*,-*/brotli/*",
			",/home/roman/Projects/plot-cv/quickjs/qjs-net,*.c,*.h,*.txt,*.cmake,-*/build/*,-*/mbedtls/*,-*/libwebsockets/*,-*/brotli/*",
			",/home/roman/Projects/plot-cv/quickjs/qjs-net,*.c,*.h,*.txt,*.cmake,-*/build/*,-*/mbedtls/*,-*/libwebsockets/*",
			",/home/roman/Projects/plot-cv/quickjs/qjs-net,*.c,*.h,*.txt,*.cmake,-*/build/*",
			",/home/roman/Projects/plot-cv/quickjs/qjs-net,*.c,*.h,*.txt,*.cmake,-*/build/*,-*/libwebsockets/*",
			",/home/roman/Projects/plot-cv/quickjs/qjs-net.*.c,*.h,*.txt,*.cmake,-*/build/*,-*/libwebsockets/*",
			"*.c,*.h,*.txt,*.cmake,-*/build/*",
			"*.c,*.h,*.txt,*.cmakem,-*/build/*",
			"*.c,*.h,*.txt,-*/build/*",
			"*.c,*.h,-*/build/*",
			"*.c,*.h,-*/build/*,-*/libwebsockets/*",
			"*.c,*.h,-*/build/*",
			"*.c,*.h",
			"/home/roman/Projects/plot-cv/quickjs/net,-*/build/*,*.c,*.h",
			"/home/roman/Projects/plot-cv/quickjs/net,-*/build/*,-*/libwebsockets/*,*.c,*.h",
			"/home/roman/Projects/plot-cv/quickjs/net,-*/build/*,*.c,*.h",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"inspect",
			"EventEmitter",
			"class Conn",
			"inherits",
			"GetClasses",
			"types\\.",
			"getPrototypeChain",
			"[^0-9]0[0-9]",
			"types\\.",
			"memoize",
			"RPCApi",
			"memoize",
			"DebugFlags",
			"memoize",
			"weakAssi",
			"WEBSOCKETS_C_FLAGS",
			"WEBSOCKETS_C_FLAGAS",
			"SSL",
			"BROTLI_LIBRAR",
			"ZLIB_LIBRARY",
			")\n",
			"link_lib",
			"BROTLI",
			"^\\s*message",
			"SYSTEM_NAME",
			"CMAKE_INSTALL_RPATH",
			"^\\s*(message|dump)",
			"^\\s*dump",
			"find_libweb",
			"lws-ws",
			"raw-",
			"\"vhost_opt",
			"\"pv",
			"extra_mime",
			"server_mimetypes",
			"\"application/",
			"lws_protocol_vhost_options",
			"http_vhost_options",
			"vhost_options_new",
			"lws-ws-raw-ws",
			"callback_proxy_ws_server",
			"lws_set_opaque_user_data",
			"lws-ws-raw-raw",
			"MINNET",
			"RESPOND",
			"createWS",
			"ReadHandler",
			"next",
			"vhost_options_free",
			"mimetypes",
			"mount_new",
			"Util\\.",
			"Memoize",
			"Util\\.memoize",
			"CURL_LIBRARY",
			"DROP_PROTO",
			"opaque",
			"context",
			"lwsl_debug",
			"POLLERR",
			"socket_errno",
			"HTTP_CLOSE",
			"CLOSE",
			"protocol_unbind",
			"LWS_CALLBACK_CLIENT_HTTP_DROP_PROTOCOL",
			"DROP_PROTO",
			"ESTABLISHED",
			"5\\.",
			"CLOSED_HTTp",
			"threads",
			"th",
			"threads",
			"LWS_WITH_PLUGINS_BUILTIN",
			"protocols",
			"LWS_SERVER_OPTION_ALLOW_NON_SSL_ON_SSL_PORT",
			"LWS_SERVER_OPTION_FALLBACK_TO_APPLY_LISTEN_ACCEPT_CONFIG",
			"LWS_PLUGIN_PROTOCOL_RAW_PROXY",
			"pvo1",
			"target_link",
			"ws2_",
			"rdynamic",
			"cb_connect",
			"lws_client_connect_via_info",
			"\\&minnet_server.cb_fd",
			"CHANGE_MODE",
			"->ssl_",
			"info.options.*SSL",
			"info.options",
			"lws_client_connect_via_info",
			"LWS_CALLBACK_LOCK_POLL",
			"minnet_server.cb_fd\\.",
			"://.*libweb",
			"://",
			"client_ssl_ca_filepath",
			"client_ssl_ca_filepath =",
			"cert\\.pem",
			"cert.pem",
			"client_ssl_ca_filepath",
			"ssl_conn",
			"COMPLETED_CLIENT_HTTP",
			"\"ws  ",
			"\"ws ",
			"\"ws  ",
			"client_protocols",
			"LWS_CALLBACK_COMPLETED_CLIENT_HTTP",
			"lws_http_client_read",
			"lws_http_client_read\n",
			"lws_http_client_read",
			"LWS_CALLBACK_RECEIVE_CLIENT_HTTP",
			"connect_client",
			"lws_client_connect_via_info",
			"buffer_from",
			"minnet_ws_new",
			"client_protocols",
			"\\), ",
			"JS_GetPropertyStr.ctx,",
			"lws_client_connect_via_info",
			"minnet_server.context",
			"minnet_lws_context",
			"innet_lws_context =",
			"innet_lws_context",
			"minnet_server.context",
			"minnet_server.ctx",
			"BIND",
			"BIND_PRO",
			"_INIT",
			"CALLBACK_RAW",
			"cb_close"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"cmake_minimum_required",
			"memoize",
			"cb",
			"->client_ssl_",
			"cb->",
			"\"client ",
			" ,",
			" ",
			"minnet_server.lws",
			"minnet_server.context",
			"minnet_lws_context",
			"DROP",
			"vhost_options_",
			"lwsl_debug",
			" ",
			"OPENSSL_",
			"",
			"}\\\\\\n  ${",
			"LIBWEBSOCKETS_LIBRARY_DIR",
			"${ESC}",
			" ",
			"",
			"brotli",
			"broli",
			"libbrotli",
			"  ",
			"${MBEDTLS_LIBRARIES}",
			"${MBEDTLS_CRYPTO_LIBRARY}",
			"${MBEDTLS_X509_LIBRARY}",
			"${MBEDTLS_LIBRARY}",
			"${MBEDTLS_CRYPTO_LIBRARY}",
			"TARGET ",
			"CMAKE_INSTALL_PREFIX",
			":INTERNAL",
			":STRING",
			"lwsl_debug",
			"JSBuffer",
			"#",
			"CMAKE_INSTALL_LIBDIR",
			"CMAKE_",
			"",
			"wsi#%",
			"\\1lwsl_user(",
			"\\1lwsl_user",
			"->headers\\1",
			"REQUEST_HEADERS",
			"buffer->",
			"url.",
			"url->",
			"\"",
			"->wsi[ONWARD]",
			"->wsi[ACCEPTED]",
			"->queue[ONWARD]",
			"->queue[ACCEPTED]",
			"ctx",
			"\"ws   ",
			"%-25s",
			"ctx",
			"http_headers(",
			"http_respond(",
			"",
			"opaque",
			"=",
			"mount",
			"STREAM_BUFFER",
			"stream",
			"cb_http",
			"case ",
			"minnet_server.",
			"serv->generator",
			"REQUEST_TYPE",
			"ws_obj",
			"case (int)LWS_CALLBACK",
			"",
			">normal<",
			"server.cb",
			"&server.info",
			"src",
			"url",
			"",
			"rsp",
			"_ws_",
			"->rsp",
			"state_dump",
			"RESPONSE_OFFSET",
			"RESPONSE_LENGTH",
			"static JSValue",
			"0",
			"res->body",
			"REQUEST_BODY",
			"\\\\n\"\\n\"\\1",
			"<br />",
			"\\\\n\"",
			"\\n\"",
			"#include <quickjs-libc.h>",
			"#include <list.h>",
			"#include <cutils.h>",
			"#include <quickjs.h>",
			"MinnetCallback",
			"_socket_",
			"MINNET_SOCKET_H",
			"inline",
			"static inline ",
			"hdr->",
			"",
			"request",
			"h->",
			"ctx",
			"equest",
			"req",
			"request",
			"args",
			"MinnetPollFd",
			"request->body.",
			"request->",
			"request",
			"body",
			"http_callback",
			"ws_callback",
			"protocols",
			"MinnetHttpHeader",
			"MinnetHttpMount",
			"struct lws_http_mount",
			"org",
			"JSUTILS_H",
			"io_handler",
			"make_handler",
			", "
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": false,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 118,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-client.c",
							"function_name_status_row": 0,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									203,
									218
								],
								[
									623,
									635
								],
								[
									811,
									823
								],
								[
									972,
									986
								],
								[
									1619,
									1633
								],
								[
									2444,
									2460
								],
								[
									5359,
									5374
								]
							],
							"symlist":
							[
								"  client_callback",
								"  close_status",
								"  close_reason",
								"  sslcert_client",
								"  connect_client",
								"  minnet_ws_client",
								"  client_callback"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639888461.92,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "minnet-client.c",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10266,
						"regions":
						{
						},
						"selection":
						[
							[
								4418,
								4436
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 145,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1642341756.95,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2223.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.exec":
	{
		"height": 304.0
	},
	"output.find_results":
	{
		"height": 337.0
	},
	"pinned_build_system": "make",
	"project": "minnet.sublime-project",
	"replace":
	{
		"height": 54.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"test-rpc",
				"test-rpc.js"
			],
			[
				"server-dead",
				"libwebsockets/minimal-examples/http-server/minimal-http-server-deaddrop/minimal-http-server-deaddrop.c"
			],
			[
				"lws-conte",
				"libwebsockets/include/libwebsockets/lws-context-vhost.h"
			],
			[
				"lws_raw_pr",
				"libwebsockets/plugins/raw-proxy/protocol_lws_raw_proxy.c"
			],
			[
				"lws-call",
				"libwebsockets/include/libwebsockets/lws-callbacks.h"
			],
			[
				"poll.c",
				"poll.c"
			],
			[
				"minnet-cli",
				"minnet-client.c"
			],
			[
				"libweb",
				"libwebsockets/include/libwebsockets.h"
			],
			[
				"output.c",
				"libwebsockets/lib/core-net/output.c"
			],
			[
				"connect3",
				"libwebsockets/lib/core-net/client/connect3.c"
			],
			[
				"connect.c",
				"libwebsockets/lib/core-net/client/connect.c"
			],
			[
				"close",
				"libwebsockets/lib/core-net/close.c"
			],
			[
				"lws-ca",
				"libwebsockets/include/libwebsockets/lws-callbacks.h"
			],
			[
				"lws-",
				"libwebsockets/include/libwebsockets/lws-callbacks.h"
			],
			[
				"lws_raw",
				"libwebsockets/plugins/raw-proxy/protocol_lws_raw_proxy.c"
			],
			[
				".js",
				"libwebsockets/test-apps/test.js"
			],
			[
				"libwebsockets/CM",
				"libwebsockets/CMakeLists.txt"
			],
			[
				"buffer.h",
				"buffer.h"
			],
			[
				"jsu",
				"jsutils.c"
			],
			[
				"lws-cal",
				"libwebsockets/include/libwebsockets/lws-callbacks.h"
			],
			[
				"vhost",
				"libwebsockets/include/libwebsockets/lws-context-vhost.h"
			],
			[
				"mime",
				"libwebsockets/minimal-examples/http-server/minimal-http-server-mimetypes/minimal-http-server-mimetypes.c"
			],
			[
				"form-post-file",
				"libwebsockets/minimal-examples/http-server/minimal-http-server-form-post-file/minimal-http-server-form-post-file.c"
			],
			[
				"ops-h2",
				"libwebsockets/lib/roles/h2/ops-h2.c"
			],
			[
				"tls-mem",
				"libwebsockets/minimal-examples/http-server/minimal-http-server-tls-mem/minimal-http-server-tls-mem.c"
			],
			[
				"minnet-client.c",
				"minnet-client.c"
			],
			[
				"",
				"wscli.js"
			],
			[
				"wscli",
				"wscli.js"
			],
			[
				"BuildLi",
				"cmake/BuildLibwebsockets.cmake"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"buffer.c",
				"buffer.c"
			],
			[
				"9",
				"libwebsockets/lib/drivers/devices/display/ili9341.h"
			],
			[
				"minnet.c",
				"minnet.c"
			],
			[
				"proxy.c",
				"minnet-server-proxy.c"
			],
			[
				"raw-proxy",
				"libwebsockets/minimal-examples-lowlevel/raw/minimal-raw-proxy/minimal-raw-proxy.c"
			],
			[
				"ops-h1",
				"libwebsockets/lib/roles/h1/ops-h1.c"
			],
			[
				"ws-raw-",
				"libwebsockets/minimal-examples-lowlevel/ws-server/minimal-ws-raw-proxy/minimal-ws-raw-proxy.c"
			],
			[
				"lws_raw_pro",
				"libwebsockets/plugins/raw-proxy/protocol_lws_raw_proxy.c"
			],
			[
				"rpc.js",
				"rpc.js"
			],
			[
				"ops-ws",
				"libwebsockets/lib/roles/ws/ops-ws.c"
			],
			[
				"lws-htt",
				"libwebsockets/include/libwebsockets/lws-http.h"
			],
			[
				"rpc",
				"rpc.js"
			],
			[
				"rpc.j",
				"rpc.js"
			],
			[
				"events.js",
				"~/Projects/plot-cv/lib/events.js"
			],
			[
				"debugger.js",
				"~/Projects/plot-cv/debugger.js"
			],
			[
				"server.c",
				"libwebsockets/lib/roles/http/server/server.c"
			],
			[
				"minnet-server",
				"minnet-server.c"
			],
			[
				"lws-ado",
				"libwebsockets/include/libwebsockets/lws-adopt.h"
			],
			[
				"test-rp",
				"~/Projects/plot-cv/test-rpc.js"
			],
			[
				"cmakelists-im",
				"libwebsockets/CMakeLists-implied-options.txt"
			],
			[
				"cmake",
				"libwebsockets/CMakeLists.txt"
			],
			[
				"roles-htt",
				"libwebsockets/lib/roles/http/private-lib-roles-http.h"
			],
			[
				"-roles",
				"libwebsockets/lib/roles/h2/private-lib-roles-h2.h"
			],
			[
				"private-lib-rol",
				"libwebsockets/lib/roles/private-lib-roles.h"
			],
			[
				"server",
				"libwebsockets/lib/roles/http/server/server.c"
			],
			[
				"sse.c",
				"libwebsockets/minimal-examples/http-server/minimal-http-server-sse/minimal-http-server-sse.c"
			],
			[
				"minnet-ser",
				"minnet-server.c"
			],
			[
				"quicjs",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"quickj",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"minnet.h",
				"minnet.h"
			],
			[
				"quickjs.",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"webso",
				"minnet-websocket.c"
			],
			[
				"jsutil",
				"minnet-jsutils.h"
			],
			[
				"minnet",
				"minnet.c"
			],
			[
				"websoc",
				"websocket.c"
			],
			[
				"jsut",
				"jsutils.h"
			],
			[
				"minnet-",
				"minnet-server.h"
			],
			[
				"client.c",
				"client.c"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"minn",
				"minnet.c"
			],
			[
				"terminal.",
				"lib/terminal.js"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"qjsm",
				"qjsm.c"
			],
			[
				"tty.js",
				"lib/tty.js"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"inspe",
				"quickjs-inspect.c"
			],
			[
				"utils.h",
				"utils.h"
			],
			[
				"intern",
				"quickjs-internal.h"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"test_chil",
				"tests/test_childprocess.js"
			],
			[
				"pointer.h",
				"pointer.h"
			],
			[
				"stack",
				"lib/stack.js"
			],
			[
				"test_misc",
				"tests/test_misc.js"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"vector.h",
				"vector.h"
			],
			[
				"test_lex",
				"tests/test_lexer.js"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"quickjs.c",
				"~/Projects/plot-cv/quickjs/quickjs.c"
			],
			[
				"pointer.c",
				"pointer.c"
			],
			[
				"-insp",
				"quickjs-inspect.c"
			],
			[
				"test_op",
				"tests/test_op_overloading.js"
			],
			[
				"lexer.c",
				"lexer.c"
			],
			[
				"quickjs-lexer",
				"quickjs-lexer.c"
			],
			[
				"test_qjs",
				"tests/test_qjsm.js"
			],
			[
				"utils.c",
				"utils.c"
			],
			[
				"qjsm.c",
				"qjsm.c"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"pred",
				"predicate.c"
			],
			[
				"dee",
				"quickjs-deep.c"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"qjsm.",
				"qjsm.c"
			],
			[
				"test_qj",
				"tests/test_qjsm.js"
			],
			[
				"quicksj-in",
				"quickjs-internal.h"
			],
			[
				"property",
				"property-enumeration.c"
			],
			[
				"pointer.",
				"pointer.c"
			],
			[
				"quickjs",
				"quickjs-inspect.c"
			],
			[
				"util.j",
				"lib/util.js"
			],
			[
				"jsm.c",
				"qjsm.c"
			],
			[
				"test_point",
				"tests/test_pointer.js"
			],
			[
				"bnflex",
				"lib/bnflexer.js"
			],
			[
				"bnf.y",
				"~/Projects/plot-cv/lib/grammars/bnf.y"
			],
			[
				"test_par",
				"tests/test_parser.js"
			],
			[
				"grammar.ki",
				"grammar.kison"
			],
			[
				"test_pat",
				"tests/test_path.js"
			],
			[
				"exten",
				"lib/extendArray.js"
			],
			[
				"test_parse",
				"tests/test_parser.js"
			],
			[
				"test_path",
				"tests/test_path.js"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"lexer.h",
				"lexer.h"
			],
			[
				"test_tree",
				"tests/test_treewalker.js"
			],
			[
				"tree.h",
				"src/tree.h"
			],
			[
				"scan_ulongn",
				"lib/scan/scan_ulongn.c"
			],
			[
				"term_rest",
				"src/term/term_restore.c"
			],
			[
				"parse.h",
				"src/parse.h"
			],
			[
				"byte.h",
				"lib/byte.h"
			],
			[
				"shell.h",
				"lib/shell.h"
			],
			[
				"mmap_file",
				"lib/stralloc/mmap_filename.c"
			],
			[
				"uffer.h",
				"lib/buffer.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 346.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
