diff --git a/libregexp.c b/libregexp.c
index 65f0d1b6..61177efa 100644
--- a/libregexp.c
+++ b/libregexp.c
@@ -2407,7 +2407,7 @@ static intptr_t lre_exec_backtrack(REExecContext *s, uint8_t **capture,
                 for(;;) {
                     res = lre_exec_backtrack(s, capture, stack, stack_len,
                                              pc1, cptr, TRUE);
-                    if (res < 0)
+                    if (res == -1)
                         return res;
                     if (!res)
                         break;
diff --git a/quickjs.c b/quickjs.c
index 9606455c..78c61318 100644
--- a/quickjs.c
+++ b/quickjs.c
@@ -10046,13 +10046,15 @@ static char *i64toa(char *buf_end, int64_t n, unsigned int base)
     return q;
 }
 
+extern void js_e_string(double d, int n_digits, int rounding_mode, char *buf, int buf_size);
+
 /* buf1 contains the printf result */
 static void js_ecvt1(double d, int n_digits, int *decpt, int *sign, char *buf,
                      int rounding_mode, char *buf1, int buf1_size)
 {
     if (rounding_mode != FE_TONEAREST)
         fesetround(rounding_mode);
-    snprintf(buf1, buf1_size, "%+.*e", n_digits - 1, d);
+    js_e_string(d, n_digits, rounding_mode, buf1, buf1_size);
     if (rounding_mode != FE_TONEAREST)
         fesetround(FE_TONEAREST);
     *sign = (buf1[0] == '-');
@@ -10130,13 +10132,15 @@ static int js_ecvt(double d, int n_digits, int *decpt, int *sign, char *buf,
     return n_digits;
 }
 
+extern int js_f_string(double d, int n_digits, int rounding_mode, char *buf, int buf_size);
+
 static int js_fcvt1(char *buf, int buf_size, double d, int n_digits,
                     int rounding_mode)
 {
     int n;
     if (rounding_mode != FE_TONEAREST)
         fesetround(rounding_mode);
-    n = snprintf(buf, buf_size, "%.*f", n_digits, d);
+    n = js_f_string(d, n_digits, rounding_mode, buf, buf_size);
     if (rounding_mode != FE_TONEAREST)
         fesetround(FE_TONEAREST);
     assert(n < buf_size);
