# https://gittup.org/tup/manual.html

# The name of the binary to use for c compilation.
ifdef CC
  CC = @(CC)
else
  CC = cc
endif

# --- Various flags to pass to the c compiler ---
ifdef CFLAGS
  CFLAGS = @(CFLAGS)
else
  CFLAGS =
endif

# Show all warnings.
CFLAGS += -Wall

# --- Linker flags ---
ifdef LDFLAGS
  LDFLAGS = @(LDFLAGS)
else
  LDFLAGS =
endif

# Include source debugging info in the binaries
LDFLAGS += -g

# --- Libraries to include ---
ifdef LIBS
  LIBS = @(LIBS)
else
  LIBS =
endif

# math functions and constants. <math.h>
LIBS += -lm

# --- Defines for the preprocessor
ifdef DEFINES
  DEFINES = @(DEFINES)
else
  DEFINES =
endif

# whether to enable debugprint
# DEFINES += -DDEBUG

DEFINES += -DCONFIG_VERSION="\"wip\""

# whether to enable 'use math' and BigFloat
DEFINES += -DCONFIG_BIGNUM

# link-time optimization
DEFINES += -DCONFIG_LTO
LDFLAGS += -flto

# install dir
DEFINES += -DCONFIG_PREFIX="\"/usr/local\""

# include full unicode tables
DEFINES += -DCONFIG_ALL_UNICODE

# macro commands for use in Tupfiles. you need to put `include_rules` at the top of your Tupfile to get these.
#
# Meanings of the %-flags in these macros can be found under "%-flags" in the tup manual: https://gittup.org/tup/manual.html

# compiles one or more .c files into one .o file.
# takes 1..n inputs, has one output (the .o file).
!compile_c_object = |> $(CC) -c %f $(LDFLAGS) -o %o $(DEFINES) $(CFLAGS) $(LIBS) |>

# compiles one or more .c or .o files into one executable file.
# takes 1..n inputs, has one output (the program file).
!compile_c_program = |> $(CC) %f $(LDFLAGS) -o %o $(DEFINES) $(CFLAGS) $(LIBS) && rm -rf %o.dSYM |>

# compiles one or more .c files into a .o file and a .so file.
# takes 1..n inputs, has two outputs. first output is the .o, second is the .so.
!compile_c_shared_library = |> $(CC) -c %f $(LDFLAGS) -o %1o $(DEFINES) $(CFLAGS) $(LIBS) -fpic && $(CC) %f -shared %1o -o %2o |>
