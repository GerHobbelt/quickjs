# https://gittup.org/tup/manual.html

# Each of these variables has a "HOST" version and a "TARGET" version.
# This is to support cross-compilation (which is how we build for Windows/macOS).
# "HOST" variables are used when compiling programs/objects in the format of the host machine (where compilation is taking place).
# "TARGET" variables are used when compiling programs/objects in the format of the target machine (where the final binaries will be run).

# For linux, HOST and TARGET are the same.
# For windows, we use mingw to cross-compile for windows from linux, so HOST is linux and TARGET is windows.
# For macOS, we use osxcross to cross-compile for macOS from linux, so HOST is linux and TARGET is macOS.

# The name of the binary program to use for c compilation (it should be in PATH). eg. `gcc`, `clang`, etc
import CC_HOST=cc
import CC_TARGET=cc

# The name of the binary program to use for creating .a archives (it should be in PATH). eg. `ar`, `llvm-ar`, etc
import AR_HOST=ar
import AR_TARGET=ar

# --- Various flags to pass to the c compiler. ---
import CFLAGS_HOST=
import CFLAGS_TARGET=

# Show all warnings.
CFLAGS_HOST += -Wall
CFLAGS_TARGET += -Wall

# --- Linker flags. ---
import LDFLAGS_HOST=
import LDFLAGS_TARGET=

# Include source debugging info in the binaries
LDFLAGS_HOST += -g
LDFLAGS_TARGET += -g

# --- Libraries to include. ---
import LIBS_HOST=
import LIBS_TARGET=

# math functions and constants. <math.h>
LIBS_HOST += -lm
LIBS_TARGET += -lm

# --- Defines for the preprocessor
import DEFINES_HOST=
import DEFINES_TARGET=

# whether to enable debugprint
# DEFINES_HOST += -DDEBUG
# DEFINES_TARGET += -DDEBUG

# garbage collection debugging info
# DEFINES_HOST += -DDUMP_GC=1 -DDUMP_GC_FREE=1
# DEFINES_TARGET += -DDUMP_GC=1 -DDUMP_GC_FREE=1

DEFINES_HOST += -DCONFIG_VERSION="\"suchipi-`git rev-parse --short HEAD`\""
DEFINES_TARGET += -DCONFIG_VERSION="\"suchipi-`git rev-parse --short HEAD`\""

# enable 'use math' and BigFloat
DEFINES_HOST += -DCONFIG_BIGNUM
DEFINES_TARGET += -DCONFIG_BIGNUM

# link-time optimization
import LTO_HOST=n
import LTO_TARGET=n

ifeq ($(LTO_HOST),y)
  DEFINES_HOST += -DCONFIG_LTO
  LDFLAGS_HOST += -flto
endif
ifeq ($(LTO_TARGET),y)
  DEFINES_TARGET += -DCONFIG_LTO
  LDFLAGS_TARGET += -flto
endif

# install dir
DEFINES_HOST += -DCONFIG_PREFIX="\"/usr/local\""
DEFINES_TARGET += -DCONFIG_PREFIX="\"/usr/local\""

# include full unicode tables
DEFINES_HOST += -DCONFIG_ALL_UNICODE
DEFINES_TARGET += -DCONFIG_ALL_UNICODE

# macro commands for use in Tupfiles. you need to put `include_rules` at the top of your Tupfile to get these.
#
# Meanings of the %-flags in these macros can be found under "%-flags" in the tup manual: https://gittup.org/tup/manual.html

# compiles one or more .c files into one .o file.
# takes 1..n inputs, has one output (the .o file).
!compile_host_c_object = |> $(CC_HOST) -c %f $(LDFLAGS_HOST) -o %o $(DEFINES_HOST) $(CFLAGS_HOST) $(LIBS_HOST) |>
!compile_target_c_object = |> $(CC_TARGET) -c %f $(LDFLAGS_TARGET) -o %o $(DEFINES_TARGET) $(CFLAGS_TARGET) $(LIBS_TARGET) |>

# compiles one or more .c or .o files into one executable file.
# takes 1..n inputs, has one output (the program file).
!compile_host_c_program = |> $(CC_HOST) %f $(LDFLAGS_HOST) -o %o $(DEFINES_HOST) $(CFLAGS_HOST) $(LIBS_HOST) && rm -rf %o.dSYM |>
!compile_target_c_program = |> $(CC_TARGET) %f $(LDFLAGS_TARGET) -o %o $(DEFINES_TARGET) $(CFLAGS_TARGET) $(LIBS_TARGET) && rm -rf %o.dSYM |>

# compiles one or more .c files into a .o file and a .so file.
# takes 1..n inputs, has two outputs. first output is the .o, second is the .so.
!compile_host_c_shared_library = |> $(CC_HOST) -c %f $(LDFLAGS_HOST) -o %1o $(DEFINES_HOST) $(CFLAGS_HOST) $(LIBS_HOST) -fpic && $(CC_HOST) %f $(LDFLAGS_HOST) $(LIBS_HOST) -shared %1o -o %2o && rm -rf ./*.dSYM |>
!compile_target_c_shared_library = |> $(CC_TARGET) -c %f $(LDFLAGS_TARGET) -o %1o $(DEFINES_TARGET) $(CFLAGS_TARGET) $(LIBS_TARGET) -fpic && $(CC_TARGET) %f $(LDFLAGS_TARGET) $(LIBS_TARGET) -shared %1o -o %2o && rm -rf ./*.dSYM |>

# compiles one or more .o files into an .a file.
# takes 1..n inputs, has one output (the .a file).
!create_host_archive = |> $(AR_HOST) -rcs %o %f |>
!create_target_archive = |> $(AR_TARGET) -rcs %o %f |>
