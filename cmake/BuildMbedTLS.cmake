macro(build_mbedtls)
  message("-- Building MBEDTLS from source")

  set(MBEDTLS_BINARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/mbedtls")
  set(MBEDTLS_TARGET_NAME mbedtls)

  if(NOT DEFINED MBEDTLS_DEBUG)
    message(FATAL_ERROR "Please set MBEDTLS_DEBUG to 'OFF' or 'ON' before including this file.")
  endif()

  if(NOT DEFINED MBEDTLS_SOURCE_DIR)
    message(FATAL_ERROR "Please set MBEDTLS_SOURCE_DIR before including this file.")
  endif()

  if(NOT DEFINED MBEDTLS_C_FLAGS)
    message(FATAL_ERROR "Please set MBEDTLS_C_FLAGS before including this file.")
  endif()

  if(NOT DEFINED MBEDTLS_TARGET_NAME)
    message(FATAL_ERROR "Please set MBEDTLS_TARGET_NAME before including this file.")
  endif()

  if(MBEDTLS_DEBUG)
    set(MBEDTLS_BUILD_TYPE "Debug")
  else()
    set(MBEDTLS_BUILD_TYPE "MinSizeRel")
  endif()

  if((NOT DEFINED MBEDTLS_PREINCLUDE_PREFIX) OR (NOT DEFINED MBEDTLS_PREINCLUDE_HEADER))
    message(STATUS "Building mbedTLS without pre-included headers and global symbols prefixing.")
  else()
    set(MBEDTLS_PREINCLUDE_C_FLAGS " -DLIB_PREFIX_NAME=${MBEDTLS_PREINCLUDE_PREFIX} -include ${MBEDTLS_PREINCLUDE_HEADER}")
    string(APPEND MBEDTLS_C_FLAGS ${MBEDTLS_PREINCLUDE_C_FLAGS})
  endif()

  string(APPEND MBEDTLS_C_FLAGS ${CMAKE_C_FLAGS})

  if(${ARM_CPU_ARCHITECTURE} STREQUAL "ARMv8-M.BASE")
    string(APPEND MBEDTLS_C_FLAGS " -DMULADDC_CANNOT_USE_R7")
  endif()

  if(TARGET ${MBEDTLS_TARGET_NAME})
    message(FATAL_ERROR "A target with name ${MBEDTLS_TARGET_NAME} is already defined. Please set MBEDTLS_TARGET_NAME to a unique value.")
  endif()

  include(ExternalProject)

  set(_static_lib_command ${CMAKE_C_CREATE_STATIC_LIBRARY})
  set(MBEDTLS_VERSION 2.27.0)

  ExternalProject_Add(
    ${MBEDTLS_TARGET_NAME}
    SOURCE_DIR ${MBEDTLS_SOURCE_DIR}
   
    DOWNLOAD_NAME mbedtls-${MBEDTLS_VERSION}.tar.gz 
    URL https://github.com/ARMmbed/mbedtls/archive/refs/tags/v${MBEDTLS_VERSION}.tar.gz
   
    CMAKE_ARGS -DENABLE_TESTING=OFF -DENABLE_PROGRAMS=OFF
   
    CMAKE_ARGS -DCMAKE_MODULE_PATH=${CMAKE_MODULE_PATH} -DCMAKE_SYSTEM_NAME=${CMAKE_SYSTEM_NAME}
   
    CMAKE_ARGS -DCMAKE_BUILD_TYPE=${}
   MBEDTLS_BUILD_TYPE
    CMAKE_CACHE_ARGS -DCMAKE_C_COMPILER:STRING=${CMAKE_C_COMPILER}
    CMAKE_CACHE_ARGS -DCMAKE_C_COMPILER_ID:STRING=${CMAKE_C_COMPILER_ID}
    CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${MBEDTLS_C_FLAGS}
    CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS_DEBUG:STRING=${CMAKE_C_FLAGS_DEBUG}
    CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS_MINSIZEREL:STRING=${CMAKE_C_FLAGS_MINSIZEREL}
    CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS_RELEASE:STRING=${CMAKE_C_FLAGS_RELEASE}
    CMAKE_CACHE_ARGS -DCMAKE_C_OUTPUT_EXTENSION:STRING=.o
    CMAKE_CACHE_ARGS -DCMAKE_C_COMPILER_WORKS:bool=true
   
    CMAKE_CACHE_ARGS -DCMAKE_AR:STRING=${CMAKE_AR}
    CMAKE_CACHE_ARGS -DCMAKE_C_CREATE_STATIC_LIBRARY:INTERNAL=${_static_lib_command}
    CMAKE_CACHE_ARGS -DCMAKE_C_LINK_EXECUTABLE:STRING=${CMAKE_C_LINK_EXECUTABLE}
    CMAKE_CACHE_ARGS -DCMAKE_STATIC_LIBRARY_PREFIX_C:STRING=${CMAKE_STATIC_LIBRARY_PREFIX_C}
    CMAKE_CACHE_ARGS -DCMAKE_STATIC_LIBRARY_PREFIX_CXX:STRING=${CMAKE_STATIC_LIBRARY_PREFIX_CXX}
   
    CMAKE_CACHE_ARGS -DCMAKE_INSTALL_PREFIX:STRING=${CMAKE_INSTALL_PREFIX}
   
    BINARY_DIR ${MBEDTLS_BINARY_DIR})

  add_custom_target(
    ${MBEDTLS_TARGET_NAME}_install
    COMMAND ${CMAKE_COMMAND} --build ${CMAKE_CURRENT_BINARY_DIR}/mbedtls -- install
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/mbedtls
    COMMENT "Installing mbedtls to ${CMAKE_INSTALL_PREFIX}"
    VERBATIM)
  add_dependencies(${MBEDTLS_TARGET_NAME}_install ${MBEDTLS_TARGET_NAME})

endmacro(build_mbedtls)
