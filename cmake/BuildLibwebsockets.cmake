macro(build_libwebsockets)
  message("-- Building LIBWEBSOCKETS from source")

  if(NOT DEFINED LIBWEBSOCKETS_C_FLAGS)
    message(FATAL_ERROR "Please set LIBWEBSOCKETS_C_FLAGS before including this file.")
  endif()

  set(LWS_WITHOUT_TESTAPPS TRUE)
  set(LWS_WITHOUT_TEST_SERVER TRUE)
  set(LWS_WITHOUT_TEST_PING TRUE)
  set(LWS_WITHOUT_TEST_CLIENT TRUE)
  set(LWS_LINK_TESTAPPS_DYNAMIC OFF CACHE BOOL "link test apps dynamic")
  set(LWS_WITH_STATIC ON CACHE BOOL "build libwebsockets static library")
  set(LWS_HAVE_LIBCAP FALSE CACHE BOOL "have libcap")

  # include: libwebsockets find_package(libwebsockets)
  set(LIBWEBSOCKETS_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/libwebsockets/include ${CMAKE_CURRENT_BINARY_DIR}/libwebsockets ${CMAKE_CURRENT_BINARY_DIR}/libwebsockets/include)
  set(LIBWEBSOCKETS_FOUND ON CACHE BOOL "found libwebsockets")
  set(LIBWEBSOCKETS_LIBRARIES "brotlienc;brotlidec;cap")
  if(OPENSSL_LIBRARIES)
    set(LIBWEBSOCKETS_LIBRARIES "${OPENSSL_LIBRARIES};${LIBWEBSOCKETS_LIBRARIES}")
  else(OPENSSL_LIBRARIES)
    if(MBEDTLS_LIBRARIES)
      set(LIBWEBSOCKETS_LIBRARIES "${MBEDTLS_LIBRARIES};${LIBWEBSOCKETS_LIBRARIES}")
    endif(MBEDTLS_LIBRARIES)
  endif(OPENSSL_LIBRARIES)

  #if(EXISTS "${CMAKE_CURRENT_BINARY_DIR}/libwebsockets/lib/libwebsockets.a")
    set(LIBWEBSOCKETS_LIBRARIES "${CMAKE_CURRENT_BINARY_DIR}/libwebsockets/lib/libwebsockets.a;${LIBWEBSOCKETS_LIBRARIES}")
  #else(EXISTS "${CMAKE_CURRENT_BINARY_DIR}/libwebsockets/lib/libwebsockets.a")
  #  set(LIBWEBSOCKETS_LIBRARIES "websockets;${LIBWEBSOCKETS_LIBRARIES}")
  #endif(EXISTS "${CMAKE_CURRENT_BINARY_DIR}/libwebsockets/lib/libwebsockets.a")
  set(LIBWEBSOCKETS_LIBRARIES "${LIBWEBSOCKETS_LIBRARIES}" CACHE STRING "libwebsockets libraries")

  set(LIBWEBSOCKETS_INCLUDE_DIRS "${LIBWEBSOCKETS_INCLUDE_DIRS}" CACHE PATH "libwebsockets include directory")
  set(LIBWEBSOCKETS_LIBRARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/libwebsockets/lib CACHE PATH "libwebsockets library directory")
  # add_subdirectory(libwebsockets ${CMAKE_CURRENT_BINARY_DIR}/libwebsockets)
  include(ExternalProject)

  set(LIBWEBSOCKETS_ARGS "-DLWS_WITH_SSL:BOOL=${WITH_SSL} -DLWS_WITH_MBEDTLS:BOOL=${WITH_MBEDTLS}")

  if(WITH_MBEDTLS)
    set(LIBWEBSOCKETS_ARGS "${LIBWEBSOCKETS_ARGS} -DLWS_MBEDTLS_LIBRARIES:STRING=${MBEDTLS_LIBRARIES} -DLWS_MBEDTLS_INCLUDE_DIRS:STRING=${MBEDTLS_INCLUDE_DIR}")
  endif(WITH_MBEDTLS)
  if(WITH_SSL AND NOT WITH_MBEDTLS)
    set(LIBWEBSOCKETS_ARGS ${LIBWEBSOCKETS_ARGS} -DLWS_OPENSSL_LIBRARIES:STRING=${OPENSSL_LIBRARIES} -DLWS_OPENSSL_INCLUDE_DIRS:STRING=${OPENSSL_INCLUDE_DIR})
  endif(WITH_SSL AND NOT WITH_MBEDTLS)

  if("${LWS_HAVE_HMAC_CTX_new}" STREQUAL "")
    set(LWS_HAVE_HMAC_CTX_new 1 CACHE STRING "Have HMAC_CTX_new")
  endif("${LWS_HAVE_HMAC_CTX_new}" STREQUAL "")

  if("${LWS_HAVE_EVP_MD_CTX_free}" STREQUAL "")
    set(LWS_HAVE_EVP_MD_CTX_free 1 CACHE STRING "Have EVP_MD_CTX_free")
  endif("${LWS_HAVE_EVP_MD_CTX_free}" STREQUAL "")

  if("${LWS_HAVE_X509_VERIFY_PARAM_set1_host}" STREQUAL "")
    set(LWS_HAVE_X509_VERIFY_PARAM_set1_host 1 CACHE STRING "Have X509_VERIFY_PARAM_set1_host")
  endif("${LWS_HAVE_X509_VERIFY_PARAM_set1_host}" STREQUAL "")

  string(REPLACE " " "\n\t" ARGS "${LIBWEBSOCKETS_ARGS}")
  message("libwebsockets configuration arguments:\n\t${ARGS}")

  ExternalProject_Add(
    libwebsockets
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libwebsockets
    BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/libwebsockets
    PREFIX libwebsockets
    CMAKE_ARGS -DLWS_WITH_SHARED:BOOL=OFF
               -DLWS_WITH_STATIC:BOOL=ON
               -DLWS_STATIC_PIC:BOOL=ON
               "-DCMAKE_C_COMPILER:FILEPATH=${CMAKE_C_COMPILER}"
               "-DCMAKE_C_FLAGS:STRING=${LIBWEBSOCKETS_C_FLAGS}"
               "-DCMAKE_VERBOSE_MAKEFILE:BOOL=${CMAKE_VERBOSE_MAKEFILE}"
               "-DCMAKE_INSTALL_RPATH:STRING=${MBEDTLS_LIBRARY_DIR}"
               "-DCOMPILER_IS_CLANG:BOOL=OFF"
               "-DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}"
               "-DCMAKE_LIBRARY_PATH:PATH=${CMAKE_LIBRARY_PATH};${CMAKE_CURRENT_BINARY_DIR}/mbedtls;${CMAKE_CURRENT_BINARY_DIR}/brotli"
               "-DLWS_HAVE_HMAC_CTX_new:STRING=${LWS_HAVE_HMAC_CTX_new}"
               "-DLWS_HAVE_EVP_MD_CTX_free:STRING=${LWS_HAVE_EVP_MD_CTX_free}"
               "-DLWS_HAVE_X509_VERIFY_PARAM_set1_host:STRING=${LWS_HAVE_X509_VERIFY_PARAM_set1_host}"
               ${LIBWEBSOCKETS_ARGS}
               "-DZLIB_INCLUDE_DIR:PATH=${ZLIB_INCLUDE_DIR}"
               "-DZLIB_LIBRARY_DEBUG:FILEPATH=${ZLIB_LIBRARY_DEBUG}"
               "-DZLIB_LIBRARY_RELEASE:FILEPATH=${ZLIB_LIBRARY_RELEASE}"
    CMAKE_CACHE_ARGS
      -DDISABLE_WERROR:BOOL=ON
      -DLWS_HAVE_LIBCAP:BOOL=FALSE
      -DLWS_ROLE_RAW_PROXY:BOOL=ON
      -DLWS_UNIX_SOCK:BOOL=ON
      -DLWS_WITH_ACCESS_LOG:BOOL=ON
      -DLWS_WITH_CGI:BOOL=OFF
      -DLWS_WITH_DISKCACHE:BOOL=ON
      -DLWS_WITH_DIR:BOOL=OFF
      -DLWS_WITH_EVLIB_PLUGINS:BOOL=OFF
      -DLWS_WITH_EXTERNAL_POLL:BOOL=ON
      -DLWS_WITH_FILE_OPS:BOOL=ON
      -DLWS_WITH_FSMOUNT:BOOL=ON
      -DLWS_WITH_HTTP2:BOOL=ON
      -DLWS_WITH_HTTP_BROTLI:BOOL=ON
      -DLWS_WITH_HTTP_PROXY:BOOL=ON
      -DLWS_WITH_HTTP_STREAM_COMPRESSION:BOOL=ON
      -DLWS_WITH_LEJP:BOOL=OFF
      -DLWS_WITH_LEJP_CONF:BOOL=OFF
      -DLWS_WITH_LIBUV:BOOL=OFF
      -DLWS_WITH_MINIMAL_EXAMPLES:BOOL=OFF
      -DLWS_WITH_NO_LOGS:BOOL=OFF
      -DLWS_WITHOUT_EXTENSIONS:BOOL=OFF
      -DLWS_WITHOUT_TESTAPPS:BOOL=ON
      -DLWS_WITH_PLUGINS_API:BOOL=${LWS_WITH_PLUGINS_API}
      -DLWS_WITH_PLUGINS:BOOL=${LWS_WITH_PLUGINS}
      -DLWS_WITH_PLUGINS_BUILTIN:BOOL=${LWS_WITH_PLUGINS_BUILTIN}
      -DLWS_WITH_RANGES:BOOL=ON
      -DLWS_WITH_SERVER:BOOL=ON
      -DLWS_WITH_SOCKS5:BOOL=ON
      -DLWS_FALLBACK_GETHOSTBYNAME:BOOL=ON
      -DLWS_WITH_SYS_ASYNC_DNS:BOOL=OFF
      -DLWS_WITH_THREADPOOL:BOOL=ON
      -DLWS_WITH_UNIX_SOCK:BOOL=ON
      -DLWS_WITH_ZIP_FOPS:BOOL=ON
      -DLWS_WITH_ZLIB:BOOL=ON
    INSTALL_COMMAND ""
    #LOG_DOWNLOAD ON
    USES_TERMINAL_DOWNLOAD ON
    #LOG_CONFIGURE ON
    USES_TERMINAL_CONFIGURE ON
    #LOG_BUILD ON
    USES_TERMINAL_BUILD ON
    #LOG_OUTPUT_ON_FAILURE ON
  )
  # ExternalProject_Get_Property(libwebsockets CMAKE_CACHE_DEFAULT_ARGS)
  #message("CMAKE_CACHE_DEFAULT_ARGS of libwebsockets = ${CMAKE_CACHE_DEFAULT_ARGS}")

  #link_directories("${CMAKE_CURRENT_BINARY_DIR}/libwebsockets/lib")

  if(ARGN)
    ExternalProject_Add_StepDependencies(libwebsockets build ${ARGN})
  endif(ARGN)

endmacro(build_libwebsockets)
